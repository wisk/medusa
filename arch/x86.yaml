#
## Description ################################################################
# This yaml file tries to detail all x86 instructions.
# It's used by Medusa to generate C++ code in order to disassemble x86
# executable.
# Check out http://github.com/wisk/medusa for further information.

## Architecture information ###################################################
architecture_information:
  name: x86
  instruction_set_type: complex

## Flag semantic #######################################################

function:

## Standard flags operations
  sign_flag: &sign_flag |
    sf.id = bit_cast(res.val >> (int(op0.bit, op0.bit) - int(op0.bit, 1)), int1(1));

  zero_flag: &zero_flag |
    zf.id = ite(res.val == int(op0.bit, 0), int1(1), int1(0))

  adjust_flag: &adjust_flag |
    af.id = bit_cast((op0.val ^ op1.val ^ res.val) >> (int(op0.bit, 4)), int1(1));

  parity_flag: &parity_flag |
    alloc_var('pf_tmp', pf.bit);
    pf_tmp = int1(1);
    pf_tmp ^= bit_cast(res.val >> int(op0.bit, 0), int1(1));
    pf_tmp ^= bit_cast(res.val >> int(op0.bit, 1), int1(1));
    pf_tmp ^= bit_cast(res.val >> int(op0.bit, 2), int1(1));
    pf_tmp ^= bit_cast(res.val >> int(op0.bit, 3), int1(1));
    pf_tmp ^= bit_cast(res.val >> int(op0.bit, 4), int1(1));
    pf_tmp ^= bit_cast(res.val >> int(op0.bit, 5), int1(1));
    pf_tmp ^= bit_cast(res.val >> int(op0.bit, 6), int1(1));
    pf_tmp ^= bit_cast(res.val >> int(op0.bit, 7), int1(1));
    pf.id = pf_tmp;
    free_var('pf_tmp');

  overflow_flag_add: &overflow_flag_add |
    of.id = bit_cast(((op0.val ^ res.val) & (~(op0.val ^ op1.val))) >> (int(op0.bit, op0.bit) - int(op0.bit, 1)), int1(1));

  carry_flag_add: &carry_flag_add |
    cf.id = bit_cast(((op0.val & op1.val) ^ ((op0.val ^ op1.val ^ res.val) & (op0.val ^ op1.val))) >> (int(op0.bit, op0.bit) - int(op0.bit, 1)), int1(1));

  overflow_flag_sub: &overflow_flag_sub |
    of.id = bit_cast(((op0.val ^ res.val) & (op0.val ^ op1.val)) >> (int(op0.bit, op0.bit) - int(op0.bit, 1)), int1(1));

  carry_flag_sub: &carry_flag_sub |
    cf.id = bit_cast(((op0.val ^ op1.val ^ res.val) ^ ((op0.val ^ res.val) & (op0.val ^ op1.val))) >> (int(op0.bit, op0.bit) - int(op0.bit, 1)), int1(1));

## Useful functions
  count_mask: &count_mask |
    if __expr and int(op0.bit, op0.bit) == int(op0.bit, 64):
      count = count & int(op0.bit, 0x3f)
    else:
      count = count & int(op0.bit, 0x1f);

## String functions

  scan_string: &scan_string |
    alloc_var('res', op0.bit);
    res = op0.val - op1.val;
    call('overflow_flag_sub');
    call('carry_flag_sub');
    call('sign_flag');
    call('zero_flag');
    call('parity_flag');
    call('adjust_flag');
    if __expr and df.id == int1(1):
      op1.offset -= int(op1.offset.bit, op1.byte)
    else:
      op1.offset += int(op1.offset.bit, op1.byte);
    free_var('res');

  store_string: &store_string |
    op1.val = op0.val;
    if __expr and df.id == int1(1):
      op1.offset -= int(op1.offset.bit, op1.byte)
    else:
      op1.offset += int(op1.offset.bit, op1.byte);

  load_string: &load_string |
    op0.val = op1.val;
    if __expr and df.id == int1(1):
      op1.offset -= int(op1.offset.bit, op1.byte)
    else:
      op1.offset += int(op1.offset.bit, op1.byte);

  move_string: &move_string |
    op1.val = op0.val;
    if __expr and df.id == int1(1):
      op0.offset -= int(op0.offset.bit, op0.byte)
      op1.offset -= int(op1.offset.bit, op1.byte)
    else:
      op0.offset += int(op0.offset.bit, op0.byte)
      op1.offset += int(op1.offset.bit, op1.byte);

  compare_string: &compare_string |
    alloc_var('res', op0.bit);
    res = op0.val - op1.val;
    call('overflow_flag_sub');
    call('carry_flag_sub');
    call('sign_flag');
    call('zero_flag');
    call('parity_flag');
    call('adjust_flag');
    if __expr and df.id == int1(1):
      op0.offset -= int(op0.offset.bit, op0.byte)
      op1.offset -= int(op1.offset.bit, op1.byte)
    else:
      op0.offset += int(op0.offset.bit, op0.byte)
      op1.offset += int(op1.offset.bit, op1.byte);
    free_var('res');

## Instruction semantic #######################################################

semantic:

## Arithmetic / Logical operations
  add: &add |
    alloc_var('res', op0.bit);
    res.val = op0.val + op1.val;
    call('overflow_flag_add');
    call('carry_flag_add');
    call('sign_flag');
    call('zero_flag');
    call('parity_flag');
    call('adjust_flag');
    op0.val = res.val;
    free_var('res');

  addss: &addss |
    alloc_var('res', 32);
    res     = fadd(bit_cast(op0.val, int_type32), bit_cast(op1.val, int_type32));
    op0.val = clear_bits(op0.val, bit_cast(int(op0.bit, 0xffffffff), int_type(op0.bit))) | bit_cast(res, int_type(op0.bit));
    free_var('res');

  mulss: &mulss |
    alloc_var('res', 32);
    res     = fmul(bit_cast(op0.val, int_type32), bit_cast(op1.val, int_type32));
    op0.val = clear_bits(op0.val, bit_cast(int(op0.bit, 0xffffffff), int_type(op0.bit))) | bit_cast(res, int_type(op0.bit));
    free_var('res');

  aaa: &aaa |
    alloc_var('cond', 1);
    cond = int1(0);
    if __expr and ((al.id & int(al.bit, 0x0f)) > int(al.bit, 9)): cond |= int1(1);
    if __expr and af.id == int1(1): cond |= int1(1);
    if __expr and cond == int1(1):
      ax.id += int(ax.bit, 0x106)
      af.id = int1(1)
      cf.id = int1(1)
    else:
      af.id = int1(0)
      cf.id = int1(0);
    al.id &= int(al.bit, 0x0f);
    free_var('cond');

  aad: &aad |
    alloc_var('tmp_al', al.bit);
    alloc_var('tmp_ah', ah.bit);
    alloc_var('pf_tmp', pf.bit);
    tmp_al = al.id;
    tmp_ah = ah.id;
    al.id = (tmp_al + (tmp_ah * op0.val)) & int(al.bit, 0xff);
    ah.id = int(ah.bit, 0);
    # Start updating ZF
    if __expr and al.id == int(al.bit, 0): zf.id = int1(1)
    else: zf.id = int1(0);
    # Start updating SF
    sf.id = bit_cast(al.id >> (int(al.bit, al.bit) - int(al.bit, 1)), int1(1));
    # Start updating PF
    pf_tmp = int1(1);
    pf_tmp ^= bit_cast(al.id >> int(al.bit, 0), int1(1));
    pf_tmp ^= bit_cast(al.id >> int(al.bit, 1), int1(1));
    pf_tmp ^= bit_cast(al.id >> int(al.bit, 2), int1(1));
    pf_tmp ^= bit_cast(al.id >> int(al.bit, 3), int1(1));
    pf_tmp ^= bit_cast(al.id >> int(al.bit, 4), int1(1));
    pf_tmp ^= bit_cast(al.id >> int(al.bit, 5), int1(1));
    pf_tmp ^= bit_cast(al.id >> int(al.bit, 6), int1(1));
    pf_tmp ^= bit_cast(al.id >> int(al.bit, 7), int1(1));
    pf.id = pf_tmp;
    free_var('pf_tmp');
    free_var('tmp_ah');
    free_var('tmp_al');

  aam: &aam |
    alloc_var('tmp_al', al.bit);
    alloc_var('pf_tmp', pf.bit);
    tmp_al = al.id;
    ah.id = tmp_al / op0.val;
    al.id = tmp_al % op0.val;
    # Start updating ZF
    if __expr and al.id == int(al.bit, 0): zf.id = int1(1)
    else: zf.id = int1(0);
    # Start updating SF
    sf.id = bit_cast(al.id >> (int(al.bit, al.bit) - int(al.bit, 1)), int1(1));
    # Start updating PF
    pf_tmp = int1(1);
    pf_tmp ^= bit_cast(al.id >> int(al.bit, 0), int1(1));
    pf_tmp ^= bit_cast(al.id >> int(al.bit, 1), int1(1));
    pf_tmp ^= bit_cast(al.id >> int(al.bit, 2), int1(1));
    pf_tmp ^= bit_cast(al.id >> int(al.bit, 3), int1(1));
    pf_tmp ^= bit_cast(al.id >> int(al.bit, 4), int1(1));
    pf_tmp ^= bit_cast(al.id >> int(al.bit, 5), int1(1));
    pf_tmp ^= bit_cast(al.id >> int(al.bit, 6), int1(1));
    pf_tmp ^= bit_cast(al.id >> int(al.bit, 7), int1(1));
    pf.id = pf_tmp;
    free_var('pf_tmp');
    free_var('tmp_al');

  aas: &aas |
    alloc_var('cond', 1);
    cond = int1(0);
    if __expr and ((al.id & int(al.bit, 0x0f)) > int(al.bit, 9)): cond |= int1(1)
    if __expr and af.id == int1(1): cond |= int1(1);
    if __expr and cond == int1(1):
      ax.id -= int(ax.bit, 0x6)
      ah.id -= int(ah.bit, 1)
      af.id = int1(1)
      cf.id = int1(1)
    else:
      cf.id = int1(0)
      af.id = int1(0);
    al.id &= int(al.bit, 0x0f);
    free_var('cond');

  adc: &adc |
    alloc_var('res', op0.bit);
    res.val = op0.val + op1.val + bit_cast(cf.id, int(op0.bit, op0.bit));
    call('overflow_flag_add');
    call('carry_flag_add');
    call('sign_flag');
    call('zero_flag');
    call('parity_flag');
    call('adjust_flag');
    op0.val = res.val;
    free_var('res');

  daa: &daa |
    alloc_var('old_al', al.bit);
    alloc_var('old_cf', 1);
    alloc_var('cond', 1);
    alloc_var('pf_tmp', pf.bit);
    old_cf = cf.id;
    old_al = al.id;
    cf.id = int1(0);
    cond = int1(0);
    if __expr and (al.id & int(al.bit, 0x0f)) > int(al.bit, 9): cond |= int1(1);
    if __expr and af.id == int1(1): cond |= int1(1);
    if __expr and cond == int1(1):
      if __expr and al.id > int(al.bit, 0xf9): cf.id = int1(1)
      else: cf.id = old_cf
      al.id += int(al.bit, 0x6)
      af.id = int1(1)
    else:
      af.id = int1(0);
    cond = int1(0);
    if __expr and old_al > int(al.bit, 0x99): cond |= int1(1);
    if __expr and old_cf == int1(1): cond |= int1(1);
    if __expr and cond == int1(1):
      al.id += int(al.bit, 0x60)
      cf.id = int1(1)
    else:
      cf.id = int1(0);
    # Start updating ZF
    if __expr and al.id == int(al.bit, 0): zf.id = int1(1)
    else: zf.id = int1(0);
    # Start updating SF
    sf.id = bit_cast(al.id >> (int(al.bit, al.bit) - int(al.bit, 1)), int1(1));
    # Start updating PF
    pf_tmp = int1(1);
    pf_tmp ^= bit_cast(al.id >> int(al.bit, 0), int1(1));
    pf_tmp ^= bit_cast(al.id >> int(al.bit, 1), int1(1));
    pf_tmp ^= bit_cast(al.id >> int(al.bit, 2), int1(1));
    pf_tmp ^= bit_cast(al.id >> int(al.bit, 3), int1(1));
    pf_tmp ^= bit_cast(al.id >> int(al.bit, 4), int1(1));
    pf_tmp ^= bit_cast(al.id >> int(al.bit, 5), int1(1));
    pf_tmp ^= bit_cast(al.id >> int(al.bit, 6), int1(1));
    pf_tmp ^= bit_cast(al.id >> int(al.bit, 7), int1(1));
    pf.id = pf_tmp;
    free_var('pf_tmp');
    free_var('cond');
    free_var('old_cf');
    free_var('old_al');

  das: &das |
    alloc_var('old_al', al.bit);
    alloc_var('old_cf', 1);
    alloc_var('cond', 1);
    alloc_var('pf_tmp', pf.bit);
    old_cf = cf.id;
    old_al = al.id;
    cf.id = int1(0);
    cond = int1(0);
    if __expr and (al.id & int(al.bit, 0x0f)) > int(al.bit, 9): cond |= int1(1);
    if __expr and af.id == int1(1): cond |= int1(1);
    if __expr and cond == int1(1):
      if __expr and int(al.bit, 0x6) > al.id: cf.id = int1(1)
      else: cf.id = old_cf
      al.id -= int(al.bit, 0x6)
      af.id = int1(1)
    else:
      af.id = int1(0);
    cond = int1(0);
    if __expr and old_al > int(al.bit, 0x99): cond |= int1(1);
    if __expr and old_cf == int1(1): cond |= int1(1);
    if __expr and cond == int1(1):
      al.id -= int(al.bit, 0x60)
      cf.id = int1(1);
    # Start updating ZF
    if __expr and al.id == int(al.bit, 0): zf.id = int1(1)
    else: zf.id = int1(0);
    # Start updating SF
    sf.id = bit_cast(al.id >> (int(al.bit, al.bit) - int(al.bit, 1)), int1(1));
    # Start updating PF
    pf_tmp = int1(1);
    pf_tmp ^= bit_cast(al.id >> int(al.bit, 0), int1(1));
    pf_tmp ^= bit_cast(al.id >> int(al.bit, 1), int1(1));
    pf_tmp ^= bit_cast(al.id >> int(al.bit, 2), int1(1));
    pf_tmp ^= bit_cast(al.id >> int(al.bit, 3), int1(1));
    pf_tmp ^= bit_cast(al.id >> int(al.bit, 4), int1(1));
    pf_tmp ^= bit_cast(al.id >> int(al.bit, 5), int1(1));
    pf_tmp ^= bit_cast(al.id >> int(al.bit, 6), int1(1));
    pf_tmp ^= bit_cast(al.id >> int(al.bit, 7), int1(1));
    pf.id = pf_tmp;
    free_var('pf_tmp');
    free_var('cond');
    free_var('old_cf');
    free_var('old_al');

  inc: &inc |
    alloc_var('op1', op0.bit);
    alloc_var('res', op0.bit);
    op1.val = int(op0.bit, 1);
    res.val = op0.val + op1.val;
    call('overflow_flag_add');
    call('sign_flag');
    call('zero_flag');
    call('parity_flag');
    call('adjust_flag');
    op0.val = res.val;
    free_var('op1');
    free_var('res');

  and: &and |
    alloc_var('res', op0.bit);
    res = op0.val & op1.val;
    of.id = int1(0)
    cf.id = int1(0)
    call('sign_flag')
    call('zero_flag')
    call('parity_flag')
    op0.val = res;
    free_var('res');

  or: &or |
    alloc_var('res', op0.bit);
    res = op0.val | op1.val;
    of.id = int1(0)
    cf.id = int1(0)
    call('sign_flag')
    call('zero_flag')
    call('parity_flag')
    op0.val = res;
    free_var('res');

  xor: &xor |
    alloc_var('res', op0.bit);
    res = op0.val ^ op1.val;
    of.id = int1(0)
    cf.id = int1(0)
    call('sign_flag')
    call('zero_flag')
    call('parity_flag')
    op0.val = res;
    free_var('res');

  xorps: &xorps |
    op0.val ^= op1.val;

  sub: &sub |
    alloc_var('res', op0.bit);
    res = op0.val - op1.val;
    call('overflow_flag_sub');
    call('carry_flag_sub');
    call('sign_flag');
    call('zero_flag');
    call('parity_flag');
    call('adjust_flag');
    op0.val = res;
    free_var('res');

  sbb: &sbb |
    alloc_var('res', op0.bit);
    res = op0.val - op1.val - bit_cast(cf.id, int(op0.bit, op0.bit));
    call('overflow_flag_sub');
    call('carry_flag_sub');
    call('sign_flag');
    call('zero_flag');
    call('parity_flag');
    call('adjust_flag');
    op0.val = res.val;
    free_var('res');

  dec: &dec |
    alloc_var('res', op0.bit);
    alloc_var('op1', op0.bit);
    op1 = int(op0.bit, 1);
    res = op0.val - op1;
    call('overflow_flag_sub');
    call('sign_flag');
    call('zero_flag');
    call('parity_flag');
    call('adjust_flag');
    op0.val = res;
    free_var('op1');
    free_var('res');

  neg: &neg |
    alloc_var('res', op0.bit);
    if __expr and op0.val == int(op0.bit, 0):
      cf.id = int1(0)
    else:
      cf.id = int1(1);
    res = -op0.val;
    of.id = bit_cast((res.val & op0.val) >> (int(op0.bit, op0.bit) - int(op0.bit, 1)), int1(1));
    call('sign_flag');
    call('zero_flag');
    call('parity_flag');
    af.id = bit_cast((op0.val ^ res.val) >> (int(op0.bit, 4)), int1(1));
    op0.val = res;
    free_var('res');

  imul1: &imul1 |
    alloc_var('res', op0.bit);
    alloc_var('mul_res', concat(op0.bit, ignore(' * 2')));
    alloc_var('extended', concat(op0.bit, ignore(' * 2')));
    if __code and is_byte_operation:
      mul_res = sign_extend(al.id, int_type16) * sign_extend(op0.val, int_type16)
      ax.id = bit_cast(mul_res, int_type16)
      sf.id = bit_cast(mul_res >> int(16, 7), int_type1);
    if __code and is_word_operation:
      mul_res = sign_extend(ax.id, int_type32) * sign_extend(op0.val, int_type32)
      ax.id = bit_cast(mul_res, int_type16)
      dx.id = bit_cast(mul_res >> int(32, 16), int_type16)
      sf.id = bit_cast(mul_res >> int(32, 15), int_type1);
    if __code and is_dword_operation:
      mul_res = sign_extend(eax.id, int_type64) * sign_extend(op0.val, int_type64)
      eax.id = bit_cast(mul_res, int_type32)
      edx.id = bit_cast(mul_res >> int(64, 32), int_type32)
      sf.id = bit_cast(mul_res >> int(64, 32), int_type1);
    if __code and is_qword_operation:
      mul_res = sign_extend(rax.id, int_type128) * sign_extend(op0.val, int_type128)
      rax.id = bit_cast(mul_res, int_type64)
      rdx.id = bit_cast(mul_res >> int(128, 64), int_type64)
      sf.id = bit_cast(mul_res >> int(128, 63), int_type1);
    res = bit_cast(mul_res, int_type(op0.bit));
    extended = sign_extend(res, int_type(concat(op0.bit, ignore(' * 2'))));
    if __expr and extended == mul_res:
      of.id = int1(0)
      cf.id = int1(0)
    else:
      of.id = int1(1)
      cf.id = int1(1);
    free_var('extended');
    free_var('mul_res');
    free_var('res');

  imul2: &imul2 |
    alloc_var('res', op0.bit);
    alloc_var('mul_res', concat(op0.bit, ignore(' * 2')));
    alloc_var('extended', concat(op0.bit, ignore(' * 2')));
    mul_res = sign_extend(op0.val, int_type(concat(op0.bit, ignore(' * 2')))) * sign_extend(op1.val, int_type(concat(op0.bit, ignore(' * 2'))));
    res = bit_cast(mul_res, int_type(op0.bit));
    call('sign_flag');
    extended = sign_extend(res, int_type(concat(op0.bit, ignore(' * 2'))));
    if __expr and extended == mul_res:
      of.id = int1(0)
      cf.id = int1(0)
    else:
      of.id = int1(1)
      cf.id = int1(1);
    op0.val = res;
    free_var('extended');
    free_var('mul_res');
    free_var('res');

  imul3: &imul3 |
    alloc_var('res', op0.bit);
    alloc_var('mul_res', concat(op0.bit, ignore(' * 2')));
    alloc_var('extended', concat(op0.bit, ignore(' * 2')));
    mul_res = sign_extend(op1.val, int_type(concat(op0.bit, ignore(' * 2')))) * sign_extend(op2.val, int_type(concat(op0.bit, ignore(' * 2'))));
    res = bit_cast(mul_res, int_type(op0.bit));
    call('sign_flag');
    extended = sign_extend(res, int_type(concat(op0.bit, ignore(' * 2'))));
    if __expr and extended == mul_res:
      of.id = int1(0)
      cf.id = int1(0)
    else:
      of.id = int1(1)
      cf.id = int1(1);
    op0.val = res;
    free_var('extended');
    free_var('mul_res');
    free_var('res');

  mul: &mul |
    alloc_var('upper_res', op0.bit);
    alloc_var('mul_res', concat(op0.bit, ignore(' * 2')));
    if __code and is_byte_operation:
      ax.id = bit_cast(bit_cast(al.id, int_type16) * bit_cast(op0.val, int_type16), int_type16)
      upper_res = ah.id;
    if __code and is_word_operation:
      mul_res = bit_cast(bit_cast(ax.id, int_type32) * bit_cast(op0.val, int_type32), int_type32)
      ax.id = bit_cast(mul_res, int_type16)
      dx.id = bit_cast(mul_res >> int(32, 16), int_type16)
      upper_res = dx.id;
    if __code and is_dword_operation:
      mul_res = bit_cast(bit_cast(eax.id, int_type64) * bit_cast(op0.val, int_type64), int_type64)
      eax.id = bit_cast(mul_res, int_type32)
      edx.id = bit_cast(mul_res >> int(64, 32), int_type32)
      upper_res = edx.id;
    if __code and is_qword_operation:
      mul_res = bit_cast(bit_cast(rax.id, int_type128) * bit_cast(op0.val, int_type128), int_type128)
      rax.id = bit_cast(mul_res, int_type64)
      rdx.id = bit_cast(mul_res >> int(128, 64), int_type64)
      upper_res = rdx.id;
    if __expr and upper_res == int(op0.bit, 0):
      of.id = int1(0)
      cf.id = int1(0)
    else:
      of.id = int1(1)
      cf.id = int1(1);
    free_var('mul_res');
    free_var('upper_res');

  idiv: &idiv |
    alloc_var('dividend', concat(op0.bit, ignore(' * 2')));
    alloc_var('extended', concat(op0.bit, ignore(' * 2')));
    extended = sign_extend(op0.val, int_type(concat(op0.bit, ignore(' * 2'))));
    if __code and is_byte_operation:
      dividend = sign_extend(ax.id, int_type16)
      al.id = bit_cast(sdiv(dividend, extended), int_type8)
      ah.id = bit_cast(smod(dividend, extended), int_type8);
    if __code and is_word_operation:
      dividend = sign_extend(dx.id, int_type32) << int(32, 16) | sign_extend(ax.id, int_type32)
      ax.id = bit_cast(sdiv(dividend, extended), int_type16)
      dx.id = bit_cast(smod(dividend, extended), int_type16);
    if __code and is_dword_operation:
      dividend = sign_extend(edx.id, int_type64) << int(64, 32) | sign_extend(eax.id, int_type64)
      eax.id = bit_cast(sdiv(dividend, extended), int_type32)
      edx.id = bit_cast(smod(dividend, extended), int_type32);
    if __code and is_qword_operation:
      dividend = sign_extend(rdx.id, int_type128) << int(128, 64) | sign_extend(rax.id, int_type128)
      rax.id = bit_cast(sdiv(dividend, extended), int_type64)
      rdx.id = bit_cast(smod(dividend, extended), int_type64);
    free_var('extended');
    free_var('dividend');

  div: &div |
    alloc_var('dividend', concat(op0.bit, ignore(' * 2')));
    if __code and is_byte_operation:
      dividend = bit_cast(ax.id, int_type16)
      al.id = bit_cast(dividend / zero_extend(op0.val, int_type16), int_type8)
      ah.id = bit_cast(dividend % zero_extend(op0.val, int_type16), int_type8);
    if __code and is_word_operation:
      dividend = bit_cast(dx.id, int_type32) << int(32, 16) | bit_cast(ax.id, int_type32)
      ax.id = bit_cast(dividend / zero_extend(op0.val, int_type32), int_type16)
      dx.id = bit_cast(dividend % zero_extend(op0.val, int_type32), int_type16);
    if __code and is_dword_operation:
      dividend = bit_cast(edx.id, int_type64) << int(64, 32) | bit_cast(eax.id, int_type64)
      eax.id = bit_cast(dividend / zero_extend(op0.val, int_type64), int_type32)
      edx.id = bit_cast(dividend % zero_extend(op0.val, int_type64), int_type32);
    if __code and is_qword_operation:
      dividend = bit_cast(rdx.id, int_type128) << int(128, 64) | bit_cast(rax.id, int_type128)
      rax.id = bit_cast(dividend / zero_extend(op0.val, int_type128), int_type64)
      rdx.id = bit_cast(dividend % zero_extend(op0.val, int_type128), int_type64);
    free_var('dividend');

  not: &not |
    alloc_var('res', op0.bit);
    res = ~op0.val;
    op0.val = res;
    free_var('res');

  bswap: &bswap |
    if __expr and int(op0.bit, op0.bit) == int(op0.bit, 16): # Handle undefined processor state on 16-bit
      op0.val = int(op0.bit, 0)
    else:
      op0.val = swap(op0.val);

  shld: &shld |
    alloc_var('res', op0.bit);
    alloc_var('count', op0.bit);
    alloc_var('sign_saved', 1);
    sign_saved = bit_cast(op0.val >> (int(op0.bit, op0.bit) - int(op0.bit, 1)), int1(1));
    count = bit_cast(op2.val, int(op0.bit, op0.bit));
    call('count_mask');
    res = ((op0.val << count) | (op1.val >> (int(op0.bit, op0.bit) - count)));
    if __expr and count != int(op0.bit, 0):
      cf.id = bit_cast(op0.val >> (int(op0.bit, op0.bit) - count), int1(1))
      call('sign_flag')
      call('zero_flag')
      call('parity_flag');
    if __expr and count == int(op0.bit, 1):
      of.id = sf.id ^ sign_saved;
    op0.val = res;
    free_var('sign_saved');
    free_var('count');
    free_var('res');

  shrd: &shrd |
    alloc_var('res', op0.bit);
    alloc_var('count', op0.bit);
    alloc_var('sign_saved', 1);
    sign_saved = bit_cast(op0.val >> (int(op0.bit, op0.bit) - int(op0.bit, 1)), int1(1));
    count = bit_cast(op2.val, int(op0.bit, op0.bit));
    call('count_mask');
    res = ((op0.val >> count) | (op1.val << (int(op0.bit, op0.bit) - count)));
    if __expr and count != int(op0.bit, 0):
      cf.id = bit_cast(op0.val >> (count - int(op0.bit, 1)), int1(1))
      call('sign_flag')
      call('zero_flag')
      call('parity_flag');
    if __expr and count == int(op0.bit, 1):
      of.id = sf.id ^ sign_saved;
    op0.val = res;
    free_var('sign_saved');
    free_var('count');
    free_var('res');

  shl: &shl |
    alloc_var('res', op0.bit);
    alloc_var('count', op0.bit);
    count = bit_cast(op1.val, int(op0.bit, op0.bit));
    call('count_mask');
    res = op0.val << count;
    if __expr and count != int(op0.bit, 0):
      cf.id = bit_cast(op0.val >> (int(op0.bit, op0.bit) - count), int1(1))
      call('sign_flag')
      call('zero_flag')
      call('parity_flag');
    if __expr and count == int(op0.bit, 1):
      of.id = bit_cast((op0.val >> (int(op0.bit, op0.bit) - int(op0.bit, 1))) ^ (op0.val >> (int(op0.bit, op0.bit) - int(op0.bit, 2))), int1(1));
    op0.val = res;
    free_var('count');
    free_var('res');

  shr: &shr |
    alloc_var('res', op0.bit);
    alloc_var('count', op0.bit);
    count = bit_cast(op1.val, int(op0.bit, op0.bit));
    call('count_mask');
    res = op0.val >> count;
    if __expr and count != int(op0.bit, 0):
      cf.id = bit_cast(op0.val >> (count - int(op0.bit, 1)), int1(1))
      call('sign_flag')
      call('zero_flag')
      call('parity_flag');
    if __expr and count == int(op0.bit, 1):
      of.id = bit_cast((op0.val >> (int(op0.bit, op0.bit) - int(op0.bit, 1))), int1(1));
    op0.val = res;
    free_var('count');
    free_var('res');

  sal: &sal |
    alloc_var('res', op0.bit);
    alloc_var('count', op0.bit);
    count = bit_cast(op1.val, int(op0.bit, op0.bit));
    call('count_mask');
    res = op0.val << count;
    if __expr and count != int(op0.bit, 0):
      cf.id = bit_cast(op0.val >> (int(op0.bit, op0.bit) - count), int1(1))
      call('sign_flag')
      call('zero_flag')
      call('parity_flag');
    if __expr and count == int(op0.bit, 1):
      of.id = bit_cast((op0.val >> (int(op0.bit, op0.bit) - int(op0.bit, 1))) ^ (op0.val >> (int(op0.bit, op0.bit) - int(op0.bit, 2))), int1(1));
    op0.val = res;
    free_var('count');
    free_var('res');

  sar: &sar |
    alloc_var('res', op0.bit);
    alloc_var('count', op0.bit);
    count = bit_cast(op1.val, int(op0.bit, op0.bit));
    call('count_mask');
    res = ars(op0.val, count);
    if __expr and count != int(op0.bit, 0):
      if __expr and count > int(op0.bit, op0.bit): cf.id = bit_cast(op0.val >> (int(op0.bit, op0.bit) - int(op0.bit, 1)), int1(1))
      else: cf.id = bit_cast(op0.val >> (count - int(op0.bit, 1)), int1(1))
      call('sign_flag')
      call('zero_flag')
      call('parity_flag');
    if __expr and count == int(op0.bit, 1):
      of.id = int1(0);
    op0.val = res;
    free_var('count');
    free_var('res');

  rol: &rol |
    alloc_var('res', op0.bit);
    alloc_var('count', op0.bit);
    count = bit_cast(op1.val, int(op0.bit, op0.bit));
    call('count_mask');
    res = rol(op0.val, count);
    if __expr and count != int(op0.bit, 0):
      cf.id = bit_cast(res, int_type1);
    if __expr and count == int(op0.bit, 1):
      of.id = bit_cast(bit_cast(cf.id, int_type(op0.bit)) ^ (res >> (int(op0.bit,op0.bit) - int(op0.bit, 1))), int_type1);
    op0.val = res;
    free_var('count');
    free_var('res');

  ror: &ror |
    alloc_var('res', op0.bit);
    alloc_var('count', op0.bit);
    count = bit_cast(op1.val, int_type(op0.bit));
    call('count_mask');
    res = ror(op0.val, count);
    if __expr and count != int(op0.bit, 0):
      cf.id = bit_cast(res >> (int(op0.bit, op0.bit) - int(op0.bit, 1)), int_type1);
    if __expr and count == int(op0.bit, 1):
      of.id = bit_cast((res >> (int(op0.bit, op0.bit) - int(op0.bit, 1))) ^ (res >> (int(op0.bit, op0.bit) - int(op0.bit, 2))), int_type1);
    op0.val = res;
    free_var('count');
    free_var('res');

  rcl: &rcl |
    alloc_var('res', op0.bit);
    alloc_var('count', op0.bit);
    count = bit_cast(op1.val, int_type(op0.bit));
    call('count_mask');
    alloc_var('rol_val', concat(op0.bit, ignore(' + 1')));
    rol_val = bit_cast(op0.val, int_type(concat(op0.bit, ignore(' + 1'))));
    rol_val |= (bit_cast(cf.id, int_type(concat(op0.bit, ignore(' + 1')))) << int(concat(op0.bit, ignore(' + 1')), op0.bit));
    rol_val = rol(rol_val, bit_cast(count, int_type(concat(op0.bit, ignore(' + 1')))));
    res = bit_cast(rol_val, int_type(op0.bit));
    if __expr and count != int(op0.bit, 0):
      cf.id = bit_cast(rol_val >> int(concat(op0.bit, ignore(' + 1')), op0.bit), int_type1);
    if __expr and count == int(op0.bit, 1):
      of.id = bit_cast(cf.id ^ bit_cast(res >> (int(op0.bit, op0.bit) - int(op0.bit, 1)), int_type1), int_type1);
    op0.val = res;
    free_var('rol_val');
    free_var('count');
    free_var('res');

  rcr: &rcr |
    alloc_var('res', op0.bit);
    alloc_var('count', op0.bit);
    count = bit_cast(op1.val, int(op0.bit, op0.bit));
    call('count_mask');
    alloc_var('ror_val', concat(op0.bit, ignore(' + 1')));
    ror_val = bit_cast(op0.val, int_type(concat(op0.bit, ignore(' + 1'))));
    ror_val |= (bit_cast(cf.id, int_type(concat(op0.bit, ignore(' + 1')))) << int(concat(op0.bit, ignore(' + 1')), op0.bit));
    ror_val = ror(ror_val, bit_cast(count, int_type(concat(op0.bit, ignore(' + 1')))));
    res = bit_cast(ror_val, int_type(op0.bit));
    if __expr and count != int(op0.bit, 0):
      cf.id = bit_cast(ror_val >> int(concat(op0.bit, ignore(' + 1')), op0.bit), int_type1);
    if __expr and count == int(op0.bit, 1):
      of.id = bit_cast((res >> (int(op0.bit, op0.bit) - int(op0.bit, 1))) ^ (res >> (int(op0.bit, op0.bit) - int(op0.bit, 2))), int_type1);
    op0.val = res;
    free_var('ror_val');
    free_var('count');
    free_var('res');

  xadd: &xadd |
    alloc_var('res', op0.bit);
    alloc_var('tmp_val', op0.bit);
    tmp_val = op0.val;
    op0.val = op1.val;
    op1.val = tmp_val;
    res = op1.val + op0.val;
    call('overflow_flag_add');
    call('carry_flag_add');
    call('sign_flag');
    call('zero_flag');
    call('parity_flag');
    call('adjust_flag');
    op0.val = res;
    free_var('res');
    free_var('tmp_val');

  cdqe: &cdqe |
    rax.id = sign_extend(eax.id, int(rax.bit, rax.bit));

  cwde: &cwde |
    eax.id = sign_extend(ax.id, int(eax.bit, eax.bit));

  cbw: &cbw |
    ax.id = sign_extend(al.id, int(ax.bit, ax.bit));

## Data transfer

  mov: &mov |
    op0.val = op1.val;

  movzx: &movzx |
    op0.val = zero_extend(op1.val, int(op0.bit, op0.bit));

  movsx: &movsx |
    op0.val = sign_extend(op1.val, int(op0.bit, op0.bit));

  movsd: &movsd |
    alloc_var('tmp_val', op0.bit);
    if __code and is_id_and_mem(op0, op1):
      op0.val = bit_cast(op1.val, int_type128);
    if __code and is_mem_and_id(op0, op1):
      op0.val = bit_cast(op1.val, int_type64);
    if __code and is_id_and_id(op0, op1):
      tmp_val = op0.val >> int(op0.bit, 64)
      tmp_val = tmp_val << int(op0.bit, 64)
      tmp_val += bit_cast(op1.val, int_type64)
      op0.val = tmp_val;
    free_var('tmp_val');

  movss: &movss |
    alloc_var('tmp_val', op0.bit);
    if __code and is_id_and_mem(op0, op1):
      op0.val = bit_cast(op1.val, int_type128);
    if __code and is_mem_and_id(op0, op1):
      tmp_val = op0.val >> int(op0.bit, 32)
      tmp_val = tmp_val << int(op0.bit, 32)
      tmp_val += bit_cast(op1.val, int_type32)
      op0.val = tmp_val;
    if __code and is_id_and_id(op0, op1):
      tmp_val = op0.val >> int(op0.bit, 32)
      tmp_val = tmp_val << int(op0.bit, 32)
      tmp_val += bit_cast(op1.val, int_type32)
      op0.val = tmp_val;
    free_var('tmp_val');

  movd_sse: &movd_sse |
    if __code and is_dword_operation:
      op0.val = bit_cast(op1.val, int_type32);
    if __code and is_oword_operation:
      op0.val = bit_cast(op1.val, int_type128);

  # TODO: http://www.felixcloutier.com/x86/CMPXCHG8B:CMPXCHG16B.html
  cmpxchg8b: &cmpxchg8b
    [
    ]

  # TODO: ditto
  cmpxchg16b: &cmpxchg16b
    [
    ]

## Stack operations

  push: &push |
    alloc_var('pushed_value', stack.bit);
    pushed_value = sign_extend(op0.val, int(stack.bit, stack.bit));
    stack.id -= stack.size;
    stack.mem = pushed_value;
    free_var('pushed_value');

  # http://en.wikipedia.org/wiki/FLAGS_register
  # TODO(KS): interrupt flag
  pushf: &pushf |
      stack.id -= stack.size;
      stack.mem =\
        (  bit_cast(cf.id, int(stack.bit, stack.bit))
        | (int64(1)                                   << int(stack.bit, 1))
        | (bit_cast(pf.id, int(stack.bit, stack.bit)) << int(stack.bit, 2))
        | (bit_cast(af.id, int(stack.bit, stack.bit)) << int(stack.bit, 4))
        | (bit_cast(zf.id, int(stack.bit, stack.bit)) << int(stack.bit, 6))
        | (bit_cast(sf.id, int(stack.bit, stack.bit)) << int(stack.bit, 7))
        | (bit_cast(tf.id, int(stack.bit, stack.bit)) << int(stack.bit, 8))
        | (int64(1)                                   << int(stack.bit, 9))
        | (bit_cast(df.id, int(stack.bit, stack.bit)) << int(stack.bit, 10))
        | (bit_cast(of.id, int(stack.bit, stack.bit)) << int(stack.bit, 11)));

  pusha: &pusha |
    stack.id -= int16(2);stack.mem = ax.id;
    stack.id -= int16(2);stack.mem = cx.id;
    stack.id -= int16(2);stack.mem = dx.id;
    stack.id -= int16(2);stack.mem = bx.id;
    stack.id -= int16(2);stack.mem = sp.id + int16(8);
    stack.id -= int16(2);stack.mem = bp.id;
    stack.id -= int16(2);stack.mem = si.id;
    stack.id -= int16(2);stack.mem = di.id;

  pushad: &pushad |
    stack.id -= int32(4);stack.mem = eax.id;
    stack.id -= int32(4);stack.mem = ecx.id;
    stack.id -= int32(4);stack.mem = edx.id;
    stack.id -= int32(4);stack.mem = ebx.id;
    stack.id -= int32(4);stack.mem = esp.id + int32(16);
    stack.id -= int32(4);stack.mem = ebp.id;
    stack.id -= int32(4);stack.mem = esi.id;
    stack.id -= int32(4);stack.mem = edi.id;

  pop: &pop |
    alloc_var('popped_value', stack.bit);
    popped_value = stack.mem;
    stack.id += stack.size;
    op0.val = popped_value;
    free_var('popped_value');

  # TODO(KS): see pushf
  popf: &popf |
    alloc_var('flags', stack.bit);
    flags = stack.mem;
    stack.id += stack.size;
    cf.id = bit_cast(flags, int1(1));
    pf.id = bit_cast((flags >> int(stack.bit,  2)), int1(1));
    af.id = bit_cast((flags >> int(stack.bit,  4)), int1(1));
    zf.id = bit_cast((flags >> int(stack.bit,  6)), int1(1));
    sf.id = bit_cast((flags >> int(stack.bit,  7)), int1(1));
    tf.id = bit_cast((flags >> int(stack.bit,  8)), int1(1));
    df.id = bit_cast((flags >> int(stack.bit, 10)), int1(1));
    of.id = bit_cast((flags >> int(stack.bit, 11)), int1(1));
    free_var('flags');

  popa: &popa |
    di.id = stack.mem;stack.id += int16(2);
    si.id = stack.mem;stack.id += int16(2);
    bp.id = stack.mem;stack.id += int16(2);
    sp.id = stack.mem;stack.id += int16(2);
    bx.id = stack.mem;stack.id += int16(2);
    dx.id = stack.mem;stack.id += int16(2);
    cx.id = stack.mem;stack.id += int16(2);
    ax.id = stack.mem;stack.id += int16(2);

  popad: &popad |
    edi.id = stack.mem;stack.id += int32(4);
    esi.id = stack.mem;stack.id += int32(4);
    ebp.id = stack.mem;stack.id += int32(4);
    esp.id = stack.mem;stack.id += int32(4);
    ebx.id = stack.mem;stack.id += int32(4);
    edx.id = stack.mem;stack.id += int32(4);
    ecx.id = stack.mem;stack.id += int32(4);
    eax.id = stack.mem;stack.id += int32(4);

## Control flow operations

  jmp: &jmp |
    program.id = op0.val;

  call: &call |
    alloc_var('call_dst', stack.bit);
    call_dst = op0.val;
    stack.id -= stack.size;
    stack.mem = program.id;
    program.id = call_dst;
    free_var('call_dst');

  ret: &ret |
    program.id = stack.mem;
    stack.id += stack.size;

  retn: &retn |
    program.id = stack.mem;
    stack.id += stack.size;
    stack.id += bit_cast(op0.val, int(stack.bit, stack.bit));

  nop: &nop |
    program.id = program.id;

  xchg: &xchg |
    alloc_var('tmp_val', op0.bit);
    tmp_val = op0.val;
    op0.val = op1.val;
    op1.val = tmp_val;
    free_var('tmp_val');

  # FIXME: not done http://faydoc.tripod.com/cpu/cmpxchg.htm
  cmpxchg: &cmpxchg |
    if __expr and op0.val == acc.id:
      zf.id = int1(1)
    else:
      zf.id = int1(0);

    if __expr and zf.id == int1(1):
      op0.val = op1.val;

  loop: &loop |
    cnt.id -= int(cnt.bit, 1);
    if __expr and cnt.id != int(cnt.bit, 0):
      program.id = op0.val;

  loopz: &loopz |
    cnt.id -= int(cnt.bit, 1);
    if __expr and (cnt.id | zf.id) != int(cnt.bit, 0):
      program.id = op0.val;

  loopnz: &loopnz |
    cnt.id -= int(cnt.bit, 1);
    if __expr and (zf.id ^ int(cnt.bit, 1) & cnt.id) != int(cnt.bit, 0):
      program.id = op0.val;

  jcntz: &jcntz |
    if __expr and cnt.id == int(cnt.bit, 0):
      program.id = op0.val;

## String operations

  scas: &scas |
    alloc_var('loop', 1);
    loop = int1(1);
    if __code and instruction_has_prefix(repz):
      if __expr and cnt.id == int(cnt.bit, 0): loop = int1(0)
      while loop == int1(1):
        call('scan_string')
        cnt.id -= int(cnt.bit, 1)
        if __expr and cnt.id == int(cnt.bit, 0): loop = int1(0)
        if __expr and zf.id == int1(0): loop = int1(0);
    if __code and instruction_has_prefix(repnz):
      if __expr and cnt.id == int(cnt.bit, 0): loop = int1(0)
      while loop == int1(1):
        call('scan_string')
        cnt.id -= int(cnt.bit, 1)
        if __expr and cnt.id == int(cnt.bit, 0): loop = int1(0)
        if __expr and zf.id == int1(1): loop = int1(0);
    if __code and instruction_has_no_prefix(repz, repnz):
      call('scan_string');
    free_var('loop');

  cmps: &cmps |
    alloc_var('loop', 1);
    loop = int1(1);
    if __code and instruction_has_prefix(repz):
      if __expr and cnt.id == int(cnt.bit, 0): loop = int1(0)
      while loop == int1(1):
        call('compare_string')
        cnt.id -= int(cnt.bit, 1)
        if __expr and cnt.id == int(cnt.bit, 0): loop = int1(0)
        if __expr and zf.id == int1(0): loop = int1(0);
    if __code and instruction_has_prefix(repnz):
      if __expr and cnt.id == int(cnt.bit, 0): loop = int1(0)
      while loop == int1(1):
        call('compare_string')
        cnt.id -= int(cnt.bit, 1)
        if __expr and cnt.id == int(cnt.bit, 0): loop = int1(0)
        if __expr and zf.id == int1(1): loop = int1(0);
    if __code and instruction_has_no_prefix(repz, repnz):
      call('compare_string');
    free_var('loop');

  stos: &stos |
    if __code and instruction_has_prefix(rep):
      while cnt.id != int(cnt.bit, 0):
        call('store_string')
        cnt.id -= int(cnt.bit, 1);
    if __code and instruction_has_no_prefix(rep):
      call('store_string');

  lods: &lods |
    if __code and instruction_has_prefix(rep):
      while cnt.id != int(cnt.bit, 0):
        call('load_string')
        cnt.id -= int(cnt.bit, 1);
    if __code and instruction_has_no_prefix(rep):
      call('load_string')

  movs: &movs |
    if __code and instruction_has_prefix(rep):
      while cnt.id != int(cnt.bit, 0):
        call('move_string')
        cnt.id -= int(cnt.bit, 1);
    if __code and instruction_has_no_prefix(rep):
      call('move_string');

## Flags manipulation

  clc: &clc |
    cf.id = int1(0);

  stc: &stc |
    cf.id = int1(1);

  cmc: &cmc |
    cf.id = cf.id ^ int1(1);

  cli: &cli
    [ ]

  sti: &sti
    [ ]

  cld: &cld |
    df.id = int1(0);

  std: &std |
    df.id = int1(1);

  cmp: &cmp |
    alloc_var('res', op0.bit);
    res = op0.val - op1.val;
    call('overflow_flag_sub');
    call('carry_flag_sub');
    call('sign_flag');
    call('zero_flag');
    call('parity_flag');
    call('adjust_flag');
    free_var('res');

  test: &test |
    alloc_var('res', op0.bit);
    res = op0.val & op1.val;
    of.id = int1(0)
    cf.id = int1(0)
    call('sign_flag')
    call('zero_flag')
    call('parity_flag')
    free_var('res');

  lahf: &lahf |
    ah.id =\
        (  bit_cast(cf.id, int8(ah.bit))
        | (int(ah.bit, 1)                << int(ah.bit, 1))
        | (bit_cast(pf.id, int8(ah.bit)) << int(ah.bit, 2))
        | (int(ah.bit, 0)                << int(ah.bit, 3))
        | (bit_cast(af.id, int8(ah.bit)) << int(ah.bit, 4))
        | (int(ah.bit, 0)                << int(ah.bit, 5))
        | (bit_cast(zf.id, int8(ah.bit)) << int(ah.bit, 6))
        | (bit_cast(sf.id, int8(ah.bit)) << int(ah.bit, 7)));

## Bit manipulation

  bt: &bt |
    cf.id = bit_cast((op0.val >> (bit_cast(op1.val, int_type(op0.bit)) & (int(op0.bit, op0.bit) - int(op0.bit, 1)))), int_type1);

  btc: &btc |
    alloc_var('bit_set', op0.bit);
    bit_set = bit_cast(op1.val, int_type(op0.bit)) & (int(op0.bit, op0.bit) - int(op0.bit, 1));
    cf.id = bit_cast((op0.val >> bit_set), int_type1);
    op0.val = (op0.val ^ ((int(op0.bit, 1) << bit_cast(bit_set, int_type(op0.bit)))));
    free_var('bit_set');

  bts: &bts |
    alloc_var('res', op0.bit);
    alloc_var('bit_set', op0.bit);
    bit_set = bit_cast(op1.val, int_type(op0.bit)) & (int(op0.bit, op0.bit) - int(op0.bit, 1));
    cf.id = bit_cast((op0.val >> bit_set), int_type1);
    res = (op0.val | ((int(op0.bit, 1) << bit_cast(bit_set, int_type(op0.bit)))));
    op0.val = res
    free_var('bit_set');
    free_var('res');

  btr: &btr |
    alloc_var('bit_set', op0.bit);
    bit_set = bit_cast(op1.val, int_type(op0.bit)) & (int(op0.bit, op0.bit) - int(op0.bit, 1));
    cf.id = bit_cast((op0.val >> bit_set), int_type1);
    op0.val = (op0.val & (~(int(op0.bit, 1) << bit_cast(bit_set, int_type(op0.bit)))));
    free_var('bit_set');

  bsf: &bsf |
    if __expr and op1.val == int(op1.bit, 0):
      zf.id = int1(1)
    else:
      zf.id = int1(0)
      op0.val = bsf(op1.val);

  bsr: &bsr |
    if __expr and op1.val == int(op1.bit, 0):
      zf.id = int1(1)
    else:
      zf.id = int1(0)
      op0.val = bsr(op1);

## Condition
# o           → of = 1
# no          → of = 0
# c / b / nae → cf = 1
# nc/ nb / ae → cf = 0
# e / z       → zf = 1
# ne / nz     → zf = 0
# s           → sf = 1
# ns          → sf = 0
# p / pe      → pf = 1
# np / po     → pf = 0
# be / na     → (cf or zf) = 1
# nbe / a     → (cf or zf) = 0
# l / nge     → (sf xor of) = 1
# nl / ge     → (sf xor of) = 0
# le / ng     → ((sf xor of) or zf) = 1
# nle / g     → ((sf xor of) or zf) = 0

  jmpo: &jmpo |
    if __expr and of.id == int1(1): program.id = op0.val;
  jmpno: &jmpno |
    if __expr and of.id == int1(0): program.id = op0.val;
  jmpc: &jmpc |
    if __expr and cf.id == int1(1): program.id = op0.val;
  jmpnc: &jmpnc |
    if __expr and cf.id == int1(0): program.id = op0.val;
  jmpz: &jmpz |
    if __expr and zf.id == int1(1): program.id = op0.val;
  jmpnz: &jmpnz |
    if __expr and zf.id == int1(0): program.id = op0.val;
  jmps: &jmps |
    if __expr and sf.id == int1(1): program.id = op0.val;
  jmpns: &jmpns |
    if __expr and sf.id == int1(0): program.id = op0.val;
  jmpp: &jmpp |
    if __expr and pf.id == int1(1): program.id = op0.val;
  jmpnp: &jmpnp |
    if __expr and pf.id == int1(0): program.id = op0.val;
  jmpbe: &jmpbe |
    if __expr and (cf.id | zf.id) != int1(0): program.id = op0.val;
  jmpa: &jmpa |
    if __expr and (cf.id | zf.id) == int1(0): program.id = op0.val;
  jmpl: &jmpl |
    if __expr and (sf.id ^ of.id) != int1(0): program.id = op0.val;
  jmpge: &jmpge |
    if __expr and (sf.id ^ of.id) == int1(0): program.id = op0.val;
  jmple: &jmple |
    if __expr and ((sf.id ^ of.id) | zf.id) != int1(0): program.id = op0.val;
  jmpg: &jmpg |
    if __expr and ((sf.id ^ of.id) | zf.id) == int1(0): program.id = op0.val;

  seto: &seto |
    if __expr and of.id == int1(1): op0.val = int8(1)
    else: op0.val = int8(0);
  setno: &setno |
    if __expr and of.id == int1(0): op0.val = int8(1)
    else: op0.val = int8(0);
  setc: &setc |
    if __expr and cf.id == int1(1): op0.val = int8(1)
    else: op0.val = int8(0);
  setnc: &setnc |
    if __expr and cf.id == int1(0): op0.val = int8(1)
    else: op0.val = int8(0);
  setz: &setz |
    if __expr and zf.id == int1(1): op0.val = int8(1)
    else: op0.val = int8(0);
  setnz: &setnz |
    if __expr and zf.id == int1(0): op0.val = int8(1)
    else: op0.val = int8(0);
  sets: &sets |
    if __expr and sf.id == int1(1): op0.val = int8(1)
    else: op0.val = int8(0);
  setns: &setns |
    if __expr and sf.id == int1(0): op0.val = int8(1)
    else: op0.val = int8(0);
  setp: &setp |
    if __expr and pf.id == int1(1): op0.val = int8(1)
    else: op0.val = int8(0);
  setnp: &setnp |
    if __expr and pf.id == int1(0): op0.val = int8(1)
    else: op0.val = int8(0);
  setbe: &setbe |
    if __expr and (cf.id | zf.id) != int1(0): op0.val = int8(1)
    else: op0.val = int8(0);
  seta: &seta |
    if __expr and (cf.id | zf.id) == int1(0): op0.val = int8(1)
    else: op0.val = int8(0);
  setl: &setl |
    if __expr and (sf.id ^ of.id) != int1(0): op0.val = int8(1)
    else: op0.val = int8(0);
  setge: &setge |
    if __expr and (sf.id ^ of.id) == int1(0): op0.val = int8(1)
    else: op0.val = int8(0);
  setle: &setle |
    if __expr and ((sf.id ^ of.id) | zf.id) != int1(0): op0.val = int8(1)
    else: op0.val = int8(0);
  setg: &setg |
    if __expr and ((sf.id ^ of.id) | zf.id) == int1(0): op0.val = int8(1)
    else: op0.val = int8(0);

  cmovo: &cmovo |
    if __expr and of.id == int1(1): op0.val = op1.val;
  cmovno: &cmovno |
    if __expr and of.id == int1(0): op0.val = op1.val;
  cmovc: &cmovc |
    if __expr and cf.id == int1(1): op0.val = op1.val;
  cmovnc: &cmovnc |
    if __expr and cf.id == int1(0): op0.val = op1.val;
  cmovz: &cmovz |
    if __expr and zf.id == int1(1): op0.val = op1.val;
  cmovnz: &cmovnz |
    if __expr and zf.id == int1(0): op0.val = op1.val;
  cmovs: &cmovs |
    if __expr and sf.id == int1(1): op0.val = op1.val;
  cmovns: &cmovns |
    if __expr and sf.id == int1(0): op0.val = op1.val;
  cmovp: &cmovp |
    if __expr and pf.id == int1(1): op0.val = op1.val;
  cmovnp: &cmovnp |
    if __expr and pf.id == int1(0): op0.val = op1.val;
  cmovbe: &cmovbe |
    if __expr and (cf.id | zf.id) != int1(0): op0.val = op1.val;
  cmova: &cmova |
    if __expr and (cf.id | zf.id) == int1(0): op0.val = op1.val;
  cmovl: &cmovl |
    if __expr and (sf.id ^ of.id) != int1(0): op0.val = op1.val;
  cmovge: &cmovge |
    if __expr and (sf.id ^ of.id) == int1(0): op0.val = op1.val;
  cmovle: &cmovle |
    if __expr and ((sf.id ^ of.id) | zf.id) != int1(0): op0.val = op1.val;
  cmovg: &cmovg |
    if __expr and ((sf.id ^ of.id) | zf.id) == int1(0): op0.val = op1.val;

## System

  sysenter: &sysenter |

  sysexit: &sysexit |

  syscall: &syscall |

  sysret: &sysret |

  # TODO(gg): support 64-bit and support global incremented variable for counter
  rdtsc: &rdtsc |
    eax.id = int32(0);
    edx.id = int32(0);

  # TODO:(gg): support EAX input value to return more "real" information
  cpuid: &cpuid |
    eax.id = int32(0x11111111);
    ecx.id = int32(0x22222222);
    edx.id = int32(0x33333333);
    ebx.id = int32(0x44444444);

## Instruction definition #####################################################

instruction:

  table:

    table_1:
      - opcode: 0x00
        mnemonic: add
        operand: [ Eb, Gb ]
        update_flags: [ cf, pf, af, zf, sf, of ]
        semantic: *add

      - opcode: 0x01
        mnemonic: add
        operand: [ Ev, Gv ]
        update_flags: [ cf, pf, af, zf, sf, of ]
        semantic: *add

      - opcode: 0x02
        mnemonic: add
        operand: [ Gb, Eb ]
        update_flags: [ cf, pf, af, zf, sf, of ]
        semantic: *add

      - opcode: 0x03
        mnemonic: add
        operand: [ Gv, Ev ]
        update_flags: [ cf, pf, af, zf, sf, of ]
        semantic: *add

      - opcode: 0x04
        mnemonic: add
        operand: [ AL, Ib ]
        update_flags: [ cf, pf, af, zf, sf, of ]
        semantic: *add

      - opcode: 0x05
        mnemonic: add
        operand: [ rAX, Iz ]
        update_flags: [ cf, pf, af, zf, sf, of ]
        semantic: *add

      - opcode: 0x06
        mnemonic: push
        operand: [ ES ]
        attr: [ nm64 ]
        semantic: *push

      - opcode: 0x07
        mnemonic: pop
        operand: [ ES ]
        attr: [ nm64 ]
        semantic: *pop

      - opcode: 0x08
        mnemonic: or
        operand: [ Eb, Gb ]
        update_flags: [ cf, pf, af, zf, sf, of ]
        clear_flags: [ af, of, cf ]
        semantic: *or

      - opcode: 0x09
        mnemonic: or
        operand: [ Ev, Gv ]
        update_flags: [ cf, pf, af, zf, sf, of ]
        clear_flags: [ af, of, cf ]
        semantic: *or

      - opcode: 0x0a
        mnemonic: or
        operand: [ Gb, Eb ]
        update_flags: [ cf, pf, af, zf, sf, of ]
        clear_flags: [ af, of, cf ]
        semantic: *or

      - opcode: 0x0b
        mnemonic: or
        operand: [ Gv, Ev ]
        update_flags: [ cf, pf, af, zf, sf, of ]
        clear_flags: [ af, of, cf ]
        semantic: *or

      - opcode: 0x0c
        mnemonic: or
        operand: [ AL, Ib ]
        update_flags: [ cf, pf, af, zf, sf, of ]
        clear_flags: [ af, of, cf ]
        semantic: *or

      - opcode: 0x0d
        mnemonic: or
        operand: [ rAX, Iz ]
        update_flags: [ cf, pf, af, zf, sf, of ]
        clear_flags: [ af, of, cf ]
        semantic: *or

      - opcode: 0x0e
        mnemonic: push
        operand: [ CS ]
        attr: [ nm64 ]
        semantic: *push

      - opcode: 0x0f
        reference: table_2
        cpu_model: ">= X86_Arch_80286"

      - opcode: 0x10
        mnemonic: adc
        operand: [ Eb, Gb ]
        test_flags: [ cf ]
        update_flags: [ cf, pf, af, zf, sf, of ]
        semantic: *adc

      - opcode: 0x11
        mnemonic: adc
        operand: [ Ev, Gv ]
        test_flags: [ cf ]
        update_flags: [ cf, pf, af, zf, sf, of ]
        semantic: *adc

      - opcode: 0x12
        mnemonic: adc
        operand: [ Gb, Eb ]
        test_flags: [ cf ]
        update_flags: [ cf, pf, af, zf, sf, of ]
        semantic: *adc

      - opcode: 0x13
        mnemonic: adc
        operand: [ Gv, Ev ]
        test_flags: [ cf ]
        update_flags: [ cf, pf, af, zf, sf, of ]
        semantic: *adc

      - opcode: 0x14
        mnemonic: adc
        operand: [ AL, Ib ]
        test_flags: [ cf ]
        update_flags: [ cf, pf, af, zf, sf, of ]
        semantic: *adc

      - opcode: 0x15
        mnemonic: adc
        operand: [ rAX, Iz ]
        test_flags: [ cf ]
        update_flags: [ cf, pf, af, zf, sf, of ]
        semantic: *adc

      - opcode: 0x16
        mnemonic: push
        operand: [ SS ]
        attr: [ nm64 ]
        semantic: *push

      - opcode: 0x17
        mnemonic: pop
        operand: [ SS ]
        attr: [ nm64 ]
        semantic: *pop

      - opcode: 0x18
        mnemonic: sbb
        operand: [ Eb, Gb ]
        test_flags: [ cf ]
        update_flags: [ cf, pf, af, zf, sf, of ]
        semantic: *sbb

      - opcode: 0x19
        mnemonic: sbb
        operand: [ Ev, Gv ]
        test_flags: [ cf ]
        update_flags: [ cf, pf, af, zf, sf, of ]
        semantic: *sbb

      - opcode: 0x1a
        mnemonic: sbb
        operand: [ Gb, Eb ]
        test_flags: [ cf ]
        update_flags: [ cf, pf, af, zf, sf, of ]
        semantic: *sbb

      - opcode: 0x1b
        mnemonic: sbb
        operand: [ Gv, Ev ]
        test_flags: [ cf ]
        update_flags: [ cf, pf, af, zf, sf, of ]
        semantic: *sbb

      - opcode: 0x1c
        mnemonic: sbb
        operand: [ AL, Ib ]
        test_flags: [ cf ]
        update_flags: [ cf, pf, af, zf, sf, of ]
        semantic: *sbb

      - opcode: 0x1d
        mnemonic: sbb
        operand: [ rAX, Iz ]
        test_flags: [ cf ]
        update_flags: [ cf, pf, af, zf, sf, of ]
        semantic: *sbb

      - opcode: 0x1e
        mnemonic: push
        operand: [ DS ]
        attr: [ nm64 ]
        semantic: *push

      - opcode: 0x1f
        mnemonic: pop
        operand: [ DS ]
        attr: [ nm64 ]
        semantic: *pop

      - opcode: 0x20
        mnemonic: and
        operand: [ Eb, Gb ]
        update_flags: [ cf, pf, af, zf, sf, of ]
        clear_flags: [ af, of, cf ]
        semantic: *and

      - opcode: 0x21
        mnemonic: and
        operand: [ Ev, Gv ]
        update_flags: [ cf, pf, af, zf, sf, of ]
        clear_flags: [ af, of, cf ]
        semantic: *and

      - opcode: 0x22
        mnemonic: and
        operand: [ Gb, Eb ]
        update_flags: [ cf, pf, af, zf, sf, of ]
        clear_flags: [ af, of, cf ]
        semantic: *and

      - opcode: 0x23
        mnemonic: and
        operand: [ Gv, Ev ]
        update_flags: [ cf, pf, af, zf, sf, of ]
        clear_flags: [ af, of, cf ]
        semantic: *and

      - opcode: 0x24
        mnemonic: and
        operand: [ AL, Ib ]
        update_flags: [ cf, pf, af, zf, sf, of ]
        clear_flags: [ af, of, cf ]
        semantic: *and

      - opcode: 0x25
        mnemonic: and
        operand: [ rAX, Iz ]
        update_flags: [ cf, pf, af, zf, sf, of ]
        clear_flags: [ af, of, cf ]
        semantic: *and

      - opcode: 0x26
        mnemonic: ES
        constraint: pfx1

      - opcode: 0x27
        mnemonic: daa
        test_flags: [ af, cf ]
        update_flags: [ cf, pf, af, zf, sf, of ]
        clear_flags: [ of ]
        attr: [ nm64 ]
        semantic: *daa

      - opcode: 0x28
        mnemonic: sub
        operand: [ Eb, Gb ]
        update_flags: [ cf, pf, af, zf, sf, of ]
        semantic: *sub

      - opcode: 0x29
        mnemonic: sub
        operand: [ Ev, Gv ]
        update_flags: [ cf, pf, af, zf, sf, of ]
        semantic: *sub

      - opcode: 0x2a
        mnemonic: sub
        operand: [ Gb, Eb ]
        update_flags: [ cf, pf, af, zf, sf, of ]
        semantic: *sub

      - opcode: 0x2b
        mnemonic: sub
        operand: [ Gv, Ev ]
        update_flags: [ cf, pf, af, zf, sf, of ]
        semantic: *sub

      - opcode: 0x2c
        mnemonic: sub
        operand: [ AL, Ib ]
        update_flags: [ cf, pf, af, zf, sf, of ]
        semantic: *sub

      - opcode: 0x2d
        mnemonic: sub
        operand: [ rAX, Iz ]
        update_flags: [ cf, pf, af, zf, sf, of ]
        semantic: *sub

      - opcode: 0x2e
        mnemonic: CS
        constraint: pfx1

        #sub_opcodes:
          #- mnemonic: CS
          #  constraint: pfx1

          #- mnemonic: HintNotTaken
          #  constraint: pfx1
          #  cpu_model: ">= X86_Arch_Pentium_4"

      - opcode: 0x2f
        mnemonic: das
        test_flags: [ af, cf ]
        update_flags: [ cf, pf, af, zf, sf, of ]
        clear_flags: [ of ]
        attr: [ nm64 ]
        semantic: *das

      - opcode: 0x30
        mnemonic: xor
        operand: [ Eb, Gb ]
        update_flags: [ cf, pf, af, zf, sf, of ]
        clear_flags: [ af, of, cf ]
        semantic: *xor

      - opcode: 0x31
        mnemonic: xor
        operand: [ Ev, Gv ]
        update_flags: [ cf, pf, af, zf, sf, of ]
        clear_flags: [ af, of, cf ]
        semantic: *xor

      - opcode: 0x32
        mnemonic: xor
        operand: [ Gb, Eb ]
        update_flags: [ cf, pf, af, zf, sf, of ]
        clear_flags: [ af, of, cf ]
        semantic: *xor

      - opcode: 0x33
        mnemonic: xor
        operand: [ Gv, Ev ]
        update_flags: [ cf, pf, af, zf, sf, of ]
        clear_flags: [ af, of, cf ]
        semantic: *xor

      - opcode: 0x34
        mnemonic: xor
        operand: [ AL, Ib ]
        update_flags: [ cf, pf, af, zf, sf, of ]
        clear_flags: [ af, of, cf ]
        semantic: *xor

      - opcode: 0x35
        mnemonic: xor
        operand: [ rAX, Iz ]
        update_flags: [ cf, pf, af, zf, sf, of ]
        clear_flags: [ af, of, cf ]
        semantic: *xor

      - opcode: 0x36
        mnemonic: SS
        constraint: pfx1

      - opcode: 0x37
        mnemonic: aaa
        test_flags: [ af, cf ]
        update_flags: [ cf, pf, af, zf, sf, of ]
        clear_flags: [ of ]
        semantic: *aaa

      - opcode: 0x38
        mnemonic: cmp
        operand: [ Eb, Gb ]
        update_flags: [ cf, pf, af, zf, sf, of ]
        semantic: *cmp

      - opcode: 0x39
        mnemonic: cmp
        operand: [ Ev, Gv ]
        update_flags: [ cf, pf, af, zf, sf, of ]
        semantic: *cmp

      - opcode: 0x3a
        mnemonic: cmp
        operand: [ Gb, Eb ]
        update_flags: [ cf, pf, af, zf, sf, of ]
        semantic: *cmp

      - opcode: 0x3b
        mnemonic: cmp
        operand: [ Gv, Ev ]
        update_flags: [ cf, pf, af, zf, sf, of ]
        semantic: *cmp

      - opcode: 0x3c
        mnemonic: cmp
        operand: [ AL, Ib ]
        update_flags: [ cf, pf, af, zf, sf, of ]
        semantic: *cmp

      - opcode: 0x3d
        mnemonic: cmp
        operand: [ rAX, Iz ]
        update_flags: [ cf, pf, af, zf, sf, of ]
        semantic: *cmp

      - opcode: 0x3e
        mnemonic: DS
        constraint: pfx1

        #sub_opcodes:
          #- mnemonic: DS
          #  constraint: pfx1

          #- mnemonic: HintTaken
          #  constraint: pfx1
          #  cpu_model: ">= X86_Arch_Pentium_4"

      - opcode: 0x3f
        mnemonic: aas
        test_flags: [ af ]
        update_flags: [ cf, pf, af, zf, sf, of ]
        clear_flags: [ of, sf, zf, pf ]
        attr: [ nm64 ]
        semantic: *aas

      - opcode: 0x40
        sub_opcodes:
          - mnemonic: inc
            operand: [ eAX ]
            update_flags: [ pf, af, zf, sf, of ]
            semantic: *inc

          - mnemonic: REX
            constraint: pfx1
            attr: [ m64 ]

      - opcode: 0x41
        sub_opcodes:
          - mnemonic: inc
            operand: [ eCX ]
            update_flags: [ pf, af, zf, sf, of ]
            semantic: *inc

          - mnemonic: REX_b
            constraint: pfx1
            attr: [ m64 ]

      - opcode: 0x42
        sub_opcodes:
          - mnemonic: inc
            operand: [ eDX ]
            update_flags: [ pf, af, zf, sf, of ]
            semantic: *inc

          - mnemonic: REX_x
            constraint: pfx1
            attr: [ m64 ]

      - opcode: 0x43
        sub_opcodes:
          - mnemonic: inc
            operand: [ eBX ]
            update_flags: [ pf, af, zf, sf, of ]
            semantic: *inc

          - mnemonic: REX_xb
            constraint: pfx1
            attr: [ m64 ]

      - opcode: 0x44
        sub_opcodes:
          - mnemonic: inc
            operand: [ eSP ]
            update_flags: [ pf, af, zf, sf, of ]
            semantic: *inc

          - mnemonic: REX_r
            constraint: pfx1
            attr: [ m64 ]

      - opcode: 0x45
        sub_opcodes:
          - mnemonic: inc
            operand: [ eBP ]
            update_flags: [ pf, af, zf, sf, of ]
            semantic: *inc

          - mnemonic: REX_rb
            constraint: pfx1
            attr: [ m64 ]

      - opcode: 0x46
        sub_opcodes:
          - mnemonic: inc
            operand: [ eSI ]
            update_flags: [ pf, af, zf, sf, of ]
            semantic: *inc

          - mnemonic: REX_rx
            constraint: pfx1
            attr: [ m64 ]

      - opcode: 0x47
        sub_opcodes:
          - mnemonic: inc
            operand: [ eDI ]
            update_flags: [ pf, af, zf, sf, of ]
            semantic: *inc

          - mnemonic: REX_rxb
            constraint: pfx1
            attr: [ m64 ]

      - opcode: 0x48
        sub_opcodes:
          - mnemonic: dec
            operand: [ eAX ]
            update_flags: [ pf, af, zf, sf, of ]
            semantic: *dec

          - mnemonic: REX_w
            constraint: pfx1
            attr: [ m64 ]

      - opcode: 0x49
        sub_opcodes:
          - mnemonic: dec
            operand: [ eCX ]
            update_flags: [ pf, af, zf, sf, of ]
            semantic: *dec

          - mnemonic: REX_wb
            constraint: pfx1
            attr: [ m64 ]

      - opcode: 0x4a
        sub_opcodes:
          - mnemonic: dec
            operand: [ eDX ]
            update_flags: [ pf, af, zf, sf, of ]
            semantic: *dec

          - mnemonic: REX_wx
            constraint: pfx1
            attr: [ m64 ]

      - opcode: 0x4b
        sub_opcodes:
          - mnemonic: dec
            operand: [ eBX ]
            update_flags: [ pf, af, zf, sf, of ]
            semantic: *dec

          - mnemonic: REX_wxb
            constraint: pfx1
            attr: [ m64 ]

      - opcode: 0x4c
        sub_opcodes:
          - mnemonic: dec
            operand: [ eSP ]
            update_flags: [ pf, af, zf, sf, of ]
            semantic: *dec

          - mnemonic: REX_wr
            constraint: pfx1
            attr: [ m64 ]

      - opcode: 0x4d
        sub_opcodes:
          - mnemonic: dec
            operand: [ eBP ]
            update_flags: [ pf, af, zf, sf, of ]
            semantic: *dec

          - mnemonic: REX_wrb
            constraint: pfx1
            attr: [ m64 ]

      - opcode: 0x4e
        sub_opcodes:
          - mnemonic: dec
            operand: [ eSI ]
            update_flags: [ pf, af, zf, sf, of ]
            semantic: *dec

          - mnemonic: REX_wrx
            constraint: pfx1
            attr: [ m64 ]

      - opcode: 0x4f
        sub_opcodes:
          - mnemonic: dec
            operand: [ eDI ]
            update_flags: [ pf, af, zf, sf, of ]
            semantic: *dec

          - mnemonic: REX_wrxb
            constraint: pfx1
            attr: [ m64 ]

      - opcode: 0x50
        sub_opcodes:
          - mnemonic: push
            operand: [ d64_rAX ]
            constraint: d64
            semantic: *push

          - mnemonic: push
            operand: [ d64_r8 ]
            attr: [ rexb, m64 ]
            semantic: *push

      - opcode: 0x51
        sub_opcodes:
          - mnemonic: push
            operand: [ d64_rCX ]
            constraint: d64
            semantic: *push

          - mnemonic: push
            operand: [ d64_r9 ]
            attr: [ rexb, m64 ]
            semantic: *push

      - opcode: 0x52
        sub_opcodes:
          - mnemonic: push
            operand: [ d64_rDX ]
            constraint: d64
            semantic: *push

          - mnemonic: push
            operand: [ d64_r10 ]
            attr: [ rexb, m64 ]
            semantic: *push

      - opcode: 0x53
        sub_opcodes:
          - mnemonic: push
            operand: [ d64_rBX ]
            constraint: d64
            semantic: *push

          - mnemonic: push
            operand: [ d64_r11 ]
            attr: [ rexb, m64 ]
            semantic: *push

      - opcode: 0x54
        sub_opcodes:
          - mnemonic: push
            operand: [ d64_rSP ]
            constraint: d64
            semantic: *push

          - mnemonic: push
            operand: [ d64_r12 ]
            attr: [ rexb, m64 ]
            semantic: *push

      - opcode: 0x55
        sub_opcodes:
          - mnemonic: push
            operand: [ d64_rBP ]
            constraint: d64
            semantic: *push

          - mnemonic: push
            operand: [ d64_r13 ]
            attr: [ rexb, m64 ]
            constraint: d64
            semantic: *push

      - opcode: 0x56
        sub_opcodes:
          - mnemonic: push
            operand: [ d64_rSI ]
            constraint: d64
            semantic: *push

          - mnemonic: push
            operand: [ d64_r14 ]
            attr: [ rexb, m64 ]
            constraint: d64
            semantic: *push

      - opcode: 0x57
        sub_opcodes:
          - mnemonic: push
            operand: [ d64_rDI ]
            constraint: d64
            semantic: *push

          - mnemonic: push
            operand: [ d64_r15 ]
            attr: [ rexb, m64 ]
            constraint: d64
            semantic: *push

      - opcode: 0x58
        sub_opcodes:
          - mnemonic: pop
            operand: [ d64_rAX ]
            constraint: d64
            semantic: *pop

          - mnemonic: pop
            operand: [ d64_r8 ]
            attr: [ rexb, m64 ]
            constraint: d64
            semantic: *pop

      - opcode: 0x59
        sub_opcodes:
          - mnemonic: pop
            operand: [ d64_rCX ]
            constraint: d64
            semantic: *pop

          - mnemonic: pop
            operand: [ d64_r9 ]
            attr: [ rexb, m64 ]
            constraint: d64
            semantic: *pop

      - opcode: 0x5a
        sub_opcodes:
          - mnemonic: pop
            operand: [ d64_rDX ]
            constraint: d64
            semantic: *pop

          - mnemonic: pop
            operand: [ d64_r10 ]
            attr: [ rexb, m64 ]
            constraint: d64
            semantic: *pop

      - opcode: 0x5b
        sub_opcodes:
          - mnemonic: pop
            operand: [ d64_rBX ]
            constraint: d64
            semantic: *pop

          - mnemonic: pop
            operand: [ d64_r11 ]
            attr: [ rexb, m64 ]
            constraint: d64
            semantic: *pop

      - opcode: 0x5c
        sub_opcodes:
          - mnemonic: pop
            operand: [ d64_rSP ]
            constraint: d64
            semantic: *pop

          - mnemonic: pop
            operand: [ d64_r12 ]
            attr: [ rexb, m64 ]
            constraint: d64
            semantic: *pop

      - opcode: 0x5d
        sub_opcodes:
          - mnemonic: pop
            operand: [ d64_rBP ]
            constraint: d64
            semantic: *pop

          - mnemonic: pop
            operand: [ d64_r13 ]
            attr: [ rexb, m64 ]
            constraint: d64
            semantic: *pop

      - opcode: 0x5e
        sub_opcodes:
          - mnemonic: pop
            operand: [ d64_rSI ]
            constraint: d64
            semantic: *pop

          - mnemonic: pop
            operand: [ d64_r14 ]
            attr: [ rexb, m64 ]
            constraint: d64
            semantic: *pop

      - opcode: 0x5f
        sub_opcodes:
          - mnemonic: pop
            operand: [ d64_rDI ]
            constraint: d64
            semantic: *pop

          - mnemonic: pop
            operand: [ d64_r15 ]
            attr: [ rexb, m64 ]
            constraint: d64
            semantic: *pop

      - opcode: 0x60
        sub_opcodes:
          - mnemonic: pusha
            attr: [ nm64 ]
            cpu_model: ">= X86_Arch_80186"
            semantic: *pusha

          - mnemonic: pushad
            attr: [ nm64, na16 ]
            cpu_model: ">= X86_Arch_80186"
            semantic: *pushad

      - opcode: 0x61
        sub_opcodes:
          - mnemonic: popa
            attr: [ nm64 ]
            cpu_model: ">= X86_Arch_80186"
            semantic: *popa

          - mnemonic: popad
            attr: [ nm64, na16 ]
            cpu_model: ">= X86_Arch_80186"
            semantic: *popad

      - opcode: 0x62
        mnemonic: bound
        operand: [ Gv, Ma ]
        update_flags: [ if ]
        attr: [ nm64 ]
        cpu_model: ">= X86_Arch_80186"

      - opcode: 0x63
        sub_opcodes:
          - mnemonic: arpl
            operand: [ Ew, Gw ]
            update_flags: [ zf ]
            attr: [ nm64 ]
            cpu_model: "== X86_Arch_80286"

          - mnemonic: movsx
            operand: [ Gv, Ed ]
            cpu_model: ">= X86_Arch_80386"
            semantic: *movsx

      - opcode: 0x64
        mnemonic: FS
        constraint: pfx1
        cpu_model: ">= X86_Arch_80386"

        #sub_opcodes:
          #- mnemonic: FS
          #  constraint: pfx1
          #  cpu_model: ">= X86_Arch_80386"

          #- mnemonic: HintAltTaken
          #  constraint: pfx1
          #  cpu_model: ">= X86_Arch_Pentium_4"

      - opcode: 0x65
        mnemonic: GS
        constraint: pfx1
        cpu_model: ">= X86_Arch_80386"

      - opcode: 0x66
        mnemonic: OpSize
        constraint: pfx1
        cpu_model: ">= X86_Arch_80386"

      - opcode: 0x67
        mnemonic: AdSize
        constraint: pfx1
        cpu_model: ">= X86_Arch_80386"

      - opcode: 0x68
        mnemonic: push
        operand: [ Iz ]
        cpu_model: ">= X86_Arch_80186"
        constraint: d64
        semantic: *push

      - opcode: 0x69
        mnemonic: imul
        operand: [ Gv, Ev, Iz ]
        update_flags: [ of, cf ]
        clear_flags: [ sf, zf, af, pf ]
        cpu_model: ">= X86_Arch_80186"
        semantic: *imul3

      - opcode: 0x6a
        mnemonic: push
        operand: [ Ib ]
        cpu_model: ">= X86_Arch_80186"
        constraint: d64
        semantic: *push

      - opcode: 0x6b
        mnemonic: imul
        operand: [ Gv, Ev, Ibs ]
        update_flags: [ of, cf ]
        clear_flags: [ sf, zf, af, pf ]
        cpu_model: ">= X86_Arch_80186"
        semantic: *imul3

      - opcode: 0x6c
        mnemonic: ins
        operand: [ Yb, DX ]
        test_flags: [ df ]
        cpu_model: ">= X86_Arch_80186"

      - opcode: 0x6d
        mnemonic: ins
        operand: [ Yz, DX ]
        test_flags: [ df ]
        cpu_model: ">= X86_Arch_80186"

      - opcode: 0x6e
        mnemonic: outs
        operand: [ DX, Xb ]
        test_flags: [ df ]
        cpu_model: ">= X86_Arch_80186"

      - opcode: 0x6f
        mnemonic: outs
        operand: [ DX, Xz ]
        test_flags: [ df ]
        cpu_model: ">= X86_Arch_80186"

      - opcode: 0x70
        mnemonic: jo
        operand: [ Jb ]
        operation_type: ['jmp', 'cond']
        test_flags: [ of ]
        semantic: *jmpo

      - opcode: 0x71
        mnemonic: jno
        operand: [ Jb ]
        operation_type: ['jmp', 'cond']
        test_flags: [ of ]
        semantic: *jmpno

      - opcode: 0x72
        mnemonic: jb
        operand: [ Jb ]
        operation_type: ['jmp', 'cond']
        test_flags: [ cf ]
        semantic: *jmpc

      - opcode: 0x73
        mnemonic: jnb
        operand: [ Jb ]
        operation_type: ['jmp', 'cond']
        test_flags: [ cf ]
        semantic: *jmpnc

      - opcode: 0x74
        mnemonic: jz
        operand: [ Jb ]
        operation_type: ['jmp', 'cond']
        test_flags: [ zf ]
        semantic: *jmpz

      - opcode: 0x75
        mnemonic: jnz
        operand: [ Jb ]
        operation_type: ['jmp', 'cond']
        test_flags: [ zf ]
        semantic: *jmpnz

      - opcode: 0x76
        mnemonic: jbe
        operand: [ Jb ]
        operation_type: ['jmp', 'cond']
        test_flags: [ cf, zf ]
        semantic: *jmpbe

      - opcode: 0x77
        mnemonic: jnbe
        operand: [ Jb ]
        operation_type: ['jmp', 'cond']
        test_flags: [ cf, zf ]
        semantic: *jmpa

      - opcode: 0x78
        mnemonic: js
        operand: [ Jb ]
        operation_type: ['jmp', 'cond']
        test_flags: [ sf ]
        semantic: *jmps

      - opcode: 0x79
        mnemonic: jns
        operand: [ Jb ]
        operation_type: ['jmp', 'cond']
        test_flags: [ sf ]
        semantic: *jmpns

      - opcode: 0x7a
        mnemonic: jp
        operand: [ Jb ]
        operation_type: ['jmp', 'cond']
        test_flags: [ pf ]
        semantic: *jmpp

      - opcode: 0x7b
        mnemonic: jnp
        operand: [ Jb ]
        operation_type: ['jmp', 'cond']
        test_flags: [ pf ]
        semantic: *jmpnp

      - opcode: 0x7c
        mnemonic: jl
        operand: [ Jb ]
        operation_type: ['jmp', 'cond']
        test_flags: [ of, sf ]
        semantic: *jmpl

      - opcode: 0x7d
        mnemonic: jnl
        operand: [ Jb ]
        operation_type: ['jmp', 'cond']
        test_flags: [ of, sf ]
        semantic: *jmpge

      - opcode: 0x7e
        mnemonic: jle
        operand: [ Jb ]
        operation_type: ['jmp', 'cond']
        test_flags: [ of, sf, zf ]
        semantic: *jmple

      - opcode: 0x7f
        mnemonic: jnle
        operand: [ Jb ]
        operation_type: ['jmp', 'cond']
        test_flags: [ of, sf, zf ]
        semantic: *jmpg

      - opcode: 0x80
        operand: [ Eb, Ib ]
        reference: group_01

      - opcode: 0x81
        operand: [ Ev, Iz ]
        reference: group_01

      - opcode: 0x82
        operand: [ Eb, Ib ]
        reference: group_01
        attr: [ nm64 ]

      - opcode: 0x83
        operand: [ Ev, Ibs ]
        reference: group_01

      - opcode: 0x84
        mnemonic: test
        operand: [ Eb, Gb ]
        update_flags: [ of, sf, zf, pf, cf ]
        clear_flags: [ af ]
        semantic: *test

      - opcode: 0x85
        mnemonic: test
        operand: [ Ev, Gv ]
        update_flags: [ of, sf, zf, pf, cf ]
        clear_flags: [ af ]
        semantic: *test

      - opcode: 0x86
        mnemonic: xchg
        operand: [ Eb, Gb ]
        semantic: *xchg

      - opcode: 0x87
        mnemonic: xchg
        operand: [ Ev, Gv ]
        semantic: *xchg

      - opcode: 0x88
        mnemonic: mov
        operand: [ Eb, Gb ]
        semantic: *mov

      - opcode: 0x89
        mnemonic: mov
        operand: [ Ev, Gv ]
        semantic: *mov

      - opcode: 0x8a
        mnemonic: mov
        operand: [ Gb, Eb ]
        semantic: *mov

      - opcode: 0x8b
        mnemonic: mov
        operand: [ Gv, Ev ]
        semantic: *mov

      - opcode: 0x8c
        mnemonic: mov
        operand: [ Ew, Sw ]
        semantic: *mov

      - opcode: 0x8d
        mnemonic: lea
        operand: [ Gv, M ]
        semantic: [ op0.val = op1.addr ]

      - opcode: 0x8e
        mnemonic: mov
        operand: [ Sw, Ew ]
        semantic: *mov

      - opcode: 0x8f
        reference: group_1A

      - opcode: 0x90
        sub_opcodes:
          - mnemonic: nop
            semantic: *nop

          - mnemonic: xchg
            operand: [ r8, rAX ]
            attr: [ rexb ]
            semantic: *xchg

      - opcode: 0x91
        sub_opcodes:
          - mnemonic: xchg
            operand: [ rCX, rAX ]
            semantic: *xchg

          - mnemonic: xchg
            operand: [ r9, rAX ]
            attr: [ rexb ]
            semantic: *xchg

      - opcode: 0x92
        sub_opcodes:
          - mnemonic: xchg
            operand: [ rDX, rAX ]
            semantic: *xchg

          - mnemonic: xchg
            operand: [ r10, rAX ]
            attr: [ rexb ]
            semantic: *xchg

      - opcode: 0x93
        sub_opcodes:
          - mnemonic: xchg
            operand: [ rBX, rAX ]
            semantic: *xchg

          - mnemonic: xchg
            operand: [ r11, rAX ]
            attr: [ rexb ]
            semantic: *xchg

      - opcode: 0x94
        sub_opcodes:
          - mnemonic: xchg
            operand: [ rSP, rAX ]
            semantic: *xchg

          - mnemonic: xchg
            operand: [ r12, rAX ]
            attr: [ rexb ]
            semantic: *xchg

      - opcode: 0x95
        sub_opcodes:
          - mnemonic: xchg
            operand: [ rBP, rAX ]
            semantic: *xchg

          - mnemonic: xchg
            operand: [ r13, rAX ]
            attr: [ rexb ]
            semantic: *xchg

      - opcode: 0x96
        sub_opcodes:
          - mnemonic: xchg
            operand: [ rSI, rAX ]
            semantic: *xchg

          - mnemonic: xchg
            operand: [ r14, rAX ]
            attr: [ rexb ]
            semantic: *xchg

      - opcode: 0x97
        sub_opcodes:
          - mnemonic: xchg
            operand: [ rDI, rAX ]
            semantic: *xchg

          - mnemonic: xchg
            operand: [ r15, rAX ]
            attr: [ rexb ]
            semantic: *xchg

      # TODO(gg): Recode convert instructions
      - opcode: 0x98
        sub_opcodes:
          - mnemonic: cwde
            cpu_model: ">= X86_Arch_80386"
            semantic: *cwde

          - mnemonic: cbw
            cpu_model: ">= X86_Arch_8088"
            attr: [ op_size ]
            semantic: *cbw

          - mnemonic: cdqe
            attr: [ rexw ]
            semantic: *cdqe

      - opcode: 0x99
        sub_opcodes:
          - mnemonic: cdq
            cpu_model: ">= X86_Arch_80386"
            semantic: [ "if __expr and (eax.id & int32(0x80000000)) == int32(0x80000000): edx.id = int32(0xffffffff)\nelse: edx.id = int32(0)" ]

          - mnemonic: cwd
            cpu_model: ">= X86_Arch_8088"
            attr: [ op_size ]
            semantic: [ "if __expr and (ax.id & int16(0x8000)) == int16(0x8000): dx.id = int16(0xffff)\nelse: dx.id = int16(0)" ]

          - mnemonic: cqo
            attr: [ rexw ]
            semantic: [ "if __expr and (rax.id & int64(0x8000000000000000)) == int64(0x8000000000000000): rdx.id = int64(0xffffffffffffffff)\nelse: rdx.id = int64(0)" ]

      - opcode: 0x9a
        mnemonic: call
        operand: [ Ap ]
        operation_type: ['call']
        attr: [ nm64 ]

      - opcode: 0x9b
        mnemonic: fwait

      - opcode: 0x9c
        mnemonic: pushf
        #operand: [ Fv ]
        constraint: d64
        semantic: *pushf

      - opcode: 0x9d
        mnemonic: popf
        #operand: [ Fv ]
        constraint: d64
        semantic: *popf

      - opcode: 0x9e
        mnemonic: sahf
        update_flags: [ sf, zf, af, pf, cf ]

      - opcode: 0x9f
        mnemonic: lahf
        test_flags: [ sf, zf, af, pf, cf ]
        semantic: *lahf

      - opcode: 0xa0
        mnemonic: mov
        operand: [ AL, Ob ]
        semantic: *mov

      - opcode: 0xa1
        mnemonic: mov
        operand: [ rAX, Ov ]
        semantic: *mov

      - opcode: 0xa2
        mnemonic: mov
        operand: [ Ob, AL ]
        semantic: *mov

      - opcode: 0xa3
        mnemonic: mov
        operand: [ Ov, rAX ]
        semantic: *mov

      - opcode: 0xa4
        mnemonic: movs
        operand: [ Xb, Yb ] # Inversion needed here!
        test_flags: [ df ]
        semantic: *movs

      - opcode: 0xa5
        mnemonic: movs
        operand: [ Xv, Yv ] # Inversion needed here!
        test_flags: [ df ]
        semantic: *movs

      - opcode: 0xa6
        mnemonic: cmps
        operand: [ Xb, Yb ] # Inversion needed here!
        test_flags: [ df ]
        update_flags: [ of, sf, zf, af, pf, cf ]
        semantic: *cmps

      - opcode: 0xa7
        mnemonic: cmps
        operand: [ Xv, Yv ] # Inversion needed here!
        test_flags: [ df ]
        update_flags: [ of, sf, zf, af, pf, cf ]
        semantic: *cmps

      - opcode: 0xa8
        mnemonic: test
        operand: [ AL, Ib ]
        update_flags: [ of, sf, zf, pf, cf ]
        clear_flags: [ af ]
        semantic: *test

      - opcode: 0xa9
        mnemonic: test
        operand: [ rAX, Iz ]
        update_flags: [ of, sf, zf, pf, cf ]
        clear_flags: [ af ]
        semantic: *test

      - opcode: 0xaa
        mnemonic: stos
        operand: [ AL, Yb ] # Inversion needed here!
        test_flags: [ df ]
        semantic: *stos

      - opcode: 0xab
        mnemonic: stos
        operand: [ rAX, Yv ] # Inversion needed here!
        test_flags: [ df ]
        semantic: *stos

      - opcode: 0xac
        mnemonic: lods
        operand: [ AL, Xb ]
        test_flags: [ df ]
        semantic: *lods

      - opcode: 0xad
        mnemonic: lods
        operand: [ rAX, Xv ]
        test_flags: [ df ]
        semantic: *lods

      - opcode: 0xae
        mnemonic: scas
        operand: [ AL, Yb ] # Inversion needed here!
        test_flags: [ df ]
        update_flags: [ of, sf, zf, af, pf, cf ]
        semantic: *scas

      - opcode: 0xaf
        mnemonic: scas
        operand: [ rAX, Yv ] # Inversion needed here!
        test_flags: [ df ]
        update_flags: [ of, sf, zf, af, pf, cf ]
        semantic: *scas

      - opcode: 0xb0
        sub_opcodes:
          - mnemonic: mov
            operand: [ AL, Ib ]
            semantic: *mov

          - mnemonic: mov
            operand: [ r8b, Ib ]
            attr: [ rexb ]
            semantic: *mov

      - opcode: 0xb1
        sub_opcodes:
          - mnemonic: mov
            operand: [ CL, Ib ]
            semantic: *mov

          - mnemonic: mov
            operand: [ r9b, Ib ]
            attr: [ rexb ]
            semantic: *mov

      - opcode: 0xb2
        sub_opcodes:
          - mnemonic: mov
            operand: [ DL, Ib ]
            semantic: *mov

          - mnemonic: mov
            operand: [ r10b, Ib ]
            attr: [ rexb ]
            semantic: *mov

      - opcode: 0xb3
        sub_opcodes:
          - mnemonic: mov
            operand: [ BL, Ib ]
            semantic: *mov

          - mnemonic: mov
            operand: [ r11b, Ib ]
            attr: [ rexb ]
            semantic: *mov

      - opcode: 0xb4
        sub_opcodes:
          - mnemonic: mov
            operand: [ AH, Ib ]
            semantic: *mov

          - mnemonic: mov
            operand: [ r12b, Ib ]
            attr: [ rexb ]
            semantic: *mov

      - opcode: 0xb5
        sub_opcodes:
          - mnemonic: mov
            operand: [ CH, Ib ]
            semantic: *mov

          - mnemonic: mov
            operand: [ r13b, Ib ]
            attr: [ rexb ]
            semantic: *mov

      - opcode: 0xb6
        sub_opcodes:
          - mnemonic: mov
            operand: [ DH, Ib ]
            semantic: *mov

          - mnemonic: mov
            operand: [ r14b, Ib ]
            attr: [ rexb ]
            semantic: *mov

      - opcode: 0xb7
        sub_opcodes:
          - mnemonic: mov
            operand: [ BH, Ib ]
            semantic: *mov

          - mnemonic: mov
            operand: [ r15b, Ib ]
            attr: [ rexb ]
            semantic: *mov

      - opcode: 0xb8
        sub_opcodes:
          - mnemonic: mov
            operand: [ rAX, Iv ]
            semantic: *mov

          - mnemonic: mov
            operand: [ r8, Iv ]
            attr: [ rexb ]
            semantic: *mov

      - opcode: 0xb9
        sub_opcodes:
          - mnemonic: mov
            operand: [ rCX, Iv ]
            semantic: *mov

          - mnemonic: mov
            operand: [ r9, Iv ]
            attr: [ rexb ]
            semantic: *mov

      - opcode: 0xba
        sub_opcodes:
          - mnemonic: mov
            operand: [ rDX, Iv ]
            semantic: *mov

          - mnemonic: mov
            operand: [ r10, Iv ]
            attr: [ rexb ]
            semantic: *mov

      - opcode: 0xbb
        sub_opcodes:
          - mnemonic: mov
            operand: [ rBX, Iv ]
            semantic: *mov

          - mnemonic: mov
            operand: [ r11, Iv ]
            attr: [ rexb ]
            semantic: *mov

      - opcode: 0xbc
        sub_opcodes:
          - mnemonic: mov
            operand: [ rSP, Iv ]
            semantic: *mov

          - mnemonic: mov
            operand: [ r12, Iv ]
            attr: [ rexb ]
            semantic: *mov

      - opcode: 0xbd
        sub_opcodes:
          - mnemonic: mov
            operand: [ rBP, Iv ]
            semantic: *mov

          - mnemonic: mov
            operand: [ r13, Iv ]
            attr: [ rexb ]
            semantic: *mov

      - opcode: 0xbe
        sub_opcodes:
          - mnemonic: mov
            operand: [ rSI, Iv ]
            semantic: *mov

          - mnemonic: mov
            operand: [ r14, Iv ]
            attr: [ rexb ]
            semantic: *mov

      - opcode: 0xbf
        sub_opcodes:
          - mnemonic: mov
            operand: [ rDI, Iv ]
            semantic: *mov

          - mnemonic: mov
            operand: [ r15, Iv ]
            attr: [ rexb ]
            semantic: *mov

      - opcode: 0xc0
        operand: [ Eb, Ib ]
        reference: group_02

      - opcode: 0xc1
        operand: [ Ev, Ib ]
        reference: group_02

      - opcode: 0xc2
        mnemonic: retn
        operand: [ Iw ]
        operation_type: ['ret']
        semantic: *retn

      - opcode: 0xc3
        mnemonic: ret
        operation_type: ['ret']
        semantic: *ret

      - opcode: 0xc4
        sub_opcodes:
          - mnemonic: les
            operand: [ Gv, Mp ]

          - mnemonic: VEX3
            constraint: pfx3
            attr: [ m64 ]

      - opcode: 0xc5
        sub_opcodes:
          - mnemonic: lds
            operand: [ Gv, Mp ]

          - mnemonic: VEX2
            constraint: pfx2
            attr: [ m64 ]

      - opcode: 0xc6
        operand: [ Eb, Ib ]
        reference: group_11

      - opcode: 0xc7
        operand: [ Ev, Iz ]
        reference: group_11

      - opcode: 0xc8
        mnemonic: enter
        operand: [ Iw, Ib ]
        cpu_model: ">= X86_Arch_80186"
        constraint: d64

      - opcode: 0xc9
        mnemonic: leave
        cpu_model: ">= X86_Arch_80186"
        constraint: d64
        semantic: [ stack.id = frame.id, frame.id = stack.mem, stack.id += stack.size ]

      - opcode: 0xca
        mnemonic: retf
        operand: [ Iw ]
        operation_type: ['ret']

      - opcode: 0xcb
        mnemonic: retf
        operation_type: ['ret']

      - opcode: 0xcc
        mnemonic: int
        operand: [ "3" ]

      - opcode: 0xcd
        mnemonic: int
        operand: [ Ib ]

      - opcode: 0xce
        mnemonic: into
        attr: [ nm64 ]

      - opcode: 0xcf
        mnemonic: iret
        operation_type: ['ret']

      - opcode: 0xd0
        operand: [ Eb, "1" ]
        reference: group_02

      - opcode: 0xd1
        operand: [ Ev, "1" ]
        reference: group_02

      - opcode: 0xd2
        operand: [ Eb, CL ]
        reference: group_02

      - opcode: 0xd3
        operand: [ Ev, CL ]
        reference: group_02

      - opcode: 0xd4
        mnemonic: aam
        operand: [ Ib ]
        update_flags: [ sf, zf, pf ]
        clear_flags: [ of, af, cf ]
        attr: [ nm64 ]
        semantic: *aam

      - opcode: 0xd5
        mnemonic: aad
        operand: [ Ib ]
        update_flags: [ sf, zf, pf ]
        clear_flags: [ of, af, cf ]
        attr: [ nm64 ]
        semantic: *aad

      - opcode: 0xd6
        mnemonic: salc
        test_flags: [ cf ]
        attr: [ nm64 ]

      - opcode: 0xd7
        mnemonic: xlat

      - opcode: 0xd8
        reference: fpu0

      - opcode: 0xd9
        reference: fpu1

      - opcode: 0xda
        reference: fpu2

      - opcode: 0xdb
        reference: fpu3

      - opcode: 0xdc
        reference: fpu4

      - opcode: 0xdd
        reference: fpu5

      - opcode: 0xde
        reference: fpu6

      - opcode: 0xdf
        reference: fpu7

      - opcode: 0xe0
        mnemonic: loopnz
        operand: [ Jb ]
        operation_type: ['jmp', 'cond']
        test_flags: [ zf ]
        semantic: *loopnz

      - opcode: 0xe1
        mnemonic: loopz
        operand: [ Jb ]
        operation_type: ['jmp', 'cond']
        test_flags: [ zf ]
        semantic: *loopz

      - opcode: 0xe2
        mnemonic: loop
        operand: [ Jb ]
        operation_type: ['jmp', 'cond']
        semantic: *loop

      - opcode: 0xe3
        sub_opcodes:
          - mnemonic: jcxz
            operand: [ Jb ]
            operation_type: ['jmp', 'cond']
            semantic: *jcntz

          - mnemonic: jecxz
            operand: [ Jb ]
            operation_type: ['jmp', 'cond']
            attr: [ na16 ]
            semantic: *jcntz

          - mnemonic: jrcxz
            operand: [ Jb ]
            operation_type: ['jmp', 'cond']
            attr: [ a64 ]
            semantic: *jcntz

      - opcode: 0xe4
        mnemonic: in
        operand: [ AL, Ib ]

      - opcode: 0xe5
        mnemonic: in
        operand: [ eAX, Ib ]

      - opcode: 0xe6
        mnemonic: out
        operand: [ Ib, AL ]

      - opcode: 0xe7
        mnemonic: out
        operand: [ Ib, eAX ]

      - opcode: 0xe8
        mnemonic: call
        operand: [ Jz ]
        operation_type: ['call']
        semantic: *call

      - opcode: 0xe9
        mnemonic: jmp
        operand: [ Jz ]
        operation_type: ['jmp']
        semantic: *jmp

      - opcode: 0xea
        mnemonic: jmp
        operand: [ Ap ]
        operation_type: ['jmp']
        attr: [ nm64 ]
        semantic: *jmp

      - opcode: 0xeb
        mnemonic: jmp
        operand: [ Jb ]
        operation_type: ['jmp']
        semantic: *jmp

      - opcode: 0xec
        mnemonic: in
        operand: [ AL, DX ]

      - opcode: 0xed
        mnemonic: in
        operand: [ eAX, DX ]

      - opcode: 0xee
        mnemonic: out
        operand: [ DX, AL ]

      - opcode: 0xef
        mnemonic: out
        operand: [ DX, eAX ]

      - opcode: 0xf0
        mnemonic: Lock
        constraint: pfx1

      - opcode: 0xf1
        mnemonic: icebp

      - opcode: 0xf2
        mnemonic: RepNz
        constraint: pfx1
        test_flags: [ zf ]

      - opcode: 0xf3
        mnemonic: Rep
        constraint: pfx1
        test_flags: [ zf ]

      - opcode: 0xf4
        mnemonic: hlt
        operation_type: ['ret']

      - opcode: 0xf5
        mnemonic: cmc
        update_flags: [ cf ]
        semantic: *cmc

      - opcode: 0xf6
        reference: group_03A

      - opcode: 0xf7
        reference: group_03B

      - opcode: 0xf8
        mnemonic: clc
        clear_flags: [ cf ]
        semantic: *clc

      - opcode: 0xf9
        mnemonic: stc
        update_flags: [ cf ]
        semantic: *stc

      - opcode: 0xfa
        mnemonic: cli
        clear_flags: [ if ]
        semantic: *cli

      - opcode: 0xfb
        mnemonic: sti
        set_flags: [ if ]
        semantic: *cli

      - opcode: 0xfc
        mnemonic: cld
        clear_flags: [ df ]
        semantic: *cld

      - opcode: 0xfd
        mnemonic: std
        set_flags: [ df ]
        semantic: *std

      - opcode: 0xfe
        reference: group_04

      - opcode: 0xff
        reference: group_05

    table_2:
      - opcode: 0x00
        reference: group_06

      - opcode: 0x01
        reference: group_07

      - opcode: 0x02
        mnemonic: lar
        operand: [ Gv, Ew ]

      - opcode: 0x03
        mnemonic: lsl
        operand: [ Gv, Ew ]

      - opcode: 0x04
        mnemonic: loadall
        cpu_model: "== X86_Arch_80286"

      - opcode: 0x05
        sub_opcodes:
          - mnemonic: loadall
            cpu_model: "== X86_Arch_80286"

          - mnemonic: syscall
            cpu_model: ">= X86_Arch_K6_2"
            semantic: *syscall

      - opcode: 0x06
        mnemonic: clts

      - opcode: 0x07
        sub_opcodes:
          - mnemonic: loadall
            cpu_model: "== X86_Arch_80386"

          - mnemonic: sysret
            cpu_model: ">= X86_Arch_K6_2"
            semantic: *sysret

      - opcode: 0x08
        mnemonic: invd
        cpu_model: ">= X86_Arch_80486"

      - opcode: 0x09
        mnemonic: wbindvd
        cpu_model: ">= X86_Arch_80486"

      - opcode: 0x0a
        invalid:

      - opcode: 0x0b
        mnemonic: ud1
        cpu_model: ">= X86_Arch_80286"

      - opcode: 0x0c
        invalid:

      - opcode: 0x0d
        sub_opcodes:
          - invalid:

          - mnemonic: nop
            operand: [ Ev ]
            cpu_model: ">= X86_Arch_Pentium_pro"
            semantic: *nop

            operand: [ M ]
            reference: group_3DNOW1
            attr: [ amd ]

      - opcode: 0x0e
        sub_opcodes:
          - invalid:

          - mnemonic: femms
            attr: [ amd ]

      - opcode: 0x0f
        sub_opcodes:
          - invalid:

            reference: table_3DNOW1
            cpu_model: ">= X86_Arch_K6_2"

      - opcode: 0x10
        sub_opcodes:
          - mnemonic: umov
            operand: [ Eb, Gb ]
            cpu_model: "== X86_Arch_80386"

          - mnemonic: movups
            operand: [ Vx, Wx ]
            cpu_model: ">= X86_Arch_Sse"
            semantic: *mov

          - mnemonic: movupd
            operand: [ Vx, Wx ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Sse2"

          - mnemonic: movss
            operand: [ Vo, Wod ]
            prefix: 0xf3
            cpu_model: ">= X86_Arch_Sse"
            semantic: *movss

          - mnemonic: movsd
            operand: [ Vo, Woq ]
            prefix: 0xf2
            cpu_model: ">= X86_Arch_Sse2"
            semantic: *movsd

      - opcode: 0x11
        sub_opcodes:
          - mnemonic: umov
            operand: [ Ev, Gv ]
            cpu_model: "== X86_Arch_80386"

          - mnemonic: movups
            operand: [ Wx, Vx ]
            cpu_model: ">= X86_Arch_Sse"
            semantic: *mov

          - mnemonic: movupd
            operand: [ Wx, Vx ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Sse2"

          - mnemonic: movss
            operand: [ Wod, Vo ]
            prefix: 0xf3
            cpu_model: ">= X86_Arch_Sse"
            semantic: *movss

          - mnemonic: movsd
            operand: [ Woq, Vo ]
            prefix: 0xf2
            cpu_model: ">= X86_Arch_Sse2"
            semantic: *movsd

      - opcode: 0x12
        sub_opcodes:
          - mnemonic: umov
            operand: [ Gb, Ev ]
            cpu_model: "== X86_Arch_80386"

          - mnemonic: movlps
            operand: [ Vo, Woq ]
            cpu_model: ">= X86_Arch_Sse"

          - mnemonic: movlpd
            operand: [ Vo, Woq ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Sse2"

          - mnemonic: movsldup
            operand: [ Vx, Wx ]
            prefix: 0xf3
            cpu_model: ">= X86_Arch_Sse3"

          - mnemonic: movddup
            operand: [ Vo, Woq ]
            prefix: 0xf2
            cpu_model: ">= X86_Arch_Sse3"

      - opcode: 0x13
        sub_opcodes:
          - mnemonic: umov
            operand: [ Gv, Ev ]
            cpu_model: "== X86_Arch_80386"

          - mnemonic: movlps
            operand: [ Woq, Vo ]
            cpu_model: ">= X86_Arch_Sse"

          - mnemonic: movlpd
            operand: [ Woq, Vo ]
            cpu_model: ">= X86_Arch_Sse2"

      - opcode: 0x14
        sub_opcodes:
          - invalid:

          - mnemonic: unpcklps
            operand: [ Vx, Wx ]
            cpu_model: ">= X86_Arch_Sse"

          - mnemonic: unpcklpd
            operand: [ Vx, Wx ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Sse2"

      - opcode: 0x15
        sub_opcodes:
          - invalid:

          - mnemonic: unpckhps
            operand: [ Vx, Wx ]
            cpu_model: ">= X86_Arch_Sse"

          - mnemonic: unpckhpd
            operand: [ Vx, Wx ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Sse2"

      - opcode: 0x16
        sub_opcodes:
          - invalid:

          - mnemonic: movhps
            operand: [ Vo, Woq ]
            cpu_model: ">= X86_Arch_Sse"

          - mnemonic: movhpd
            operand: [ Vo, Woq ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Sse2"

          - mnemonic: movshdup
            operand: [ Vx, Wx ]
            prefix: 0xf3
            cpu_model: ">= X86_Arch_Sse3"

      - opcode: 0x17
        sub_opcodes:
          - invalid:

          - mnemonic: movhps
            operand: [ Woq, Vo ]
            cpu_model: ">= X86_Arch_Sse"

          - mnemonic: movhpd
            operand: [ Woq, Vo ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Sse2"

      - opcode: 0x18
        reference: group_16

      - opcode: 0x19
        reference: group_16

      - opcode: 0x1a
        reference: group_16

      - opcode: 0x1b
        reference: group_16

      - opcode: 0x1c
        reference: group_16

      - opcode: 0x1d
        reference: group_16

      - opcode: 0x1e
        reference: group_16

      - opcode: 0x1f
        reference: group_16

      - opcode: 0x20
        sub_opcodes:
          - invalid:

          - mnemonic: mov
            operand: [ Ry, Cy ]
            constraint: f64
            cpu_model: ">= X86_Arch_80386"

      - opcode: 0x21
        sub_opcodes:
          - invalid:

          - mnemonic: mov
            operand: [ Ry, Dy ]
            constraint: f64
            cpu_model: ">= X86_Arch_80386"

      - opcode: 0x22
        sub_opcodes:
          - invalid:

          - mnemonic: mov
            operand: [ Dy, Ry ]
            constraint: f64
            cpu_model: ">= X86_Arch_80386"

      - opcode: 0x23
        sub_opcodes:
          - invalid:

          - mnemonic: mov
            operand: [ Dy, Ry ]
            constraint: f64
            cpu_model: ">= X86_Arch_80386"

      - opcode: 0x24
        sub_opcodes:
          - invalid:

          - mnemonic: mov
            operand: [ Ry, Ty ]
            cpu_model: "== X86_Arch_80386"
            semantic: *mov

            reference: table_sse5a
            attr: [ amd ]

      - opcode: 0x25
        sub_opcodes:
          - invalid:

            reference: table_sse5a
            attr: [ amd ]

      - opcode: 0x26
        sub_opcodes:
          - invalid:

          - mnemonic: mov
            operand: [ Ty, Ry ]
            constraint: f64
            cpu_model: "== X86_Arch_80386"
            semantic: *mov

      - opcode: 0x27
        invalid:

      - opcode: 0x28
        sub_opcodes:
          - mnemonic: movaps
            operand: [ Vx, Wx ]
            cpu_model: ">= X86_Arch_Sse"
            semantic: *mov

          - mnemonic: movapd
            operand: [ Vx, Wx ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Sse2"

      - opcode: 0x29
        sub_opcodes:
          - mnemonic: movaps
            operand: [ Wx, Vx ]
            cpu_model: ">= X86_Arch_Sse"
            semantic: *mov

          - mnemonic: movapd
            operand: [ Wx, Vx ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Sse2"

      - opcode: 0x2a
        sub_opcodes:
          - mnemonic: cvtpi2ps
            operand: [ Vo, Mq ]
            cpu_model: ">= X86_Arch_Sse"

          - mnemonic: cvtpi2ps
            operand: [ Vo, Nq ]
            cpu_model: ">= X86_Arch_Sse"

          - mnemonic: cvtpi2pd
            operand: [ Vo, Mq ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Sse"

          - mnemonic: cvtpi2pd
            operand: [ Vo, Nq ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Sse"

          - mnemonic: cvtsi2ss
            operand: [ Vo, Ey ]
            prefix: 0xf3
            cpu_model: ">= X86_Arch_Sse"

          - mnemonic: cvtsi2sd
            operand: [ Vo, Ey ]
            prefix: 0xf2
            cpu_model: ">= X86_Arch_Sse2"

      - opcode: 0x2b
        sub_opcodes:
          - mnemonic: movntps
            operand: [ Mx, Vx ]
            cpu_model: ">= X86_Arch_Sse"

          - mnemonic: movntpd
            operand: [ Mx, Vx ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Sse2"

          - mnemonic: movntss
            operand: [ Md, Vo ]
            prefix: 0xf3
            cpu_model: ">= X86_Arch_Sse4a"

          - mnemonic: movntsd
            operand: [ Mq, Vo ]
            prefix: 0xf2
            cpu_model: ">= X86_Arch_Sse4a"

      - opcode: 0x2c
        sub_opcodes:
          - mnemonic: cvttps2pi
            operand: [ Pq, Woq ]
            cpu_model: ">= X86_Arch_Sse"

          - mnemonic: cvttpd2pi
            operand: [ Pq, Wo ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Sse2_mmx"

          - mnemonic: cvttss2si
            operand: [ Gy, Wod ]
            prefix: 0xf3
            cpu_model: ">= X86_Arch_Sse"

          - mnemonic: cvttsd2si
            operand: [ Gy, Woq ]
            prefix: 0xf2
            cpu_model: ">= X86_Arch_Sse2"

      - opcode: 0x2d
        sub_opcodes:
          - mnemonic: cvtps2pi
            operand: [ Pq, Woq ]
            cpu_model: ">= X86_Arch_Sse"

          - mnemonic: cvtpd2pi
            operand: [ Pq, Wo ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Sse2_mmx"

          - mnemonic: cvtss2si
            operand: [ Gy, Wod ]
            prefix: 0xf3
            cpu_model: ">= X86_Arch_Sse"

          - mnemonic: cvtsd2si
            operand: [ Gy, Woq ]
            prefix: 0xf2
            cpu_model: ">= X86_Arch_Sse2"

      - opcode: 0x2e
        sub_opcodes:
          - mnemonic: ucomiss
            operand: [ Vo, Wod ]
            cpu_model: ">= X86_Arch_Sse"

          - mnemonic: ucomisd
            operand: [ Vo, Woq ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Sse2"

      - opcode: 0x2f
        sub_opcodes:
          - mnemonic: comiss
            operand: [ Vo, Wod ]
            cpu_model: ">= X86_Arch_Sse"

          - mnemonic: comisd
            operand: [ Vo, Woq ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Sse2"

      - opcode: 0x30
        mnemonic: wrmsr

      - opcode: 0x31
        mnemonic: rdtsc
        semantic: *rdtsc

      - opcode: 0x32
        mnemonic: rdmsr

      - opcode: 0x33
        mnemonic: rdpmc

      - opcode: 0x34
        mnemonic: sysenter
        attr: [ intel ]
        semantic: *sysenter

      - opcode: 0x35
        mnemonic: sysexit
        attr: [ intel ]
        semantic: *sysexit

      - opcode: 0x36
        sub_opcodes:
          - invalid:

          - mnemonic: rdshr
            operand: [ Ed ]
            attr: [ cyrix ]

      - opcode: 0x37
        sub_opcodes:
          - mnemonic: getsec

          - mnemonic: wrshr
            operand: [ Ed ]
            attr: [ cyrix ]

      - opcode: 0x38
        sub_opcodes:
          - reference: table_3_38

          - mnemonic: smint
            attr: [ cyrix ]
            cpu_model: ">= X86_Arch_80486"

          - mnemonic: smint
            attr: [ cyrix ]
            cpu_model: ">= X86_Arch_Geode_lx"

      - opcode: 0x39
        mnemonic: dmint
        attr: [ cyrix ]
        cpu_model: ">= X86_Arch_Geode_lx"

      - opcode: 0x3a
        sub_opcodes:
          - reference: table_3_3A

          - mnemonic: bb0_reset
            attr: [ cyrix ]
            cpu_model: ">= X86_Arch_Cyrix_gx1"

          - mnemonic: rdm
            attr: [ cyrix ]
            cpu_model: ">= X86_Arch_Geode_lx"

      - opcode: 0x3b
        mnemonic: bb1_reset
        attr: [ cyrix ]
        cpu_model: ">= X86_Arch_Cyrix_gx1"

      - opcode: 0x3c
        mnemonic: cpu_write
        attr: [ cyrix ]
        cpu_model: ">= X86_Arch_Cyrix_gx1"

      - opcode: 0x3d
        mnemonic: cpu_read
        attr: [ cyrix ]
        cpu_model: ">= X86_Arch_Cyrix_gx1"

      - opcode: 0x3e
        invalid:

      - opcode: 0x3f
        mnemonic: altinst
        attr: [ cyrix ]
        cpu_model: ">= X86_Arch_Centaur_ais"

      - opcode: 0x40
        mnemonic: cmovo
        operand: [ Gv, Ev ]
        operation_type: ['cond']
        test_flags: [ of ]
        semantic: *cmovo

      - opcode: 0x41
        mnemonic: cmovno
        operand: [ Gv, Ev ]
        operation_type: ['cond']
        test_flags: [ of ]
        semantic: *cmovno

      - opcode: 0x42
        mnemonic: cmovb
        operand: [ Gv, Ev ]
        operation_type: ['cond']
        test_flags: [ cf ]
        semantic: *cmovc

      - opcode: 0x43
        mnemonic: cmovnb
        operand: [ Gv, Ev ]
        operation_type: ['cond']
        test_flags: [ cf ]
        semantic: *cmovnc

      - opcode: 0x44
        mnemonic: cmovz
        operand: [ Gv, Ev ]
        operation_type: ['cond']
        test_flags: [ zf ]
        semantic: *cmovz

      - opcode: 0x45
        mnemonic: cmovnz
        operand: [ Gv, Ev ]
        operation_type: ['cond']
        test_flags: [ zf ]
        semantic: *cmovnz

      - opcode: 0x46
        mnemonic: cmovbe
        operand: [ Gv, Ev ]
        operation_type: ['cond']
        test_flags: [ zf, cf ]
        semantic: *cmovbe

      - opcode: 0x47
        mnemonic: cmovnbe
        operand: [ Gv, Ev ]
        operation_type: ['cond']
        test_flags: [ zf, cf ]
        semantic: *cmova

      - opcode: 0x48
        mnemonic: cmovs
        operand: [ Gv, Ev ]
        operation_type: ['cond']
        test_flags: [ sf ]
        semantic: *cmovs

      - opcode: 0x49
        mnemonic: cmovns
        operand: [ Gv, Ev ]
        operation_type: ['cond']
        test_flags: [ sf ]
        semantic: *cmovns

      - opcode: 0x4a
        mnemonic: cmovp
        operand: [ Gv, Ev ]
        operation_type: ['cond']
        test_flags: [ pf ]
        semantic: *cmovp

      - opcode: 0x4b
        mnemonic: cmovnp
        operand: [ Gv, Ev ]
        operation_type: ['cond']
        test_flags: [ pf ]
        semantic: *cmovnp

      - opcode: 0x4c
        mnemonic: cmovl
        operand: [ Gv, Ev ]
        operation_type: ['cond']
        test_flags: [ of, sf ]
        semantic: *cmovl

      - opcode: 0x4d
        mnemonic: cmovnl
        operand: [ Gv, Ev ]
        operation_type: ['cond']
        test_flags: [ of, sf ]
        semantic: *cmovge

      - opcode: 0x4e
        mnemonic: cmovle
        operand: [ Gv, Ev ]
        operation_type: ['cond']
        test_flags: [ of, sf, zf ]
        semantic: *cmovle

      - opcode: 0x4f
        mnemonic: cmovnle
        operand: [ Gv, Ev ]
        operation_type: ['cond']
        test_flags: [ of, sf, zf ]
        semantic: *cmovg

      - opcode: 0x50
        sub_opcodes:
          - mnemonic: movmskps
            operand: [ Gy, Ux ]
            cpu_model: ">= X86_Arch_Sse"

          - mnemonic: movmskpd
            operand: [ Gy, Ux ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Sse2"

      - opcode: 0x51
        sub_opcodes:
          - mnemonic: sqrtps
            operand: [ Vx, Wx ]
            cpu_model: ">= X86_Arch_Sse"

          - mnemonic: sqrtpsd
            operand: [ Vx, Wx ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Sse2"

          - mnemonic: sqrtss
            operand: [ Vo, Wod ]
            prefix: 0xf3
            cpu_model: ">= X86_Arch_Sse"

          - mnemonic: sqrtsd
            operand: [ Vo, Woq ]
            prefix: 0xf2
            cpu_model: ">= X86_Arch_Sse2"

      - opcode: 0x52
        sub_opcodes:
          - mnemonic: rsqrtps
            operand: [ Vx, Wx ]
            cpu_model: ">= X86_Arch_Sse"

          - mnemonic: rsqrtss
            operand: [ Vo, Wod ]
            prefix: 0xf3
            cpu_model: ">= X86_Arch_Sse"

      - opcode: 0x53
        sub_opcodes:
          - mnemonic: rcpps
            operand: [ Vx, Wx ]
            cpu_model: ">= X86_Arch_Sse"

          - mnemonic: rcpss
            operand: [ Vo, Wod ]
            prefix: 0xf3
            cpu_model: ">= X86_Arch_Sse"

      - opcode: 0x54
        sub_opcodes:
          - mnemonic: andps
            operand: [ Vx, Wx ]
            cpu_model: ">= X86_Arch_Sse"

          - mnemonic: andpd
            operand: [ Vx, Wx ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Sse2"

      - opcode: 0x55
        sub_opcodes:
          - mnemonic: andnps
            operand: [ Vx, Wx ]
            cpu_model: ">= X86_Arch_Sse"

          - mnemonic: andnpd
            operand: [ Vx, Wx ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Sse2"

      - opcode: 0x56
        sub_opcodes:
          - mnemonic: orps
            operand: [ Vx, Wx ]
            cpu_model: ">= X86_Arch_Sse"

          - mnemonic: orpd
            operand: [ Vx, Wx ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Sse"

      - opcode: 0x57
        sub_opcodes:
          - mnemonic: xorps
            operand: [ Vx, Wx ]
            cpu_model: ">= X86_Arch_Sse"
            semantic: *xorps

          - mnemonic: xorpd
            operand: [ Vx, Wx ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Sse2"

      - opcode: 0x58
        sub_opcodes:
          - mnemonic: addps
            operand: [ Vx, Wx ]
            cpu_model: ">= X86_Arch_Sse"

          - mnemonic: addpd
            operand: [ Vx, Wx ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Sse2"

          - mnemonic: addss
            operand: [ Vo, Wod ]
            prefix: 0xf3
            cpu_model: ">= X86_Arch_Sse"
            semantic: *addss

          - mnemonic: addsd
            operand: [ Vo, Woq ]
            prefix: 0xf2
            cpu_model: ">= X86_Arch_Sse2"

      - opcode: 0x59
        sub_opcodes:
          - mnemonic: mulps
            operand: [ Vx, Wx ]
            cpu_model: ">= X86_Arch_Sse"

          - mnemonic: mulpd
            operand: [ Vx, Wx ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Sse2"

          - mnemonic: mulss
            operand: [ Vo, Wod ]
            prefix: 0xf3
            cpu_model: ">= X86_Arch_Sse"
            semantic: *mulss

          - mnemonic: mulsd
            operand: [ Vo, Woq ]
            prefix: 0xf2
            cpu_model: ">= X86_Arch_Sse2"

      - opcode: 0x5a
        sub_opcodes:
          - mnemonic: cvtps2pd
            operand: [ Vx, Wx ]
            cpu_model: ">= X86_Arch_Sse"

          - mnemonic: cvtpd2ps
            operand: [ Vx, Wx ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Sse2"

          - mnemonic: cvtss2sd
            operand: [ Vo, Wod ]
            prefix: 0xf3
            cpu_model: ">= X86_Arch_Sse2"

          - mnemonic: cvtsd2ss
            operand: [ Vo, Woq ]
            prefix: 0xf2
            cpu_model: ">= X86_Arch_Sse2"

      - opcode: 0x5b
        sub_opcodes:
          - mnemonic: cvtdq2ps
            operand: [ Vx, Wx ]
            cpu_model: ">= X86_Arch_Sse"

          - mnemonic: cvtps2dq
            operand: [ Vx, Wx ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Sse2"

          - mnemonic: cvttps2dq
            operand: [ Vx, Wx ]
            prefix: 0xf3
            cpu_model: ">= X86_Arch_Sse2"

      - opcode: 0x5c
        sub_opcodes:
          - mnemonic: subps
            operand: [ Vx, Wx ]
            cpu_model: ">= X86_Arch_Sse"

          - mnemonic: subpd
            operand: [ Vx, Wx ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Sse2"

          - mnemonic: subss
            operand: [ Vo, Wod ]
            prefix: 0xf3
            cpu_model: ">= X86_Arch_Sse"

          - mnemonic: subsd
            operand: [ Vo, Woq ]
            prefix: 0xf2
            cpu_model: ">= X86_Arch_Sse2"

      - opcode: 0x5d
        sub_opcodes:
          - mnemonic: minps
            operand: [ Vx, Wx ]
            cpu_model: ">= X86_Arch_Sse"

          - mnemonic: minpd
            operand: [ Vx, Wx ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Sse2"

          - mnemonic: minss
            operand: [ Vo, Wod ]
            prefix: 0xf3
            cpu_model: ">= X86_Arch_Sse"

          - mnemonic: minsd
            operand: [ Vo, Woq ]
            prefix: 0xf2
            cpu_model: ">= X86_Arch_Sse2"

      - opcode: 0x5e
        sub_opcodes:
          - mnemonic: divps
            operand: [ Vx, Wx ]
            cpu_model: ">= X86_Arch_Sse"

          - mnemonic: divpd
            operand: [ Vx, Wx ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Sse2"

          - mnemonic: divss
            operand: [ Vo, Wod ]
            prefix: 0xf3
            cpu_model: ">= X86_Arch_Sse"

          - mnemonic: divsd
            operand: [ Vo, Woq ]
            prefix: 0xf2
            cpu_model: ">= X86_Arch_Sse2"

      - opcode: 0x5f
        sub_opcodes:
          - mnemonic: maxps
            operand: [ Vx, Wx ]
            cpu_model: ">= X86_Arch_Sse"

          - mnemonic: maxpd
            operand: [ Vx, Wx ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Sse2"

          - mnemonic: maxss
            operand: [ Vo, Wod ]
            prefix: 0xf3
            cpu_model: ">= X86_Arch_Sse"

          - mnemonic: maxsd
            operand: [ Vo, Woq ]
            prefix: 0xf2
            cpu_model: ">= X86_Arch_Sse2"

      - opcode: 0x60
        sub_opcodes:
          - mnemonic: punpcklbw
            operand: [ Pq, Qd ]
            cpu_model: ">= X86_Arch_Mmx"

          - mnemonic: pupcklbw
            operand: [ Vx, Wx ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Sse2"

      - opcode: 0x61
        sub_opcodes:
          - mnemonic: punpcklwd
            operand: [ Pq, Qd ]
            cpu_model: ">= X86_Arch_Mmx"

          - mnemonic: punpcklwd
            operand: [ Vx, Wx ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Sse2"

      - opcode: 0x62
        sub_opcodes:
          - mnemonic: punpckldq
            operand: [ Pq, Qd ]
            cpu_model: ">= X86_Arch_Mmx"

          - mnemonic: pupckldq
            operand: [ Vx, Wx ]
            cpu_model: ">= X86_Arch_Sse2"

      - opcode: 0x63
        sub_opcodes:
          - mnemonic: packsswb
            operand: [ Pq, Qq ]
            cpu_model: ">= X86_Arch_Mmx"

          - mnemonic: packsswb
            operand: [ Vx, Wx ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Sse2"

      - opcode: 0x64
        sub_opcodes:
          - mnemonic: pcmpgtb
            operand: [ Pq, Qq ]
            cpu_model: ">= X86_Arch_Mmx"

          - mnemonic: pcmpgtb
            operand: [ Vx, Wx ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Sse2"

      - opcode: 0x65
        sub_opcodes:
          - mnemonic: pcmpgtw
            operand: [ Pq, Qq ]
            cpu_model: ">= X86_Arch_Mmx"

          - mnemonic: pcmpgtw
            operand: [ Vx, Wx ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Sse2"

      - opcode: 0x66
        sub_opcodes:
          - mnemonic: pcmpgtd
            operand: [ Pq, Qq ]
            cpu_model: ">= X86_Arch_Mmx"

          - mnemonic: cmpgtd
            operand: [ Vx, Wx ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Sse2"

      - opcode: 0x67
        sub_opcodes:
          - mnemonic: packuswb
            operand: [ Pq, Qq ]
            cpu_model: ">= X86_Arch_Mmx"

          - mnemonic: packuswb
            operand: [ Vx, Wx ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Sse2"

      - opcode: 0x68
        sub_opcodes:
          - mnemonic: punpckhbw
            operand: [ Pq, Qq ]
            cpu_model: ">= X86_Arch_Mmx"

          - mnemonic: punpckhbw
            operand: [ Hx, Hx, Wx ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Sse2"

      - opcode: 0x69
        sub_opcodes:
          - mnemonic: punpckhwd
            operand: [ Pq, Qq ]
            cpu_model: ">= X86_Arch_Mmx"

          - mnemonic: punpckhwd
            operand: [ Vx, Wx ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Sse2"

      - opcode: 0x6a
        sub_opcodes:
          - mnemonic: punpckhdq
            operand: [ Pq, Qq ]
            cpu_model: ">= X86_Arch_Mmx"

          - mnemonic: punpckhdq
            operand: [ Vx, Wx ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Sse2"

      - opcode: 0x6b
        sub_opcodes:
          - mnemonic: packssdw
            operand: [ Pq, Qq ]
            cpu_model: ">= X86_Arch_Mmx"

          - mnemonic: packssdw
            operand: [ Vx, Wx ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Sse2"

      - opcode: 0x6c
        sub_opcodes:
          - invalid:

          - mnemonic: punpcklqdq
            operand: [ Vx, Wx ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Sse2"

      - opcode: 0x6d
        sub_opcodes:
          - invalid:

          - mnemonic: punpckhqdq
            operand: [ Vx, Wx ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Sse2"

      - opcode: 0x6e
        sub_opcodes:
          - mnemonic: movd
            operand: [ Pq, Ey ]
            cpu_model: ">= X86_Arch_Mmx"

          - mnemonic: movq
            operand: [ Pq, Ey ]
            attr: [ m64, rexw ]

          - mnemonic: movd
            operand: [ Vo, Ed ]
            attr: [ op_size ]
            cpu_model: ">= X86_Arch_Sse2"
            semantic: *movd_sse

          - mnemonic: movq
            operand: [ Vo, Ey ]
            attr: [ m64, rexw, op_size ]
            cpu_model: ">= X86_Arch_Sse2"

      - opcode: 0x6f
        sub_opcodes:
          - mnemonic: movq
            operand: [ Pq, Qq ]
            cpu_model: ">= X86_Arch_Mmx"

          - mnemonic: modqa
            operand: [ Vx, Wx ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Sse2"

          - mnemonic: movdqu
            operand: [ Vx, Wx ]
            prefix: 0xf3
            cpu_model: ">= X86_Arch_Sse"
            semantic: *mov

      - opcode: 0x70
        sub_opcodes:
          - mnemonic: pshufw
            operand: [ Pq, Qq, Ib ]
            cpu_model: ">= X86_Arch_Mmx_sse"

          - mnemonic: pshufd
            operand: [ Vx, Wx, Ib ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Sse2"

          - mnemonic: pshufhw
            operand: [ Vx, Wx, Ib ]
            prefix: 0xf3
            cpu_model: ">= X86_Arch_Sse2"

          - mnemonic: pshuflw
            operand: [ Vx, Wx, Ib ]
            prefix: 0xf2
            cpu_model: ">= X86_Arch_Sse2"

      - opcode: 0x71
        reference: group_12

      - opcode: 0x72
        reference: group_13

      - opcode: 0x73
        reference: group_14

      - opcode: 0x74
        sub_opcodes:
          - mnemonic: pcmpeqb
            operand: [ Pq, Qq ]
            cpu_model: ">= X86_Arch_Mmx"

          - mnemonic: pcmpeqb
            operand: [ Vx, Wx ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Sse2"

      - opcode: 0x75
        sub_opcodes:
          - mnemonic: pcmpeqw
            operand: [ Pq, Qq ]
            cpu_model: ">= X86_Arch_Mmx"

          - mnemonic: pcmpeqw
            operand: [ Vx, Wx ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Sse2"

      - opcode: 0x76
        sub_opcodes:
          - mnemonic: pcmpeqd
            operand: [ Pq, Qq ]
            cpu_model: ">= X86_Arch_Mmx"

          - mnemonic: pcmpeqd
            operand: [ Vx, Wx ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Sse2"

      - opcode: 0x77
        sub_opcodes:
          - mnemonic: emms
            cpu_model: ">= X86_Arch_Mmx"

          - mnemonic: zeroupper
            cpu_model: ">= X86_Arch_Avx"

      - opcode: 0x78
        sub_opcodes:
          - mnemonic: mread
            operand: [ Ey, Gy ]

          - mnemonic: extrq
            operand: [ Uo, Ib, Ib ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Sse4a"

      - opcode: 0x79
        sub_opcodes:
          - mnemonic: vmwrite
            operand: [ Gy, Ey ]

          - mnemonic: extrq
            operand: [ Vo, Uo ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Sse4a"

      - opcode: 0x7a
        reference: table_sse5a
        attr: [ amd ]

      - opcode: 0x7b
        reference: table_sse5a
        attr: [ amd ]

      - opcode: 0x7c
        sub_opcodes:
          - invalid:

          - mnemonic: haddpd
            operand: [ Vx, Wx ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Sse3"

          - mnemonic: haddps
            operand: [ Vx, Wx ]
            prefix: 0xf2
            cpu_model: ">= X86_Arch_Sse3"

      - opcode: 0x7d
        sub_opcodes:
          - invalid:

          - mnemonic: hsubpd
            operand: [ Vx, Wx ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Sse3"

          - mnemonic: hsubps
            operand: [ Vx, Wx ]
            prefix: 0xf2
            cpu_model: ">= X86_Arch_Sse3"

      - opcode: 0x7e
        sub_opcodes:
          - mnemonic: movd
            operand: [ Ey, Pq ]
            cpu_model: ">= X86_Arch_Mmx"

          - mnemonic: movd
            operand: [ Ed, Vo ]
            attr: [ op_size ]
            cpu_model: ">= X86_Arch_Sse2"
            semantic: *movd_sse

          - mnemonic: movq
            operand: [ Vo, Woq ]
            attr: [ rep ]
            cpu_model: ">= X86_Arch_Sse2"

      - opcode: 0x7f
        sub_opcodes:
          - mnemonic: movq
            operand: [ Qq, Pq ]
            cpu_model: ">= X86_Arch_Mmx"

          - mnemonic: movdqa
            operand: [ Wx, Vx ]
            attr: [ op_size ]
            cpu_model: ">= X86_Arch_Sse2"

          - mnemonic: movdqu
            operand: [ Wx, Vx ]
            attr: [ rep ]
            cpu_model: ">= X86_Arch_Sse2"
            semantic: *mov

      - opcode: 0x80
        mnemonic: jo
        operand: [ Jz ]
        constraint: df64
        operation_type: ['jmp', 'cond']
        test_flags: [ of ]
        cpu_model: ">= X86_Arch_80386"
        semantic: *jmpo

      - opcode: 0x81
        mnemonic: jno
        operand: [ Jz ]
        constraint: df64
        operation_type: ['jmp', 'cond']
        test_flags: [ of ]
        cpu_model: ">= X86_Arch_80386"
        semantic: *jmpno

      - opcode: 0x82
        mnemonic: jb
        operand: [ Jz ]
        constraint: df64
        operation_type: ['jmp', 'cond']
        test_flags: [ cf ]
        cpu_model: ">= X86_Arch_80386"
        semantic: *jmpc

      - opcode: 0x83
        mnemonic: jnb
        operand: [ Jz ]
        constraint: df64
        operation_type: ['jmp', 'cond']
        test_flags: [ cf ]
        cpu_model: ">= X86_Arch_80386"
        semantic: *jmpnc

      - opcode: 0x84
        mnemonic: jz
        operand: [ Jz ]
        constraint: df64
        operation_type: ['jmp', 'cond']
        test_flags: [ zf ]
        cpu_model: ">= X86_Arch_80386"
        semantic: *jmpz

      - opcode: 0x85
        mnemonic: jnz
        operand: [ Jz ]
        constraint: df64
        operation_type: ['jmp', 'cond']
        test_flags: [ zf ]
        cpu_model: ">= X86_Arch_80386"
        semantic: *jmpnz

      - opcode: 0x86
        mnemonic: jbe
        operand: [ Jz ]
        constraint: df64
        operation_type: ['jmp', 'cond']
        test_flags: [ zf, cf ]
        cpu_model: ">= X86_Arch_80386"
        semantic: *jmpbe

      - opcode: 0x87
        mnemonic: jnbe
        operand: [ Jz ]
        constraint: df64
        operation_type: ['jmp', 'cond']
        test_flags: [ zf, cf ]
        cpu_model: ">= X86_Arch_80386"
        semantic: *jmpa

      - opcode: 0x88
        mnemonic: js
        operand: [ Jz ]
        constraint: df64
        operation_type: ['jmp', 'cond']
        test_flags: [ sf ]
        cpu_model: ">= X86_Arch_80386"
        semantic: *jmps

      - opcode: 0x89
        mnemonic: jns
        operand: [ Jz ]
        constraint: df64
        operation_type: ['jmp', 'cond']
        test_flags: [ sf ]
        cpu_model: ">= X86_Arch_80386"
        semantic: *jmpns

      - opcode: 0x8a
        mnemonic: jp
        operand: [ Jz ]
        constraint: df64
        operation_type: ['jmp', 'cond']
        test_flags: [ pf ]
        cpu_model: ">= X86_Arch_80386"
        semantic: *jmpp

      - opcode: 0x8b
        mnemonic: jnp
        operand: [ Jz ]
        constraint: df64
        operation_type: ['jmp', 'cond']
        test_flags: [ pf ]
        cpu_model: ">= X86_Arch_80386"
        semantic: *jmpnp

      - opcode: 0x8c
        mnemonic: jl
        operand: [ Jz ]
        constraint: df64
        operation_type: ['jmp', 'cond']
        test_flags: [ of, sf ]
        cpu_model: ">= X86_Arch_80386"
        semantic: *jmpl

      - opcode: 0x8d
        mnemonic: jnl
        operand: [ Jz ]
        constraint: df64
        operation_type: ['jmp', 'cond']
        test_flags: [ of, sf ]
        cpu_model: ">= X86_Arch_80386"
        semantic: *jmpge

      - opcode: 0x8e
        mnemonic: jle
        operand: [ Jz ]
        constraint: df64
        operation_type: ['jmp', 'cond']
        test_flags: [ of, sf, zf ]
        cpu_model: ">= X86_Arch_80386"
        semantic: *jmple

      - opcode: 0x8f
        mnemonic: jnle
        operand: [ Jz ]
        constraint: df64
        operation_type: ['jmp', 'cond']
        test_flags: [ of, sf, zf ]
        cpu_model: ">= X86_Arch_80386"
        semantic: *jmpg

      - opcode: 0x90
        mnemonic: seto
        operand: [ Eb ]
        test_flags: [ of ]
        cpu_model: ">= X86_Arch_80386"
        semantic: *seto

      - opcode: 0x91
        mnemonic: setno
        operand: [ Eb ]
        test_flags: [ of ]
        cpu_model: ">= X86_Arch_80386"
        semantic: *setno

      - opcode: 0x92
        mnemonic: setb
        operand: [ Eb ]
        test_flags: [ cf ]
        cpu_model: ">= X86_Arch_80386"
        semantic: *setc

      - opcode: 0x93
        mnemonic: setnb
        operand: [ Eb ]
        test_flags: [ cf ]
        cpu_model: ">= X86_Arch_80386"
        semantic: *setnc

      - opcode: 0x94
        mnemonic: setz
        operand: [ Eb ]
        test_flags: [ zf ]
        cpu_model: ">= X86_Arch_80386"
        semantic: *setz

      - opcode: 0x95
        mnemonic: setnz
        operand: [ Eb ]
        test_flags: [ zf ]
        cpu_model: ">= X86_Arch_80386"
        semantic: *setnz

      - opcode: 0x96
        mnemonic: setbe
        operand: [ Eb ]
        test_flags: [ zf, cf ]
        cpu_model: ">= X86_Arch_80386"
        semantic: *setbe

      - opcode: 0x97
        mnemonic: setnbe
        operand: [ Eb ]
        test_flags: [ zf, cf ]
        cpu_model: ">= X86_Arch_80386"
        semantic: *seta

      - opcode: 0x98
        mnemonic: sets
        operand: [ Eb ]
        test_flags: [ sf ]
        cpu_model: ">= X86_Arch_80386"
        semantic: *sets

      - opcode: 0x99
        mnemonic: setns
        operand: [ Eb ]
        test_flags: [ sf ]
        cpu_model: ">= X86_Arch_80386"
        semantic: *setns

      - opcode: 0x9a
        mnemonic: setp
        operand: [ Eb ]
        test_flags: [ pf ]
        cpu_model: ">= X86_Arch_80386"
        semantic: *setp

      - opcode: 0x9b
        mnemonic: setnp
        operand: [ Eb ]
        test_flags: [ pf ]
        cpu_model: ">= X86_Arch_80386"
        semantic: *setnp

      - opcode: 0x9c
        mnemonic: setl
        operand: [ Eb ]
        test_flags: [ of, sf ]
        cpu_model: ">= X86_Arch_80386"
        semantic: *setl

      - opcode: 0x9d
        mnemonic: setnl
        operand: [ Eb ]
        test_flags: [ of, sf ]
        cpu_model: ">= X86_Arch_80386"
        semantic: *setge

      - opcode: 0x9e
        mnemonic: setle
        operand: [ Eb ]
        test_flags: [ of, sf, zf ]
        cpu_model: ">= X86_Arch_80386"
        semantic: *setle

      - opcode: 0x9f
        mnemonic: setnle
        operand: [ Eb ]
        test_flags: [ of, sf, zf ]
        cpu_model: ">= X86_Arch_80386"
        semantic: *setg

      - opcode: 0xa0
        mnemonic: push
        operand: [ FS ]
        constraint: df64
        cpu_model: ">= X86_Arch_80386"
        semantic: *push

      - opcode: 0xa1
        mnemonic: pop
        operand: [ FS ]
        constraint: df64
        cpu_model: ">= X86_Arch_80386"
        semantic: *pop

      - opcode: 0xa2
        mnemonic: cpuid
        semantic: *cpuid

      - opcode: 0xa3
        mnemonic: bt
        operand: [ Ev, Gv ]
        cpu_model: ">= X86_Arch_80386"
        semantic: *bt

      - opcode: 0xa4
        mnemonic: shld
        operand: [ Ev, Gv, Ib ]
        update_flags: [ cf, pf, af, zf, sf, of ]
        cpu_model: ">= X86_Arch_80386"
        semantic: *shld

      - opcode: 0xa5
        mnemonic: shld
        operand: [ Ev, Gv, CL ]
        update_flags: [ cf, pf, af, zf, sf, of ]
        cpu_model: ">= X86_Arch_80386"
        semantic: *shld

      - opcode: 0xa6
        sub_opcodes:
          - mnemonic: xbts
            cpu_model: "== X86_Arch_80386, == X86_Arch_80486"

          - mnemonic: montmul
            cpu_model: ">= X86_Arch_Centaur_mm"

          - mnemonic: xsha
            cpu_model: ">= X86_Arch_Centaur_he"

      - opcode: 0xa7
        sub_opcodes:
          - mnemonic: ibts
            cpu_model: "== X86_Arch_80386, == X86_Arch_80486"

          - mnemonic: xstore
            cpu_model: ">= X86_Arch_Centaur_rng"

          - mnemonic: xcrypt
            cpu_model: ">= X86_Arch_Centaur_ace"

      - opcode: 0xa8
        mnemonic: push
        operand: [ GS ]
        constraint: d64
        cpu_model: ">= X86_Arch_80386"
        semantic: *push

      - opcode: 0xa9
        mnemonic: pop
        operand: [ GS ]
        constraint: d64
        cpu_model: ">= X86_Arch_80386"
        semantic: *pop

      - opcode: 0xaa
        mnemonic: rsm
        cpu_model: ">= X86_Arch_80386sl"

      - opcode: 0xab
        mnemonic: bts
        operand: [ Ev, Gv ]
        cpu_model: ">= X86_Arch_80386"
        semantic: *bts

      - opcode: 0xac
        mnemonic: shrd
        operand: [ Ev, Gv, Ib ]
        cpu_model: ">= X86_Arch_80386"
        semantic: *shrd

      - opcode: 0xad
        mnemonic: shrd
        operand: [ Ev, Gv, CL ]
        cpu_model: ">= X86_Arch_80386"
        semantic: *shrd

      - opcode: 0xae
        reference: group_15

      - opcode: 0xaf
        mnemonic: imul
        operand: [ Gv, Ev ]
        cpu_model: ">= X86_Arch_80386"
        semantic: *imul2

      - opcode: 0xb0
        mnemonic: cmpxchg
        operand: [ Eb, Gb ]
        cpu_model: ">= X86_Arch_80486"
        semantic: *cmpxchg

      - opcode: 0xb1
        mnemonic: cmpxchg
        operand: [ Ev, Gv ]
        cpu_model: ">= X86_Arch_80486"
        semantic: *cmpxchg

      - opcode: 0xb2
        mnemonic: lss
        operand: [ Gv, Mp ]
        cpu_model: ">= X86_Arch_80386"

      - opcode: 0xb3
        mnemonic: btr
        operand: [ Ev, Gv ]
        cpu_model: ">= X86_Arch_80386"
        semantic: *btr

      - opcode: 0xb4
        mnemonic: lfs
        operand: [ Gv, Mp ]
        cpu_model: ">= X86_Arch_80386"

      - opcode: 0xb5
        mnemonic: lgs
        operand: [ Gv, Mp ]
        cpu_model: ">= X86_Arch_80386"

      - opcode: 0xb6
        mnemonic: movzx
        operand: [ Gv, Eb ]
        cpu_model: ">= X86_Arch_80386"
        semantic: *movzx

      - opcode: 0xb7
        mnemonic: movzx
        operand: [ Gv, Ew ]
        cpu_model: ">= X86_Arch_80386"
        semantic: *movzx

      - opcode: 0xb8
        sub_opcodes:
          - mnemonic: jmpe
            operand: [ Jz ]
            attr: [ ia64 ]

          - mnemonic: popcnt
            operand: [ Gv, Ev ]
            prefix: 0xf3

      - opcode: 0xb9
        reference: group_10
        cpu_model: ">= X86_Arch_80286"

      - opcode: 0xba
        reference: group_08
        cpu_model: ">= X86_Arch_80386"

      - opcode: 0xbb
        mnemonic: btc
        operand: [ Ev, Gv ]
        cpu_model: ">= X86_Arch_80386"
        semantic: *btc

      - opcode: 0xbc
        sub_opcodes:
          - mnemonic: bsf
            operand: [ Gv, Ev ]
            cpu_model: ">= X86_Arch_80386"
            semantic: *bsf

          - mnemonic: tzcnt
            operand: [ Gv, Ev ]
            prefix: 0xf3

      - opcode: 0xbd
        sub_opcodes:
          - mnemonic: bsr
            operand: [ Gv, Ev ]
            cpu_model: ">= X86_Arch_80386"
            semantic: *bsr

          - mnemonic: lzcnt
            operand: [ Gv, Ev ]
            prefix: 0xf3

      - opcode: 0xbe
        mnemonic: movsx
        operand: [ Gv, Eb ]
        cpu_model: ">= X86_Arch_80386"
        semantic: *movsx

      - opcode: 0xbf
        mnemonic: movsx
        operand: [ Gv, Ew ]
        cpu_model: ">= X86_Arch_80386"
        semantic: *movsx

      - opcode: 0xc0
        mnemonic: xadd
        operand: [ Eb, Gb ]
        update_flags: [ cf, pf, af, zf, sf, of ]
        cpu_model: ">= X86_Arch_80486"
        semantic: *xadd

      - opcode: 0xc1
        mnemonic: xadd
        operand: [ Ev, Gv ]
        update_flags: [ cf, pf, af, zf, sf, of ]
        cpu_model: ">= X86_Arch_80486"
        semantic: *xadd

      - opcode: 0xc2
        invalid:

      - opcode: 0xc3
        mnemonic: movnti
        operand: [ My, Gy ]
        cpu_model: ">= X86_Arch_Sse2"

      - opcode: 0xc4
        sub_opcodes:
          - mnemonic: pinsrw
            operand: [ Pq, Mw, Ib ]
            cpu_model: ">= X86_Arch_Mmx_sse"

          - mnemonic: pinsrw
            operand: [ Vo, Mw, Ib ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Sse2"

      - opcode: 0xc5
        sub_opcodes:
          - mnemonic: pextrw
            operand: [ Gy, Nq, Ib ]
            cpu_model: ">= X86_Arch_Mmx_sse"

          - mnemonic: pextrw
            operand: [ Gy, Uo, Ib ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Sse2"

      - opcode: 0xc6
        sub_opcodes:
          - mnemonic: shufps
            operand: [ Vx, Wx, Ib ]
            cpu_model: ">= X86_Arch_Sse"

          - mnemonic: shufpd
            operand: [ Vx, Wx, Ib ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Sse2"

      - opcode: 0xc7
        reference: group_09

      - opcode: 0xc8
        sub_opcodes:
          - mnemonic: bswap
            operand: [ rAX ]
            cpu_model: ">= X86_Arch_80486"
            semantic: *bswap

          - mnemonic: bswap
            operand: [ r8 ]
            attr: [ rexb ]
            cpu_model: ">= X86_Arch_80486"
            semantic: *bswap

      - opcode: 0xc9
        sub_opcodes:
          - mnemonic: bswap
            operand: [ rCX ]
            cpu_model: ">= X86_Arch_80486"
            semantic: *bswap

          - mnemonic: bswap
            operand: [ r9 ]
            attr: [ rexb ]
            cpu_model: ">= X86_Arch_80486"
            semantic: *bswap

      - opcode: 0xca
        sub_opcodes:
          - mnemonic: bswap
            operand: [ rDX ]
            cpu_model: ">= X86_Arch_80486"
            semantic: *bswap

          - mnemonic: bswap
            operand: [ r10 ]
            attr: [ rexb ]
            cpu_model: ">= X86_Arch_80486"
            semantic: *bswap

      - opcode: 0xcb
        sub_opcodes:
          - mnemonic: bswap
            operand: [ rBX ]
            cpu_model: ">= X86_Arch_80486"
            semantic: *bswap

          - mnemonic: bswap
            operand: [ r11 ]
            attr: [ rexb ]
            cpu_model: ">= X86_Arch_80486"
            semantic: *bswap

      - opcode: 0xcc
        sub_opcodes:
          - mnemonic: bswap
            operand: [ rSP ]
            cpu_model: ">= X86_Arch_80486"
            semantic: *bswap

          - mnemonic: bswap
            operand: [ r12 ]
            attr: [ rexb ]
            cpu_model: ">= X86_Arch_80486"
            semantic: *bswap

      - opcode: 0xcd
        sub_opcodes:
          - mnemonic: bswap
            operand: [ rBP ]
            cpu_model: ">= X86_Arch_80486"
            semantic: *bswap

          - mnemonic: bswap
            operand: [ r13 ]
            attr: [ rexb ]
            cpu_model: ">= X86_Arch_80486"
            semantic: *bswap

      - opcode: 0xce
        sub_opcodes:
          - mnemonic: bswap
            operand: [ rSI ]
            cpu_model: ">= X86_Arch_80486"
            semantic: *bswap

          - mnemonic: bswap
            operand: [ r14 ]
            attr: [ rexb ]
            cpu_model: ">= X86_Arch_80486"
            semantic: *bswap

      - opcode: 0xcf
        sub_opcodes:
          - mnemonic: bswap
            operand: [ rDI ]
            cpu_model: ">= X86_Arch_80486"
            semantic: *bswap

          - mnemonic: bswap
            operand: [ r15 ]
            attr: [ rexb ]
            cpu_model: ">= X86_Arch_80486"
            semantic: *bswap

      - opcode: 0xd0
        sub_opcodes:
          - invalid:

          - mnemonic: addsubps
            operand: [ Vx, Wx ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Sse3"

          - mnemonic: addsubps
            operand: [ Vx, Wx ]
            prefix: 0xf2
            cpu_model: ">= X86_Arch_Sse3"

      - opcode: 0xd1
        sub_opcodes:
          - mnemonic: psrlw
            operand: [ Pq, Qq ]
            cpu_model: ">= X86_Arch_Mmx"

          - mnemonic: psrlw
            operand: [ Vx, Wx ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Sse2"

      - opcode: 0xd2
        sub_opcodes:
          - mnemonic: psrld
            operand: [ Pq, Qq ]
            cpu_model: ">= X86_Arch_Mmx"

          - mnemonic: psrld
            operand: [ Vx, Wx ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Sse2"

      - opcode: 0xd3
        sub_opcodes:
          - mnemonic: psrlq
            operand: [ Pq, Qq ]
            cpu_model: ">= X86_Arch_Mmx"

          - mnemonic: psrld
            operand: [ Vx, Wx ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Sse2"

      - opcode: 0xd4
        sub_opcodes:
          - mnemonic: paddq
            operand: [ Pq, Qq ]
            cpu_model: ">= X86_Arch_Mmx_sse2"

          - mnemonic: paddq
            operand: [ Vx, Wx ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Sse2"

      - opcode: 0xd5
        sub_opcodes:
          - mnemonic: pmullw
            operand: [ Pq, Qq ]
            cpu_model: ">= X86_Arch_Mmx"

          - mnemonic: pmullw
            operand: [ Vx, Wx ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Sse2"

      - opcode: 0xd6
        sub_opcodes:
          - invalid:

          - mnemonic: movq
            operand: [ Woq, Vo ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Sse2"

          - mnemonic: movq2dq
            operand: [ Vo, Nq ]
            prefix: 0xf3
            cpu_model: ">= X86_Arch_Sse2_mmx"

          - mnemonic: movdq2q
            operand: [ Pq, Uq ]
            prefix: 0xf2
            cpu_model: ">= X86_Arch_Sse2_mmx"

      - opcode: 0xd7
        sub_opcodes:
          - mnemonic: pmovmskb
            operand: [ Gy, Nq ]
            cpu_model: ">= X86_Arch_Mmx_sse"

          - mnemonic: pmovmskb
            operand: [ Gy, Ux ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Sse2"

      - opcode: 0xd8
        sub_opcodes:
          - mnemonic: psubusb
            operand: [ Pq, Qq ]
            cpu_model: ">= X86_Arch_Mmx"

          - mnemonic: psubusb
            operand: [ Vx, Wx ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Sse2"

      - opcode: 0xd9
        sub_opcodes:
          - mnemonic: psubusw
            operand: [ Pq, Qq ]
            cpu_model: ">= X86_Arch_Mmx"

          - mnemonic: psubusw
            operand: [ Vx, Wx ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Sse2"

      - opcode: 0xda
        sub_opcodes:
          - mnemonic: pminub
            operand: [ Pq, Qq ]
            cpu_model: ">= X86_Arch_Mmx"

          - mnemonic: pminub
            operand: [ Vx, Wx ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Sse2"

      - opcode: 0xdb
        sub_opcodes:
          - mnemonic: pand
            operand: [ Pq, Qq ]
            cpu_model: ">= X86_Arch_Mmx"

          - mnemonic: pand
            operand: [ Vx, Wx ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Sse2"

      - opcode: 0xdc
        sub_opcodes:
          - mnemonic: paddusb
            operand: [ Pq, Qq ]
            cpu_model: ">= X86_Arch_Mmx"

          - mnemonic: paddusb
            operand: [ Vx, Wx ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Sse2"

      - opcode: 0xdd
        sub_opcodes:
          - mnemonic: paddusw
            operand: [ Pq, Qq ]
            cpu_model: ">= X86_Arch_Mmx"

          - mnemonic: paddusw
            operand: [ Vx, Wx ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Sse2"

      - opcode: 0xde
        sub_opcodes:
          - mnemonic: pmaxub
            operand: [ Pq, Qq ]
            cpu_model: ">= X86_Arch_Mmx"

          - mnemonic: pmaxub
            operand: [ Vx, Wx ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Sse2"

      - opcode: 0xdf
        sub_opcodes:
          - mnemonic: pandn
            operand: [ Pq, Qq ]
            cpu_model: ">= X86_Arch_Mmx"

          - mnemonic: pandn
            operand: [ Vx, Wx ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Sse2"

      - opcode: 0xe0
        sub_opcodes:
          - mnemonic: pavgb
            operand: [ Pq, Qq ]
            cpu_model: ">= X86_Arch_Mmx_sse"

          - mnemonic: pavgb
            operand: [ Vx, Wx ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Sse2"

      - opcode: 0xe1
        sub_opcodes:
          - mnemonic: psraw
            operand: [ Pq, Qq ]
            cpu_model: ">= X86_Arch_Mmx"

          - mnemonic: psraw
            operand: [ Vx, Wx ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Sse2"

      - opcode: 0xe2
        sub_opcodes:
          - mnemonic: psrad
            operand: [ Pq, Qq ]
            cpu_model: ">= X86_Arch_Mmx"

          - mnemonic: psrad
            operand: [ Vx, Wx ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Sse2"

      - opcode: 0xe3
        sub_opcodes:
          - mnemonic: pavgw
            operand: [ Pq, Qq ]
            cpu_model: ">= X86_Arch_Mmx_sse"

          - mnemonic: pavgw
            operand: [ Vx, Wx ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Sse2"

      - opcode: 0xe4
        sub_opcodes:
          - mnemonic: pmulhuw
            operand: [ Pq, Qq ]
            cpu_model: ">= X86_Arch_Mmx_sse"

          - mnemonic: pmulhuw
            operand: [ Vx, Wx ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Sse2"

      - opcode: 0xe5
        sub_opcodes:
          - mnemonic: pmulhw
            operand: [ Pq, Qq ]
            cpu_model: ">= X86_Arch_Mmx"

          - mnemonic: pmulhw
            operand: [ Vx, Wx ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Sse2"

      - opcode: 0xe6
        sub_opcodes:
          - invalid:

          - mnemonic: cvttpd2dq
            operand: [ Vo, Wx ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Sse2"

          - mnemonic: cvtdq2pd
            operand: [ Vo, Woq ]
            prefix: 0xf3
            cpu_model: ">= X86_Arch_Sse2"

          - mnemonic: cvtpd2dq
            operand: [ Vo, Wx ]
            prefix: 0xf2
            cpu_model: ">= X86_Arch_Sse2"

      - opcode: 0xe7
        sub_opcodes:
          - mnemonic: movntq
            operand: [ Mq, Pq ]
            cpu_model: ">= X86_Arch_Mmx_sse"

          - mnemonic: movntdq
            operand: [ Mx, Vx ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Sse2"

      - opcode: 0xe8
        sub_opcodes:
          - mnemonic: psubsb
            operand: [ Pq, Qq ]
            cpu_model: ">= X86_Arch_Mmx"

          - mnemonic: psubsb
            operand: [ Vx, Wx ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Sse2"

      - opcode: 0xe9
        sub_opcodes:
          - mnemonic: psubsw
            operand: [ Pq, Qq ]
            cpu_model: ">= X86_Arch_Mmx"

          - mnemonic: psubsw
            operand: [ Vx, Wx ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Sse2"

      - opcode: 0xea
        sub_opcodes:
          - mnemonic: pminsw
            operand: [ Pq, Qq ]
            cpu_model: ">= X86_Arch_Mmx"

          - mnemonic: pminsw
            operand: [ Vx, Wx ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Sse2"

      - opcode: 0xeb
        sub_opcodes:
          - mnemonic: por
            operand: [ Pq, Qq ]
            cpu_model: ">= X86_Arch_Mmx"

          - mnemonic: por
            operand: [ Vx, Wx ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Sse2"

      - opcode: 0xec
        sub_opcodes:
          - mnemonic: paddsb
            operand: [ Pq, Qq ]
            cpu_model: ">= X86_Arch_Mmx"

          - mnemonic: paddsb
            operand: [ Vx, Wx ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Sse2"

      - opcode: 0xed
        sub_opcodes:
          - mnemonic: paddsw
            operand: [ Pq, Qq ]
            cpu_model: ">= X86_Arch_Mmx"

          - mnemonic: paddsw
            operand: [ Vx, Wx ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Sse2"

      - opcode: 0xee
        sub_opcodes:
          - mnemonic: pmaxsw
            operand: [ Pq, Qq ]
            cpu_model: ">= X86_Arch_Mmx"

          - mnemonic: pmaxsw
            operand: [ Vx, Wx ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Sse2"

      - opcode: 0xef
        sub_opcodes:
          - mnemonic: pxor
            operand: [ Pq, Qq ]
            cpu_model: ">= X86_Arch_Mmx"

          - mnemonic: pxor
            operand: [ Vx, Wx ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Sse2"

      - opcode: 0xf0
        sub_opcodes:
          - invalid:

          - mnemonic: lddqu
            operand: [ Vx, Mx ]
            prefix: 0xf2
            cpu_model: ">= X86_Arch_Sse3"

      - opcode: 0xf1
        sub_opcodes:
          - mnemonic: psllw
            operand: [ Pq, Qq ]
            cpu_model: ">= X86_Arch_Mmx"

          - mnemonic: psllw
            operand: [ Vx, Wx ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Sse2"

      - opcode: 0xf2
        sub_opcodes:
          - mnemonic: pslld
            operand: [ Pq, Qq ]
            cpu_model: ">= X86_Arch_Mmx"

          - mnemonic: splld
            operand: [ Vx, Wx ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Sse2"

      - opcode: 0xf3
        sub_opcodes:
          - mnemonic: psllq
            operand: [ Pq, Qq ]
            cpu_model: ">= X86_Arch_Mmx"

          - mnemonic: spllq
            operand: [ Vx, Wx ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Sse2"

      - opcode: 0xf4
        sub_opcodes:
          - mnemonic: pmuludq
            operand: [ Pq, Qq ]
            cpu_model: ">= X86_Arch_Mmx_sse2"

          - mnemonic: pmuludq
            operand: [ Vx, Wx ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Sse2"

      - opcode: 0xf5
        sub_opcodes:
          - mnemonic: pmaddwd
            operand: [ Pq, Qq ]
            cpu_model: ">= X86_Arch_Mmx"

          - mnemonic: pmaddwd
            operand: [ Vx, Wx ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Sse2"

      - opcode: 0xf6
        sub_opcodes:
          - mnemonic: psadbw
            operand: [ Pq, Qq ]
            cpu_model: ">= X86_Arch_Mmx_sse"

          - mnemonic: psadbw
            operand: [ Vx, Wx ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Sse2"

      - opcode: 0xf7
        sub_opcodes:
          - mnemonic: maskmovq
            operand: [ Pq, Nq ]
            cpu_model: ">= X86_Arch_Mmx_sse"

          - mnemonic: maskmovdqu
            operand: [ Vo, Uo ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Sse2"

      - opcode: 0xf8
        sub_opcodes:
          - mnemonic: psubb
            operand: [ Pq, Qq ]
            cpu_model: ">= X86_Arch_Mmx"

          - mnemonic: psubb
            operand: [ Vx, Wx ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Sse2"

      - opcode: 0xf9
        sub_opcodes:
          - mnemonic: psubw
            operand: [ Pq, Qq ]
            cpu_model: ">= X86_Arch_Mmx"

          - mnemonic: psubw
            operand: [ Vx, Wx ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Sse2"

      - opcode: 0xfa
        sub_opcodes:
          - mnemonic: psubd
            operand: [ Pq, Qq ]
            cpu_model: ">= X86_Arch_Mmx"

          - mnemonic: psubd
            operand: [ Vx, Wx ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Sse2"

      - opcode: 0xfb
        sub_opcodes:
          - mnemonic: psubq
            operand: [ Pq, Qq ]
            cpu_model: ">= X86_Arch_Mmx"

          - mnemonic: psubq
            operand: [ Vx, Wx ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Sse2"

      - opcode: 0xfc
        sub_opcodes:
          - mnemonic: paddb
            operand: [ Pq, Qq ]
            cpu_model: ">= X86_Arch_Mmx"

          - mnemonic: paddb
            operand: [ Vx, Wx ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Sse2"

      - opcode: 0xfd
        sub_opcodes:
          - mnemonic: paddw
            operand: [ Pq, Qq ]
            cpu_model: ">= X86_Arch_Mmx"

          - mnemonic: paddw
            operand: [ Vx, Wx ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Sse2"

      - opcode: 0xfe
        sub_opcodes:
          - mnemonic: paddd
            operand: [ Pq, Qq ]
            cpu_model: ">= X86_Arch_Mmx"

          - mnemonic: paddd
            operand: [ Vx, Wx ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Sse2"

      - opcode: 0xff
        sub_opcodes:
          - mnemonic: ud
            attr: [ amd ]

    table_3DNOW1:
      - opcode: 0x00
        invalid:

      - opcode: 0x01
        invalid:

      - opcode: 0x02
        invalid:

      - opcode: 0x03
        invalid:

      - opcode: 0x04
        invalid:

      - opcode: 0x05
        invalid:

      - opcode: 0x06
        invalid:

      - opcode: 0x07
        invalid:

      - opcode: 0x08
        invalid:

      - opcode: 0x09
        invalid:

      - opcode: 0x0a
        invalid:

      - opcode: 0x0b
        invalid:

      - opcode: 0x0c
        mnemonic: pi2fw
        operand: [ Pq, Qq ]
        attr: [ amd ]

      - opcode: 0x0d
        mnemonic: pi2fd
        operand: [ Pq, Qq ]
        attr: [ amd ]

      - opcode: 0x0e
        invalid:

      - opcode: 0x0f
        invalid:

      - opcode: 0x10
        invalid:

      - opcode: 0x11
        invalid:

      - opcode: 0x12
        invalid:

      - opcode: 0x13
        invalid:

      - opcode: 0x14
        invalid:

      - opcode: 0x15
        invalid:

      - opcode: 0x16
        invalid:

      - opcode: 0x17
        invalid:

      - opcode: 0x18
        invalid:

      - opcode: 0x19
        invalid:

      - opcode: 0x1a
        invalid:

      - opcode: 0x1b
        invalid:

      - opcode: 0x1c
        mnemonic: pf2iw
        operand: [ Pq, Qq ]
        attr: [ amd ]

      - opcode: 0x1d
        mnemonic: pd2id
        operand: [ Pq, Qq ]
        attr: [ amd ]

      - opcode: 0x1e
        invalid:

      - opcode: 0x1f
        invalid:

      - opcode: 0x20
        invalid:

      - opcode: 0x21
        invalid:

      - opcode: 0x22
        invalid:

      - opcode: 0x23
        invalid:

      - opcode: 0x24
        invalid:

      - opcode: 0x25
        invalid:

      - opcode: 0x26
        invalid:

      - opcode: 0x27
        invalid:

      - opcode: 0x28
        invalid:

      - opcode: 0x29
        invalid:

      - opcode: 0x2a
        invalid:

      - opcode: 0x2b
        invalid:

      - opcode: 0x2c
        invalid:

      - opcode: 0x2d
        invalid:

      - opcode: 0x2e
        invalid:

      - opcode: 0x2f
        invalid:

      - opcode: 0x30
        invalid:

      - opcode: 0x31
        invalid:

      - opcode: 0x32
        invalid:

      - opcode: 0x33
        invalid:

      - opcode: 0x34
        invalid:

      - opcode: 0x35
        invalid:

      - opcode: 0x36
        invalid:

      - opcode: 0x37
        invalid:

      - opcode: 0x38
        invalid:

      - opcode: 0x39
        invalid:

      - opcode: 0x3a
        invalid:

      - opcode: 0x3b
        invalid:

      - opcode: 0x3c
        invalid:

      - opcode: 0x3d
        invalid:

      - opcode: 0x3e
        invalid:

      - opcode: 0x3f
        invalid:

      - opcode: 0x40
        invalid:

      - opcode: 0x41
        invalid:

      - opcode: 0x42
        invalid:

      - opcode: 0x43
        invalid:

      - opcode: 0x44
        invalid:

      - opcode: 0x45
        invalid:

      - opcode: 0x46
        invalid:

      - opcode: 0x47
        invalid:

      - opcode: 0x48
        invalid:

      - opcode: 0x49
        invalid:

      - opcode: 0x4a
        invalid:

      - opcode: 0x4b
        invalid:

      - opcode: 0x4c
        invalid:

      - opcode: 0x4d
        invalid:

      - opcode: 0x4e
        invalid:

      - opcode: 0x4f
        invalid:

      - opcode: 0x50
        invalid:

      - opcode: 0x51
        invalid:

      - opcode: 0x52
        invalid:

      - opcode: 0x53
        invalid:

      - opcode: 0x54
        invalid:

      - opcode: 0x55
        invalid:

      - opcode: 0x56
        invalid:

      - opcode: 0x57
        invalid:

      - opcode: 0x58
        invalid:

      - opcode: 0x59
        invalid:

      - opcode: 0x5a
        invalid:

      - opcode: 0x5b
        invalid:

      - opcode: 0x5c
        invalid:

      - opcode: 0x5d
        invalid:

      - opcode: 0x5e
        invalid:

      - opcode: 0x5f
        invalid:

      - opcode: 0x60
        invalid:

      - opcode: 0x61
        invalid:

      - opcode: 0x62
        invalid:

      - opcode: 0x63
        invalid:

      - opcode: 0x64
        invalid:

      - opcode: 0x65
        invalid:

      - opcode: 0x66
        invalid:

      - opcode: 0x67
        invalid:

      - opcode: 0x68
        invalid:

      - opcode: 0x69
        invalid:

      - opcode: 0x6a
        invalid:

      - opcode: 0x6b
        invalid:

      - opcode: 0x6c
        invalid:

      - opcode: 0x6d
        invalid:

      - opcode: 0x6e
        invalid:

      - opcode: 0x6f
        invalid:

      - opcode: 0x70
        invalid:

      - opcode: 0x71
        invalid:

      - opcode: 0x72
        invalid:

      - opcode: 0x73
        invalid:

      - opcode: 0x74
        invalid:

      - opcode: 0x75
        invalid:

      - opcode: 0x76
        invalid:

      - opcode: 0x77
        invalid:

      - opcode: 0x78
        invalid:

      - opcode: 0x79
        invalid:

      - opcode: 0x7a
        invalid:

      - opcode: 0x7b
        invalid:

      - opcode: 0x7c
        invalid:

      - opcode: 0x7d
        invalid:

      - opcode: 0x7e
        invalid:

      - opcode: 0x7f
        invalid:

      - opcode: 0x80
        invalid:

      - opcode: 0x81
        invalid:

      - opcode: 0x82
        invalid:

      - opcode: 0x83
        invalid:

      - opcode: 0x84
        invalid:

      - opcode: 0x85
        invalid:

      - opcode: 0x86
        mnemonic: pfrcpv
        operand: [ Pq, Qq ]
        attr: [ cyrix ]
        cpu_model: ">= X86_Arch_Geode_lx"

      - opcode: 0x87
        mnemonic: pfrsqrtv
        operand: [ Pq, Qq ]
        attr: [ cyrix ]
        cpu_model: ">= X86_Arch_Geode_lx"

      - opcode: 0x88
        invalid:

      - opcode: 0x89
        invalid:

      - opcode: 0x8a
        mnemonic: pfnacc
        operand: [ Pq, Qq ]
        attr: [ amd ]

      - opcode: 0x8b
        invalid:

      - opcode: 0x8c
        invalid:

      - opcode: 0x8d
        invalid:

      - opcode: 0x8e
        mnemonic: pfpnacc
        operand: [ Pq, Qq ]
        attr: [ amd ]

      - opcode: 0x8f
        invalid:

      - opcode: 0x90
        mnemonic: pfcmge
        operand: [ Pq, Qq ]
        attr: [ amd ]

      - opcode: 0x91
        invalid:

      - opcode: 0x92
        invalid:

      - opcode: 0x93
        invalid:

      - opcode: 0x94
        mnemonic: pfmin
        operand: [ Pq, Qq ]
        attr: [ amd ]

      - opcode: 0x95
        invalid:

      - opcode: 0x96
        mnemonic: pfrcp
        operand: [ Pq, Qq ]
        attr: [ amd ]

      - opcode: 0x97
        mnemonic: pfrsqrt
        operand: [ Pq, Qq ]
        attr: [ amd ]

      - opcode: 0x98
        invalid:

      - opcode: 0x99
        invalid:

      - opcode: 0x9a
        mnemonic: pfsub
        operand: [ Pq, Qq ]
        attr: [ amd ]

      - opcode: 0x9b
        invalid:

      - opcode: 0x9c
        invalid:

      - opcode: 0x9d
        invalid:

      - opcode: 0x9e
        mnemonic: pfadd
        operand: [ Pq, Qq ]
        attr: [ amd ]

      - opcode: 0x9f
        invalid:

      - opcode: 0xa0
        mnemonic: pfcmpgt
        operand: [ Pq, Qq ]
        attr: [ amd ]

      - opcode: 0xa1
        invalid:

      - opcode: 0xa2
        invalid:

      - opcode: 0xa3
        invalid:

      - opcode: 0xa4
        mnemonic: pfmax
        operand: [ Pq, Qq ]
        attr: [ amd ]

      - opcode: 0xa5
        invalid:

      - opcode: 0xa6
        mnemonic: pfrcpit1
        operand: [ Pq, Qq ]
        attr: [ amd ]

      - opcode: 0xa7
        mnemonic: pfrsqit1
        operand: [ Pq, Qq ]
        attr: [ amd ]

      - opcode: 0xa8
        invalid:

      - opcode: 0xa9
        invalid:

      - opcode: 0xaa
        mnemonic: pfsubr
        operand: [ Pq, Qq ]
        attr: [ amd ]

      - opcode: 0xab
        invalid:

      - opcode: 0xac
        invalid:

      - opcode: 0xad
        invalid:

      - opcode: 0xae
        mnemonic: pfacc
        operand: [ Pq, Qq ]
        attr: [ amd ]

      - opcode: 0xaf
        invalid:

      - opcode: 0xb0
        mnemonic: pfcmpeq
        operand: [ Pq, Qq ]
        attr: [ amd ]

      - opcode: 0xb1
        invalid:

      - opcode: 0xb2
        invalid:

      - opcode: 0xb3
        invalid:

      - opcode: 0xb4
        mnemonic: pfmul
        operand: [ Pq, Qq ]
        attr: [ amd ]

      - opcode: 0xb5
        invalid:

      - opcode: 0xb6
        mnemonic: pfrcpit2
        operand: [ Pq, Qq ]
        attr: [ amd ]

      - opcode: 0xb7
        mnemonic: pmulhrw
        operand: [ Pq, Qq ]
        attr: [ amd ]

      - opcode: 0xb8
        invalid:

      - opcode: 0xb9
        invalid:

      - opcode: 0xba
        invalid:

      - opcode: 0xbb
        mnemonic: pswapd
        operand: [ Pq, Qq ]
        attr: [ amd ]

      - opcode: 0xbc
        invalid:

      - opcode: 0xbd
        invalid:

      - opcode: 0xbe
        invalid:

      - opcode: 0xbf
        mnemonic: pavgusb
        operand: [ Pq, Qq ]
        attr: [ amd ]

      - opcode: 0xc0
        invalid:

      - opcode: 0xc1
        invalid:

      - opcode: 0xc2
        invalid:

      - opcode: 0xc3
        invalid:

      - opcode: 0xc4
        invalid:

      - opcode: 0xc5
        invalid:

      - opcode: 0xc6
        invalid:

      - opcode: 0xc7
        invalid:

      - opcode: 0xc8
        invalid:

      - opcode: 0xc9
        invalid:

      - opcode: 0xca
        invalid:

      - opcode: 0xcb
        invalid:

      - opcode: 0xcc
        invalid:

      - opcode: 0xcd
        invalid:

      - opcode: 0xce
        invalid:

      - opcode: 0xcf
        invalid:

      - opcode: 0xd0
        invalid:

      - opcode: 0xd1
        invalid:

      - opcode: 0xd2
        invalid:

      - opcode: 0xd3
        invalid:

      - opcode: 0xd4
        invalid:

      - opcode: 0xd5
        invalid:

      - opcode: 0xd6
        invalid:

      - opcode: 0xd7
        invalid:

      - opcode: 0xd8
        invalid:

      - opcode: 0xd9
        invalid:

      - opcode: 0xda
        invalid:

      - opcode: 0xdb
        invalid:

      - opcode: 0xdc
        invalid:

      - opcode: 0xdd
        invalid:

      - opcode: 0xde
        invalid:

      - opcode: 0xdf
        invalid:

      - opcode: 0xe0
        invalid:

      - opcode: 0xe1
        invalid:

      - opcode: 0xe2
        invalid:

      - opcode: 0xe3
        invalid:

      - opcode: 0xe4
        invalid:

      - opcode: 0xe5
        invalid:

      - opcode: 0xe6
        invalid:

      - opcode: 0xe7
        invalid:

      - opcode: 0xe8
        invalid:

      - opcode: 0xe9
        invalid:

      - opcode: 0xea
        invalid:

      - opcode: 0xeb
        invalid:

      - opcode: 0xec
        invalid:

      - opcode: 0xed
        invalid:

      - opcode: 0xee
        invalid:

      - opcode: 0xef
        invalid:

      - opcode: 0xf0
        invalid:

      - opcode: 0xf1
        invalid:

      - opcode: 0xf2
        invalid:

      - opcode: 0xf3
        invalid:

      - opcode: 0xf4
        invalid:

      - opcode: 0xf5
        invalid:

      - opcode: 0xf6
        invalid:

      - opcode: 0xf7
        invalid:

      - opcode: 0xf8
        invalid:

      - opcode: 0xf9
        invalid:

      - opcode: 0xfa
        invalid:

      - opcode: 0xfb
        invalid:

      - opcode: 0xfc
        invalid:

      - opcode: 0xfd
        invalid:

      - opcode: 0xfe
        invalid:

      - opcode: 0xff
        invalid:

    table_3_38:
      - opcode: 0x00
        sub_opcodes:
          - mnemonic: pshufb
            operand: [ Pq, Qq ]
            cpu_model: ">= X86_Arch_Ssse3"

          - mnemonic: pshufb
            operand: [ Vx, Wx ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Ssse3"

          - mnemonic: pshufb
            operand: [ Vx, Wx ]
            attr: [ ny ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Avx"

          - mnemonic: pshufb
            operand: [ Vx, Wx ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Avx2"

      - opcode: 0x01
        sub_opcodes:
          - mnemonic: phaddw
            operand: [ Pq, Qq ]
            cpu_model: ">= X86_Arch_Ssse3"

          - mnemonic: phaddw
            operand: [ Vx, Wx ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Ssse3"

          - mnemonic: phaddw
            operand: [ Vx, Wx ]
            attr: [ ny ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Avx"

          - mnemonic: phaddw
            operand: [ Vx, Wx ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Avx2"

      - opcode: 0x02
        sub_opcodes:
          - mnemonic: phaddd
            operand: [ Pq, Qq ]
            cpu_model: ">= X86_Arch_Ssse3"

          - mnemonic: phaddd
            operand: [ Vx, Wx ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Ssse3"

          - mnemonic: phaddd
            operand: [ Vx, Wx ]
            attr: [ ny ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Avx"

          - mnemonic: phaddd
            operand: [ Vx, Wx ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Avx2"

      - opcode: 0x03
        sub_opcodes:
          - mnemonic: phaddsw
            operand: [ Pq, Qq ]
            cpu_model: ">= X86_Arch_Ssse3"

          - mnemonic: phaddsw
            operand: [ Vx, Wx ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Ssse3"

          - mnemonic: phaddsw
            operand: [ Vx, Wx ]
            attr: [ ny ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Avx"

          - mnemonic: phaddsw
            operand: [ Vx, Wx ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Avx2"

      - opcode: 0x04
        sub_opcodes:
          - mnemonic: pmaddubsw
            operand: [ Pq, Qq ]
            cpu_model: ">= X86_Arch_Ssse3"

          - mnemonic: pmaddubsw
            operand: [ Vx, Wx ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Ssse3"

          - mnemonic: pmaddubsw
            operand: [ Vx, Wx ]
            attr: [ ny ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Avx"

          - mnemonic: pmaddubsw
            operand: [ Vx, Wx ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Avx2"

      - opcode: 0x05
        sub_opcodes:
          - mnemonic: phsubw
            operand: [ Pq, Qq ]
            cpu_model: ">= X86_Arch_Ssse3"

          - mnemonic: phsubw
            operand: [ Vx, Wx ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Ssse3"

          - mnemonic: phsubw
            operand: [ Vx, Wx ]
            attr: [ ny ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Avx"

          - mnemonic: phsubw
            operand: [ Vx, Wx ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Avx2"

      - opcode: 0x06
        sub_opcodes:
          - mnemonic: phsubd
            operand: [ Pq, Qq ]
            cpu_model: ">= X86_Arch_Ssse3"

          - mnemonic: phsubd
            operand: [ Vx, Wx ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Ssse3"

          - mnemonic: phsubd
            operand: [ Vx, Wx ]
            attr: [ ny ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Avx"

          - mnemonic: phsubd
            operand: [ Vx, Wx ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Avx2"

      - opcode: 0x07
        sub_opcodes:
          - mnemonic: phsubsw
            operand: [ Pq, Qq ]
            cpu_model: ">= X86_Arch_Ssse3"

          - mnemonic: phsubsw
            operand: [ Vx, Wx ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Ssse3"

          - mnemonic: phsubsw
            operand: [ Vx, Wx ]
            attr: [ ny ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Avx"

          - mnemonic: phsubsw
            operand: [ Vx, Wx ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Avx2"

      - opcode: 0x08
        sub_opcodes:
          - mnemonic: psignb
            operand: [ Pq, Qq ]
            cpu_model: ">= X86_Arch_Ssse3"

          - mnemonic: psignb
            operand: [ Vx, Wx ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Ssse3"

          - mnemonic: psignb
            operand: [ Vx, Wx ]
            attr: [ ny ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Avx"

          - mnemonic: psignb
            operand: [ Vx, Wx ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Avx2"

      - opcode: 0x09
        sub_opcodes:
          - mnemonic: psignw
            operand: [ Pq, Qq ]
            cpu_model: ">= X86_Arch_Ssse3"

          - mnemonic: psignw
            operand: [ Vx, Wx ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Ssse3"

          - mnemonic: psignw
            operand: [ Vx, Wx ]
            attr: [ ny ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Avx"

          - mnemonic: psignw
            operand: [ Vx, Wx ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Avx2"

      - opcode: 0x0a
        sub_opcodes:
          - mnemonic: psignd
            operand: [ Pq, Qq ]
            cpu_model: ">= X86_Arch_Ssse3"

          - mnemonic: psignd
            operand: [ Vx, Wx ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Ssse3"

          - mnemonic: psignd
            operand: [ Vx, Wx ]
            attr: [ ny ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Avx"

          - mnemonic: psignd
            operand: [ Vx, Wx ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Avx2"

      - opcode: 0x0b
        sub_opcodes:
          - mnemonic: pmulhrsw
            operand: [ Pq, Qq ]
            cpu_model: ">= X86_Arch_Ssse3"

          - mnemonic: pmulhrsw
            operand: [ Vx, Wx ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Ssse3"

          - mnemonic: pmulhrsw
            operand: [ Vx, Wx ]
            attr: [ ny ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Avx"

          - mnemonic: pmulhrsw
            operand: [ Vx, Wx ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Avx2"

      - opcode: 0x0c
        mnemonic: permilps
        operand: [ Vx, Wx ]
        attr: [ w0 ]
        prefix: 0x66
        cpu_model: ">= X86_Arch_Avx"

      - opcode: 0x0d
        mnemonic: permilpd
        operand: [ Vx, Wx ]
        attr: [ w0 ]
        prefix: 0x66
        cpu_model: ">= X86_Arch_Avx"

      - opcode: 0x0e
        mnemonic: testps
        operand: [ Vx, Wx ]
        attr: [ nv, w0 ]
        prefix: 0x66
        cpu_model: ">= X86_Arch_Avx"

      - opcode: 0x0f
        mnemonic: testpd
        operand: [ Vx, Wx ]
        attr: [ nv, w0 ]
        prefix: 0x66
        cpu_model: ">= X86_Arch_Avx"

      - opcode: 0x10
        mnemonic: pblendvb
        operand: [ Vo, Wo ]
        prefix: 0x66
        cpu_model: ">= X86_Arch_Sse41"

      - opcode: 0x11
        invalid:

      - opcode: 0x12
        invalid:

      - opcode: 0x13
        sub_opcodes:
          - mnemonic: cvtph2ps
            operand: [ Vo, Woq ]
            attr: [ vl0 ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_F16c"

          - mnemonic: cvtph2ps
            operand: [ Vy, Woo ]
            attr: [ vl1 ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_F16c"

      - opcode: 0x14
        mnemonic: blendvps
        operand: [ Vo, Wo ]
        prefix: 0x66
        cpu_model: ">= X86_Arch_Sse41"

      - opcode: 0x15
        mnemonic: blendvpd
        operand: [ Vo, Wo ]
        prefix: 0x66
        cpu_model: ">= X86_Arch_Sse41"

      - opcode: 0x16
        mnemonic: permps
        operand: [ Vy, Hy, Wy ]
        prefix: 0x66
        cpu_model: ">= X86_Arch_Avx2"

      - opcode: 0x17
        sub_opcodes:
          - mnemonic: ptest
            operand: [ Vx, Wx ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Sse41"

          - mnemonic: ptest
            operand: [ Vx, Wx ]
            attr: [ nv ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Avx"

      - opcode: 0x18
        sub_opcodes:
          - mnemonic: broadcastss
            operand: [ Vx, Uod ]
            attr: [ nc, w0 ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Avx"

          - mnemonic: broadcastss
            operand: [ Vx, Uo ]
            attr: [ nc, w0 ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Avx2"

      - opcode: 0x19
        sub_opcodes:
          - mnemonic: broadcastsd
            operand: [ Vy, Woq ]
            attr: [ nc, w0 ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Avx"

          - mnemonic: broadcastsd
            operand: [ Vy, Uo ]
            attr: [ nc, w0 ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Avx2"

      - opcode: 0x1a
        mnemonic: broadcastf128
        operand: [ Vy, Uo ]
        attr: [ nv, w0 ]
        prefix: 0x66
        cpu_model: ">= X86_Arch_Avx"

      - opcode: 0x1b
        invalid:

      - opcode: 0x1c
        sub_opcodes:
          - mnemonic: pabsb
            operand: [ Pq, Qq ]
            cpu_model: ">= X86_Arch_Ssse3"

          - mnemonic: pabsb
            operand: [ Vx, Wx ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Ssse3"

          - mnemonic: pabsb
            operand: [ Vx, Wx ]
            attr: [ ny ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Avx"

          - mnemonic: pabsb
            operand: [ Vx, Wx ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Avx2"

      - opcode: 0x1d
        sub_opcodes:
          - mnemonic: pabsw
            operand: [ Pq, Qq ]
            cpu_model: ">= X86_Arch_Ssse3"

          - mnemonic: pabsw
            operand: [ Vx, Wx ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Ssse3"

          - mnemonic: pabsw
            operand: [ Vx, Wx ]
            attr: [ ny ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Avx"

          - mnemonic: pabsw
            operand: [ Vx, Wx ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Avx2"

      - opcode: 0x1e
        sub_opcodes:
          - mnemonic: pabsd
            operand: [ Pq, Qq ]
            cpu_model: ">= X86_Arch_Ssse3"

          - mnemonic: pabsd
            operand: [ Vx, Wx ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Ssse3"

          - mnemonic: pabsd
            operand: [ Vx, Wx ]
            attr: [ ny ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Avx"

          - mnemonic: pabsd
            operand: [ Vx, Wx ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Avx2"

      - opcode: 0x1f
        invalid:

      - opcode: 0x20
        sub_opcodes:
          - mnemonic: pmovsxbw
            operand: [ Vo, Woq ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Sse41"

          - mnemonic: pmovsxbw
            operand: [ Vo, Woq ]
            attr: [ ny, nv ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Avx"

          - mnemonic: pmovsxbw
            operand: [ Vy, Woo ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Avx2"

      - opcode: 0x21
        sub_opcodes:
          - mnemonic: pmovsxbd
            operand: [ Vo, Wod ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Sse41"

          - mnemonic: pmovsxbd
            operand: [ Vo, Wod ]
            attr: [ ny, nv ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Avx"

          - mnemonic: pmovsxbd
            operand: [ Vy, Woq ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Avx2"

      - opcode: 0x22
        sub_opcodes:
          - mnemonic: pmovsxbq
            operand: [ Vo, Wow ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Sse41"

          - mnemonic: pmovsxbq
            operand: [ Vo, Wow ]
            attr: [ ny, nv ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Avx"

          - mnemonic: pmovsxbq
            operand: [ Vy, Wod ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Avx2"

      - opcode: 0x23
        sub_opcodes:
          - mnemonic: pmovsxwd
            operand: [ Vo, Woq ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Sse41"

          - mnemonic: pmovsxwd
            operand: [ Vo, Woq ]
            attr: [ ny, nv ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Avx"

          - mnemonic: pmovsxwd
            operand: [ Vy, Woo ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Avx2"

      - opcode: 0x24
        sub_opcodes:
          - mnemonic: pmovsxwq
            operand: [ Vo, Wod ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Sse41"

          - mnemonic: pmovsxwq
            operand: [ Vo, Wod ]
            attr: [ ny, nv ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Avx"

          - mnemonic: pmovsxwq
            operand: [ Vy, Woq ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Avx2"

      - opcode: 0x25
        sub_opcodes:
          - mnemonic: pmovsxdq
            operand: [ Vo, Wow ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Sse41"

          - mnemonic: pmovsxdq
            operand: [ Vo, Wow ]
            attr: [ ny, nv ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Avx"

          - mnemonic: pmovsxdq
            operand: [ Vy, Wod ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Avx2"

      - opcode: 0x26
        invalid:

      - opcode: 0x27
        invalid:

      - opcode: 0x28
        sub_opcodes:
          - mnemonic: pmuldq
            operand: [ Vx, Wx ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Sse41"

          - mnemonic: pmuldq
            operand: [ Vx, Wx ]
            attr: [ ny ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Avx"

          - mnemonic: pmuldq
            operand: [ Vx, Wx ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Avx2"

      - opcode: 0x29
        sub_opcodes:
          - mnemonic: pcmpeqq
            operand: [ Vx, Wx ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Sse41"

          - mnemonic: pcmpeqq
            operand: [ Vx, Wx ]
            attr: [ ny ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Avx"

          - mnemonic: pcmpeqq
            operand: [ Vx, Wx ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Avx2"

      - opcode: 0x2a
        sub_opcodes:
          - mnemonic: movntdqa
            operand: [ Vx, Mx ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Sse41"

          - mnemonic: movntdqa
            operand: [ Vx, Mx ]
            attr: [ nv, ny ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Avx"

          - mnemonic: movntdqa
            operand: [ Vx, Mx ]
            attr: [ nv ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Avx2"

      - opcode: 0x2b
        sub_opcodes:
          - mnemonic: packusdw
            operand: [ Vx, Wx ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Sse41"

          - mnemonic: packusdw
            operand: [ Vx, Wx ]
            attr: [ ny ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Avx"

          - mnemonic: packusdw
            operand: [ Vx, Wx ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Avx2"

      - opcode: 0x2c
        mnemonic: maskmovps
        operand: [ Vx, Mx ]
        attr: [ w0 ]
        prefix: 0x66
        cpu_model: ">= X86_Arch_Avx"

      - opcode: 0x2d
        mnemonic: maskmovpd
        operand: [ Vx, Mx ]
        attr: [ w0 ]
        prefix: 0x66
        cpu_model: ">= X86_Arch_Avx"

      - opcode: 0x2e
        mnemonic: maskmovps
        operand: [ Mx, Vx ]
        attr: [ w0 ]
        prefix: 0x66
        cpu_model: ">= X86_Arch_Avx"

      - opcode: 0x2f
        mnemonic: maskmovpd
        operand: [ Mx, Vx ]
        attr: [ w0 ]
        prefix: 0x66
        cpu_model: ">= X86_Arch_Avx"

      - opcode: 0x30
        sub_opcodes:
          - mnemonic: pmovzxbw
            operand: [ Vo, Woq ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Sse41"

          - mnemonic: pmovzxbw
            operand: [ Vo, Woq ]
            attr: [ ny, nv ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Avx"

          - mnemonic: pmovzxbw
            operand: [ Vy, Woo ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Avx2"

      - opcode: 0x31
        sub_opcodes:
          - mnemonic: pmovzxbd
            operand: [ Vo, Wod ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Sse41"

          - mnemonic: pmovzxbd
            operand: [ Vo, Wod ]
            attr: [ ny, nv ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Avx"

          - mnemonic: pmovzxbd
            operand: [ Vy, Woq ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Avx2"

      - opcode: 0x32
        sub_opcodes:
          - mnemonic: pmovzxbq
            operand: [ Vo, Wow ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Sse41"

          - mnemonic: pmovzxbq
            operand: [ Vo, Wow ]
            attr: [ ny, nv ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Avx"

          - mnemonic: pmovzxbq
            operand: [ Vy, Wod ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Avx2"

      - opcode: 0x33
        sub_opcodes:
          - mnemonic: pmovzxwd
            operand: [ Vo, Woq ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Sse41"

          - mnemonic: pmovzxwd
            operand: [ Vo, Woq ]
            attr: [ ny, nv ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Avx"

          - mnemonic: pmovzxwd
            operand: [ Vy, Woo ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Avx2"

      - opcode: 0x34
        sub_opcodes:
          - mnemonic: pmovzxwq
            operand: [ Vo, Wod ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Sse41"

          - mnemonic: pmovzxwq
            operand: [ Vo, Wod ]
            attr: [ ny, nv ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Avx"

          - mnemonic: pmovzxwq
            operand: [ Vy, Woq ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Avx2"

      - opcode: 0x35
        sub_opcodes:
          - mnemonic: pmovzxdq
            operand: [ Vo, Woq ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Sse41"

          - mnemonic: pmovzxdq
            operand: [ Vo, Woq ]
            attr: [ ny, nv ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Avx"

          - mnemonic: pmovzxdq
            operand: [ Vy, Woo ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Avx2"

      - opcode: 0x36
        mnemonic: permd
        operand: [ Vy, Hy, Wy ]
        prefix: 0x66
        cpu_model: ">= X86_Arch_Avx2"

      - opcode: 0x37
        sub_opcodes:
          - mnemonic: pcmpgtq
            operand: [ Vx, Wx ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Sse42"

          - mnemonic: pcmpgtq
            operand: [ Vx, Wx ]
            attr: [ ny ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Avx"

      - opcode: 0x38
        sub_opcodes:
          - mnemonic: pminsb
            operand: [ Vx, Wx ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Sse41"

          - mnemonic: pminsb
            operand: [ Vx, Wx ]
            attr: [ ny ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Avx"

          - mnemonic: pminsb
            operand: [ Vx, Wx ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Avx2"

      - opcode: 0x39
        sub_opcodes:
          - mnemonic: pminsd
            operand: [ Vx, Wx ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Sse41"

          - mnemonic: pminsd
            operand: [ Vx, Wx ]
            attr: [ ny ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Avx"

          - mnemonic: pminsd
            operand: [ Vx, Wx ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Avx2"

      - opcode: 0x3a
        sub_opcodes:
          - mnemonic: pminuw
            operand: [ Vx, Wx ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Sse41"

          - mnemonic: pminuw
            operand: [ Vx, Wx ]
            attr: [ ny ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Avx"

          - mnemonic: pminuw
            operand: [ Vx, Wx ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Avx2"

      - opcode: 0x3b
        sub_opcodes:
          - mnemonic: pminud
            operand: [ Vx, Wx ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Sse41"

          - mnemonic: pminud
            operand: [ Vx, Wx ]
            attr: [ ny ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Avx"

          - mnemonic: pminud
            operand: [ Vx, Wx ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Avx2"

      - opcode: 0x3c
        sub_opcodes:
          - mnemonic: pmaxsb
            operand: [ Vx, Wx ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Sse41"

          - mnemonic: pmaxsb
            operand: [ Vx, Wx ]
            attr: [ ny ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Avx"

          - mnemonic: pmaxsb
            operand: [ Vx, Wx ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Avx2"

      - opcode: 0x3d
        sub_opcodes:
          - mnemonic: pmaxsd
            operand: [ Vx, Wx ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Sse41"

          - mnemonic: pmaxsd
            operand: [ Vx, Wx ]
            attr: [ ny ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Avx"

          - mnemonic: pmaxsd
            operand: [ Vx, Wx ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Avx2"

      - opcode: 0x3e
        sub_opcodes:
          - mnemonic: pmaxuw
            operand: [ Vx, Wx ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Sse41"

          - mnemonic: pmaxuw
            operand: [ Vx, Wx ]
            attr: [ ny ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Avx"

          - mnemonic: pmaxuw
            operand: [ Vx, Wx ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Avx2"

      - opcode: 0x3f
        sub_opcodes:
          - mnemonic: pmaxud
            operand: [ Vx, Wx ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Sse41"

          - mnemonic: pmaxud
            operand: [ Vx, Wx ]
            attr: [ ny ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Avx"

          - mnemonic: pmaxud
            operand: [ Vx, Wx ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Avx2"

      - opcode: 0x40
        sub_opcodes:
          - mnemonic: pmulld
            operand: [ Vx, Wx ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Sse41"

          - mnemonic: pmulld
            operand: [ Vx, Wx ]
            attr: [ ny ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Avx"

          - mnemonic: pmulld
            operand: [ Vx, Wx ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Avx2"

      - opcode: 0x41
        sub_opcodes:
          - mnemonic: phminposuw
            operand: [ Vo, Wo ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Sse41"

          - mnemonic: phminposuw
            operand: [ Vo, Wo ]
            attr: [ ny, nv ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Avx"

      - opcode: 0x42
        invalid:

      - opcode: 0x43
        invalid:

      - opcode: 0x44
        invalid:

      - opcode: 0x45
        sub_opcodes:
          - mnemonic: psrlvd
            operand: [ Vx, Wx ]
            attr: [ w0 ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Avx2"

          - mnemonic: psrlvq
            operand: [ Vx, Wx ]
            attr: [ w1 ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Avx2"

      - opcode: 0x46
        mnemonic: psravd
        operand: [ Vx, Wx ]
        attr: [ w0 ]
        prefix: 0x66
        cpu_model: ">= X86_Arch_Avx2"

      - opcode: 0x47
        sub_opcodes:
          - mnemonic: psllvd
            operand: [ Vx, Wx ]
            attr: [ w0 ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Avx2"

          - mnemonic: psllvq
            operand: [ Vx, Wx ]
            attr: [ w0 ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Avx2"

      - opcode: 0x48
        invalid:

      - opcode: 0x49
        invalid:

      - opcode: 0x4a
        invalid:

      - opcode: 0x4b
        invalid:

      - opcode: 0x4c
        invalid:

      - opcode: 0x4d
        invalid:

      - opcode: 0x4e
        invalid:

      - opcode: 0x4f
        invalid:

      - opcode: 0x50
        invalid:

      - opcode: 0x51
        invalid:

      - opcode: 0x52
        invalid:

      - opcode: 0x53
        invalid:

      - opcode: 0x54
        invalid:

      - opcode: 0x55
        invalid:

      - opcode: 0x56
        invalid:

      - opcode: 0x57
        invalid:

      - opcode: 0x58
        mnemonic: pbroadcastd
        operand: [ Vx, Uod ]
        attr: [ nv, w0 ]
        prefix: 0x66
        cpu_model: ">= X86_Arch_Avx2"

      - opcode: 0x59
        mnemonic: pbroadcastq
        operand: [ Vx, Woq ]
        attr: [ nv, w0 ]
        prefix: 0x66
        cpu_model: ">= X86_Arch_Avx2"

      - opcode: 0x5a
        mnemonic: broadcasti128
        operand: [ Vy, Uo ]
        attr: [ nv, w0 ]
        prefix: 0x66
        cpu_model: ">= X86_Arch_Avx2"

      - opcode: 0x5b
        invalid:

      - opcode: 0x5c
        invalid:

      - opcode: 0x5d
        invalid:

      - opcode: 0x5e
        invalid:

      - opcode: 0x5f
        invalid:

      - opcode: 0x60
        invalid:

      - opcode: 0x61
        invalid:

      - opcode: 0x62
        invalid:

      - opcode: 0x63
        invalid:

      - opcode: 0x64
        invalid:

      - opcode: 0x65
        invalid:

      - opcode: 0x66
        invalid:

      - opcode: 0x67
        invalid:

      - opcode: 0x68
        invalid:

      - opcode: 0x69
        invalid:

      - opcode: 0x6a
        invalid:

      - opcode: 0x6b
        invalid:

      - opcode: 0x6c
        invalid:

      - opcode: 0x6d
        invalid:

      - opcode: 0x6e
        invalid:

      - opcode: 0x6f
        invalid:

      - opcode: 0x70
        invalid:

      - opcode: 0x71
        invalid:

      - opcode: 0x72
        invalid:

      - opcode: 0x73
        invalid:

      - opcode: 0x74
        invalid:

      - opcode: 0x75
        invalid:

      - opcode: 0x76
        invalid:

      - opcode: 0x77
        invalid:

      - opcode: 0x78
        mnemonic: pbroadcastb
        operand: [ Vx, Uo, b ]
        attr: [ nv ]
        prefix: 0x66
        cpu_model: ">= X86_Arch_Avx2"

      - opcode: 0x79
        mnemonic: pbroadcastw
        operand: [ Vx, Uo, w ]
        attr: [ nv ]
        prefix: 0x66
        cpu_model: ">= X86_Arch_Avx2"

      - opcode: 0x7a
        invalid:

      - opcode: 0x7b
        invalid:

      - opcode: 0x7c
        invalid:

      - opcode: 0x7d
        invalid:

      - opcode: 0x7e
        invalid:

      - opcode: 0x7f
        invalid:

      - opcode: 0x80
        mnemonic: invept
        operand: [ Gy, Uo ]
        prefix: 0x66
        cpu_model: ">= X86_Arch_Vmx"

      - opcode: 0x81
        mnemonic: invvpid
        operand: [ Gy, Uo ]
        prefix: 0x66
        cpu_model: ">= X86_Arch_Vmx"

      - opcode: 0x82
        mnemonic: invpcid
        operand: [ Gy, Uo ]
        prefix: 0x66
        cpu_model: ">= X86_Arch_Invpcid"

      - opcode: 0x83
        invalid:

      - opcode: 0x84
        invalid:

      - opcode: 0x85
        invalid:

      - opcode: 0x86
        invalid:

      - opcode: 0x87
        invalid:

      - opcode: 0x88
        invalid:

      - opcode: 0x89
        invalid:

      - opcode: 0x8a
        invalid:

      - opcode: 0x8b
        invalid:

      - opcode: 0x8c
        sub_opcodes:
          - mnemonic: pmaskmovd
            operand: [ Vx, Mx ]
            attr: [ w0 ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Avx2"

          - mnemonic: pmaskmovq
            operand: [ Vx, Mx ]
            attr: [ w1 ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Avx2"

      - opcode: 0x8d
        invalid:

      - opcode: 0x8e
        sub_opcodes:
          - mnemonic: pmaskmovd
            operand: [ Mx, Vx ]
            attr: [ w0 ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Avx2"

          - mnemonic: pmaskmovq
            operand: [ Mx, Vx ]
            attr: [ w1 ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Avx2"

      - opcode: 0x8f
        invalid:

      - opcode: 0x90
        sub_opcodes:
          - mnemonic: pgatherdd
            operand: [ Vx, Md, x, Hx ]
            attr: [ w0 ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Avx2"

          - mnemonic: pgatherdq
            operand: [ Vx, Mqo, Hx ]
            attr: [ w1 ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Avx2"

      - opcode: 0x91
        sub_opcodes:
          - mnemonic: pgatherqd
            operand: [ Vo, Md, x, Ho ]
            attr: [ w0 ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Avx2"

          - mnemonic: pgatherqq
            operand: [ Vx, Mq, x, Hx ]
            attr: [ w1 ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Avx2"

      - opcode: 0x92
        sub_opcodes:
          - mnemonic: pgatherdps
            operand: [ Vx, Md, x, Hx ]
            attr: [ w0 ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Avx2"

          - mnemonic: pgatherdpd
            operand: [ Vx, Mqo, Hx ]
            attr: [ w1 ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Avx2"

      - opcode: 0x93
        sub_opcodes:
          - mnemonic: pgatherqps
            operand: [ Vo, Md, x, Ho ]
            attr: [ w0 ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Avx2"

          - mnemonic: pgatherqpd
            operand: [ Vx, Mq, x, Hx ]
            attr: [ w1 ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Avx2"

      - opcode: 0x94
        invalid:

      - opcode: 0x95
        invalid:

      - opcode: 0x96
        sub_opcodes:
          - mnemonic: fmaddsub132ps
            operand: [ Vx, Wx ]
            attr: [ w0 ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Fma"

          - mnemonic: fmaddsub132pd
            operand: [ Vx, Wx ]
            attr: [ w1 ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Fma"

      - opcode: 0x97
        sub_opcodes:
          - mnemonic: fmsubadd132ps
            operand: [ Vx, Wx ]
            attr: [ w0 ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Fma"

          - mnemonic: fmsubadd132pd
            operand: [ Vx, Wx ]
            attr: [ w1 ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Fma"

      - opcode: 0x98
        sub_opcodes:
          - mnemonic: fmadd132ps
            operand: [ Vx, Wx ]
            attr: [ w0 ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Fma"

          - mnemonic: fmadd132pd
            operand: [ Vx, Wx ]
            attr: [ w1 ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Fma"

      - opcode: 0x99
        sub_opcodes:
          - mnemonic: fmadd132ss
            operand: [ Vo, Ho, Wd ]
            attr: [ w0 ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Fma"

          - mnemonic: fmadd132sd
            operand: [ Vo, Ho, Wq ]
            attr: [ w1 ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Fma"

      - opcode: 0x9a
        sub_opcodes:
          - mnemonic: fmsub132ps
            operand: [ Vx, Wx ]
            attr: [ w0 ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Fma"

          - mnemonic: fmsub132pd
            operand: [ Vx, Wx ]
            attr: [ w1 ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Fma"

      - opcode: 0x9b
        sub_opcodes:
          - mnemonic: fmsub132ss
            operand: [ Vo, Ho, Wd ]
            attr: [ w0 ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Fma"

          - mnemonic: fmsub132sd
            operand: [ Vo, Ho, Wq ]
            attr: [ w1 ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Fma"

      - opcode: 0x9c
        sub_opcodes:
          - mnemonic: fnmadd132ps
            operand: [ Vx, Wx ]
            attr: [ w0 ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Fma"

          - mnemonic: fnmadd132pd
            operand: [ Vx, Wx ]
            attr: [ w1 ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Fma"

      - opcode: 0x9d
        sub_opcodes:
          - mnemonic: fnmadd132ss
            operand: [ Vo, Ho, Wd ]
            attr: [ w0 ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Fma"

          - mnemonic: fnmadd132sd
            operand: [ Vo, Ho, Wq ]
            attr: [ w1 ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Fma"

      - opcode: 0x9e
        sub_opcodes:
          - mnemonic: fnmsub132ps
            operand: [ Vx, Wx ]
            attr: [ w0 ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Fma"

          - mnemonic: fnmsub132pd
            operand: [ Vx, Wx ]
            attr: [ w1 ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Fma"

      - opcode: 0x9f
        sub_opcodes:
          - mnemonic: fnmsub132ss
            operand: [ Vo, Ho, Wd ]
            attr: [ w0 ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Fma"

          - mnemonic: fnmsub132sd
            operand: [ Vo, Ho, Wq ]
            attr: [ w1 ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Fma"

      - opcode: 0xa0
        invalid:

      - opcode: 0xa1
        invalid:

      - opcode: 0xa2
        invalid:

      - opcode: 0xa3
        invalid:

      - opcode: 0xa4
        invalid:

      - opcode: 0xa5
        invalid:

      - opcode: 0xa6
        sub_opcodes:
          - mnemonic: fmaddsub213ps
            operand: [ Vx, Wx ]
            attr: [ w0 ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Fma"

          - mnemonic: fmaddsub213pd
            operand: [ Vx, Wx ]
            attr: [ w1 ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Fma"

      - opcode: 0xa7
        sub_opcodes:
          - mnemonic: fmsubadd213ps
            operand: [ Vx, Wx ]
            attr: [ w0 ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Fma"

          - mnemonic: fmsubadd213pd
            operand: [ Vx, Wx ]
            attr: [ w1 ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Fma"

      - opcode: 0xa8
        sub_opcodes:
          - mnemonic: fmadd213ps
            operand: [ Vx, Wx ]
            attr: [ w0 ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Fma"

          - mnemonic: fmadd213pd
            operand: [ Vx, Wx ]
            attr: [ w1 ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Fma"

      - opcode: 0xa9
        sub_opcodes:
          - mnemonic: fmadd213ss
            operand: [ Vo, Ho, Wd ]
            attr: [ w0 ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Fma"

          - mnemonic: fmadd213sd
            operand: [ Vo, Ho, Wq ]
            attr: [ w1 ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Fma"

      - opcode: 0xaa
        sub_opcodes:
          - mnemonic: fmsub213ps
            operand: [ Vx, Wx ]
            attr: [ w0 ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Fma"

          - mnemonic: fmsub213pd
            operand: [ Vx, Wx ]
            attr: [ w1 ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Fma"

      - opcode: 0xab
        sub_opcodes:
          - mnemonic: fmsub213ss
            operand: [ Vo, Ho, Wd ]
            attr: [ w0 ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Fma"

          - mnemonic: fmsub213sd
            operand: [ Vo, Ho, Wq ]
            attr: [ w1 ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Fma"

      - opcode: 0xac
        sub_opcodes:
          - mnemonic: fnmadd213ps
            operand: [ Vx, Wx ]
            attr: [ w0 ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Fma"

          - mnemonic: fnmadd213pd
            operand: [ Vx, Wx ]
            attr: [ w1 ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Fma"

      - opcode: 0xad
        sub_opcodes:
          - mnemonic: fnmadd213ss
            operand: [ Vo, Ho, Wd ]
            attr: [ w0 ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Fma"

          - mnemonic: fnmadd213sd
            operand: [ Vo, Ho, Wq ]
            attr: [ w1 ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Fma"

      - opcode: 0xae
        sub_opcodes:
          - mnemonic: fnmsub213ps
            operand: [ Vx, Wx ]
            attr: [ w0 ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Fma"

          - mnemonic: fnmsub213pd
            operand: [ Vx, Wx ]
            attr: [ w1 ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Fma"

      - opcode: 0xaf
        sub_opcodes:
          - mnemonic: fnmsub213ss
            operand: [ Vo, Ho, Wd ]
            attr: [ w0 ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Fma"

          - mnemonic: fnmsub213sd
            operand: [ Vo, Ho, Wq ]
            attr: [ w1 ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Fma"

      - opcode: 0xb0
        invalid:

      - opcode: 0xb1
        invalid:

      - opcode: 0xb2
        invalid:

      - opcode: 0xb3
        invalid:

      - opcode: 0xb4
        invalid:

      - opcode: 0xb5
        invalid:

      - opcode: 0xb6
        sub_opcodes:
          - mnemonic: fmaddsub231ps
            operand: [ Vx, Wx ]
            attr: [ w0 ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Fma"

          - mnemonic: fmaddsub231pd
            operand: [ Vx, Wx ]
            attr: [ w1 ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Fma"

      - opcode: 0xb7
        sub_opcodes:
          - mnemonic: fmsubadd231ps
            operand: [ Vx, Wx ]
            attr: [ w0 ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Fma"

          - mnemonic: fmsubadd231pd
            operand: [ Vx, Wx ]
            attr: [ w1 ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Fma"

      - opcode: 0xb8
        sub_opcodes:
          - mnemonic: fmadd231ps
            operand: [ Vx, Wx ]
            attr: [ w0 ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Fma"

          - mnemonic: fmadd231pd
            operand: [ Vx, Wx ]
            attr: [ w1 ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Fma"

      - opcode: 0xb9
        sub_opcodes:
          - mnemonic: fmadd231ss
            operand: [ Vo, Ho, Wd ]
            attr: [ w0 ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Fma"

          - mnemonic: fmadd231sd
            operand: [ Vo, Ho, Wq ]
            attr: [ w1 ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Fma"

      - opcode: 0xba
        sub_opcodes:
          - mnemonic: fmsub231ps
            operand: [ Vx, Wx ]
            attr: [ w0 ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Fma"

          - mnemonic: fmsub231pd
            operand: [ Vx, Wx ]
            attr: [ w1 ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Fma"

      - opcode: 0xbb
        sub_opcodes:
          - mnemonic: fmsub231ss
            operand: [ Vo, Ho, Wd ]
            attr: [ w0 ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Fma"

          - mnemonic: fmsub231sd
            operand: [ Vo, Ho, Wq ]
            attr: [ w1 ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Fma"

      - opcode: 0xbc
        sub_opcodes:
          - mnemonic: fnmadd231ps
            operand: [ Vx, Wx ]
            attr: [ w0 ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Fma"

          - mnemonic: fnmadd231pd
            operand: [ Vx, Wx ]
            attr: [ w1 ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Fma"

      - opcode: 0xbd
        sub_opcodes:
          - mnemonic: fnmadd231ss
            operand: [ Vo, Ho, Wd ]
            attr: [ w0 ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Fma"

          - mnemonic: fnmadd231sd
            operand: [ Vo, Ho, Wq ]
            attr: [ w1 ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Fma"

      - opcode: 0xbe
        sub_opcodes:
          - mnemonic: fnmsub231ps
            operand: [ Vx, Wx ]
            attr: [ w0 ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Fma"

          - mnemonic: fnmsub231pd
            operand: [ Vx, Wx ]
            attr: [ w1 ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Fma"

      - opcode: 0xbf
        sub_opcodes:
          - mnemonic: fnmsub231ss
            operand: [ Vo, Ho, Wd ]
            attr: [ w0 ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Fma"

          - mnemonic: fnmsub231sd
            operand: [ Vo, Ho, Wq ]
            attr: [ w1 ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Fma"

      - opcode: 0xc0
        invalid:

      - opcode: 0xc1
        invalid:

      - opcode: 0xc2
        invalid:

      - opcode: 0xc3
        invalid:

      - opcode: 0xc4
        invalid:

      - opcode: 0xc5
        invalid:

      - opcode: 0xc6
        invalid:

      - opcode: 0xc7
        invalid:

      - opcode: 0xc8
        invalid:

      - opcode: 0xc9
        invalid:

      - opcode: 0xca
        invalid:

      - opcode: 0xcb
        invalid:

      - opcode: 0xcc
        invalid:

      - opcode: 0xcd
        invalid:

      - opcode: 0xce
        invalid:

      - opcode: 0xcf
        invalid:

      - opcode: 0xd0
        invalid:

      - opcode: 0xd1
        invalid:

      - opcode: 0xd2
        invalid:

      - opcode: 0xd3
        invalid:

      - opcode: 0xd4
        invalid:

      - opcode: 0xd5
        invalid:

      - opcode: 0xd6
        invalid:

      - opcode: 0xd7
        invalid:

      - opcode: 0xd8
        invalid:

      - opcode: 0xd9
        invalid:

      - opcode: 0xda
        invalid:

      - opcode: 0xdb
        sub_opcodes:
          - mnemonic: aesimc
            operand: [ Vo, Wo ]
            attr: [ nv, ny ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Aes"

          - mnemonic: aesimc
            operand: [ Vo, Wo ]
            attr: [ nv, ny ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Avx"

      - opcode: 0xdc
        sub_opcodes:
          - mnemonic: aesenc
            operand: [ Vo, Wo ]
            attr: [ nv, ny ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Aes"

          - mnemonic: aesenc
            operand: [ Vo, Ho, Wo ]
            attr: [ ny ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Avx"

      - opcode: 0xdd
        sub_opcodes:
          - mnemonic: aesenclast
            operand: [ Vo, Wo ]
            attr: [ nv, ny ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Aes"

          - mnemonic: aesenclast
            operand: [ Vo, Ho, Wo ]
            attr: [ ny ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Avx"

      - opcode: 0xde
        sub_opcodes:
          - mnemonic: aesdec
            operand: [ Vo, Wo ]
            attr: [ nv, ny ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Aes"

          - mnemonic: aesdec
            operand: [ Vo, Ho, Wo ]
            attr: [ ny ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Avx"

      - opcode: 0xdf
        sub_opcodes:
          - mnemonic: aesdeclast
            operand: [ Vo, Wo ]
            attr: [ nv, ny ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Aes"

          - mnemonic: aesdeclast
            operand: [ Vo, Ho, Wo ]
            attr: [ ny ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Avx"

      - opcode: 0xe0
        invalid:

      - opcode: 0xe1
        invalid:

      - opcode: 0xe2
        invalid:

      - opcode: 0xe3
        invalid:

      - opcode: 0xe4
        invalid:

      - opcode: 0xe5
        invalid:

      - opcode: 0xe6
        invalid:

      - opcode: 0xe7
        invalid:

      - opcode: 0xe8
        invalid:

      - opcode: 0xe9
        invalid:

      - opcode: 0xea
        invalid:

      - opcode: 0xeb
        invalid:

      - opcode: 0xec
        invalid:

      - opcode: 0xed
        invalid:

      - opcode: 0xee
        invalid:

      - opcode: 0xef
        invalid:

      - opcode: 0xf0
        sub_opcodes:
          - mnemonic: movbe
            operand: [ Gv, Mv ]
            cpu_model: ">= X86_Arch_Movbe"

          - mnemonic: movbe
            operand: [ Gv, Mv ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Movbe"

          - mnemonic: crc32
            operand: [ Gy, Eb ]
            prefix: 0xf2
            cpu_model: ">= X86_Arch_Sse42"

          - mnemonic: crc32
            operand: [ Gy, Eb ]
            prefix: [ 0x66, 0xf2 ]
            cpu_model: ">= X86_Arch_Sse42"

      - opcode: 0xf1
        sub_opcodes:
          - mnemonic: movbe
            operand: [ Mv, Gv ]
            cpu_model: ">= X86_Arch_Movbe"

          - mnemonic: movbe
            operand: [ Mv, Gv ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Movbe"

          - mnemonic: crc32
            operand: [ Gy, Ev ]
            prefix: 0xf2
            cpu_model: ">= X86_Arch_Sse42"

          - mnemonic: crc32
            operand: [ Gy, Ev ]
            prefix: [ 0x66, 0xf2 ]
            cpu_model: ">= X86_Arch_Sse42"

      - opcode: 0xf2
        mnemonic: andn
        operand: [ Gy, By, Ey ]
        cpu_model: ">= X86_Arch_Bmi"

      # LATER: This part is not done
      - opcode: 0xf3
        sub_opcodes:
          - reference: group_17

          - reference: group_17
            prefix: 0x66

          - reference: group_17
            prefix: 0xf3

          - reference: group_17
            prefix: 0xf2

          - reference: group_17
            prefix: [ 0x66, 0xf2 ]

      - opcode: 0xf4
        invalid:

      - opcode: 0xf5
        sub_opcodes:
          - mnemonic: bzhi
            operand: [ Gy, Ey, By ]
            cpu_model: ">= X86_Arch_Bmi2"

          - mnemonic: pext
            operand: [ Gy, By, Ey ]
            prefix: 0xf3
            cpu_model: ">= X86_Arch_Bmi2"

          - mnemonic: pdep
            operand: [ Gy, By, Ey ]
            prefix: 0xf2
            cpu_model: ">= X86_Arch_Bmi2"

      - opcode: 0xf6
        mnemonic: mulx
        operand: [ Gy, Ey, By ]
        prefix: 0xf2
        cpu_model: ">= X86_Arch_Bmi2"

      - opcode: 0xf7
        sub_opcodes:
          - mnemonic: bextr
            operand: [ Gy, Ey, By ]
            cpu_model: ">= X86_Arch_Bmi"

          - mnemonic: shlx
            operand: [ Gy, Ey, By ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Bmi2"

          - mnemonic: sarx
            operand: [ Gy, Ey, By ]
            prefix: 0xf3
            cpu_model: ">= X86_Arch_Bmi2"

          - mnemonic: shrx
            operand: [ Gy, Ey, By ]
            prefix: 0xf2
            cpu_model: ">= X86_Arch_Bmi2"

      - opcode: 0xf8
        invalid:

      - opcode: 0xf9
        invalid:

      - opcode: 0xfa
        invalid:

      - opcode: 0xfb
        invalid:

      - opcode: 0xfc
        invalid:

      - opcode: 0xfd
        invalid:

      - opcode: 0xfe
        invalid:

      - opcode: 0xff
        invalid:

    table_3_3A:
      - opcode: 0x00
        mnemonic: permq
        operand: [ Vy, Wy, Ib ]
        prefix: 0x66
        cpu_model: ">= X86_Arch_Avx2"

      - opcode: 0x01
        mnemonic: permd
        operand: [ Vy, Wy, Ib ]
        prefix: 0x66
        cpu_model: ">= X86_Arch_Avx2"

      - opcode: 0x02
        mnemonic: pblendd
        operand: [ Vx, Wx, Ib ]
        prefix: 0x66
        cpu_model: ">= X86_Arch_Avx2"

      - opcode: 0x03
        invalid:

      - opcode: 0x04
        mnemonic: permilps
        operand: [ Vx, Wx, Ib ]
        prefix: 0x66
        cpu_model: ">= X86_Arch_Avx"

      - opcode: 0x05
        mnemonic: permilpd
        operand: [ Vx, Wx, Ib ]
        prefix: 0x66
        cpu_model: ">= X86_Arch_Avx"

      - opcode: 0x06
        mnemonic: perm2f128
        operand: [ Vy, Hy, Wy, Ib ]
        prefix: 0x66
        cpu_model: ">= X86_Arch_Avx"

      - opcode: 0x07
        invalid:

      - opcode: 0x08
        sub_opcodes:
          - mnemonic: roundps
            operand: [ Vx, Wx, Ib ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Sse41"

          - mnemonic: roundps
            operand: [ Vx, Wx, Ib ]
            attr: [ nv ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Avx"

      - opcode: 0x09
        sub_opcodes:
          - mnemonic: roundpd
            operand: [ Vx, Wx, Ib ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Sse41"

          - mnemonic: roundpd
            operand: [ Vx, Wx, Ib ]
            attr: [ nv ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Avx"

      - opcode: 0x0a
        sub_opcodes:
          - mnemonic: roundss
            operand: [ Vo, Woq, Ib ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Sse41"

          - mnemonic: roundss
            operand: [ Vo, Ho, Woq, Ib ]
            attr: [ ny ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Avx"

      - opcode: 0x0b
        sub_opcodes:
          - mnemonic: roundsd
            operand: [ Vo, Woq, Ib ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Sse41"

          - mnemonic: roundsd
            operand: [ Vo, Ho, Woq, Ib ]
            attr: [ ny ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Avx"

      - opcode: 0x0c
        sub_opcodes:
          - mnemonic: blendps
            operand: [ Vx, Wx, Ib ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Sse41"

          - mnemonic: blendps
            operand: [ Vx, Wx, Ib ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Avx"

      - opcode: 0x0d
        sub_opcodes:
          - mnemonic: blendpd
            operand: [ Vx, Wx, Ib ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Sse41"

          - mnemonic: blendpd
            operand: [ Vx, Wx, Ib ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Avx"

      - opcode: 0x0e
        sub_opcodes:
          - mnemonic: blendw
            operand: [ Vx, Wx, Ib ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Sse41"

          - mnemonic: blendw
            operand: [ Vx, Wx, Ib ]
            attr: [ ny ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Avx"

          - mnemonic: blendw
            operand: [ Vx, Wx, Ib ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Avx2"

      - opcode: 0x0f
        sub_opcodes:
          - mnemonic: palignr
            operand: [ Pq, Qq, Ib ]
            cpu_model: ">= X86_Arch_Ssse3"

          - mnemonic: palignr
            operand: [ Vx, Wx, Ib ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Ssse3"

          - mnemonic: palignr
            operand: [ Vx, Wx, Ib ]
            attr: [ ny ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Avx"

          - mnemonic: palignr
            operand: [ Vx, Wx, Ib ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Avx2"

      - opcode: 0x10
        invalid:

      - opcode: 0x11
        invalid:

      - opcode: 0x12
        invalid:

      - opcode: 0x13
        invalid:

      - opcode: 0x14
        sub_opcodes:
          - mnemonic: pextrb
            operand: [ Eyb, Vo, Ib ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Sse41"

          - mnemonic: pextrb
            operand: [ Wob, Vo, Ib ]
            attr: [ ny, nv ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Avx"

      - opcode: 0x15
        sub_opcodes:
          - mnemonic: pextrw
            operand: [ Eyw, Vo, Ib ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Sse41"

          - mnemonic: pextrw
            operand: [ Wow, Vo, Ib ]
            attr: [ ny, nv ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Avx"

      - opcode: 0x16
        sub_opcodes:
          - mnemonic: pextrd
            operand: [ Ey, Vo, Ib ]
            constraint: f64
            prefix: 0x66
            cpu_model: ">= X86_Arch_Sse41"

          - mnemonic: pextrd
            operand: [ Ey, Vo, Ib ]
            constraint: f64
            attr: [ ny, nv ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Avx"

      - opcode: 0x17
        sub_opcodes:
          - mnemonic: extractps
            operand: [ Ey, Vo, Ib ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Sse41"

          - mnemonic: extractps
            operand: [ Ey, Vo, Ib ]
            attr: [ ny, nv ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Avx"

      - opcode: 0x18
        mnemonic: insertf128
        operand: [ Vy, Hy, Wo, Ib ]
        prefix: 0x66
        cpu_model: ">= X86_Arch_Avx"

      - opcode: 0x19
        mnemonic: extractf128
        operand: [ Wo, Vy, Ib ]
        prefix: 0x66
        cpu_model: ">= X86_Arch_Avx"

      - opcode: 0x1a
        invalid:

      - opcode: 0x1b
        invalid:

      - opcode: 0x1c
        invalid:

      - opcode: 0x1d
        mnemonic: cvtps2ph
        operand: [ Woqo, Vx, Ib ]
        prefix: 0x66
        cpu_model: ">= X86_Arch_F16c"

      - opcode: 0x1e
        invalid:

      - opcode: 0x1f
        invalid:

      - opcode: 0x20
        sub_opcodes:
          - mnemonic: pinsrb
            operand: [ Vo, Edb, Ib ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Sse41"

          - mnemonic: pinsrb
            operand: [ Vo, Ho, Edb, Ib ]
            attr: [ ny ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Avx"

      - opcode: 0x21
        sub_opcodes:
          - mnemonic: insertps
            operand: [ Vo, Uod, Ib ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Sse41"

          - mnemonic: insertps
            operand: [ Vo, Ho, Uod, Ib ]
            attr: [ ny ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Avx"

      - opcode: 0x22
        sub_opcodes:
          - mnemonic: pinsrd
            operand: [ Vo, Ey, Ib ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Sse41"

          - mnemonic: pinsrd
            operand: [ Vo, Ho, Ey, Ib ]
            attr: [ ny ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Avx"

      - opcode: 0x23
        invalid:

      - opcode: 0x24
        invalid:

      - opcode: 0x25
        invalid:

      - opcode: 0x26
        invalid:

      - opcode: 0x27
        invalid:

      - opcode: 0x28
        invalid:

      - opcode: 0x29
        invalid:

      - opcode: 0x2a
        invalid:

      - opcode: 0x2b
        invalid:

      - opcode: 0x2c
        invalid:

      - opcode: 0x2d
        invalid:

      - opcode: 0x2e
        invalid:

      - opcode: 0x2f
        invalid:

      - opcode: 0x30
        invalid:

      - opcode: 0x31
        invalid:

      - opcode: 0x32
        invalid:

      - opcode: 0x33
        invalid:

      - opcode: 0x34
        invalid:

      - opcode: 0x35
        invalid:

      - opcode: 0x36
        invalid:

      - opcode: 0x37
        invalid:

      - opcode: 0x38
        mnemonic: inserti128
        operand: [ Vy, Hy, Wo, Ib ]
        prefix: 0x66
        cpu_model: ">= X86_Arch_Avx2"

      - opcode: 0x39
        mnemonic: extracti128
        operand: [ Wo, Vy, Ib ]
        attr: [ nv ]
        prefix: 0x66
        cpu_model: ">= X86_Arch_Avx2"

      - opcode: 0x3a
        invalid:

      - opcode: 0x3b
        invalid:

      - opcode: 0x3c
        invalid:

      - opcode: 0x3d
        invalid:

      - opcode: 0x3e
        invalid:

      - opcode: 0x3f
        invalid:

      - opcode: 0x40
        sub_opcodes:
          - mnemonic: dpps
            operand: [ Vx, Wx, Ib ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Sse41"

          - mnemonic: dpps
            operand: [ Vx, Wx, Ib ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Avx"

      - opcode: 0x41
        sub_opcodes:
          - mnemonic: dppd
            operand: [ Vo, Wo, Ib ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Sse41"

          - mnemonic: dppd
            operand: [ Vo, Ho, Wo, Ib ]
            attr: [ ny ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Avx"

      - opcode: 0x42
        sub_opcodes:
          - mnemonic: mpsadbw
            operand: [ Vx, Wx, Ib ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Sse41"

          - mnemonic: mpsadbw
            operand: [ Vx, Wx, Ib ]
            attr: [ ny ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Avx"

          - mnemonic: mpsadbw
            operand: [ Vx, Wx, Ib ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Avx2"

      - opcode: 0x43
        invalid:

      - opcode: 0x44
        sub_opcodes:
          - mnemonic: pclmulqdq
            operand: [ Vo, Wo, Ib ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Clmul"

          - mnemonic: pclmulqdq
            operand: [ Vo, Ho, Wo, Ib ]
            attr: [ ny ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Avx"

      - opcode: 0x45
        invalid:

      - opcode: 0x46
        mnemonic: perm2i128
        operand: [ Vy, Hy, Wy, Ib ]
        prefix: 0x66
        cpu_model: ">= X86_Arch_Avx2"

      - opcode: 0x47
        invalid:

      - opcode: 0x48
        invalid:

      - opcode: 0x49
        invalid:

      - opcode: 0x4a
        mnemonic: blendvps
        operand: [ Vx, Hx, Wx, Lx ]
        prefix: 0x66
        cpu_model: ">= X86_Arch_Avx"

      - opcode: 0x4b
        mnemonic: blendvpd
        operand: [ Vx, Hx, Wx, Lx ]
        prefix: 0x66
        cpu_model: ">= X86_Arch_Avx"

      - opcode: 0x4c
        sub_opcodes:
          - mnemonic: pblendvp
            operand: [ Vx, Hx, Wx, Lx ]
            attr: [ ny ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Avx"

          - mnemonic: pblendvp
            operand: [ Vx, Hx, Wx, Lx ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Avx2"

      - opcode: 0x4d
        invalid:

      - opcode: 0x4e
        invalid:

      - opcode: 0x4f
        invalid:

      - opcode: 0x50
        invalid:

      - opcode: 0x51
        invalid:

      - opcode: 0x52
        invalid:

      - opcode: 0x53
        invalid:

      - opcode: 0x54
        invalid:

      - opcode: 0x55
        invalid:

      - opcode: 0x56
        invalid:

      - opcode: 0x57
        invalid:

      - opcode: 0x58
        invalid:

      - opcode: 0x59
        invalid:

      - opcode: 0x5a
        invalid:

      - opcode: 0x5b
        invalid:

      - opcode: 0x5c
        invalid:

      - opcode: 0x5d
        invalid:

      - opcode: 0x5e
        invalid:

      - opcode: 0x5f
        invalid:

      - opcode: 0x60
        sub_opcodes:
          - mnemonic: pcmpestrm
            operand: [ Vo, Wo, Ib ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Sse42"

          - mnemonic: pcmpestrm
            operand: [ Vo, Wo, Ib ]
            attr: [ ny, nv ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Avx"

      - opcode: 0x61
        sub_opcodes:
          - mnemonic: pcmpestri
            operand: [ Vo, Wo, Ib ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Sse42"

          - mnemonic: pcmpestri
            operand: [ Vo, Wo, Ib ]
            attr: [ ny, nv ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Avx"

      - opcode: 0x62
        sub_opcodes:
          - mnemonic: pcmpistrm
            operand: [ Vo, Wo, Ib ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Sse42"

          - mnemonic: pcmpistrm
            operand: [ Vo, Wo, Ib ]
            attr: [ ny, nv ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Avx"

      - opcode: 0x63
        sub_opcodes:
          - mnemonic: pcmpistri
            operand: [ Vo, Wo, Ib ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Sse42"

          - mnemonic: pcmpistri
            operand: [ Vo, Wo, Ib ]
            attr: [ ny, nv ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Avx"

      - opcode: 0x64
        invalid:

      - opcode: 0x65
        invalid:

      - opcode: 0x66
        invalid:

      - opcode: 0x67
        invalid:

      - opcode: 0x68
        invalid:

      - opcode: 0x69
        invalid:

      - opcode: 0x6a
        invalid:

      - opcode: 0x6b
        invalid:

      - opcode: 0x6c
        invalid:

      - opcode: 0x6d
        invalid:

      - opcode: 0x6e
        invalid:

      - opcode: 0x6f
        invalid:

      - opcode: 0x70
        invalid:

      - opcode: 0x71
        invalid:

      - opcode: 0x72
        invalid:

      - opcode: 0x73
        invalid:

      - opcode: 0x74
        invalid:

      - opcode: 0x75
        invalid:

      - opcode: 0x76
        invalid:

      - opcode: 0x77
        invalid:

      - opcode: 0x78
        invalid:

      - opcode: 0x79
        invalid:

      - opcode: 0x7a
        invalid:

      - opcode: 0x7b
        invalid:

      - opcode: 0x7c
        invalid:

      - opcode: 0x7d
        invalid:

      - opcode: 0x7e
        invalid:

      - opcode: 0x7f
        invalid:

      - opcode: 0x80
        invalid:

      - opcode: 0x81
        invalid:

      - opcode: 0x82
        invalid:

      - opcode: 0x83
        invalid:

      - opcode: 0x84
        invalid:

      - opcode: 0x85
        invalid:

      - opcode: 0x86
        invalid:

      - opcode: 0x87
        invalid:

      - opcode: 0x88
        invalid:

      - opcode: 0x89
        invalid:

      - opcode: 0x8a
        invalid:

      - opcode: 0x8b
        invalid:

      - opcode: 0x8c
        invalid:

      - opcode: 0x8d
        invalid:

      - opcode: 0x8e
        invalid:

      - opcode: 0x8f
        invalid:

      - opcode: 0x90
        invalid:

      - opcode: 0x91
        invalid:

      - opcode: 0x92
        invalid:

      - opcode: 0x93
        invalid:

      - opcode: 0x94
        invalid:

      - opcode: 0x95
        invalid:

      - opcode: 0x96
        invalid:

      - opcode: 0x97
        invalid:

      - opcode: 0x98
        invalid:

      - opcode: 0x99
        invalid:

      - opcode: 0x9a
        invalid:

      - opcode: 0x9b
        invalid:

      - opcode: 0x9c
        invalid:

      - opcode: 0x9d
        invalid:

      - opcode: 0x9e
        invalid:

      - opcode: 0x9f
        invalid:

      - opcode: 0xa0
        invalid:

      - opcode: 0xa1
        invalid:

      - opcode: 0xa2
        invalid:

      - opcode: 0xa3
        invalid:

      - opcode: 0xa4
        invalid:

      - opcode: 0xa5
        invalid:

      - opcode: 0xa6
        invalid:

      - opcode: 0xa7
        invalid:

      - opcode: 0xa8
        invalid:

      - opcode: 0xa9
        invalid:

      - opcode: 0xaa
        invalid:

      - opcode: 0xab
        invalid:

      - opcode: 0xac
        invalid:

      - opcode: 0xad
        invalid:

      - opcode: 0xae
        invalid:

      - opcode: 0xaf
        invalid:

      - opcode: 0xb0
        invalid:

      - opcode: 0xb1
        invalid:

      - opcode: 0xb2
        invalid:

      - opcode: 0xb3
        invalid:

      - opcode: 0xb4
        invalid:

      - opcode: 0xb5
        invalid:

      - opcode: 0xb6
        invalid:

      - opcode: 0xb7
        invalid:

      - opcode: 0xb8
        invalid:

      - opcode: 0xb9
        invalid:

      - opcode: 0xba
        invalid:

      - opcode: 0xbb
        invalid:

      - opcode: 0xbc
        invalid:

      - opcode: 0xbd
        invalid:

      - opcode: 0xbe
        invalid:

      - opcode: 0xbf
        invalid:

      - opcode: 0xc0
        invalid:

      - opcode: 0xc1
        invalid:

      - opcode: 0xc2
        invalid:

      - opcode: 0xc3
        invalid:

      - opcode: 0xc4
        invalid:

      - opcode: 0xc5
        invalid:

      - opcode: 0xc6
        invalid:

      - opcode: 0xc7
        invalid:

      - opcode: 0xc8
        invalid:

      - opcode: 0xc9
        invalid:

      - opcode: 0xca
        invalid:

      - opcode: 0xcb
        invalid:

      - opcode: 0xcc
        invalid:

      - opcode: 0xcd
        invalid:

      - opcode: 0xce
        invalid:

      - opcode: 0xcf
        invalid:

      - opcode: 0xd0
        invalid:

      - opcode: 0xd1
        invalid:

      - opcode: 0xd2
        invalid:

      - opcode: 0xd3
        invalid:

      - opcode: 0xd4
        invalid:

      - opcode: 0xd5
        invalid:

      - opcode: 0xd6
        invalid:

      - opcode: 0xd7
        invalid:

      - opcode: 0xd8
        invalid:

      - opcode: 0xd9
        invalid:

      - opcode: 0xda
        invalid:

      - opcode: 0xdb
        invalid:

      - opcode: 0xdc
        invalid:

      - opcode: 0xdd
        invalid:

      - opcode: 0xde
        invalid:

      - opcode: 0xdf
        sub_opcodes:
          - mnemonic: aeskeygenassist
            operand: [ Vo, Wo, Ib ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Aes"

          - mnemonic: aeskeygenassist
            operand: [ Vo, Wo, Ib ]
            attr: [ ny, nc ]
            prefix: 0x66
            cpu_model: ">= X86_Arch_Avx"

      - opcode: 0xe0
        invalid:

      - opcode: 0xe1
        invalid:

      - opcode: 0xe2
        invalid:

      - opcode: 0xe3
        invalid:

      - opcode: 0xe4
        invalid:

      - opcode: 0xe5
        invalid:

      - opcode: 0xe6
        invalid:

      - opcode: 0xe7
        invalid:

      - opcode: 0xe8
        invalid:

      - opcode: 0xe9
        invalid:

      - opcode: 0xea
        invalid:

      - opcode: 0xeb
        invalid:

      - opcode: 0xec
        invalid:

      - opcode: 0xed
        invalid:

      - opcode: 0xee
        invalid:

      - opcode: 0xef
        invalid:

      - opcode: 0xf0
        mnemonic: rorx
        operand: [ By, Ey, Ib ]
        attr: [ ny, nv ]
        prefix: 0xf2
        cpu_model: ">= X86_Arch_Bmi2"

      - opcode: 0xf1
        invalid:

      - opcode: 0xf2
        invalid:

      - opcode: 0xf3
        invalid:

      - opcode: 0xf4
        invalid:

      - opcode: 0xf5
        invalid:

      - opcode: 0xf6
        invalid:

      - opcode: 0xf7
        invalid:

      - opcode: 0xf8
        invalid:

      - opcode: 0xf9
        invalid:

      - opcode: 0xfa
        invalid:

      - opcode: 0xfb
        invalid:

      - opcode: 0xfc
        invalid:

      - opcode: 0xfd
        invalid:

      - opcode: 0xfe
        invalid:

      - opcode: 0xff
        invalid:

    table_FP1:
      - opcode: 0x00
        mnemonic: fadd
        operand: [ ST0, ST0 ]

      - opcode: 0x01
        mnemonic: fadd
        operand: [ ST0, ST1 ]

      - opcode: 0x02
        mnemonic: fadd
        operand: [ ST0, ST2 ]

      - opcode: 0x03
        mnemonic: fadd
        operand: [ ST0, ST3 ]

      - opcode: 0x04
        mnemonic: fadd
        operand: [ ST0, ST4 ]

      - opcode: 0x05
        mnemonic: fadd
        operand: [ ST0, ST5 ]

      - opcode: 0x06
        mnemonic: fadd
        operand: [ ST0, ST6 ]

      - opcode: 0x07
        mnemonic: fadd
        operand: [ ST0, ST7 ]

      - opcode: 0x08
        mnemonic: fmul
        operand: [ ST0, ST0 ]

      - opcode: 0x09
        mnemonic: fmul
        operand: [ ST0, ST1 ]

      - opcode: 0x0a
        mnemonic: fmul
        operand: [ ST0, ST2 ]

      - opcode: 0x0b
        mnemonic: fmul
        operand: [ ST0, ST3 ]

      - opcode: 0x0c
        mnemonic: fmul
        operand: [ ST0, ST4 ]

      - opcode: 0x0d
        mnemonic: fmul
        operand: [ ST0, ST5 ]

      - opcode: 0x0e
        mnemonic: fmul
        operand: [ ST0, ST6 ]

      - opcode: 0x0f
        mnemonic: fmul
        operand: [ ST0, ST7 ]

      - opcode: 0x10
        mnemonic: fcom
        operand: [ ST0, ST0 ]

      - opcode: 0x11
        mnemonic: fcom
        operand: [ ST0, ST1 ]

      - opcode: 0x12
        mnemonic: fcom
        operand: [ ST0, ST2 ]

      - opcode: 0x13
        mnemonic: fcom
        operand: [ ST0, ST3 ]

      - opcode: 0x14
        mnemonic: fcom
        operand: [ ST0, ST4 ]

      - opcode: 0x15
        mnemonic: fcom
        operand: [ ST0, ST5 ]

      - opcode: 0x16
        mnemonic: fcom
        operand: [ ST0, ST6 ]

      - opcode: 0x17
        mnemonic: fcom
        operand: [ ST0, ST7 ]

      - opcode: 0x18
        mnemonic: fcomp
        operand: [ ST0, ST0 ]

      - opcode: 0x19
        mnemonic: fcomp
        operand: [ ST0, ST1 ]

      - opcode: 0x1a
        mnemonic: fcomp
        operand: [ ST0, ST2 ]

      - opcode: 0x1b
        mnemonic: fcomp
        operand: [ ST0, ST3 ]

      - opcode: 0x1c
        mnemonic: fcomp
        operand: [ ST0, ST4 ]

      - opcode: 0x1d
        mnemonic: fcomp
        operand: [ ST0, ST5 ]

      - opcode: 0x1e
        mnemonic: fcomp
        operand: [ ST0, ST6 ]

      - opcode: 0x1f
        mnemonic: fcomp
        operand: [ ST0, ST7 ]

      - opcode: 0x20
        mnemonic: fsub
        operand: [ ST0, ST0 ]

      - opcode: 0x21
        mnemonic: fsub
        operand: [ ST0, ST1 ]

      - opcode: 0x22
        mnemonic: fsub
        operand: [ ST0, ST2 ]

      - opcode: 0x23
        mnemonic: fsub
        operand: [ ST0, ST3 ]

      - opcode: 0x24
        mnemonic: fsub
        operand: [ ST0, ST4 ]

      - opcode: 0x25
        mnemonic: fsub
        operand: [ ST0, ST5 ]

      - opcode: 0x26
        mnemonic: fsub
        operand: [ ST0, ST6 ]

      - opcode: 0x27
        mnemonic: fsub
        operand: [ ST0, ST7 ]

      - opcode: 0x28
        mnemonic: fsubr
        operand: [ ST0, ST0 ]

      - opcode: 0x29
        mnemonic: fsubr
        operand: [ ST0, ST1 ]

      - opcode: 0x2a
        mnemonic: fsubr
        operand: [ ST0, ST2 ]

      - opcode: 0x2b
        mnemonic: fsubr
        operand: [ ST0, ST3 ]

      - opcode: 0x2c
        mnemonic: fsubr
        operand: [ ST0, ST4 ]

      - opcode: 0x2d
        mnemonic: fsubr
        operand: [ ST0, ST5 ]

      - opcode: 0x2e
        mnemonic: fsubr
        operand: [ ST0, ST6 ]

      - opcode: 0x2f
        mnemonic: fsubr
        operand: [ ST0, ST7 ]

      - opcode: 0x30
        mnemonic: fdiv
        operand: [ ST0, ST0 ]

      - opcode: 0x31
        mnemonic: fdiv
        operand: [ ST0, ST1 ]

      - opcode: 0x32
        mnemonic: fdiv
        operand: [ ST0, ST2 ]

      - opcode: 0x33
        mnemonic: fdiv
        operand: [ ST0, ST3 ]

      - opcode: 0x34
        mnemonic: fdiv
        operand: [ ST0, ST4 ]

      - opcode: 0x35
        mnemonic: fdiv
        operand: [ ST0, ST5 ]

      - opcode: 0x36
        mnemonic: fdiv
        operand: [ ST0, ST6 ]

      - opcode: 0x37
        mnemonic: fdiv
        operand: [ ST0, ST7 ]

      - opcode: 0x38
        mnemonic: fdivr
        operand: [ ST0, ST0 ]

      - opcode: 0x39
        mnemonic: fdivr
        operand: [ ST0, ST1 ]

      - opcode: 0x3a
        mnemonic: fdivr
        operand: [ ST0, ST2 ]

      - opcode: 0x3b
        mnemonic: fdivr
        operand: [ ST0, ST3 ]

      - opcode: 0x3c
        mnemonic: fdivr
        operand: [ ST0, ST4 ]

      - opcode: 0x3d
        mnemonic: fdivr
        operand: [ ST0, ST5 ]

      - opcode: 0x3e
        mnemonic: fdivr
        operand: [ ST0, ST6 ]

      - opcode: 0x3f
        mnemonic: fdivr
        operand: [ ST0, ST7 ]

    table_FP2:
      - opcode: 0x00
        mnemonic: fld
        operand: [ ST0, ST0 ]

      - opcode: 0x01
        mnemonic: fld
        operand: [ ST0, ST1 ]

      - opcode: 0x02
        mnemonic: fld
        operand: [ ST0, ST2 ]

      - opcode: 0x03
        mnemonic: fld
        operand: [ ST0, ST3 ]

      - opcode: 0x04
        mnemonic: fld
        operand: [ ST0, ST4 ]

      - opcode: 0x05
        mnemonic: fld
        operand: [ ST0, ST5 ]

      - opcode: 0x06
        mnemonic: fld
        operand: [ ST0, ST6 ]

      - opcode: 0x07
        mnemonic: fld
        operand: [ ST0, ST7 ]

      - opcode: 0x08
        mnemonic: fxch
        operand: [ ST0, ST0 ]

      - opcode: 0x09
        mnemonic: fxch
        operand: [ ST0, ST1 ]

      - opcode: 0x0a
        mnemonic: fxch
        operand: [ ST0, ST2 ]

      - opcode: 0x0b
        mnemonic: fxch
        operand: [ ST0, ST3 ]

      - opcode: 0x0c
        mnemonic: fxch
        operand: [ ST0, ST4 ]

      - opcode: 0x0d
        mnemonic: fxch
        operand: [ ST0, ST5 ]

      - opcode: 0x0e
        mnemonic: fxch
        operand: [ ST0, ST6 ]

      - opcode: 0x0f
        mnemonic: fxch
        operand: [ ST0, ST7 ]

      - opcode: 0x10
        mnemonic: fnop

      - opcode: 0x11
        invalid:

      - opcode: 0x12
        invalid:

      - opcode: 0x13
        invalid:

      - opcode: 0x14
        invalid:

      - opcode: 0x15
        invalid:

      - opcode: 0x16
        invalid:

      - opcode: 0x17
        invalid:

      - opcode: 0x18
        mnemonic: fstp
        operand: [ ST0 ]

      - opcode: 0x19
        mnemonic: fstp
        operand: [ ST1 ]

      - opcode: 0x1a
        mnemonic: fstp
        operand: [ ST2 ]

      - opcode: 0x1b
        mnemonic: fstp
        operand: [ ST3 ]

      - opcode: 0x1c
        mnemonic: fstp
        operand: [ ST4 ]

      - opcode: 0x1d
        mnemonic: fstp
        operand: [ ST5 ]

      - opcode: 0x1e
        mnemonic: fstp
        operand: [ ST6 ]

      - opcode: 0x1f
        mnemonic: fstp
        operand: [ ST7 ]

      - opcode: 0x20
        mnemonic: fchs

      - opcode: 0x21
        mnemonic: fabs

      - opcode: 0x22
        invalid:

      - opcode: 0x23
        invalid:

      - opcode: 0x24
        mnemonic: ftst

      - opcode: 0x25
        mnemonic: fxam

      - opcode: 0x26
        sub_opcodes:
          - invalid:

          - mnemonic: ftstp
            attr: [ cyrix ]

      - opcode: 0x27
        invalid:

      - opcode: 0x28
        mnemonic: fld1

      - opcode: 0x29
        mnemonic: fldl2t

      - opcode: 0x2a
        mnemonic: fldl2e

      - opcode: 0x2b
        mnemonic: fldpi

      - opcode: 0x2c
        mnemonic: fldlg2

      - opcode: 0x2d
        mnemonic: fldln2

      - opcode: 0x2e
        mnemonic: fldz

      - opcode: 0x2f
        invalid:

      - opcode: 0x30
        mnemonic: f2xm1

      - opcode: 0x31
        mnemonic: fyl2x

      - opcode: 0x32
        mnemonic: fptan

      - opcode: 0x33
        mnemonic: fpatan

      - opcode: 0x34
        mnemonic: fxtract

      - opcode: 0x35
        mnemonic: fprem1
        cpu_model: ">= X86_Arch_80387"

      - opcode: 0x36
        mnemonic: fdecstp

      - opcode: 0x37
        mnemonic: fincstp

      - opcode: 0x38
        mnemonic: fprem

      - opcode: 0x39
        mnemonic: fyl2xp1

      - opcode: 0x3a
        mnemonic: fsqrt

      - opcode: 0x3b
        mnemonic: fsincos
        cpu_model: ">= X86_Arch_80387"

      - opcode: 0x3c
        mnemonic: frndint

      - opcode: 0x3d
        mnemonic: fscale

      - opcode: 0x3e
        mnemonic: fsin
        cpu_model: ">= X86_Arch_80387"

      - opcode: 0x3f
        mnemonic: fcos
        cpu_model: ">= X86_Arch_80387"

    table_FP3:
      - opcode: 0x00
        mnemonic: fcmovb
        operand: [ ST0, ST0 ]

      - opcode: 0x01
        mnemonic: fcmovb
        operand: [ ST0, ST1 ]

      - opcode: 0x02
        mnemonic: fcmovb
        operand: [ ST0, ST2 ]

      - opcode: 0x03
        mnemonic: fcmovb
        operand: [ ST0, ST3 ]

      - opcode: 0x04
        mnemonic: fcmovb
        operand: [ ST0, ST4 ]

      - opcode: 0x05
        mnemonic: fcmovb
        operand: [ ST0, ST5 ]

      - opcode: 0x06
        mnemonic: fcmovb
        operand: [ ST0, ST6 ]

      - opcode: 0x07
        mnemonic: fcmovb
        operand: [ ST0, ST7 ]

      - opcode: 0x08
        mnemonic: fcmove
        operand: [ ST0, ST0 ]

      - opcode: 0x09
        mnemonic: fcmove
        operand: [ ST0, ST1 ]

      - opcode: 0x0a
        mnemonic: fcmove
        operand: [ ST0, ST2 ]

      - opcode: 0x0b
        mnemonic: fcmove
        operand: [ ST0, ST3 ]

      - opcode: 0x0c
        mnemonic: fcmove
        operand: [ ST0, ST4 ]

      - opcode: 0x0d
        mnemonic: fcmove
        operand: [ ST0, ST5 ]

      - opcode: 0x0e
        mnemonic: fcmove
        operand: [ ST0, ST6 ]

      - opcode: 0x0f
        mnemonic: fcmove
        operand: [ ST0, ST7 ]

      - opcode: 0x10
        mnemonic: fcmovbe
        operand: [ ST0, ST0 ]

      - opcode: 0x11
        mnemonic: fcmovbe
        operand: [ ST0, ST1 ]

      - opcode: 0x12
        mnemonic: fcmovbe
        operand: [ ST0, ST2 ]

      - opcode: 0x13
        mnemonic: fcmovbe
        operand: [ ST0, ST3 ]

      - opcode: 0x14
        mnemonic: fcmovbe
        operand: [ ST0, ST4 ]

      - opcode: 0x15
        mnemonic: fcmovbe
        operand: [ ST0, ST5 ]

      - opcode: 0x16
        mnemonic: fcmovbe
        operand: [ ST0, ST6 ]

      - opcode: 0x17
        mnemonic: fcmovbe
        operand: [ ST0, ST7 ]

      - opcode: 0x18
        mnemonic: fcmovu
        operand: [ ST0, ST0 ]

      - opcode: 0x19
        mnemonic: fcmovu
        operand: [ ST0, ST1 ]

      - opcode: 0x1a
        mnemonic: fcmovu
        operand: [ ST0, ST2 ]

      - opcode: 0x1b
        mnemonic: fcmovu
        operand: [ ST0, ST3 ]

      - opcode: 0x1c
        mnemonic: fcmovu
        operand: [ ST0, ST4 ]

      - opcode: 0x1d
        mnemonic: fcmovu
        operand: [ ST0, ST5 ]

      - opcode: 0x1e
        mnemonic: fcmovu
        operand: [ ST0, ST6 ]

      - opcode: 0x1f
        mnemonic: fcmovu
        operand: [ ST0, ST7 ]

      - opcode: 0x20
        invalid:

      - opcode: 0x21
        invalid:

      - opcode: 0x22
        invalid:

      - opcode: 0x23
        invalid:

      - opcode: 0x24
        invalid:

      - opcode: 0x25
        invalid:

      - opcode: 0x26
        invalid:

      - opcode: 0x27
        invalid:

      - opcode: 0x28
        invalid:

      - opcode: 0x29
        mnemonic: fucompp
        cpu_model: ">= X86_Arch_80387"

      - opcode: 0x2a
        invalid:

      - opcode: 0x2b
        invalid:

      - opcode: 0x2c
        invalid:

      - opcode: 0x2d
        invalid:

      - opcode: 0x2e
        invalid:

      - opcode: 0x2f
        invalid:

      - opcode: 0x30
        invalid:

      - opcode: 0x31
        invalid:

      - opcode: 0x32
        invalid:

      - opcode: 0x33
        invalid:

      - opcode: 0x34
        invalid:

      - opcode: 0x35
        invalid:

      - opcode: 0x36
        invalid:

      - opcode: 0x37
        invalid:

      - opcode: 0x38
        invalid:

      - opcode: 0x39
        invalid:

      - opcode: 0x3a
        invalid:

      - opcode: 0x3b
        invalid:

      - opcode: 0x3c
        invalid:

      - opcode: 0x3d
        invalid:

      - opcode: 0x3e
        invalid:

      - opcode: 0x3f
        invalid:

    table_FP4:
      - opcode: 0x00
        mnemonic: fcmovnb
        operand: [ ST0, ST0 ]

      - opcode: 0x01
        mnemonic: fcmovnb
        operand: [ ST0, ST1 ]

      - opcode: 0x02
        mnemonic: fcmovnb
        operand: [ ST0, ST2 ]

      - opcode: 0x03
        mnemonic: fcmovnb
        operand: [ ST0, ST3 ]

      - opcode: 0x04
        mnemonic: fcmovnb
        operand: [ ST0, ST4 ]

      - opcode: 0x05
        mnemonic: fcmovnb
        operand: [ ST0, ST5 ]

      - opcode: 0x06
        mnemonic: fcmovnb
        operand: [ ST0, ST6 ]

      - opcode: 0x07
        mnemonic: fcmovnb
        operand: [ ST0, ST7 ]

      - opcode: 0x08
        mnemonic: fcmovne
        operand: [ ST0, ST0 ]

      - opcode: 0x09
        mnemonic: fcmovne
        operand: [ ST0, ST1 ]

      - opcode: 0x0a
        mnemonic: fcmovne
        operand: [ ST0, ST2 ]

      - opcode: 0x0b
        mnemonic: fcmovne
        operand: [ ST0, ST3 ]

      - opcode: 0x0c
        mnemonic: fcmovne
        operand: [ ST0, ST4 ]

      - opcode: 0x0d
        mnemonic: fcmovne
        operand: [ ST0, ST5 ]

      - opcode: 0x0e
        mnemonic: fcmovne
        operand: [ ST0, ST6 ]

      - opcode: 0x0f
        mnemonic: fcmovne
        operand: [ ST0, ST7 ]

      - opcode: 0x10
        mnemonic: fcmovnbe
        operand: [ ST0, ST0 ]

      - opcode: 0x11
        mnemonic: fcmovnbe
        operand: [ ST0, ST1 ]

      - opcode: 0x12
        mnemonic: fcmovnbe
        operand: [ ST0, ST2 ]

      - opcode: 0x13
        mnemonic: fcmovnbe
        operand: [ ST0, ST3 ]

      - opcode: 0x14
        mnemonic: fcmovnbe
        operand: [ ST0, ST4 ]

      - opcode: 0x15
        mnemonic: fcmovnbe
        operand: [ ST0, ST5 ]

      - opcode: 0x16
        mnemonic: fcmovnbe
        operand: [ ST0, ST6 ]

      - opcode: 0x17
        mnemonic: fcmovnbe
        operand: [ ST0, ST7 ]

      - opcode: 0x18
        mnemonic: fcmovnu
        operand: [ ST0, ST0 ]

      - opcode: 0x19
        mnemonic: fcmovnu
        operand: [ ST0, ST1 ]

      - opcode: 0x1a
        mnemonic: fcmovnu
        operand: [ ST0, ST2 ]

      - opcode: 0x1b
        mnemonic: fcmovnu
        operand: [ ST0, ST3 ]

      - opcode: 0x1c
        mnemonic: fcmovnu
        operand: [ ST0, ST4 ]

      - opcode: 0x1d
        mnemonic: fcmovnu
        operand: [ ST0, ST5 ]

      - opcode: 0x1e
        mnemonic: fcmovnu
        operand: [ ST0, ST6 ]

      - opcode: 0x1f
        mnemonic: fcmovnu
        operand: [ ST0, ST7 ]

      - opcode: 0x20
        sub_opcodes:
          - invalid:

          - mnemonic: fneni
            cpu_model: "== X86_Arch_8087"

      - opcode: 0x21
        sub_opcodes:
          - invalid:

          - mnemonic: fndisi
            cpu_model: "== X86_Arch_8087"

      - opcode: 0x22
        mnemonic: fnclex

      - opcode: 0x23
        mnemonic: fninit
        # FIXME:
        # FNINIT/FINIT:
        #  FPUControlWord<--037FH;
        #  FPUStatusWord<--0;
        #  FPUTagWord<--FFFFH;
        #  FPUDataPointer<--0;
        #  FPUInstructionPointer<--0;
        #  FPULastInstructionOpcode<--0;
        semantic: [ program.id = program.id ]

      - opcode: 0x24
        sub_opcodes:
          - invalid:

          - mnemonic: fnsetpm
            cpu_model: "== X86_Arch_80287"

      - opcode: 0x25
        sub_opcodes:
          - invalid:

          - mnemonic: frstpm
            cpu_model: "== X86_Arch_80287xl"

      - opcode: 0x26
        invalid:

      - opcode: 0x27
        invalid:

      - opcode: 0x28
        sub_opcodes:
          - mnemonic: fucomi
            operand: [ ST0, ST0 ]

          - mnemonic: fsbp0
            attr: [ iit ]

      - opcode: 0x29
        mnemonic: fucomi
        operand: [ ST0, ST1 ]

      - opcode: 0x2a
        sub_opcodes:
          - mnemonic: fucomi
            operand: [ ST0, ST2 ]

          - mnemonic: fsbp2
            attr: [ iit ]

      - opcode: 0x2b
        sub_opcodes:
          - mnemonic: fucomi
            operand: [ ST0, ST3 ]

          - mnemonic: fsbp1
            attr: [ iit ]

      - opcode: 0x2c
        mnemonic: fucomi
        operand: [ ST0, ST4 ]

      - opcode: 0x2d
        mnemonic: fucomi
        operand: [ ST0, ST5 ]

      - opcode: 0x2e
        mnemonic: fucomi
        operand: [ ST0, ST6 ]

      - opcode: 0x2f
        mnemonic: fucomi
        operand: [ ST0, ST7 ]

      - opcode: 0x30
        mnemonic: fcomi
        operand: [ ST0, ST0 ]

      - opcode: 0x31
        sub_opcodes:
          - mnemonic: fcomi
            operand: [ ST0, ST1 ]

          - mnemonic: f4x4
            attr: [ iit ]

      - opcode: 0x32
        mnemonic: fcomi
        operand: [ ST0, ST2 ]

      - opcode: 0x33
        mnemonic: fcomi
        operand: [ ST0, ST3 ]

      - opcode: 0x34
        mnemonic: fcomi
        operand: [ ST0, ST4 ]

      - opcode: 0x35
        mnemonic: fcomi
        operand: [ ST0, ST5 ]

      - opcode: 0x36
        mnemonic: fcomi
        operand: [ ST0, ST6 ]

      - opcode: 0x37
        mnemonic: fcomi
        operand: [ ST0, ST7 ]

      - opcode: 0x38
        sub_opcodes:
          - invalid:

          - mnemonic: frint2
            attr: [ cyrix ]

      - opcode: 0x39
        invalid:

      - opcode: 0x3a
        invalid:

      - opcode: 0x3b
        invalid:

      - opcode: 0x3c
        invalid:

      - opcode: 0x3d
        invalid:

      - opcode: 0x3e
        invalid:

      - opcode: 0x3f
        invalid:

    table_FP5:
      - opcode: 0x00
        mnemonic: fadd
        operand: [ ST0, ST0 ]

      - opcode: 0x01
        mnemonic: fadd
        operand: [ ST1, ST0 ]

      - opcode: 0x02
        mnemonic: fadd
        operand: [ ST2, ST0 ]

      - opcode: 0x03
        mnemonic: fadd
        operand: [ ST3, ST0 ]

      - opcode: 0x04
        mnemonic: fadd
        operand: [ ST4, ST0 ]

      - opcode: 0x05
        mnemonic: fadd
        operand: [ ST5, ST0 ]

      - opcode: 0x06
        mnemonic: fadd
        operand: [ ST6, ST0 ]

      - opcode: 0x07
        mnemonic: fadd
        operand: [ ST7, ST0 ]

      - opcode: 0x08
        mnemonic: fmul
        operand: [ ST0, ST0 ]

      - opcode: 0x09
        mnemonic: fmul
        operand: [ ST1, ST0 ]

      - opcode: 0x0a
        mnemonic: fmul
        operand: [ ST2, ST0 ]

      - opcode: 0x0b
        mnemonic: fmul
        operand: [ ST3, ST0 ]

      - opcode: 0x0c
        mnemonic: fmul
        operand: [ ST4, ST0 ]

      - opcode: 0x0d
        mnemonic: fmul
        operand: [ ST5, ST0 ]

      - opcode: 0x0e
        mnemonic: fmul
        operand: [ ST6, ST0 ]

      - opcode: 0x0f
        mnemonic: fmul
        operand: [ ST7, ST0 ]

      - opcode: 0x10
        mnemonic: fcom
        operand: [ ST0 ]

      - opcode: 0x11
        mnemonic: fcom
        operand: [ ST1 ]

      - opcode: 0x12
        mnemonic: fcom
        operand: [ ST2 ]

      - opcode: 0x13
        mnemonic: fcom
        operand: [ ST3 ]

      - opcode: 0x14
        mnemonic: fcom
        operand: [ ST4 ]

      - opcode: 0x15
        mnemonic: fcom
        operand: [ ST5 ]

      - opcode: 0x16
        mnemonic: fcom
        operand: [ ST6 ]

      - opcode: 0x17
        mnemonic: fcom
        operand: [ ST7 ]

      - opcode: 0x18
        mnemonic: fcomp
        operand: [ ST0 ]

      - opcode: 0x19
        mnemonic: fcomp
        operand: [ ST1 ]

      - opcode: 0x1a
        mnemonic: fcomp
        operand: [ ST2 ]

      - opcode: 0x1b
        mnemonic: fcomp
        operand: [ ST3 ]

      - opcode: 0x1c
        mnemonic: fcomp
        operand: [ ST4 ]

      - opcode: 0x1d
        mnemonic: fcomp
        operand: [ ST5 ]

      - opcode: 0x1e
        mnemonic: fcomp
        operand: [ ST6 ]

      - opcode: 0x1f
        mnemonic: fcomp
        operand: [ ST7 ]

      - opcode: 0x20
        mnemonic: fsubr
        operand: [ ST0, ST0 ]

      - opcode: 0x21
        mnemonic: fsubr
        operand: [ ST1, ST0 ]

      - opcode: 0x22
        mnemonic: fsubr
        operand: [ ST2, ST0 ]

      - opcode: 0x23
        mnemonic: fsubr
        operand: [ ST3, ST0 ]

      - opcode: 0x24
        mnemonic: fsubr
        operand: [ ST4, ST0 ]

      - opcode: 0x25
        mnemonic: fsubr
        operand: [ ST5, ST0 ]

      - opcode: 0x26
        mnemonic: fsubr
        operand: [ ST6, ST0 ]

      - opcode: 0x27
        mnemonic: fsubr
        operand: [ ST7, ST0 ]

      - opcode: 0x28
        mnemonic: fsub
        operand: [ ST0, ST0 ]

      - opcode: 0x29
        mnemonic: fsub
        operand: [ ST1, ST0 ]

      - opcode: 0x2a
        mnemonic: fsub
        operand: [ ST2, ST0 ]

      - opcode: 0x2b
        mnemonic: fsub
        operand: [ ST3, ST0 ]

      - opcode: 0x2c
        mnemonic: fsub
        operand: [ ST4, ST0 ]

      - opcode: 0x2d
        mnemonic: fsub
        operand: [ ST5, ST0 ]

      - opcode: 0x2e
        mnemonic: fsub
        operand: [ ST6, ST0 ]

      - opcode: 0x2f
        mnemonic: fsub
        operand: [ ST7, ST0 ]

      - opcode: 0x30
        mnemonic: fdivr
        operand: [ ST0, ST0 ]

      - opcode: 0x31
        mnemonic: fdivr
        operand: [ ST1, ST0 ]

      - opcode: 0x32
        mnemonic: fdivr
        operand: [ ST2, ST0 ]

      - opcode: 0x33
        mnemonic: fdivr
        operand: [ ST3, ST0 ]

      - opcode: 0x34
        mnemonic: fdivr
        operand: [ ST4, ST0 ]

      - opcode: 0x35
        mnemonic: fdivr
        operand: [ ST5, ST0 ]

      - opcode: 0x36
        mnemonic: fdivr
        operand: [ ST6, ST0 ]

      - opcode: 0x37
        mnemonic: fdivr
        operand: [ ST7, ST0 ]

      - opcode: 0x38
        mnemonic: fdiv
        operand: [ ST0, ST0 ]

      - opcode: 0x39
        mnemonic: fdiv
        operand: [ ST1, ST0 ]

      - opcode: 0x3a
        mnemonic: fdiv
        operand: [ ST2, ST0 ]

      - opcode: 0x3b
        mnemonic: fdiv
        operand: [ ST3, ST0 ]

      - opcode: 0x3c
        mnemonic: fdiv
        operand: [ ST4, ST0 ]

      - opcode: 0x3d
        mnemonic: fdiv
        operand: [ ST5, ST0 ]

      - opcode: 0x3e
        mnemonic: fdiv
        operand: [ ST6, ST0 ]

      - opcode: 0x3f
        mnemonic: fdiv
        operand: [ ST7, ST0 ]

    table_FP6:
      - opcode: 0x00
        mnemonic: ffree
        operand: [ ST0 ]

      - opcode: 0x01
        mnemonic: ffree
        operand: [ ST1 ]

      - opcode: 0x02
        mnemonic: ffree
        operand: [ ST2 ]

      - opcode: 0x03
        mnemonic: ffree
        operand: [ ST3 ]

      - opcode: 0x04
        mnemonic: ffree
        operand: [ ST4 ]

      - opcode: 0x05
        mnemonic: ffree
        operand: [ ST5 ]

      - opcode: 0x06
        mnemonic: ffree
        operand: [ ST6 ]

      - opcode: 0x07
        mnemonic: ffree
        operand: [ ST7 ]

      - opcode: 0x08
        mnemonic: fxch
        operand: [ ST0 ]

      - opcode: 0x09
        mnemonic: fxch
        operand: [ ST1 ]

      - opcode: 0x0a
        mnemonic: fxch
        operand: [ ST2 ]

      - opcode: 0x0b
        mnemonic: fxch
        operand: [ ST3 ]

      - opcode: 0x0c
        mnemonic: fxch
        operand: [ ST4 ]

      - opcode: 0x0d
        mnemonic: fxch
        operand: [ ST5 ]

      - opcode: 0x0e
        mnemonic: fxch
        operand: [ ST6 ]

      - opcode: 0x0f
        mnemonic: fxch
        operand: [ ST7 ]

      - opcode: 0x10
        mnemonic: fst
        operand: [ ST0 ]

      - opcode: 0x11
        mnemonic: fst
        operand: [ ST1 ]

      - opcode: 0x12
        mnemonic: fst
        operand: [ ST2 ]

      - opcode: 0x13
        mnemonic: fst
        operand: [ ST3 ]

      - opcode: 0x14
        mnemonic: fst
        operand: [ ST4 ]

      - opcode: 0x15
        mnemonic: fst
        operand: [ ST5 ]

      - opcode: 0x16
        mnemonic: fst
        operand: [ ST6 ]

      - opcode: 0x17
        mnemonic: fst
        operand: [ ST7 ]

      - opcode: 0x18
        mnemonic: fstp
        operand: [ ST0 ]

      - opcode: 0x19
        mnemonic: fstp
        operand: [ ST1 ]

      - opcode: 0x1a
        mnemonic: fstp
        operand: [ ST2 ]

      - opcode: 0x1b
        mnemonic: fstp
        operand: [ ST3 ]

      - opcode: 0x1c
        mnemonic: fstp
        operand: [ ST4 ]

      - opcode: 0x1d
        mnemonic: fstp
        operand: [ ST5 ]

      - opcode: 0x1e
        mnemonic: fstp
        operand: [ ST6 ]

      - opcode: 0x1f
        mnemonic: fstp
        operand: [ ST7 ]

      - opcode: 0x20
        mnemonic: fucom
        operand: [ ST0, ST0 ]
        cpu_model: ">= X86_Arch_80387"

      - opcode: 0x21
        mnemonic: fucom
        operand: [ ST1, ST0 ]
        cpu_model: ">= X86_Arch_80387"

      - opcode: 0x22
        mnemonic: fucom
        operand: [ ST2, ST0 ]
        cpu_model: ">= X86_Arch_80387"

      - opcode: 0x23
        mnemonic: fucom
        operand: [ ST3, ST0 ]
        cpu_model: ">= X86_Arch_80387"

      - opcode: 0x24
        mnemonic: fucom
        operand: [ ST4, ST0 ]
        cpu_model: ">= X86_Arch_80387"

      - opcode: 0x25
        mnemonic: fucom
        operand: [ ST5, ST0 ]
        cpu_model: ">= X86_Arch_80387"

      - opcode: 0x26
        mnemonic: fucom
        operand: [ ST6, ST0 ]
        cpu_model: ">= X86_Arch_80387"

      - opcode: 0x27
        mnemonic: fucom
        operand: [ ST7, ST0 ]
        cpu_model: ">= X86_Arch_80387"

      - opcode: 0x28
        mnemonic: fucomp
        operand: [ ST0 ]
        cpu_model: ">= X86_Arch_80387"

      - opcode: 0x29
        mnemonic: fucomp
        operand: [ ST1 ]
        cpu_model: ">= X86_Arch_80387"

      - opcode: 0x2a
        mnemonic: fucomp
        operand: [ ST2 ]
        cpu_model: ">= X86_Arch_80387"

      - opcode: 0x2b
        mnemonic: fucomp
        operand: [ ST3 ]
        cpu_model: ">= X86_Arch_80387"

      - opcode: 0x2c
        mnemonic: fucomp
        operand: [ ST4 ]
        cpu_model: ">= X86_Arch_80387"

      - opcode: 0x2d
        mnemonic: fucomp
        operand: [ ST5 ]
        cpu_model: ">= X86_Arch_80387"

      - opcode: 0x2e
        mnemonic: fucomp
        operand: [ ST6 ]
        cpu_model: ">= X86_Arch_80387"

      - opcode: 0x2f
        mnemonic: fucomp
        operand: [ ST7 ]
        cpu_model: ">= X86_Arch_80387"

      - opcode: 0x30
        invalid:

      - opcode: 0x31
        invalid:

      - opcode: 0x32
        invalid:

      - opcode: 0x33
        invalid:

      - opcode: 0x34
        invalid:

      - opcode: 0x35
        invalid:

      - opcode: 0x36
        invalid:

      - opcode: 0x37
        invalid:

      - opcode: 0x38
        invalid:

      - opcode: 0x39
        invalid:

      - opcode: 0x3a
        invalid:

      - opcode: 0x3b
        invalid:

      - opcode: 0x3c
        sub_opcodes:
          - invalid:

          - mnemonic: frichop
            attr: [ cyrix ]

      - opcode: 0x3d
        invalid:

      - opcode: 0x3e
        invalid:

      - opcode: 0x3f
        invalid:

    table_FP7:
      - opcode: 0x00
        mnemonic: faddp
        operand: [ ST0, ST0 ]

      - opcode: 0x01
        mnemonic: faddp
        operand: [ ST1, ST0 ]

      - opcode: 0x02
        mnemonic: faddp
        operand: [ ST2, ST0 ]

      - opcode: 0x03
        mnemonic: faddp
        operand: [ ST3, ST0 ]

      - opcode: 0x04
        mnemonic: faddp
        operand: [ ST4, ST0 ]

      - opcode: 0x05
        mnemonic: faddp
        operand: [ ST5, ST0 ]

      - opcode: 0x06
        mnemonic: faddp
        operand: [ ST6, ST0 ]

      - opcode: 0x07
        mnemonic: faddp
        operand: [ ST7, ST0 ]

      - opcode: 0x08
        mnemonic: fmulp
        operand: [ ST0, ST0 ]

      - opcode: 0x09
        mnemonic: fmulp
        operand: [ ST1, ST0 ]

      - opcode: 0x0a
        mnemonic: fmulp
        operand: [ ST2, ST0 ]

      - opcode: 0x0b
        mnemonic: fmulp
        operand: [ ST3, ST0 ]

      - opcode: 0x0c
        mnemonic: fmulp
        operand: [ ST4, ST0 ]

      - opcode: 0x0d
        mnemonic: fmulp
        operand: [ ST5, ST0 ]

      - opcode: 0x0e
        mnemonic: fmulp
        operand: [ ST6, ST0 ]

      - opcode: 0x0f
        mnemonic: fmulp
        operand: [ ST7, ST0 ]

      - opcode: 0x10
        mnemonic: fcomp
        operand: [ ST0 ]

      - opcode: 0x11
        mnemonic: fcomp
        operand: [ ST1 ]

      - opcode: 0x12
        mnemonic: fcomp
        operand: [ ST2 ]

      - opcode: 0x13
        mnemonic: fcomp
        operand: [ ST3 ]

      - opcode: 0x14
        mnemonic: fcomp
        operand: [ ST4 ]

      - opcode: 0x15
        mnemonic: fcomp
        operand: [ ST5 ]

      - opcode: 0x16
        mnemonic: fcomp
        operand: [ ST6 ]

      - opcode: 0x17
        mnemonic: fcomp
        operand: [ ST7 ]

      - opcode: 0x18
        invalid:

      - opcode: 0x19
        mnemonic: fcompp

      - opcode: 0x1a
        invalid:

      - opcode: 0x1b
        invalid:

      - opcode: 0x1c
        invalid:

      - opcode: 0x1d
        invalid:

      - opcode: 0x1e
        invalid:

      - opcode: 0x1f
        invalid:

      - opcode: 0x20
        mnemonic: fsubrp
        operand: [ ST0, ST0 ]

      - opcode: 0x21
        mnemonic: fsubrp
        operand: [ ST1, ST0 ]

      - opcode: 0x22
        mnemonic: fsubrp
        operand: [ ST2, ST0 ]

      - opcode: 0x23
        mnemonic: fsubrp
        operand: [ ST3, ST0 ]

      - opcode: 0x24
        mnemonic: fsubrp
        operand: [ ST4, ST0 ]

      - opcode: 0x25
        mnemonic: fsubrp
        operand: [ ST5, ST0 ]

      - opcode: 0x26
        mnemonic: fsubrp
        operand: [ ST6, ST0 ]

      - opcode: 0x27
        mnemonic: fsubrp
        operand: [ ST7, ST0 ]

      - opcode: 0x28
        mnemonic: fsubp
        operand: [ ST0, ST0 ]

      - opcode: 0x29
        mnemonic: fsubp
        operand: [ ST1, ST0 ]

      - opcode: 0x2a
        mnemonic: fsubp
        operand: [ ST2, ST0 ]

      - opcode: 0x2b
        mnemonic: fsubp
        operand: [ ST3, ST0 ]

      - opcode: 0x2c
        mnemonic: fsubp
        operand: [ ST4, ST0 ]

      - opcode: 0x2d
        mnemonic: fsubp
        operand: [ ST5, ST0 ]

      - opcode: 0x2e
        mnemonic: fsubp
        operand: [ ST6, ST0 ]

      - opcode: 0x2f
        mnemonic: fsubp
        operand: [ ST7, ST0 ]

      - opcode: 0x30
        mnemonic: fdivrp
        operand: [ ST0, ST0 ]

      - opcode: 0x31
        mnemonic: fdivrp
        operand: [ ST1, ST0 ]

      - opcode: 0x32
        mnemonic: fdivrp
        operand: [ ST2, ST0 ]

      - opcode: 0x33
        mnemonic: fdivrp
        operand: [ ST3, ST0 ]

      - opcode: 0x34
        mnemonic: fdivrp
        operand: [ ST4, ST0 ]

      - opcode: 0x35
        mnemonic: fdivrp
        operand: [ ST5, ST0 ]

      - opcode: 0x36
        mnemonic: fdivrp
        operand: [ ST6, ST0 ]

      - opcode: 0x37
        mnemonic: fdivrp
        operand: [ ST7, ST0 ]

      - opcode: 0x38
        mnemonic: fdivp
        operand: [ ST0, ST0 ]

      - opcode: 0x39
        mnemonic: fdivp
        operand: [ ST1, ST0 ]

      - opcode: 0x3a
        mnemonic: fdivp
        operand: [ ST2, ST0 ]

      - opcode: 0x3b
        mnemonic: fdivp
        operand: [ ST3, ST0 ]

      - opcode: 0x3c
        mnemonic: fdivp
        operand: [ ST4, ST0 ]

      - opcode: 0x3d
        mnemonic: fdivp
        operand: [ ST5, ST0 ]

      - opcode: 0x3e
        mnemonic: fdivp
        operand: [ ST6, ST0 ]

      - opcode: 0x3f
        mnemonic: fdivp
        operand: [ ST7, ST0 ]

    table_FP8:
      - opcode: 0x00
        mnemonic: ffreep
        operand: [ ST0 ]

      - opcode: 0x01
        mnemonic: ffreep
        operand: [ ST1 ]

      - opcode: 0x02
        mnemonic: ffreep
        operand: [ ST2 ]

      - opcode: 0x03
        mnemonic: ffreep
        operand: [ ST3 ]

      - opcode: 0x04
        mnemonic: ffreep
        operand: [ ST4 ]

      - opcode: 0x05
        mnemonic: ffreep
        operand: [ ST5 ]

      - opcode: 0x06
        mnemonic: ffreep
        operand: [ ST6 ]

      - opcode: 0x07
        mnemonic: ffreep
        operand: [ ST7 ]

      - opcode: 0x08
        mnemonic: fxch
        operand: [ ST0 ]

      - opcode: 0x09
        mnemonic: fxch
        operand: [ ST1 ]

      - opcode: 0x0a
        mnemonic: fxch
        operand: [ ST2 ]

      - opcode: 0x0b
        mnemonic: fxch
        operand: [ ST3 ]

      - opcode: 0x0c
        mnemonic: fxch
        operand: [ ST4 ]

      - opcode: 0x0d
        mnemonic: fxch
        operand: [ ST5 ]

      - opcode: 0x0e
        mnemonic: fxch
        operand: [ ST6 ]

      - opcode: 0x0f
        mnemonic: fxch
        operand: [ ST7 ]

      - opcode: 0x10
        mnemonic: fstp
        operand: [ ST0 ]

      - opcode: 0x11
        mnemonic: fstp
        operand: [ ST1 ]

      - opcode: 0x12
        mnemonic: fstp
        operand: [ ST2 ]

      - opcode: 0x13
        mnemonic: fstp
        operand: [ ST3 ]

      - opcode: 0x14
        mnemonic: fstp
        operand: [ ST4 ]

      - opcode: 0x15
        mnemonic: fstp
        operand: [ ST5 ]

      - opcode: 0x16
        mnemonic: fstp
        operand: [ ST6 ]

      - opcode: 0x17
        mnemonic: fstp
        operand: [ ST7 ]

      - opcode: 0x18
        mnemonic: fstp
        operand: [ ST0 ]

      - opcode: 0x19
        mnemonic: fstp
        operand: [ ST1 ]

      - opcode: 0x1a
        mnemonic: fstp
        operand: [ ST2 ]

      - opcode: 0x1b
        mnemonic: fstp
        operand: [ ST3 ]

      - opcode: 0x1c
        mnemonic: fstp
        operand: [ ST4 ]

      - opcode: 0x1d
        mnemonic: fstp
        operand: [ ST5 ]

      - opcode: 0x1e
        mnemonic: fstp
        operand: [ ST6 ]

      - opcode: 0x1f
        mnemonic: fstp
        operand: [ ST7 ]

      - opcode: 0x20
        mnemonic: fnstsw
        operand: [ AX ]
        cpu_model: ">= X86_Arch_80287"

      - opcode: 0x21
        sub_opcodes:
          - invalid:

          - mnemonic: fstdw
            operand: [ AX ]
            cpu_model: "== X86_Arch_80387sl"

      - opcode: 0x22
        sub_opcodes:
          - invalid:

          - mnemonic: fstsg
            operand: [ AX ]
            cpu_model: "== X86_Arch_80387sl"

      - opcode: 0x23
        invalid:

      - opcode: 0x24
        invalid:

      - opcode: 0x25
        invalid:

      - opcode: 0x26
        invalid:

      - opcode: 0x27
        invalid:

      - opcode: 0x28
        mnemonic: fucomip
        operand: [ ST0, ST0 ]

      - opcode: 0x29
        mnemonic: fucomip
        operand: [ ST0, ST1 ]

      - opcode: 0x2a
        mnemonic: fucomip
        operand: [ ST0, ST2 ]

      - opcode: 0x2b
        mnemonic: fucomip
        operand: [ ST0, ST3 ]

      - opcode: 0x2c
        mnemonic: fucomip
        operand: [ ST0, ST4 ]

      - opcode: 0x2d
        mnemonic: fucomip
        operand: [ ST0, ST5 ]

      - opcode: 0x2e
        mnemonic: fucomip
        operand: [ ST0, ST6 ]

      - opcode: 0x2f
        mnemonic: fucomip
        operand: [ ST0, ST7 ]

      - opcode: 0x30
        mnemonic: fcomip
        operand: [ ST0, ST0 ]

      - opcode: 0x31
        mnemonic: fcomip
        operand: [ ST0, ST1 ]

      - opcode: 0x32
        mnemonic: fcomip
        operand: [ ST0, ST2 ]

      - opcode: 0x33
        mnemonic: fcomip
        operand: [ ST0, ST3 ]

      - opcode: 0x34
        mnemonic: fcomip
        operand: [ ST0, ST4 ]

      - opcode: 0x35
        mnemonic: fcomip
        operand: [ ST0, ST5 ]

      - opcode: 0x36
        mnemonic: fcomip
        operand: [ ST0, ST6 ]

      - opcode: 0x37
        mnemonic: fcomip
        operand: [ ST0, ST7 ]

      - opcode: 0x38
        invalid:

      - opcode: 0x39
        invalid:

      - opcode: 0x3a
        invalid:

      - opcode: 0x3b
        invalid:

      - opcode: 0x3c
        sub_opcodes:
          - invalid:

          - mnemonic: frinear
            attr: [ cyrix ]

      - opcode: 0x3d
        invalid:

      - opcode: 0x3e
        invalid:

      - opcode: 0x3f
        invalid:

    table_sse5a:
      - opcode: 0x00
        invalid:

      - opcode: 0x01
        invalid:

      - opcode: 0x02
        invalid:

      - opcode: 0x03
        invalid:

      - opcode: 0x04
        invalid:

      - opcode: 0x05
        invalid:

      - opcode: 0x06
        invalid:

      - opcode: 0x07
        invalid:

      - opcode: 0x08
        invalid:

      - opcode: 0x09
        invalid:

      - opcode: 0x0a
        invalid:

      - opcode: 0x0b
        invalid:

      - opcode: 0x0c
        invalid:

      - opcode: 0x0d
        invalid:

      - opcode: 0x0e
        invalid:

      - opcode: 0x0f
        invalid:

      - opcode: 0x10
        invalid:

      - opcode: 0x11
        invalid:

      - opcode: 0x12
        invalid:

      - opcode: 0x13
        invalid:

      - opcode: 0x14
        invalid:

      - opcode: 0x15
        invalid:

      - opcode: 0x16
        invalid:

      - opcode: 0x17
        invalid:

      - opcode: 0x18
        invalid:

      - opcode: 0x19
        invalid:

      - opcode: 0x1a
        invalid:

      - opcode: 0x1b
        invalid:

      - opcode: 0x1c
        invalid:

      - opcode: 0x1d
        invalid:

      - opcode: 0x1e
        invalid:

      - opcode: 0x1f
        invalid:

      - opcode: 0x20
        invalid:

      - opcode: 0x21
        invalid:

      - opcode: 0x22
        invalid:

      - opcode: 0x23
        invalid:

      - opcode: 0x24
        invalid:

      - opcode: 0x25
        invalid:

      - opcode: 0x26
        invalid:

      - opcode: 0x27
        invalid:

      - opcode: 0x28
        invalid:

      - opcode: 0x29
        invalid:

      - opcode: 0x2a
        invalid:

      - opcode: 0x2b
        invalid:

      - opcode: 0x2c
        invalid:

      - opcode: 0x2d
        invalid:

      - opcode: 0x2e
        invalid:

      - opcode: 0x2f
        invalid:

      - opcode: 0x30
        invalid:

      - opcode: 0x31
        invalid:

      - opcode: 0x32
        invalid:

      - opcode: 0x33
        invalid:

      - opcode: 0x34
        invalid:

      - opcode: 0x35
        invalid:

      - opcode: 0x36
        invalid:

      - opcode: 0x37
        invalid:

      - opcode: 0x38
        invalid:

      - opcode: 0x39
        invalid:

      - opcode: 0x3a
        invalid:

      - opcode: 0x3b
        invalid:

      - opcode: 0x3c
        invalid:

      - opcode: 0x3d
        invalid:

      - opcode: 0x3e
        invalid:

      - opcode: 0x3f
        invalid:

      - opcode: 0x40
        invalid:

      - opcode: 0x41
        invalid:

      - opcode: 0x42
        invalid:

      - opcode: 0x43
        invalid:

      - opcode: 0x44
        invalid:

      - opcode: 0x45
        invalid:

      - opcode: 0x46
        invalid:

      - opcode: 0x47
        invalid:

      - opcode: 0x48
        invalid:

      - opcode: 0x49
        invalid:

      - opcode: 0x4a
        invalid:

      - opcode: 0x4b
        invalid:

      - opcode: 0x4c
        invalid:

      - opcode: 0x4d
        invalid:

      - opcode: 0x4e
        invalid:

      - opcode: 0x4f
        invalid:

      - opcode: 0x50
        invalid:

      - opcode: 0x51
        invalid:

      - opcode: 0x52
        invalid:

      - opcode: 0x53
        invalid:

      - opcode: 0x54
        invalid:

      - opcode: 0x55
        invalid:

      - opcode: 0x56
        invalid:

      - opcode: 0x57
        invalid:

      - opcode: 0x58
        invalid:

      - opcode: 0x59
        invalid:

      - opcode: 0x5a
        invalid:

      - opcode: 0x5b
        invalid:

      - opcode: 0x5c
        invalid:

      - opcode: 0x5d
        invalid:

      - opcode: 0x5e
        invalid:

      - opcode: 0x5f
        invalid:

      - opcode: 0x60
        invalid:

      - opcode: 0x61
        invalid:

      - opcode: 0x62
        invalid:

      - opcode: 0x63
        invalid:

      - opcode: 0x64
        invalid:

      - opcode: 0x65
        invalid:

      - opcode: 0x66
        invalid:

      - opcode: 0x67
        invalid:

      - opcode: 0x68
        invalid:

      - opcode: 0x69
        invalid:

      - opcode: 0x6a
        invalid:

      - opcode: 0x6b
        invalid:

      - opcode: 0x6c
        invalid:

      - opcode: 0x6d
        invalid:

      - opcode: 0x6e
        invalid:

      - opcode: 0x6f
        invalid:

      - opcode: 0x70
        invalid:

      - opcode: 0x71
        invalid:

      - opcode: 0x72
        invalid:

      - opcode: 0x73
        invalid:

      - opcode: 0x74
        invalid:

      - opcode: 0x75
        invalid:

      - opcode: 0x76
        invalid:

      - opcode: 0x77
        invalid:

      - opcode: 0x78
        invalid:

      - opcode: 0x79
        invalid:

      - opcode: 0x7a
        invalid:

      - opcode: 0x7b
        invalid:

      - opcode: 0x7c
        invalid:

      - opcode: 0x7d
        invalid:

      - opcode: 0x7e
        invalid:

      - opcode: 0x7f
        invalid:

      - opcode: 0x80
        invalid:

      - opcode: 0x81
        invalid:

      - opcode: 0x82
        invalid:

      - opcode: 0x83
        invalid:

      - opcode: 0x84
        invalid:

      - opcode: 0x85
        invalid:

      - opcode: 0x86
        invalid:

      - opcode: 0x87
        invalid:

      - opcode: 0x88
        invalid:

      - opcode: 0x89
        invalid:

      - opcode: 0x8a
        invalid:

      - opcode: 0x8b
        invalid:

      - opcode: 0x8c
        invalid:

      - opcode: 0x8d
        invalid:

      - opcode: 0x8e
        invalid:

      - opcode: 0x8f
        invalid:

      - opcode: 0x90
        invalid:

      - opcode: 0x91
        invalid:

      - opcode: 0x92
        invalid:

      - opcode: 0x93
        invalid:

      - opcode: 0x94
        invalid:

      - opcode: 0x95
        invalid:

      - opcode: 0x96
        invalid:

      - opcode: 0x97
        invalid:

      - opcode: 0x98
        invalid:

      - opcode: 0x99
        invalid:

      - opcode: 0x9a
        invalid:

      - opcode: 0x9b
        invalid:

      - opcode: 0x9c
        invalid:

      - opcode: 0x9d
        invalid:

      - opcode: 0x9e
        invalid:

      - opcode: 0x9f
        invalid:

      - opcode: 0xa0
        invalid:

      - opcode: 0xa1
        invalid:

      - opcode: 0xa2
        invalid:

      - opcode: 0xa3
        invalid:

      - opcode: 0xa4
        invalid:

      - opcode: 0xa5
        invalid:

      - opcode: 0xa6
        invalid:

      - opcode: 0xa7
        invalid:

      - opcode: 0xa8
        invalid:

      - opcode: 0xa9
        invalid:

      - opcode: 0xaa
        invalid:

      - opcode: 0xab
        invalid:

      - opcode: 0xac
        invalid:

      - opcode: 0xad
        invalid:

      - opcode: 0xae
        invalid:

      - opcode: 0xaf
        invalid:

      - opcode: 0xb0
        invalid:

      - opcode: 0xb1
        invalid:

      - opcode: 0xb2
        invalid:

      - opcode: 0xb3
        invalid:

      - opcode: 0xb4
        invalid:

      - opcode: 0xb5
        invalid:

      - opcode: 0xb6
        invalid:

      - opcode: 0xb7
        invalid:

      - opcode: 0xb8
        invalid:

      - opcode: 0xb9
        invalid:

      - opcode: 0xba
        invalid:

      - opcode: 0xbb
        invalid:

      - opcode: 0xbc
        invalid:

      - opcode: 0xbd
        invalid:

      - opcode: 0xbe
        invalid:

      - opcode: 0xbf
        invalid:

      - opcode: 0xc0
        invalid:

      - opcode: 0xc1
        invalid:

      - opcode: 0xc2
        invalid:

      - opcode: 0xc3
        invalid:

      - opcode: 0xc4
        invalid:

      - opcode: 0xc5
        invalid:

      - opcode: 0xc6
        invalid:

      - opcode: 0xc7
        invalid:

      - opcode: 0xc8
        invalid:

      - opcode: 0xc9
        invalid:

      - opcode: 0xca
        invalid:

      - opcode: 0xcb
        invalid:

      - opcode: 0xcc
        invalid:

      - opcode: 0xcd
        invalid:

      - opcode: 0xce
        invalid:

      - opcode: 0xcf
        invalid:

      - opcode: 0xd0
        invalid:

      - opcode: 0xd1
        invalid:

      - opcode: 0xd2
        invalid:

      - opcode: 0xd3
        invalid:

      - opcode: 0xd4
        invalid:

      - opcode: 0xd5
        invalid:

      - opcode: 0xd6
        invalid:

      - opcode: 0xd7
        invalid:

      - opcode: 0xd8
        invalid:

      - opcode: 0xd9
        invalid:

      - opcode: 0xda
        invalid:

      - opcode: 0xdb
        invalid:

      - opcode: 0xdc
        invalid:

      - opcode: 0xdd
        invalid:

      - opcode: 0xde
        invalid:

      - opcode: 0xdf
        invalid:

      - opcode: 0xe0
        invalid:

      - opcode: 0xe1
        invalid:

      - opcode: 0xe2
        invalid:

      - opcode: 0xe3
        invalid:

      - opcode: 0xe4
        invalid:

      - opcode: 0xe5
        invalid:

      - opcode: 0xe6
        invalid:

      - opcode: 0xe7
        invalid:

      - opcode: 0xe8
        invalid:

      - opcode: 0xe9
        invalid:

      - opcode: 0xea
        invalid:

      - opcode: 0xeb
        invalid:

      - opcode: 0xec
        invalid:

      - opcode: 0xed
        invalid:

      - opcode: 0xee
        invalid:

      - opcode: 0xef
        invalid:

      - opcode: 0xf0
        invalid:

      - opcode: 0xf1
        invalid:

      - opcode: 0xf2
        invalid:

      - opcode: 0xf3
        invalid:

      - opcode: 0xf4
        invalid:

      - opcode: 0xf5
        invalid:

      - opcode: 0xf6
        invalid:

      - opcode: 0xf7
        invalid:

      - opcode: 0xf8
        invalid:

      - opcode: 0xf9
        invalid:

      - opcode: 0xfa
        invalid:

      - opcode: 0xfb
        invalid:

      - opcode: 0xfc
        invalid:

      - opcode: 0xfd
        invalid:

      - opcode: 0xfe
        invalid:

      - opcode: 0xff
        invalid:

  group:
    group_01:
    - opcode: 0x00
      mnemonic: add
      update_flags: [ cf, pf, af, zf, sf, of ]
      semantic: *add

    - opcode: 0x01
      mnemonic: or
      update_flags: [ cf, pf, af, zf, sf, of ]
      clear_flags: [ af, of, cf ]
      semantic: *or


    - opcode: 0x02
      mnemonic: adc
      test_flags: [ cf ]
      update_flags: [ cf, pf, af, zf, sf, of ]
      semantic: *adc

    - opcode: 0x03
      mnemonic: sbb
      test_flags: [ cf ]
      update_flags: [ cf, pf, af, zf, sf, of ]
      semantic: *sbb

    - opcode: 0x04
      mnemonic: and
      update_flags: [ cf, pf, af, zf, sf, of ]
      clear_flags: [ af, of, cf ]
      semantic: *and

    - opcode: 0x05
      mnemonic: sub
      update_flags: [ cf, pf, af, zf, sf, of ]
      semantic: *sub

    - opcode: 0x06
      mnemonic: xor
      update_flags: [ cf, pf, af, zf, sf, of ]
      clear_flags: [ af, of, cf ]
      semantic: *xor

    - opcode: 0x07
      mnemonic: cmp
      update_flags: [ cf, pf, af, zf, sf, of ]
      semantic: *cmp

    group_01A:
    - opcode: 0x00
      mnemonic: pop
      operand: [ Ev ]
      constraint: d64
      semantic: *pop

    - opcode: 0x01
      mnemonic: Xop
      constraint: pfx1

    - opcode: 0x02
      invalid:

    - opcode: 0x03
      invalid:

    - opcode: 0x04
      invalid:

    - opcode: 0x05
      invalid:

    - opcode: 0x06
      invalid:

    - opcode: 0x07
      invalid:

    group_02:
    - opcode: 0x00
      mnemonic: rol
      semantic: *rol

    - opcode: 0x01
      mnemonic: ror
      semantic: *ror

    - opcode: 0x02
      mnemonic: rcl
      semantic: *rcl

    - opcode: 0x03
      mnemonic: rcr
      semantic: *rcr

    - opcode: 0x04
      mnemonic: shl
      semantic: *shl

    - opcode: 0x05
      mnemonic: shr
      semantic: *shr

    - opcode: 0x06
      mnemonic: sal
      semantic: *sal

    - opcode: 0x07
      mnemonic: sar
      semantic: *sar

    group_03A:
    - opcode: 0x00
      mnemonic: test
      operand: [ Eb, Ib ]
      update_flags: [ of, sf, zf, pf, cf ]
      clear_flags: [ af ]
      semantic: *test

    - opcode: 0x01
      mnemonic: test
      operand: [ Eb, Ib ]
      update_flags: [ of, sf, zf, pf, cf ]
      clear_flags: [ af ]
      semantic: *test

    - opcode: 0x02
      mnemonic: not
      operand: [ Eb ]
      semantic: *not

    - opcode: 0x03
      mnemonic: neg
      operand: [ Eb ]
      semantic: *neg

    - opcode: 0x04
      mnemonic: mul
      operand: [ Eb ]
      semantic: *mul

    - opcode: 0x05
      mnemonic: imul
      operand: [ Eb ]
      semantic: *imul1

    - opcode: 0x06
      mnemonic: div
      operand: [ Eb ]
      semantic: *div

    - opcode: 0x07
      mnemonic: idiv
      operand: [ Eb ]
      semantic: *idiv

    group_03B:
    - opcode: 0x00
      mnemonic: test
      operand: [ Ev, Iz ]
      update_flags: [ of, sf, zf, pf, cf ]
      clear_flags: [ af ]
      semantic: *test

    - opcode: 0x01
      mnemonic: test
      operand: [ Ev, Iz ]
      update_flags: [ of, sf, zf, pf, cf ]
      clear_flags: [ af ]
      semantic: *test

    - opcode: 0x02
      mnemonic: not
      operand: [ Ev ]
      semantic: *not

    - opcode: 0x03
      mnemonic: neg
      operand: [ Ev ]
      semantic: *neg

    - opcode: 0x04
      mnemonic: mul
      operand: [ Ev ]
      semantic: *mul

    - opcode: 0x05
      mnemonic: imul
      operand: [ Ev ]
      semantic: *imul1

    - opcode: 0x06
      mnemonic: div
      operand: [ Ev ]
      semantic: *div

    - opcode: 0x07
      mnemonic: idiv
      operand: [ Ev ]
      semantic: *idiv

    group_04:
    - opcode: 0x00
      mnemonic: inc
      operand: [ Eb ]
      update_flags: [ pf, af, zf, sf, of ]
      semantic: *inc

    - opcode: 0x01
      mnemonic: dec
      operand: [ Eb ]
      update_flags: [ pf, af, zf, sf, of ]
      semantic: *dec

    - opcode: 0x02
      invalid:

    - opcode: 0x03
      invalid:

    - opcode: 0x04
      invalid:

    - opcode: 0x05
      invalid:

    - opcode: 0x06
      invalid:

    - opcode: 0x07
      invalid:

    group_05:
    - opcode: 0x00
      mnemonic: inc
      operand: [ Ev ]
      update_flags: [ pf, af, zf, sf, of ]
      semantic: *inc

    - opcode: 0x01
      mnemonic: dec
      operand: [ Ev ]
      update_flags: [ pf, af, zf, sf, of ]
      semantic: *dec

    - opcode: 0x02
      mnemonic: call
      operand: [ Ev ]
      constraint: df64
      operation_type: ['call']
      semantic: *call

    - opcode: 0x03
      mnemonic: call
      operand: [ Mp ]
      operation_type: ['call']

    - opcode: 0x04
      mnemonic: jmp
      operand: [ Ev ]
      constraint: df64
      operation_type: ['jmp']
      semantic: *jmp

    - opcode: 0x05
      mnemonic: jmp
      operand: [ Mp ]
      operation_type: ['jmp']
      semantic: *jmp

    - opcode: 0x06
      mnemonic: push
      operand: [ Ev ]
      constraint: d64
      semantic: *push

    - opcode: 0x07
      invalid:

    group_06:
    - opcode: 0x00
      sub_opcodes:
        - mnemonic: sldt
          operand: [ Mw ]

        - mnemonic: sldt
          operand: [ Rv ]
          attr: [ na16 ]

    - opcode: 0x01
      sub_opcodes:
        - mnemonic: str
          operand: [ Mw ]

        - mnemonic: str
          operand: [ Rv ]
          attr: [ na16 ]

    - opcode: 0x02
      sub_opcodes:
        - mnemonic: lldt
          operand: [ Mw ]

        - mnemonic: lldt
          operand: [ Rv ]
          attr: [ na16 ]

    - opcode: 0x03
      sub_opcodes:
        - mnemonic: ltr
          operand: [ Mw ]

        - mnemonic: ltr
          operand: [ Rv ]
          attr: [ na16 ]

    - opcode: 0x04
      sub_opcodes:
        - mnemonic: verr
          operand: [ Mw ]

        - mnemonic: verr
          operand: [ Rv ]
          attr: [ na16 ]

    - opcode: 0x05
      sub_opcodes:
        - mnemonic: verw
          operand: [ Mw ]

        - mnemonic: verw
          operand: [ Rv ]
          attr: [ na16 ]

    - opcode: 0x06
      mnemonic: jmpe
      operand: [ Ev ]
      attr: [ ia64 ]

    - opcode: 0x07
      invalid:

    group_07:
    - opcode: 0x00
      sub_opcodes:
        - mnemonic: sgdt
          operand: [ Mp ]
          constraint: f64

        - mnemonic: vmcall
          suffix: 0xc1

        - mnemonic: vmlaunch
          suffix: 0xc2

        - mnemonic: vmresume
          suffix: 0xc3

        - mnemonic: vmxoff
          suffix: 0xc4

    - opcode: 0x01
      sub_opcodes:
        - mnemonic: sidt
          operand: [ Mp ]
          constraint: f64

        - mnemonic: monitor
          suffix: 0xc8

        - mnemonic: mwait
          suffix: 0xc9

    - opcode: 0x02
      sub_opcodes:
        - mnemonic: lgdt
          operand: [ Mp ]
          constraint: f64

        - mnemonic: xgetbv
          suffix: 0xd0

        - mnemonic: xsetbv
          suffix: 0xd1

    - opcode: 0x03
      sub_opcodes:
        - mnemonic: lidt
          operand: [ Mp ]
          constraint: f64

        - mnemonic: vmrun
          suffix: 0xd8

        - mnemonic: vmmcall
          suffix: 0xd9

        - mnemonic: vmload
          suffix: 0xda

        - mnemonic: vmsave
          suffix: 0xdb

        - mnemonic: stgi
          suffix: 0xdc

        - mnemonic: clgi
          suffix: 0xdd

        - mnemonic: skinit
          suffix: 0xde

        - mnemonic: invlpga
          suffix: 0xdf

    - opcode: 0x04
      sub_opcodes:
        - mnemonic: smsw
          operand: [ Mw ]

        - mnemonic: smsw
          operand: [ Rv ]
          attr: [ na16 ]

    - opcode: 0x05
      invalid:

    - opcode: 0x06
      sub_opcodes:
        - mnemonic: lmsw
          operand: [ Mw ]

        - mnemonic: lmsw
          operand: [ Rv ]
          attr: [ na16 ]

    - opcode: 0x07
      sub_opcodes:
        - mnemonic: invlpg
          operand: [ M ]

        - mnemonic: swapgs
          suffix: 0xf8

        - mnemonic: rdtscp
          suffix: 0xf9

    group_08:
    - opcode: 0x00
      invalid:

    - opcode: 0x01
      invalid:

    - opcode: 0x02
      invalid:

    - opcode: 0x03
      invalid:

    - opcode: 0x04
      mnemonic: bt
      operand: [ Ev, Ib ]
      semantic: *bt

    - opcode: 0x05
      mnemonic: bts
      operand: [ Ev, Ib ]
      semantic: *bts

    - opcode: 0x06
      mnemonic: btr
      operand: [ Ev, Ib ]
      semantic: *btr

    - opcode: 0x07
      mnemonic: btc
      operand: [ Ev, Ib ]
      semantic: *btc

    group_09:
    - opcode: 0x00
      invalid:

    - opcode: 0x01
      sub_opcodes:
        - mnemonic: cmpxchg8b
          operand: [ Mq ]
          semantic: *cmpxchg8b

        - mnemonic: cmpxchg16b
          operand: [ Uo ]
          attr: [ m64 ]
          semantic: *cmpxchg16b

    - opcode: 0x02
      invalid:

    - opcode: 0x03
      invalid:

    - opcode: 0x04
      invalid:

    - opcode: 0x05
      invalid:

    - opcode: 0x06
      sub_opcodes:
        - mnemonic: vmptrld
          operand: [ Mq ]

        - mnemonic: vmclear
          operand: [ Mq ]
          prefix: 0x66

        - mnemonic: vmxon
          prefix: 0xf3

    - opcode: 0x07
      mnemonic: vmptrst
      operand: [ Mq ]

    group_10:
    - opcode: 0x00
      mnemonic: ud2

    - opcode: 0x01
      mnemonic: ud2

    - opcode: 0x02
      mnemonic: ud2

    - opcode: 0x03
      mnemonic: ud2

    - opcode: 0x04
      mnemonic: ud2

    - opcode: 0x05
      mnemonic: ud2

    - opcode: 0x06
      mnemonic: ud2

    - opcode: 0x07
      mnemonic: ud2

    group_11:
    - opcode: 0x00
      mnemonic: mov
      semantic: *mov

    - opcode: 0x01
      invalid:

    - opcode: 0x02
      invalid:

    - opcode: 0x03
      invalid:

    - opcode: 0x04
      invalid:

    - opcode: 0x05
      invalid:

    - opcode: 0x06
      invalid:

    - opcode: 0x07
      invalid:

    group_12:
    - opcode: 0x00
      invalid:

    - opcode: 0x01
      invalid:

    - opcode: 0x02
      sub_opcodes:
        - mnemonic: psrlw
          operand: [ Nq, Ib ]

        - mnemonic: psrlw
          operand: [ Ux, Ib ]
          prefix: 0x66

        # - mnemonic: psrlw
        #   operand: [ Hx, Ux, Ib ]
        #   attr: [ vex ]
        #   prefix: 0x66

    - opcode: 0x03
      invalid:

    - opcode: 0x04
      sub_opcodes:
        - mnemonic: psraw
          operand: [ Nq, Ib ]

        - mnemonic: psraw
          operand: [ Ux, Ib ]
          prefix: 0x66

        # - mnemonic: pwraw
        #   operand: [ Hx, Ux, Ib ]
        #   attr: [ vex ]
        #   prefix: 0x66

    - opcode: 0x05
      invalid:

    - opcode: 0x06
      sub_opcodes:
        - mnemonic: psllw
          operand: [ Nq, Ib ]

        - mnemonic: psllw
          operand: [ Ux, Ib ]
          prefix: 0x66

        # - mnemonic: pwraw
        #   operand: [ Hx, Ux, Ib ]
        #   attr: [ vex ]
        #   prefix: 0x66

    - opcode: 0x07
      invalid:

    group_13:
    - opcode: 0x00
      invalid:

    - opcode: 0x01
      invalid:

    - opcode: 0x02
      sub_opcodes:
        - mnemonic: psrld
          operand: [ Nq, Ib ]

        - mnemonic: psrld
          operand: [ Ux, Ib ]
          prefix: 0x66

        # - mnemonic: psrld
        #   operand: [ Hx, Ux, Ib ]
        #   attr: [ vex ]
        #   prefix: 0x66

    - opcode: 0x03
      invalid:

    - opcode: 0x04
      sub_opcodes:
        - mnemonic: psrad
          operand: [ Nq, Ib ]

        - mnemonic: psrad
          operand: [ Ux, Ib ]
          prefix: 0x66

        # - mnemonic: pdrad
        #   operand: [ Hx, Ux, Ib ]
        #   attr: [ vex ]
        #   prefix: 0x66

    - opcode: 0x05
      invalid:

    - opcode: 0x06
      sub_opcodes:
        - mnemonic: pslld
          operand: [ Nq, Ib ]

        - mnemonic: pslld
          operand: [ Ux, Ib ]
          prefix: 0x66

        # - mnemonic: pdrad
        #   operand: [ Hx, Ux, Ib ]
        #   attr: [ vex ]
        #   prefix: 0x66

    - opcode: 0x07
      invalid:

    group_14:
    - opcode: 0x00
      invalid:

    - opcode: 0x01
      invalid:

    - opcode: 0x02
      sub_opcodes:
        - mnemonic: psrlq
          operand: [ Nq, Ib ]

        - mnemonic: psrlq
          operand: [ Ux, Ib ]
          prefix: 0x66

        # - mnemonic: psrlq
        #   operand: [ Hx, Ux, Ib ]
        #   attr: [ vex ]
        #   prefix: 0x66

    - opcode: 0x03
      sub_opcodes:
        - invalid:

        - mnemonic: psrldq
          operand: [ Ux, Ib ]
          prefix: 0x66

        # - mnemonic: psrldq
        #   operand: [ Hx, Ux, Ib ]
        #   attr: [ vex ]
        #   prefix: 0x66

    - opcode: 0x04
      invalid:

    - opcode: 0x05
      invalid:

    - opcode: 0x06
      sub_opcodes:
        - mnemonic: psllq
          operand: [ Nq, Ib ]

        - mnemonic: psllq
          operand: [ Ux, Ib ]
          prefix: 0x66

        # - mnemonic: psllq
        #   operand: [ Hx, Ux, Ib ]
        #   attr: [ vex ]
        #   prefix: 0x66

    - opcode: 0x07
      sub_opcodes:
        - invalid:

        - mnemonic: pslldq
          operand: [ Ux, Ib ]
          prefix: 0x66

        # - mnemonic: pslldq
        #   operand: [ Hx, Ux, Ib ]
        #   attr: [ vex ]
        #   prefix: 0x66

    group_15:
    - opcode: 0x00
      sub_opcodes:
        - mnemonic: fxsave
          operand: [ M ]

        - mnemonic: rdfsbase
          operand: [ Ry ]
          prefix: 0xf3

    - opcode: 0x01
      sub_opcodes:
        - mnemonic: fxrstor
          operand: [ M ]

        - mnemonic: rdgsbase
          operand: [ Ry ]
          prefix: 0xf3

    - opcode: 0x02
      sub_opcodes:
        - mnemonic: ldmxcsr
          operand: [ Md ]

        - mnemonic: wrfsbase
          operand: [ Ry ]
          prefix: 0xf3

    - opcode: 0x03
      sub_opcodes:
        - mnemonic: stmxcsr
          operand: [ Md ]

        - mnemonic: wrgsbase
          operand: [ Ry ]
          prefix: 0xf3

    - opcode: 0x04
      mnemonic: xsave
      operand: [ M ]

    - opcode: 0x05
      sub_opcodes:
        - mnemonic: xrstor
          operand: [ M ]

        - mnemonic: lfence
          suffix: 0xe8

    - opcode: 0x06
      sub_opcodes:
        - mnemonic: xsaveopt
          operand: [ M ]

        - mnemonic: mfence
          suffix: 0xf0

    - opcode: 0x07
      sub_opcodes:
        - mnemonic: clflush
          operand: [ M ]

        - mnemonic: sfence
          suffix: 0xf8

    group_16:
    - opcode: 0x00
      mnemonic: hint_nop
      operand: [ Ev ]
      semantic: *nop

    - opcode: 0x01
      mnemonic: hint_nop
      operand: [ Ev ]
      semantic: *nop

    - opcode: 0x02
      mnemonic: hint_nop
      operand: [ Ev ]
      semantic: *nop

    - opcode: 0x03
      mnemonic: hint_nop
      operand: [ Ev ]
      semantic: *nop

    - opcode: 0x04
      mnemonic: hint_nop
      operand: [ Ev ]
      semantic: *nop

    - opcode: 0x05
      mnemonic: hint_nop
      operand: [ Ev ]
      semantic: *nop

    - opcode: 0x06
      mnemonic: hint_nop
      operand: [ Ev ]
      semantic: *nop

    - opcode: 0x07
      mnemonic: hint_nop
      operand: [ Ev ]
      semantic: *nop

    group_17:
    - opcode: 0x00
      invalid:

    - opcode: 0x01
      mnemonic: blsr
      operand: [ By, Ey ]
      cpu_model: ">= X86_Arch_Bmi"

    - opcode: 0x02
      mnemonic: blsmsk
      operand: [ By, Ey ]
      cpu_model: ">= X86_Arch_Bmi"

    - opcode: 0x03
      mnemonic: blsi
      operand: [ By, Ey ]
      cpu_model: ">= X86_Arch_Bmi"

    - opcode: 0x04
      invalid:

    - opcode: 0x05
      invalid:

    - opcode: 0x06
      invalid:

    - opcode: 0x07
      invalid:

    group_1A:
    - opcode: 0x00
      mnemonic: pop
      operand: [ Ev ]
      constraint: d64
      semantic: *pop

    - opcode: 0x01
      mnemonic: Xop
      constraint: pfx1

    - opcode: 0x02
      invalid:

    - opcode: 0x03
      invalid:

    - opcode: 0x04
      invalid:

    - opcode: 0x05
      invalid:

    - opcode: 0x06
      invalid:

    group_3DNOW1:
    - opcode: 0x00
      mnemonic: prefetch

    - opcode: 0x01
      mnemonic: prefetchw

    - opcode: 0x02
      mnemonic: prefetch

    - opcode: 0x03
      mnemonic: prefetch

    - opcode: 0x04
      mnemonic: prefetch

    - opcode: 0x05
      mnemonic: prefetch

    - opcode: 0x06
      mnemonic: prefetch

    - opcode: 0x07
      mnemonic: prefetch

    group_FP1:
    - opcode: 0x00
      mnemonic: fadd

    - opcode: 0x01
      mnemonic: fmul

    - opcode: 0x02
      mnemonic: fcom

    - opcode: 0x03
      mnemonic: fcomp

    - opcode: 0x04
      mnemonic: fsub

    - opcode: 0x05
      mnemonic: fsubr

    - opcode: 0x06
      mnemonic: fdiv

    - opcode: 0x07
      mnemonic: fdivr

    group_FP2:
    - opcode: 0x00
      mnemonic: fld
      operand: [ m32fp ]

    - opcode: 0x01
      invalid:

    - opcode: 0x02
      mnemonic: fst
      operand: [ m32fp ]

    - opcode: 0x03
      mnemonic: fstp
      operand: [ m32fp ]

    - opcode: 0x04
      mnemonic: fldenv
      operand: [ M ]

    - opcode: 0x05
      mnemonic: fldcw
      operand: [ Mw ]

    - opcode: 0x06
      mnemonic: fnstenv
      operand: [ M ]

    - opcode: 0x07
      mnemonic: fnstcw
      operand: [ Mw ]

    group_FP3:
    - opcode: 0x00
      mnemonic: fiadd

    - opcode: 0x01
      mnemonic: fimul

    - opcode: 0x02
      mnemonic: ficom

    - opcode: 0x03
      mnemonic: ficomp

    - opcode: 0x04
      mnemonic: fisub

    - opcode: 0x05
      mnemonic: fisubr

    - opcode: 0x06
      mnemonic: fidiv

    - opcode: 0x07
      mnemonic: fidivr

    group_FP4:
    - opcode: 0x00
      mnemonic: fild
      operand: [ m32int ]

    - opcode: 0x01
      mnemonic: fisttp
      operand: [ m32int ]

    - opcode: 0x02
      mnemonic: fist
      operand: [ m32int ]

    - opcode: 0x03
      mnemonic: fistp
      operand: [ m32int ]

    - opcode: 0x04
      invalid:

    - opcode: 0x05
      mnemonic: fld
      operand: [ m80fp ]

    - opcode: 0x06
      invalid:

    - opcode: 0x07
      mnemonic: fstp
      operand: [ m80fp ]

    group_FP5:
    - opcode: 0x00
      mnemonic: fld
      operand: [ m64fp ]

    - opcode: 0x01
      mnemonic: fisttp
      operand: [ m64int ]

    - opcode: 0x02
      mnemonic: fst
      operand: [ m64fp ]

    - opcode: 0x03
      mnemonic: fstp
      operand: [ m64fp ]

    - opcode: 0x04
      mnemonic: frstor
      operand: [ M ]

    - opcode: 0x05
      invalid:

    - opcode: 0x06
      mnemonic: fnsave
      operand: [ M ]

    - opcode: 0x07
      mnemonic: fnstsw
      operand: [ Mw ]

    group_FP6:
    - opcode: 0x00
      mnemonic: fiadd

    - opcode: 0x01
      mnemonic: fimul

    - opcode: 0x02
      mnemonic: ficom

    - opcode: 0x03
      mnemonic: ficomp

    - opcode: 0x04
      mnemonic: fisub

    - opcode: 0x05
      mnemonic: fisubr

    - opcode: 0x06
      mnemonic: fidiv

    - opcode: 0x07
      mnemonic: fidivr

    group_FP7:
    - opcode: 0x00
      mnemonic: fild
      operand: [ m16int ]

    - opcode: 0x01
      mnemonic: fisttp
      operand: [ m16int ]

    - opcode: 0x02
      mnemonic: fist
      operand: [ m16int ]

    - opcode: 0x03
      mnemonic: fistp
      operand: [ m16int ]

    - opcode: 0x04
      mnemonic: fbld
      operand: [ m80dec ]

    - opcode: 0x05
      mnemonic: fild
      operand: [ m64int ]

    - opcode: 0x06
      mnemonic: fbstp
      operand: [ m80bcd ]

    - opcode: 0x07
      mnemonic: fistp
      operand: [ m64int ]

  fpu:
    fpu0:
      group: group_FP1
      operand: [ m32fp ]
      table: table_FP1

    fpu1:
      group: group_FP2
      table: table_FP2

    fpu2:
      group: group_FP3
      operand: [ m32int ]
      table: table_FP3

    fpu3:
      group: group_FP4
      table: table_FP4

    fpu4:
      group: group_FP1
      operand: [ m64fp ]
      table: table_FP5

    fpu5:
      group: group_FP5
      table: table_FP6

    fpu6:
      group: group_FP6
      operand: [ m16int ]
      table: table_FP7

    fpu7:
      group: group_FP7
      table: table_FP8

operand:
  decode_1: [ 'const(8, 1)' ]
  decode_3: [ 'const(8, 3)' ]
  decode_AH: [ reg('ah') ]
  decode_AL: [ reg('al') ]
  decode_AX: [ reg('ax') ]
  decode_Ap: [ call('Decode_Ap') ]
  decode_BH: [ reg('bh') ]
  decode_BL: [ reg('bl') ]
  decode_By: [ call('Decode_By') ]
  decode_CH: [ reg('ch') ]
  decode_CL: [ reg('cl') ]
  decode_CS: [ reg('cs') ]
  decode_Cy: [ call('Decode_Cy') ]
  decode_DH: [ reg('dh') ]
  decode_DL: [ reg('dl') ]
  decode_DS: [ reg('ds') ]
  decode_DX: [ reg('dx') ]
  decode_Dy: [ call('Decode_Dy') ]
  decode_ES: [ reg('es') ]
  decode_Eb: [ call('Decode_Eb') ]
  decode_Ed: [ call('Decode_Ed') ]
  decode_Edb: [ call('Decode_Edb') ]
  decode_Ev: [ call('Decode_Ev') ]
  decode_Ew: [ call('Decode_Ew') ]
  decode_Ey: [ call('Decode_Ey') ]
  decode_Eyb: [ call('Decode_Eyb') ]
  decode_Eyw: [ call('Decode_Eyw') ]
  decode_FS: [ reg('fs') ]
  #decode_Fv: [ call('Decode_Fv') ]
  decode_GS: [ reg('gs') ]
  decode_Gb: [ call('Decode_Gb') ]
  decode_Gv: [ call('Decode_Gv') ]
  decode_Gw: [ call('Decode_Gw') ]
  decode_Gy: [ call('Decode_Gy') ]
  decode_Ho: [ call('Decode_Ho') ]
  decode_Hx: [ call('Decode_Hx') ]
  decode_Hy: [ call('Decode_Hy') ]
  decode_Ib: [ read_b(off) ]
  decode_Ibs: [ call('Decode_Ibs') ]
  decode_Ibsq: [ read_bsq(off) ]
  decode_Iv: [ read_v(off) ]
  decode_Iw: [ read_w(off) ]
  decode_Iz: [ read_z(off) ]
  decode_Izsq: [ read_zsq(off) ]
  decode_Jb: [ call('Decode_Jb') ]
  decode_Jz: [ call('Decode_Jz') ]
  decode_Lx: [ call('Decode_Lx') ]
  decode_M: [ call('Decode_M') ]
  decode_Ma: [ call('Decode_Ma') ]
  decode_Md: [ call('Decode_Md') ]
  decode_Uo: [ call('Decode_Uo') ]
  decode_Uod: [ call('Decode_Uod') ]
  decode_Uoq: [ call('Decode_Uoq') ]
  decode_Mp: [ call('Decode_Mp') ]
  decode_Mq: [ call('Decode_Mq') ]
  decode_Mqo: [ call('Decode_Mqo') ]
  decode_Mv: [ call('Decode_Mv') ]
  decode_Mw: [ call('Decode_Mw') ]
  decode_Mx: [ call('Decode_Mx') ]
  decode_My: [ call('Decode_My') ]
  decode_Nq: [ call('Decode_Nq') ]
  decode_Ob: [ call('Decode_Ob') ]
  decode_Ov: [ call('Decode_Ov') ]
  decode_Pq: [ call('Decode_Pq') ]
  decode_Qd: [ call('Decode_Qd') ]
  decode_Qq: [ call('Decode_Qq') ]
  decode_Rv: [ call('Decode_Rv') ]
  decode_Ry: [ call('Decode_Ry') ]
  decode_SS: [ reg('ss') ]
  decode_ST0: [ reg('st0') ]
  decode_ST1: [ reg('st1') ]
  decode_ST2: [ reg('st2') ]
  decode_ST3: [ reg('st3') ]
  decode_ST4: [ reg('st4') ]
  decode_ST5: [ reg('st5') ]
  decode_ST6: [ reg('st6') ]
  decode_ST7: [ reg('st7') ]
  decode_Sw: [ call('Decode_Sw') ]
  decode_Ty: [ call('Decode_Ty') ]
  decode_Uo: [ call('Decode_Uo') ]
  decode_Uod: [ call('Decode_Uod') ]
  decode_Uq: [ call('Decode_Uq') ]
  decode_Ux: [ call('Decode_Ux') ]
  decode_Vo: [ call('Decode_Vo') ]
  decode_Vod: [ call('Decode_Vod') ]
  decode_Voq: [ call('Decode_Voq') ]
  decode_Vx: [ call('Decode_Vx') ]
  decode_Vy: [ call('Decode_Vy') ]
  decode_Wd: [ call('Decode_Wd') ]
  decode_Wo: [ call('Decode_Wo') ]
  decode_Wob: [ call('Decode_Wob') ]
  decode_Wod: [ call('Decode_Wod') ]
  decode_Woo: [ call('Decode_Woo') ]
  decode_Woq: [ call('Decode_Woq') ]
  decode_Woqo: [ call('Decode_Woqo') ]
  decode_Wow: [ call('Decode_Wow') ]
  decode_Wq: [ call('Decode_Wq') ]
  decode_Wx: [ call('Decode_Wx') ]
  decode_Wy: [ call('Decode_Wy') ]
  decode_Xb: [ "addr_b(decode_DS, decode_d64_rSI)" ]
  decode_Xv: [ "addr_v(decode_DS, decode_d64_rSI)" ]
  decode_Xz: [ "addr_z(decode_DS, decode_d64_rSI)" ]
  decode_Yb: [ "addr_b(decode_ES, decode_d64_rDI)" ]
  decode_Yv: [ "addr_v(decode_ES, decode_d64_rDI)" ]
  decode_Yz: [ "addr_z(decode_ES, decode_d64_rDI)" ]
  decode_b: [ call('Decode_b') ]
  decode_eAX: [ "reg_z('ax', 'eax')" ]
  decode_eBP: [ "reg_z('bp', 'ebp')" ]
  decode_eBX: [ "reg_z('bx', 'ebx')" ]
  decode_eCX: [ "reg_z('cx', 'ecx')" ]
  decode_eDI: [ "reg_z('di', 'edi')" ]
  decode_eDX: [ "reg_z('dx', 'edx')" ]
  decode_eSI: [ "reg_z('si', 'esi')" ]
  decode_eSP: [ "reg_z('sp', 'esp')" ]
  decode_m16int: [ call('Decode_m16int') ]
  decode_m32fp: [ call('Decode_m32fp') ]
  decode_m32int: [ call('Decode_m32int') ]
  decode_m64fp: [ call('Decode_m64fp') ]
  decode_m64int: [ call('Decode_m64int') ]
  decode_m80bcd: [ call('Decode_m80bcd') ]
  decode_m80dec: [ call('Decode_m80dec') ]
  decode_m80fp: [ call('Decode_m80fp') ]
  decode_r10: [ "reg_v('r10w', 'r10d', 'r10')" ]
  decode_d64_r10: [ "reg_d64_r('r10w', 'r10d', 'r10')" ]
  decode_r10b: [ reg('r10b') ]
  decode_r11: [ "reg_v('r11w', 'r11d', 'r11')" ]
  decode_d64_r11: [ "reg_d64_r('r11w', 'r11d', 'r11')" ]
  decode_r11b: [ reg('r11b') ]
  decode_r12: [ "reg_v('r12w', 'r12d', 'r12')" ]
  decode_d64_r12: [ "reg_d64_r('r12w', 'r12d', 'r12')" ]
  decode_r12b: [ reg('r12b') ]
  decode_r13: [ "reg_v('r13w', 'r13d', 'r13')" ]
  decode_d64_r13: [ "reg_d64_r('r13w', 'r13d', 'r13')" ]
  decode_r13b: [ reg('r13b') ]
  decode_r14: [ "reg_v('r14w', 'r14d', 'r14')" ]
  decode_d64_r14: [ "reg_d64_r('r14w', 'r14d', 'r14')" ]
  decode_r14b: [ reg('r14b') ]
  decode_r15: [ "reg_v('r15w', 'r15d', 'r15')" ]
  decode_d64_r15: [ "reg_d64_r('r15w', 'r15d', 'r15')" ]
  decode_r15b: [ reg('r15b') ]
  decode_r8: [ "reg_v('r8w', 'r8d', 'r8')" ]
  decode_d64_r8: [ "reg_d64_r('r8w', 'r8d', 'r8')" ]
  decode_r8b: [ reg('r8b') ]
  decode_r9: [ "reg_v('r9w', 'r9d', 'r9')" ]
  decode_d64_r9: [ "reg_d64_r('r9w', 'r9d', 'r9')" ]
  decode_r9b: [ reg('r9b') ]
  decode_rAX: [ "reg_v('ax', 'eax', 'rax')" ]
  decode_d64_rAX: [ "reg_d64_r('ax', 'eax', 'rax')" ]
  decode_rBP: [ "reg_v('bp', 'ebp', 'rbp')" ]
  decode_d64_rBP: [ "reg_d64_r('bp', 'ebp', 'rbp')" ]
  decode_rBX: [ "reg_v('bx', 'ebx', 'rbx')" ]
  decode_d64_rBX: [ "reg_d64_r('bx', 'ebx', 'rbx')" ]
  decode_rCX: [ "reg_v('cx', 'ecx', 'rcx')" ]
  decode_d64_rCX: [ "reg_d64_r('cx', 'ecx', 'rcx')" ]
  decode_rDI: [ "reg_v('di', 'edi', 'rdi')" ]
  decode_d64_rDI: [ "reg_d64_r('di', 'edi', 'rdi')" ]
  decode_rDX: [ "reg_v('dx', 'edx', 'rdx')" ]
  decode_d64_rDX: [ "reg_d64_r('dx', 'edx', 'rdx')" ]
  decode_rSI: [ "reg_v('si', 'esi', 'rsi')" ]
  decode_d64_rSI: [ "reg_d64_r('si', 'esi', 'rsi')" ]
  decode_rSP: [ "reg_v('sp', 'esp', 'rsp')" ]
  decode_d64_rSP: [ "reg_d64_r('sp', 'esp', 'rsp')" ]
  decode_w: [ call('Decode_w') ]
  decode_x: [ call('Decode_x') ]

  3: [ op0 = decode_3 ]
  AH_Ib: [ op0 = decode_AH, op1 = decode_Ib ]
  AL_DX: [ op0 = decode_AL, op1 = decode_DX ]
  AL_Ib: [ op0 = decode_AL, op1 = decode_Ib ]
  AL_Ob: [ op0 = decode_AL, op1 = decode_Ob ]
  AL_Xb: [ op0 = decode_AL, op1 = decode_Xb ]
  AX: [ op0 = decode_AX ]
  Ap: [ op0 = decode_Ap ]
  BH_Ib: [ op0 = decode_BH, op1 = decode_Ib ]
  BL_Ib: [ op0 = decode_BL, op1 = decode_Ib ]
  By_Ey: [ op0 = decode_By, op1 = decode_Ey ]
  By_Ey_Ib: [ op0 = decode_By, op1 = decode_Ey, op2 = decode_Ib ]
  CH_Ib: [ op0 = decode_CH, op1 = decode_Ib ]
  CL_Ib: [ op0 = decode_CL, op1 = decode_Ib ]
  CS: [ op0 = decode_CS ]
  DH_Ib: [ op0 = decode_DH, op1 = decode_Ib ]
  DL_Ib: [ op0 = decode_DL, op1 = decode_Ib ]
  DS: [ op0 = decode_DS ]
  DX_AL: [ op0 = decode_DX, op1 = decode_AL ]
  DX_Xb: [ op0 = decode_DX, op1 = decode_Xb ]
  DX_Xz: [ op0 = decode_DX, op1 = decode_Xz ]
  DX_eAX: [ op0 = decode_DX, op1 = decode_eAX ]
  Dy_Ry: [ op0 = decode_Dy, op1 = decode_Ry ]
  ES: [ op0 = decode_ES ]
  Eb: [ op0 = decode_Eb ]
  Eb_1: [ op0 = decode_Eb, op1 = decode_1 ]
  Eb_CL: [ op0 = decode_Eb, op1 = decode_CL ]
  Eb_Gb: [ op0 = decode_Eb, op1 = decode_Gb ]
  Eb_Ib: [ last_len, op0 = decode_Eb, move_decode_offset(next_operand), op1 = decode_Ib ]
  Ed: [ op0 = decode_Ed ]
  Ed_Vo: [ op0 = decode_Ed, op1 = decode_Vo ]
  Ev: [ op0 = decode_Ev ]
  Ev_1: [ op0 = decode_Ev, op1 = decode_1 ]
  Ev_CL: [ op0 = decode_Ev, op1 = decode_CL ]
  Ev_Gv: [ op0 = decode_Ev, op1 = decode_Gv ]
  Ev_Gv_CL: [ op0 = decode_Ev, op1 = decode_Gv, op2 = decode_CL ]
  Ev_Gv_Ib: [ last_len, op0 = decode_Ev, op1 = decode_Gv, move_decode_offset(next_operand), op2 = decode_Ib ]
  Ev_Ib: [ last_len, op0 = decode_Ev, move_decode_offset(next_operand), op1 = decode_Ib ]
  Ev_Ibs: [ last_len, op0 = decode_Ev, move_decode_offset(next_operand), op1 = decode_Ibs ]
  Ev_Iz: [ last_len, op0 = decode_Ev, move_decode_offset(next_operand), op1 = decode_Iz ]
  Ew_Gw: [ op0 = decode_Ew, op1 = decode_Gw ]
  Ew_Sw: [ op0 = decode_Ew, op1 = decode_Sw ]
  Ey_Gy: [ op0 = decode_Ey, op1 = decode_Gy ]
  Ey_Pq: [ op0 = decode_Ey, op1 = decode_Pq ]
  Ey_Vo: [ op0 = decode_Ey, op1 = decode_Vo ]
  Ey_Vo_Ib: [ op0 = decode_Ey, op1 = decode_Vo, op2 = decode_Ib ]
  Eyb_Vo_Ib: [ op0 = decode_Eyb, op1 = decode_Vo, op2 = decode_Ib ]
  Eyw_Vo_Ib: [ op0 = decode_Eyw, op1 = decode_Vo, op2 = decode_Ib ]
  FS: [ op0 = decode_FS ]
  #Fv: [ op0 = decode_Fv ]
  GS: [ op0 = decode_GS ]
  Gb_Eb: [ op0 = decode_Gb, op1 = decode_Eb ]
  Gb_Ev: [ op0 = decode_Gb, op1 = decode_Ev ]
  Gv_Eb: [ op0 = decode_Gv, op1 = decode_Eb ]
  Gv_Ed: [ op0 = decode_Gv, op1 = decode_Ed ]
  Gv_Ev: [ op0 = decode_Gv, op1 = decode_Ev ]
  Gv_Ev_Ibs: [ last_len, op0 = decode_Gv, op1 = decode_Ev, move_decode_offset(next_operand), op2 = decode_Ibs ]
  Gv_Ev_Iz: [ last_len, op0 = decode_Gv, op1 = decode_Ev, move_decode_offset(next_operand), op2 = decode_Iz ]
  Gv_Ew: [ op0 = decode_Gv, op1 = decode_Ew ]
  Gv_M: [ op0 = decode_Gv, op1 = decode_M ]
  Gv_Ma: [ op0 = decode_Gv, op1 = decode_Ma ]
  Gv_Mp: [ op0 = decode_Gv, op1 = decode_Mp ]
  Gv_Mv: [ op0 = decode_Gv, op1 = decode_Mv ]
  Gy_By_Ey: [ op0 = decode_Gy, op1 = decode_By, op2 = decode_Ey ]
  Gy_Eb: [ op0 = decode_Gy, op1 = decode_Eb ]
  Gy_Ev: [ op0 = decode_Gy, op1 = decode_Ev ]
  Gy_Ey: [ op0 = decode_Gy, op1 = decode_Ey ]
  Gy_Ey_By: [ op0 = decode_Gy, op1 = decode_Ey, op2 = decode_By ]
  Gy_Uo: [ op0 = decode_Gy, op1 = decode_Uo ]
  Gy_Nq: [ op0 = decode_Gy, op1 = decode_Nq ]
  Gy_Nq_Ib: [ op0 = decode_Gy, op1 = decode_Nq, op2 = decode_Ib ]
  Gy_Uo_Ib: [ op0 = decode_Gy, op1 = decode_Uo, op2 = decode_Ib ]
  Gy_Ux: [ op0 = decode_Gy, op1 = decode_Ux ]
  Gy_Wod: [ op0 = decode_Gy, op1 = decode_Wod ]
  Gy_Woq: [ op0 = decode_Gy, op1 = decode_Woq ]
  Hx_Hx_Wx: [ op0 = decode_Hx, op1 = decode_Hx, op2 = decode_Wx ]
  Hx_Ux_Ib: [ last_len, op0 = decode_Hx, op1 = decode_Ux, move_decode_offset(next_operand), op2 = decode_Ib ]
  Ib: [ op0 = decode_Ib ]
  Ib_AL: [ op0 = decode_Ib, op1 = decode_AL ]
  Ib_eAX: [ op0 = decode_Ib, op1 = decode_eAX ]
  Iw: [ op0 = decode_Iw ]
  Iw_Ib: [ op0 = decode_Iw, op1 = decode_Ib ]
  Iz: [ op0 = decode_Iz ]
  Jb: [ op0 = decode_Jb ]
  Jz: [ op0 = decode_Jz ]
  M: [ op0 = decode_M ]
  Md: [ op0 = decode_Md ]
  Md_Vo: [ op0 = decode_Md, op1 = decode_Vo ]
  Uo: [ op0 = decode_Uo ]
  Uo_Vod: [ op0 = decode_Uo, op1 = decode_Vod ]
  Uo_Voq: [ op0 = decode_Uo, op1 = decode_Voq ]
  Uoq_Vo: [ op0 = decode_Uoq, op1 = decode_Vo ]
  Mp: [ op0 = decode_Mp ]
  Mq: [ op0 = decode_Mq ]
  Mq_Pq: [ op0 = decode_Mq, op1 = decode_Pq ]
  Mq_Vo: [ op0 = decode_Mq, op1 = decode_Vo ]
  Mv_Gv: [ op0 = decode_Mv, op1 = decode_Gv ]
  Mw: [ op0 = decode_Mw ]
  Mx_Hx_Vx: [ op0 = decode_Mx, op1 = decode_Hx, op2 = decode_Vx ]
  Mx_Vx: [ op0 = decode_Mx, op1 = decode_Vx ]
  My_Gy: [ op0 = decode_My, op1 = decode_Gy ]
  Nq_Ib: [ op0 = decode_Nq, op1 = decode_Ib ]
  Ob_AL: [ op0 = decode_Ob, op1 = decode_AL ]
  Ov_rAX: [ op0 = decode_Ov, op1 = decode_rAX ]
  Pq_Ey: [ op0 = decode_Pq, op1 = decode_Ey ]
  Pq_Mw_Ib: [ op0 = decode_Pq, op1 = decode_Mw, op2 = decode_Ib ]
  Pq_Nq: [ op0 = decode_Pq, op1 = decode_Nq ]
  Pq_Qd: [ op0 = decode_Pq, op1 = decode_Qd ]
  Pq_Qq: [ op0 = decode_Pq, op1 = decode_Qq ]
  Pq_Qq_Ib: [ op0 = decode_Pq, op1 = decode_Qq, op2 = decode_Ib ]
  Pq_Uq: [ op0 = decode_Pq, op1 = decode_Uq ]
  Pq_Wo: [ op0 = decode_Pq, op1 = decode_Wo ]
  Pq_Woq: [ op0 = decode_Pq, op1 = decode_Woq ]
  Qq_Pq: [ op0 = decode_Qq, op1 = decode_Pq ]
  Rv: [ op0 = decode_Rv ]
  Ry: [ op0 = decode_Ry ]
  Ry_Cy: [ op0 = decode_Ry, op1 = decode_Cy ]
  Ry_Dy: [ op0 = decode_Ry, op1 = decode_Dy ]
  Ry_Ty: [ op0 = decode_Ry, op1 = decode_Ty ]
  SS: [ op0 = decode_SS ]
  ST0: [ op0 = decode_ST0 ]
  ST0_ST0: [ op0 = decode_ST0, op1 = decode_ST0 ]
  ST0_ST1: [ op0 = decode_ST0, op1 = decode_ST1 ]
  ST0_ST2: [ op0 = decode_ST0, op1 = decode_ST2 ]
  ST0_ST3: [ op0 = decode_ST0, op1 = decode_ST3 ]
  ST0_ST4: [ op0 = decode_ST0, op1 = decode_ST4 ]
  ST0_ST5: [ op0 = decode_ST0, op1 = decode_ST5 ]
  ST0_ST6: [ op0 = decode_ST0, op1 = decode_ST6 ]
  ST0_ST7: [ op0 = decode_ST0, op1 = decode_ST7 ]
  ST1: [ op0 = decode_ST1 ]
  ST1_ST0: [ op0 = decode_ST1, op1 = decode_ST0 ]
  ST2: [ op0 = decode_ST2 ]
  ST2_ST0: [ op0 = decode_ST2, op1 = decode_ST0 ]
  ST3: [ op0 = decode_ST3 ]
  ST3_ST0: [ op0 = decode_ST3, op1 = decode_ST0 ]
  ST4: [ op0 = decode_ST4 ]
  ST4_ST0: [ op0 = decode_ST4, op1 = decode_ST0 ]
  ST5: [ op0 = decode_ST5 ]
  ST5_ST0: [ op0 = decode_ST5, op1 = decode_ST0 ]
  ST6: [ op0 = decode_ST6 ]
  ST6_ST0: [ op0 = decode_ST6, op1 = decode_ST0 ]
  ST7: [ op0 = decode_ST7 ]
  ST7_ST0: [ op0 = decode_ST7, op1 = decode_ST0 ]
  Sw_Ew: [ op0 = decode_Sw, op1 = decode_Ew ]
  Ty_Ry: [ op0 = decode_Ty, op1 = decode_Ry ]
  Uo_Ib_Ib: [ op0 = decode_Uo, op1 = decode_Ib, op2 = decode_Ib ]
  Ux_Ib: [ last_len, op0 = decode_Ux, move_decode_offset(next_operand), op1 = decode_Ib ]
  Vo_Edb_Ib: [ op0 = decode_Vo, op1 = decode_Edb, op2 = decode_Ib ]
  Vo_Ed: [ op0 = decode_Vo, op1 = decode_Ed ]
  Vo_Ey: [ op0 = decode_Vo, op1 = decode_Ey ]
  Vo_Ey_Ib: [ op0 = decode_Vo, op1 = decode_Ey, op2 = decode_Ib ]
  Vo_Ho_Edb_Ib: [ op0 = decode_Vo, op1 = decode_Ho, op2 = decode_Edb, op3 = decode_Ib ]
  Vo_Ho_Ey: [ op0 = decode_Vo, op1 = decode_Ho, op2 = decode_Ey ]
  Vo_Ho_Ey_Ib: [ op0 = decode_Vo, op1 = decode_Ho, op2 = decode_Ey, op3 = decode_Ib ]
  Vo_Ho_Uoq: [ op0 = decode_Vo, op1 = decode_Ho, op2 = decode_Uoq ]
  Vo_Mw_Ib: [ op0 = decode_Vo, op1 = decode_Mw, op2 = decode_Ib ]
  Vo_Ho_Mw_Ib: [ op0 = decode_Vo, op1 = decode_Ho, op2 = decode_Mw, op3 = decode_Ib ]
  Vo_Ho_Uod_Ib: [ op0 = decode_Vo, op1 = decode_Ho, op2 = decode_Uod, op3 = decode_Ib ]
  Vo_Ho_Wd: [ op0 = decode_Vo, op1 = decode_Ho, op2 = decode_Wd ]
  Vo_Ho_Wo: [ op0 = decode_Vo, op1 = decode_Ho, op2 = decode_Wo ]
  Vo_Ho_Wo_Ib: [ op0 = decode_Vo, op1 = decode_Ho, op2 = decode_Wo, op3 = decode_Ib ]
  Vo_Ho_Wod: [ op0 = decode_Vo, op1 = decode_Ho, op2 = decode_Wod ]
  Vo_Ho_Woq: [ op0 = decode_Vo, op1 = decode_Ho, op2 = decode_Woq ]
  Vo_Ho_Woq_Ib: [ op0 = decode_Vo, op1 = decode_Ho, op2 = decode_Woq, op3 = decode_Ib ]
  Vo_Ho_Wq: [ op0 = decode_Vo, op1 = decode_Ho, op2 = decode_Wq ]
  Vo_Md_x_Ho: [ op0 = decode_Vo, op1 = decode_Md, op2 = decode_x, op3 = decode_Ho ]
  Vo_Uod: [ op0 = decode_Vo, op1 = decode_Uod ]
  Vo_Uoq: [ op0 = decode_Vo, op1 = decode_Uoq ]
  Vo_Mq: [ op0 = decode_Vo, op1 = decode_Mq ]
  Vo_Nq: [ op0 = decode_Vo, op1 = decode_Nq ]
  Vo_Uo: [ op0 = decode_Vo, op1 = decode_Uo ]
  Vo_Uod_Ib: [ op0 = decode_Vo, op1 = decode_Uod, op2 = decode_Ib ]
  Vo_Wo: [ op0 = decode_Vo, op1 = decode_Wo ]
  Vo_Wo_Ib: [ op0 = decode_Vo, op1 = decode_Wo, op2 = decode_Ib ]
  Vo_Wod: [ op0 = decode_Vo, op1 = decode_Wod ]
  Vo_Woq: [ op0 = decode_Vo, op1 = decode_Woq ]
  Vo_Woq_Ib: [ op0 = decode_Vo, op1 = decode_Woq, op2 = decode_Ib ]
  Vo_Wow: [ op0 = decode_Vo, op1 = decode_Wow ]
  Vo_Wx: [ op0 = decode_Vo, op1 = decode_Wx ]
  Vx_Hx_Mx: [ op0 = decode_Vx, op1 = decode_Hx, op2 = decode_Mx ]
  Vx_Hx_Wx: [ op0 = decode_Vx, op1 = decode_Hx, op2 = decode_Wx ]
  Vx_Hx_Wx_Ib: [ last_len, op0 = decode_Vx, op1 = decode_Hx, op2 = decode_Wx, move_decode_offset(next_operand), op3 = decode_Ib ]
  Vx_Hx_Wx_Lx: [ op0 = decode_Vx, op1 = decode_Hx, op2 = decode_Wx, op3 = decode_Lx ]
  Vx_Md_x_Hx: [ op0 = decode_Vx, op1 = decode_Md, op2 = decode_x, op3 = decode_Hx ]
  Vx_Uo_b: [ op0 = decode_Vx, op1 = decode_Uo, op2 = decode_b ]
  Vx_Uo_w: [ op0 = decode_Vx, op1 = decode_Uo, op2 = decode_w ]
  Vx_Uod: [ op0 = decode_Vx, op1 = decode_Uod ]
  Vx_Uoq: [ op0 = decode_Vx, op1 = decode_Uoq ]
  Vx_Woq: [ op0 = decode_Vx, op1 = decode_Woq ]
  Vx_Mq_x_Hx: [ op0 = decode_Vx, op1 = decode_Mq, op2 = decode_x, op3 = decode_Hx ]
  Vx_Mqo_Hx: [ op0 = decode_Vx, op1 = decode_Mqo, op2 = decode_Hx ]
  Vx_Mx: [ op0 = decode_Vx, op1 = decode_Mx ]
  Vx_Uo: [ op0 = decode_Vx, op1 = decode_Uo ]
  Vx_Wx: [ op0 = decode_Vx, op1 = decode_Wx ]
  Vx_Wx_Ib: [ last_len, op0 = decode_Vx, op1 = decode_Wx, move_decode_offset(next_operand), op2 = decode_Ib ]
  Vy_Hy_Wo_Ib: [ last_len, op0 = decode_Vy, op1 = decode_Hy, op2 = decode_Wo, move_decode_offset(next_operand), op3 = decode_Ib ]
  Vy_Hy_Wy: [ op0 = decode_Vy, op1 = decode_Hy, op2 = decode_Wy ]
  Vy_Hy_Wy_Ib: [ last_len, op0 = decode_Vy, op1 = decode_Hy, op2 = decode_Wy, move_decode_offset(next_operand), op3 = decode_Ib ]
  Vy_Uo: [ op0 = decode_Vy, op1 = decode_Uo ]
  Vy_Uoq: [ op0 = decode_Vy, op1 = decode_Uoq ]
  Vy_Uo: [ op0 = decode_Vy, op1 = decode_Uo ]
  Vy_Wod: [ op0 = decode_Vy, op1 = decode_Wod ]
  Vy_Woo: [ op0 = decode_Vy, op1 = decode_Woo ]
  Vy_Woq: [ op0 = decode_Vy, op1 = decode_Woq ]
  Vy_Wy_Ib: [ last_len, op0 = decode_Vy, op1 = decode_Wy, move_decode_offset(next_operand), op2 = decode_Ib ]
  Wo_Vy_Ib: [ last_len, op0 = decode_Wo, op1 = decode_Vy, move_decode_offset(next_operand), op2 = decode_Ib ]
  Wob_Vo_Ib: [ last_len, op0 = decode_Wob, op1 = decode_Vo, move_decode_offset(next_operand), op2 = decode_Ib ]
  Wod_Vo: [ op0 = decode_Wod, op1 = decode_Vo ]
  Woq_Vo: [ op0 = decode_Woq, op1 = decode_Vo ]
  Woqo_Vx_Ib: [ last_len, op0 = decode_Woqo, op1 = decode_Vx, move_decode_offset(next_operand), op2 = decode_Ib ]
  Wow_Vo_Ib: [ last_len, op0 = decode_Wow, op1 = decode_Vo, move_decode_offset(next_operand), op2 = decode_Ib ]
  Wx_Vx: [ op0 = decode_Wx, op1 = decode_Vx ]
  AL_Yb: [ op0 = decode_AL, op1 = decode_Yb ] # Inversion needed here!
  Yb_DX: [ op0 = decode_Yb, op1 = decode_DX ]
  Xb_Yb: [ op0 = decode_Xb, op1 = decode_Yb ] # Inversion needed here!
  Xv_Yv: [ op0 = decode_Xv, op1 = decode_Yv ] # Inversion needed here!
  rAX_Yv: [ op0 = decode_rAX, op1 = decode_Yv ] # Inversion needed here!
  Yz_DX: [ op0 = decode_Yz, op1 = decode_DX ]
  eAX: [ op0 = decode_eAX ]
  eAX_DX: [ op0 = decode_eAX, op1 = decode_DX ]
  eAX_Ib: [ op0 = decode_eAX, op1 = decode_Ib ]
  eBP: [ op0 = decode_eBP ]
  eBX: [ op0 = decode_eBX ]
  eCX: [ op0 = decode_eCX ]
  eDI: [ op0 = decode_eDI ]
  eDX: [ op0 = decode_eDX ]
  eSI: [ op0 = decode_eSI ]
  eSP: [ op0 = decode_eSP ]
  m16int: [ op0 = decode_m16int ]
  m32fp: [ op0 = decode_m32fp ]
  m32int: [ op0 = decode_m32int ]
  m64fp: [ op0 = decode_m64fp ]
  m64int: [ op0 = decode_m64int ]
  m80bcd: [ op0 = decode_m80bcd ]
  m80dec: [ op0 = decode_m80dec ]
  m80fp: [ op0 = decode_m80fp ]
  r10: [ op0 = decode_r10 ]
  d64_r10: [ op0 = decode_d64_r10 ]
  r10_Iv: [ op0 = decode_r10, op1 = decode_Iv ]
  r10_rAX: [ op0 = decode_r10, op1 = decode_rAX ]
  r10b_Ib: [ op0 = decode_r10b, op1 = decode_Ib ]
  r11: [ op0 = decode_r11 ]
  d64_r11: [ op0 = decode_d64_r11 ]
  r11_Iv: [ op0 = decode_r11, op1 = decode_Iv ]
  r11_rAX: [ op0 = decode_r11, op1 = decode_rAX ]
  r11b_Ib: [ op0 = decode_r11b, op1 = decode_Ib ]
  r12: [ op0 = decode_r12 ]
  d64_r12: [ op0 = decode_d64_r12 ]
  r12_Iv: [ op0 = decode_r12, op1 = decode_Iv ]
  r12_rAX: [ op0 = decode_r12, op1 = decode_rAX ]
  r12b_Ib: [ op0 = decode_r12b, op1 = decode_Ib ]
  r13: [ op0 = decode_r13 ]
  d64_r13: [ op0 = decode_d64_r13 ]
  r13_Iv: [ op0 = decode_r13, op1 = decode_Iv ]
  r13_rAX: [ op0 = decode_r13, op1 = decode_rAX ]
  r13b_Ib: [ op0 = decode_r13b, op1 = decode_Ib ]
  r14: [ op0 = decode_r14 ]
  d64_r14: [ op0 = decode_d64_r14 ]
  r14_Iv: [ op0 = decode_r14, op1 = decode_Iv ]
  r14_rAX: [ op0 = decode_r14, op1 = decode_rAX ]
  r14b_Ib: [ op0 = decode_r14b, op1 = decode_Ib ]
  r15: [ op0 = decode_r15 ]
  d64_r15: [ op0 = decode_d64_r15 ]
  r15_Iv: [ op0 = decode_r15, op1 = decode_Iv ]
  r15_rAX: [ op0 = decode_r15, op1 = decode_rAX ]
  r15b_Ib: [ op0 = decode_r15b, op1 = decode_Ib ]
  r8: [ op0 = decode_r8 ]
  d64_r8: [ op0 = decode_d64_r8 ]
  r8_Iv: [ op0 = decode_r8, op1 = decode_Iv ]
  r8_rAX: [ op0 = decode_r8, op1 = decode_rAX ]
  r8b_Ib: [ op0 = decode_r8b, op1 = decode_Ib ]
  r9: [ op0 = decode_r9 ]
  d64_r9: [ op0 = decode_d64_r9 ]
  r9_Iv: [ op0 = decode_r9, op1 = decode_Iv ]
  r9_rAX: [ op0 = decode_r9, op1 = decode_rAX ]
  r9b_Ib: [ op0 = decode_r9b, op1 = decode_Ib ]
  rAX: [ op0 = decode_rAX ]
  d64_rAX: [ op0 = decode_d64_rAX ]
  rAX_Iv: [ op0 = decode_rAX, op1 = decode_Iv ]
  rAX_Iz: [ op0 = decode_rAX, op1 = decode_Iz ]
  rAX_Ov: [ op0 = decode_rAX, op1 = decode_Ov ]
  rAX_Xv: [ op0 = decode_rAX, op1 = decode_Xv ]
  rBP: [ op0 = decode_rBP ]
  d64_rBP: [ op0 = decode_d64_rBP ]
  rBP_Iv: [ op0 = decode_rBP, op1 = decode_Iv ]
  rBP_rAX: [ op0 = decode_rBP, op1 = decode_rAX ]
  rBX: [ op0 = decode_rBX ]
  d64_rBX: [ op0 = decode_d64_rBX ]
  rBX_Iv: [ op0 = decode_rBX, op1 = decode_Iv ]
  rBX_rAX: [ op0 = decode_rBX, op1 = decode_rAX ]
  rCX: [ op0 = decode_rCX ]
  d64_rCX: [ op0 = decode_d64_rCX ]
  rCX_Iv: [ op0 = decode_rCX, op1 = decode_Iv ]
  rCX_rAX: [ op0 = decode_rCX, op1 = decode_rAX ]
  rDI: [ op0 = decode_rDI ]
  d64_rDI: [ op0 = decode_d64_rDI ]
  rDI_Iv: [ op0 = decode_rDI, op1 = decode_Iv ]
  rDI_rAX: [ op0 = decode_rDI, op1 = decode_rAX ]
  rDX: [ op0 = decode_rDX ]
  d64_rDX: [ op0 = decode_d64_rDX ]
  rDX_Iv: [ op0 = decode_rDX, op1 = decode_Iv ]
  rDX_rAX: [ op0 = decode_rDX, op1 = decode_rAX ]
  rSI: [ op0 = decode_rSI ]
  d64_rSI: [ op0 = decode_d64_rSI ]
  rSI_Iv: [ op0 = decode_rSI, op1 = decode_Iv ]
  rSI_rAX: [ op0 = decode_rSI, op1 = decode_rAX ]
  rSP: [ op0 = decode_rSP ]
  d64_rSP: [ op0 = decode_d64_rSP ]
  rSP_Iv: [ op0 = decode_rSP, op1 = decode_Iv ]
  rSP_rAX: [ op0 = decode_rSP, op1 = decode_rAX ]
