/* This file has been automatically generated, you must _NOT_ edit it directly. (Thu Nov 19 09:14:46 2015) */
#include "x86_architecture.hpp"
const char *X86Architecture::m_Mnemonic[0x2f6] =
{
  "unknown",
  "aaa",
  "aad",
  "aam",
  "aas",
  "adc",
  "add",
  "addpd",
  "addps",
  "addsd",
  "addss",
  "addsubps",
  "aesdec",
  "aesdeclast",
  "aesenc",
  "aesenclast",
  "aesimc",
  "aeskeygenassist",
  "altinst",
  "and",
  "andn",
  "andnpd",
  "andnps",
  "andpd",
  "andps",
  "arpl",
  "bb0_reset",
  "bb1_reset",
  "bextr",
  "blendpd",
  "blendps",
  "blendvpd",
  "blendvps",
  "blendw",
  "blsi",
  "blsmsk",
  "blsr",
  "bound",
  "broadcastf128",
  "broadcasti128",
  "broadcastsd",
  "broadcastss",
  "bsf",
  "bsr",
  "bswap",
  "bt",
  "btc",
  "btr",
  "bts",
  "bzhi",
  "call",
  "cbw",
  "cdq",
  "cdqe",
  "clc",
  "cld",
  "clflush",
  "clgi",
  "cli",
  "clts",
  "cmc",
  "cmovb",
  "cmovbe",
  "cmovl",
  "cmovle",
  "cmovnb",
  "cmovnbe",
  "cmovnl",
  "cmovnle",
  "cmovno",
  "cmovnp",
  "cmovns",
  "cmovnz",
  "cmovo",
  "cmovp",
  "cmovs",
  "cmovz",
  "cmp",
  "cmpgtd",
  "cmps",
  "cmpxchg",
  "cmpxchg16b",
  "cmpxchg8b",
  "comisd",
  "comiss",
  "cpu_read",
  "cpu_write",
  "cpuid",
  "cqo",
  "crc32",
  "cvtdq2pd",
  "cvtdq2ps",
  "cvtpd2dq",
  "cvtpd2pi",
  "cvtpd2ps",
  "cvtph2ps",
  "cvtpi2pd",
  "cvtpi2ps",
  "cvtps2dq",
  "cvtps2pd",
  "cvtps2ph",
  "cvtps2pi",
  "cvtsd2si",
  "cvtsd2ss",
  "cvtsi2sd",
  "cvtsi2ss",
  "cvtss2sd",
  "cvtss2si",
  "cvttpd2dq",
  "cvttpd2pi",
  "cvttps2dq",
  "cvttps2pi",
  "cvttsd2si",
  "cvttss2si",
  "cwd",
  "cwde",
  "daa",
  "das",
  "dec",
  "div",
  "divpd",
  "divps",
  "divsd",
  "divss",
  "dmint",
  "dppd",
  "dpps",
  "emms",
  "enter",
  "extractf128",
  "extracti128",
  "extractps",
  "extrq",
  "f2xm1",
  "f4x4",
  "fabs",
  "fadd",
  "faddp",
  "fbld",
  "fbstp",
  "fchs",
  "fcmovb",
  "fcmovbe",
  "fcmove",
  "fcmovnb",
  "fcmovnbe",
  "fcmovne",
  "fcmovnu",
  "fcmovu",
  "fcom",
  "fcomi",
  "fcomip",
  "fcomp",
  "fcompp",
  "fcos",
  "fdecstp",
  "fdiv",
  "fdivp",
  "fdivr",
  "fdivrp",
  "femms",
  "ffree",
  "ffreep",
  "fiadd",
  "ficom",
  "ficomp",
  "fidiv",
  "fidivr",
  "fild",
  "fimul",
  "fincstp",
  "fist",
  "fistp",
  "fisttp",
  "fisub",
  "fisubr",
  "fld",
  "fld1",
  "fldcw",
  "fldenv",
  "fldl2e",
  "fldl2t",
  "fldlg2",
  "fldln2",
  "fldpi",
  "fldz",
  "fmadd132pd",
  "fmadd132ps",
  "fmadd132sd",
  "fmadd132ss",
  "fmadd213pd",
  "fmadd213ps",
  "fmadd213sd",
  "fmadd213ss",
  "fmadd231pd",
  "fmadd231ps",
  "fmadd231sd",
  "fmadd231ss",
  "fmaddsub132pd",
  "fmaddsub132ps",
  "fmaddsub213pd",
  "fmaddsub213ps",
  "fmaddsub231pd",
  "fmaddsub231ps",
  "fmsub132pd",
  "fmsub132ps",
  "fmsub132sd",
  "fmsub132ss",
  "fmsub213pd",
  "fmsub213ps",
  "fmsub213sd",
  "fmsub213ss",
  "fmsub231pd",
  "fmsub231ps",
  "fmsub231sd",
  "fmsub231ss",
  "fmsubadd132pd",
  "fmsubadd132ps",
  "fmsubadd213pd",
  "fmsubadd213ps",
  "fmsubadd231pd",
  "fmsubadd231ps",
  "fmul",
  "fmulp",
  "fnclex",
  "fndisi",
  "fneni",
  "fninit",
  "fnmadd132pd",
  "fnmadd132ps",
  "fnmadd132sd",
  "fnmadd132ss",
  "fnmadd213pd",
  "fnmadd213ps",
  "fnmadd213sd",
  "fnmadd213ss",
  "fnmadd231pd",
  "fnmadd231ps",
  "fnmadd231sd",
  "fnmadd231ss",
  "fnmsub132pd",
  "fnmsub132ps",
  "fnmsub132sd",
  "fnmsub132ss",
  "fnmsub213pd",
  "fnmsub213ps",
  "fnmsub213sd",
  "fnmsub213ss",
  "fnmsub231pd",
  "fnmsub231ps",
  "fnmsub231sd",
  "fnmsub231ss",
  "fnop",
  "fnsave",
  "fnsetpm",
  "fnstcw",
  "fnstenv",
  "fnstsw",
  "fpatan",
  "fprem",
  "fprem1",
  "fptan",
  "frichop",
  "frinear",
  "frint2",
  "frndint",
  "frstor",
  "frstpm",
  "fsbp0",
  "fsbp1",
  "fsbp2",
  "fscale",
  "fsin",
  "fsincos",
  "fsqrt",
  "fst",
  "fstdw",
  "fstp",
  "fstsg",
  "fsub",
  "fsubp",
  "fsubr",
  "fsubrp",
  "ftst",
  "ftstp",
  "fucom",
  "fucomi",
  "fucomip",
  "fucomp",
  "fucompp",
  "fwait",
  "fxam",
  "fxch",
  "fxrstor",
  "fxsave",
  "fxtract",
  "fyl2x",
  "fyl2xp1",
  "getsec",
  "haddpd",
  "haddps",
  "hint_nop",
  "hlt",
  "hsubpd",
  "hsubps",
  "ibts",
  "icebp",
  "idiv",
  "imul",
  "in",
  "inc",
  "ins",
  "insertf128",
  "inserti128",
  "insertps",
  "int",
  "into",
  "invd",
  "invept",
  "invlpg",
  "invlpga",
  "invpcid",
  "invvpid",
  "iret",
  "jb",
  "jbe",
  "jcxz",
  "jecxz",
  "jl",
  "jle",
  "jmp",
  "jmpe",
  "jnb",
  "jnbe",
  "jnl",
  "jnle",
  "jno",
  "jnp",
  "jns",
  "jnz",
  "jo",
  "jp",
  "jrcxz",
  "js",
  "jz",
  "lahf",
  "lar",
  "lddqu",
  "ldmxcsr",
  "lds",
  "lea",
  "leave",
  "les",
  "lfence",
  "lfs",
  "lgdt",
  "lgs",
  "lidt",
  "lldt",
  "lmsw",
  "loadall",
  "lods",
  "loop",
  "loopnz",
  "loopz",
  "lsl",
  "lss",
  "ltr",
  "lzcnt",
  "maskmovdqu",
  "maskmovpd",
  "maskmovps",
  "maskmovq",
  "maxpd",
  "maxps",
  "maxsd",
  "maxss",
  "mfence",
  "minpd",
  "minps",
  "minsd",
  "minss",
  "modqa",
  "monitor",
  "montmul",
  "mov",
  "movapd",
  "movaps",
  "movbe",
  "movd",
  "movddup",
  "movdq2q",
  "movdqa",
  "movdqu",
  "movhpd",
  "movhps",
  "movlpd",
  "movlps",
  "movmskpd",
  "movmskps",
  "movntdq",
  "movntdqa",
  "movnti",
  "movntpd",
  "movntps",
  "movntq",
  "movntsd",
  "movntss",
  "movq",
  "movq2dq",
  "movs",
  "movsd",
  "movshdup",
  "movsldup",
  "movss",
  "movsx",
  "movupd",
  "movups",
  "movzx",
  "mpsadbw",
  "mread",
  "mul",
  "mulpd",
  "mulps",
  "mulsd",
  "mulss",
  "mulx",
  "mwait",
  "neg",
  "nop",
  "not",
  "or",
  "orpd",
  "orps",
  "out",
  "outs",
  "pabsb",
  "pabsd",
  "pabsw",
  "packssdw",
  "packsswb",
  "packusdw",
  "packuswb",
  "paddb",
  "paddd",
  "paddq",
  "paddsb",
  "paddsw",
  "paddusb",
  "paddusw",
  "paddw",
  "palignr",
  "pand",
  "pandn",
  "pavgb",
  "pavgusb",
  "pavgw",
  "pblendd",
  "pblendvb",
  "pblendvp",
  "pbroadcastb",
  "pbroadcastd",
  "pbroadcastq",
  "pbroadcastw",
  "pclmulqdq",
  "pcmpeqb",
  "pcmpeqd",
  "pcmpeqq",
  "pcmpeqw",
  "pcmpestri",
  "pcmpestrm",
  "pcmpgtb",
  "pcmpgtd",
  "pcmpgtq",
  "pcmpgtw",
  "pcmpistri",
  "pcmpistrm",
  "pd2id",
  "pdep",
  "perm2f128",
  "perm2i128",
  "permd",
  "permilpd",
  "permilps",
  "permps",
  "permq",
  "pext",
  "pextrb",
  "pextrd",
  "pextrw",
  "pf2iw",
  "pfacc",
  "pfadd",
  "pfcmge",
  "pfcmpeq",
  "pfcmpgt",
  "pfmax",
  "pfmin",
  "pfmul",
  "pfnacc",
  "pfpnacc",
  "pfrcp",
  "pfrcpit1",
  "pfrcpit2",
  "pfrcpv",
  "pfrsqit1",
  "pfrsqrt",
  "pfrsqrtv",
  "pfsub",
  "pfsubr",
  "pgatherdd",
  "pgatherdpd",
  "pgatherdps",
  "pgatherdq",
  "pgatherqd",
  "pgatherqpd",
  "pgatherqps",
  "pgatherqq",
  "phaddd",
  "phaddsw",
  "phaddw",
  "phminposuw",
  "phsubd",
  "phsubsw",
  "phsubw",
  "pi2fd",
  "pi2fw",
  "pinsrb",
  "pinsrd",
  "pinsrw",
  "pmaddubsw",
  "pmaddwd",
  "pmaskmovd",
  "pmaskmovq",
  "pmaxsb",
  "pmaxsd",
  "pmaxsw",
  "pmaxub",
  "pmaxud",
  "pmaxuw",
  "pminsb",
  "pminsd",
  "pminsw",
  "pminub",
  "pminud",
  "pminuw",
  "pmovmskb",
  "pmovsxbd",
  "pmovsxbq",
  "pmovsxbw",
  "pmovsxdq",
  "pmovsxwd",
  "pmovsxwq",
  "pmovzxbd",
  "pmovzxbq",
  "pmovzxbw",
  "pmovzxdq",
  "pmovzxwd",
  "pmovzxwq",
  "pmuldq",
  "pmulhrsw",
  "pmulhrw",
  "pmulhuw",
  "pmulhw",
  "pmulld",
  "pmullw",
  "pmuludq",
  "pop",
  "popa",
  "popad",
  "popcnt",
  "popf",
  "por",
  "psadbw",
  "pshufb",
  "pshufd",
  "pshufhw",
  "pshuflw",
  "pshufw",
  "psignb",
  "psignd",
  "psignw",
  "pslld",
  "pslldq",
  "psllq",
  "psllvd",
  "psllvq",
  "psllw",
  "psrad",
  "psravd",
  "psraw",
  "psrld",
  "psrldq",
  "psrlq",
  "psrlvd",
  "psrlvq",
  "psrlw",
  "psubb",
  "psubd",
  "psubq",
  "psubsb",
  "psubsw",
  "psubusb",
  "psubusw",
  "psubw",
  "pswapd",
  "ptest",
  "punpckhbw",
  "punpckhdq",
  "punpckhqdq",
  "punpckhwd",
  "punpcklbw",
  "punpckldq",
  "punpcklqdq",
  "punpcklwd",
  "pupcklbw",
  "pupckldq",
  "push",
  "pusha",
  "pushad",
  "pushf",
  "pxor",
  "rcl",
  "rcpps",
  "rcpss",
  "rcr",
  "rdfsbase",
  "rdgsbase",
  "rdm",
  "rdmsr",
  "rdpmc",
  "rdshr",
  "rdtsc",
  "rdtscp",
  "ret",
  "retf",
  "retn",
  "rol",
  "ror",
  "rorx",
  "roundpd",
  "roundps",
  "roundsd",
  "roundss",
  "rsm",
  "rsqrtps",
  "rsqrtss",
  "sahf",
  "sal",
  "salc",
  "sar",
  "sarx",
  "sbb",
  "scas",
  "setb",
  "setbe",
  "setl",
  "setle",
  "setnb",
  "setnbe",
  "setnl",
  "setnle",
  "setno",
  "setnp",
  "setns",
  "setnz",
  "seto",
  "setp",
  "sets",
  "setz",
  "sfence",
  "sgdt",
  "shl",
  "shld",
  "shlx",
  "shr",
  "shrd",
  "shrx",
  "shufpd",
  "shufps",
  "sidt",
  "skinit",
  "sldt",
  "smint",
  "smsw",
  "splld",
  "spllq",
  "sqrtps",
  "sqrtpsd",
  "sqrtsd",
  "sqrtss",
  "stc",
  "std",
  "stgi",
  "sti",
  "stmxcsr",
  "stos",
  "str",
  "sub",
  "subpd",
  "subps",
  "subsd",
  "subss",
  "swapgs",
  "syscall",
  "sysenter",
  "sysexit",
  "sysret",
  "test",
  "testpd",
  "testps",
  "tzcnt",
  "ucomisd",
  "ucomiss",
  "ud",
  "ud1",
  "ud2",
  "umov",
  "unpckhpd",
  "unpckhps",
  "unpcklpd",
  "unpcklps",
  "verr",
  "verw",
  "vmcall",
  "vmclear",
  "vmlaunch",
  "vmload",
  "vmmcall",
  "vmptrld",
  "vmptrst",
  "vmresume",
  "vmrun",
  "vmsave",
  "vmwrite",
  "vmxoff",
  "vmxon",
  "wbindvd",
  "wrfsbase",
  "wrgsbase",
  "wrmsr",
  "wrshr",
  "xadd",
  "xbts",
  "xchg",
  "xcrypt",
  "xgetbv",
  "xlat",
  "xor",
  "xorpd",
  "xorps",
  "xrstor",
  "xsave",
  "xsaveopt",
  "xsetbv",
  "xsha",
  "xstore",
  "zeroupper"
};
const X86Architecture::TDisassembler X86Architecture::m_Table_1[0x100] =
{
  &X86Architecture::Table_1_00,
  &X86Architecture::Table_1_01,
  &X86Architecture::Table_1_02,
  &X86Architecture::Table_1_03,
  &X86Architecture::Table_1_04,
  &X86Architecture::Table_1_05,
  &X86Architecture::Table_1_06,
  &X86Architecture::Table_1_07,
  &X86Architecture::Table_1_08,
  &X86Architecture::Table_1_09,
  &X86Architecture::Table_1_0a,
  &X86Architecture::Table_1_0b,
  &X86Architecture::Table_1_0c,
  &X86Architecture::Table_1_0d,
  &X86Architecture::Table_1_0e,
  &X86Architecture::Table_1_0f,
  &X86Architecture::Table_1_10,
  &X86Architecture::Table_1_11,
  &X86Architecture::Table_1_12,
  &X86Architecture::Table_1_13,
  &X86Architecture::Table_1_14,
  &X86Architecture::Table_1_15,
  &X86Architecture::Table_1_16,
  &X86Architecture::Table_1_17,
  &X86Architecture::Table_1_18,
  &X86Architecture::Table_1_19,
  &X86Architecture::Table_1_1a,
  &X86Architecture::Table_1_1b,
  &X86Architecture::Table_1_1c,
  &X86Architecture::Table_1_1d,
  &X86Architecture::Table_1_1e,
  &X86Architecture::Table_1_1f,
  &X86Architecture::Table_1_20,
  &X86Architecture::Table_1_21,
  &X86Architecture::Table_1_22,
  &X86Architecture::Table_1_23,
  &X86Architecture::Table_1_24,
  &X86Architecture::Table_1_25,
  &X86Architecture::Table_1_26,
  &X86Architecture::Table_1_27,
  &X86Architecture::Table_1_28,
  &X86Architecture::Table_1_29,
  &X86Architecture::Table_1_2a,
  &X86Architecture::Table_1_2b,
  &X86Architecture::Table_1_2c,
  &X86Architecture::Table_1_2d,
  &X86Architecture::Table_1_2e,
  &X86Architecture::Table_1_2f,
  &X86Architecture::Table_1_30,
  &X86Architecture::Table_1_31,
  &X86Architecture::Table_1_32,
  &X86Architecture::Table_1_33,
  &X86Architecture::Table_1_34,
  &X86Architecture::Table_1_35,
  &X86Architecture::Table_1_36,
  &X86Architecture::Table_1_37,
  &X86Architecture::Table_1_38,
  &X86Architecture::Table_1_39,
  &X86Architecture::Table_1_3a,
  &X86Architecture::Table_1_3b,
  &X86Architecture::Table_1_3c,
  &X86Architecture::Table_1_3d,
  &X86Architecture::Table_1_3e,
  &X86Architecture::Table_1_3f,
  &X86Architecture::Table_1_40,
  &X86Architecture::Table_1_41,
  &X86Architecture::Table_1_42,
  &X86Architecture::Table_1_43,
  &X86Architecture::Table_1_44,
  &X86Architecture::Table_1_45,
  &X86Architecture::Table_1_46,
  &X86Architecture::Table_1_47,
  &X86Architecture::Table_1_48,
  &X86Architecture::Table_1_49,
  &X86Architecture::Table_1_4a,
  &X86Architecture::Table_1_4b,
  &X86Architecture::Table_1_4c,
  &X86Architecture::Table_1_4d,
  &X86Architecture::Table_1_4e,
  &X86Architecture::Table_1_4f,
  &X86Architecture::Table_1_50,
  &X86Architecture::Table_1_51,
  &X86Architecture::Table_1_52,
  &X86Architecture::Table_1_53,
  &X86Architecture::Table_1_54,
  &X86Architecture::Table_1_55,
  &X86Architecture::Table_1_56,
  &X86Architecture::Table_1_57,
  &X86Architecture::Table_1_58,
  &X86Architecture::Table_1_59,
  &X86Architecture::Table_1_5a,
  &X86Architecture::Table_1_5b,
  &X86Architecture::Table_1_5c,
  &X86Architecture::Table_1_5d,
  &X86Architecture::Table_1_5e,
  &X86Architecture::Table_1_5f,
  &X86Architecture::Table_1_60,
  &X86Architecture::Table_1_61,
  &X86Architecture::Table_1_62,
  &X86Architecture::Table_1_63,
  &X86Architecture::Table_1_64,
  &X86Architecture::Table_1_65,
  &X86Architecture::Table_1_66,
  &X86Architecture::Table_1_67,
  &X86Architecture::Table_1_68,
  &X86Architecture::Table_1_69,
  &X86Architecture::Table_1_6a,
  &X86Architecture::Table_1_6b,
  &X86Architecture::Table_1_6c,
  &X86Architecture::Table_1_6d,
  &X86Architecture::Table_1_6e,
  &X86Architecture::Table_1_6f,
  &X86Architecture::Table_1_70,
  &X86Architecture::Table_1_71,
  &X86Architecture::Table_1_72,
  &X86Architecture::Table_1_73,
  &X86Architecture::Table_1_74,
  &X86Architecture::Table_1_75,
  &X86Architecture::Table_1_76,
  &X86Architecture::Table_1_77,
  &X86Architecture::Table_1_78,
  &X86Architecture::Table_1_79,
  &X86Architecture::Table_1_7a,
  &X86Architecture::Table_1_7b,
  &X86Architecture::Table_1_7c,
  &X86Architecture::Table_1_7d,
  &X86Architecture::Table_1_7e,
  &X86Architecture::Table_1_7f,
  &X86Architecture::Table_1_80,
  &X86Architecture::Table_1_81,
  &X86Architecture::Table_1_82,
  &X86Architecture::Table_1_83,
  &X86Architecture::Table_1_84,
  &X86Architecture::Table_1_85,
  &X86Architecture::Table_1_86,
  &X86Architecture::Table_1_87,
  &X86Architecture::Table_1_88,
  &X86Architecture::Table_1_89,
  &X86Architecture::Table_1_8a,
  &X86Architecture::Table_1_8b,
  &X86Architecture::Table_1_8c,
  &X86Architecture::Table_1_8d,
  &X86Architecture::Table_1_8e,
  &X86Architecture::Table_1_8f,
  &X86Architecture::Table_1_90,
  &X86Architecture::Table_1_91,
  &X86Architecture::Table_1_92,
  &X86Architecture::Table_1_93,
  &X86Architecture::Table_1_94,
  &X86Architecture::Table_1_95,
  &X86Architecture::Table_1_96,
  &X86Architecture::Table_1_97,
  &X86Architecture::Table_1_98,
  &X86Architecture::Table_1_99,
  &X86Architecture::Table_1_9a,
  &X86Architecture::Table_1_9b,
  &X86Architecture::Table_1_9c,
  &X86Architecture::Table_1_9d,
  &X86Architecture::Table_1_9e,
  &X86Architecture::Table_1_9f,
  &X86Architecture::Table_1_a0,
  &X86Architecture::Table_1_a1,
  &X86Architecture::Table_1_a2,
  &X86Architecture::Table_1_a3,
  &X86Architecture::Table_1_a4,
  &X86Architecture::Table_1_a5,
  &X86Architecture::Table_1_a6,
  &X86Architecture::Table_1_a7,
  &X86Architecture::Table_1_a8,
  &X86Architecture::Table_1_a9,
  &X86Architecture::Table_1_aa,
  &X86Architecture::Table_1_ab,
  &X86Architecture::Table_1_ac,
  &X86Architecture::Table_1_ad,
  &X86Architecture::Table_1_ae,
  &X86Architecture::Table_1_af,
  &X86Architecture::Table_1_b0,
  &X86Architecture::Table_1_b1,
  &X86Architecture::Table_1_b2,
  &X86Architecture::Table_1_b3,
  &X86Architecture::Table_1_b4,
  &X86Architecture::Table_1_b5,
  &X86Architecture::Table_1_b6,
  &X86Architecture::Table_1_b7,
  &X86Architecture::Table_1_b8,
  &X86Architecture::Table_1_b9,
  &X86Architecture::Table_1_ba,
  &X86Architecture::Table_1_bb,
  &X86Architecture::Table_1_bc,
  &X86Architecture::Table_1_bd,
  &X86Architecture::Table_1_be,
  &X86Architecture::Table_1_bf,
  &X86Architecture::Table_1_c0,
  &X86Architecture::Table_1_c1,
  &X86Architecture::Table_1_c2,
  &X86Architecture::Table_1_c3,
  &X86Architecture::Table_1_c4,
  &X86Architecture::Table_1_c5,
  &X86Architecture::Table_1_c6,
  &X86Architecture::Table_1_c7,
  &X86Architecture::Table_1_c8,
  &X86Architecture::Table_1_c9,
  &X86Architecture::Table_1_ca,
  &X86Architecture::Table_1_cb,
  &X86Architecture::Table_1_cc,
  &X86Architecture::Table_1_cd,
  &X86Architecture::Table_1_ce,
  &X86Architecture::Table_1_cf,
  &X86Architecture::Table_1_d0,
  &X86Architecture::Table_1_d1,
  &X86Architecture::Table_1_d2,
  &X86Architecture::Table_1_d3,
  &X86Architecture::Table_1_d4,
  &X86Architecture::Table_1_d5,
  &X86Architecture::Table_1_d6,
  &X86Architecture::Table_1_d7,
  &X86Architecture::Table_1_d8,
  &X86Architecture::Table_1_d9,
  &X86Architecture::Table_1_da,
  &X86Architecture::Table_1_db,
  &X86Architecture::Table_1_dc,
  &X86Architecture::Table_1_dd,
  &X86Architecture::Table_1_de,
  &X86Architecture::Table_1_df,
  &X86Architecture::Table_1_e0,
  &X86Architecture::Table_1_e1,
  &X86Architecture::Table_1_e2,
  &X86Architecture::Table_1_e3,
  &X86Architecture::Table_1_e4,
  &X86Architecture::Table_1_e5,
  &X86Architecture::Table_1_e6,
  &X86Architecture::Table_1_e7,
  &X86Architecture::Table_1_e8,
  &X86Architecture::Table_1_e9,
  &X86Architecture::Table_1_ea,
  &X86Architecture::Table_1_eb,
  &X86Architecture::Table_1_ec,
  &X86Architecture::Table_1_ed,
  &X86Architecture::Table_1_ee,
  &X86Architecture::Table_1_ef,
  &X86Architecture::Table_1_f0,
  &X86Architecture::Table_1_f1,
  &X86Architecture::Table_1_f2,
  &X86Architecture::Table_1_f3,
  &X86Architecture::Table_1_f4,
  &X86Architecture::Table_1_f5,
  &X86Architecture::Table_1_f6,
  &X86Architecture::Table_1_f7,
  &X86Architecture::Table_1_f8,
  &X86Architecture::Table_1_f9,
  &X86Architecture::Table_1_fa,
  &X86Architecture::Table_1_fb,
  &X86Architecture::Table_1_fc,
  &X86Architecture::Table_1_fd,
  &X86Architecture::Table_1_fe,
  &X86Architecture::Table_1_ff
};

const X86Architecture::TDisassembler X86Architecture::m_Table_2[0x100] =
{
  &X86Architecture::Table_2_00,
  &X86Architecture::Table_2_01,
  &X86Architecture::Table_2_02,
  &X86Architecture::Table_2_03,
  &X86Architecture::Table_2_04,
  &X86Architecture::Table_2_05,
  &X86Architecture::Table_2_06,
  &X86Architecture::Table_2_07,
  &X86Architecture::Table_2_08,
  &X86Architecture::Table_2_09,
  &X86Architecture::Table_2_0a,
  &X86Architecture::Table_2_0b,
  &X86Architecture::Table_2_0c,
  &X86Architecture::Table_2_0d,
  &X86Architecture::Table_2_0e,
  &X86Architecture::Table_2_0f,
  &X86Architecture::Table_2_10,
  &X86Architecture::Table_2_11,
  &X86Architecture::Table_2_12,
  &X86Architecture::Table_2_13,
  &X86Architecture::Table_2_14,
  &X86Architecture::Table_2_15,
  &X86Architecture::Table_2_16,
  &X86Architecture::Table_2_17,
  &X86Architecture::Table_2_18,
  &X86Architecture::Table_2_19,
  &X86Architecture::Table_2_1a,
  &X86Architecture::Table_2_1b,
  &X86Architecture::Table_2_1c,
  &X86Architecture::Table_2_1d,
  &X86Architecture::Table_2_1e,
  &X86Architecture::Table_2_1f,
  &X86Architecture::Table_2_20,
  &X86Architecture::Table_2_21,
  &X86Architecture::Table_2_22,
  &X86Architecture::Table_2_23,
  &X86Architecture::Table_2_24,
  &X86Architecture::Table_2_25,
  &X86Architecture::Table_2_26,
  &X86Architecture::Table_2_27,
  &X86Architecture::Table_2_28,
  &X86Architecture::Table_2_29,
  &X86Architecture::Table_2_2a,
  &X86Architecture::Table_2_2b,
  &X86Architecture::Table_2_2c,
  &X86Architecture::Table_2_2d,
  &X86Architecture::Table_2_2e,
  &X86Architecture::Table_2_2f,
  &X86Architecture::Table_2_30,
  &X86Architecture::Table_2_31,
  &X86Architecture::Table_2_32,
  &X86Architecture::Table_2_33,
  &X86Architecture::Table_2_34,
  &X86Architecture::Table_2_35,
  &X86Architecture::Table_2_36,
  &X86Architecture::Table_2_37,
  &X86Architecture::Table_2_38,
  &X86Architecture::Table_2_39,
  &X86Architecture::Table_2_3a,
  &X86Architecture::Table_2_3b,
  &X86Architecture::Table_2_3c,
  &X86Architecture::Table_2_3d,
  &X86Architecture::Table_2_3e,
  &X86Architecture::Table_2_3f,
  &X86Architecture::Table_2_40,
  &X86Architecture::Table_2_41,
  &X86Architecture::Table_2_42,
  &X86Architecture::Table_2_43,
  &X86Architecture::Table_2_44,
  &X86Architecture::Table_2_45,
  &X86Architecture::Table_2_46,
  &X86Architecture::Table_2_47,
  &X86Architecture::Table_2_48,
  &X86Architecture::Table_2_49,
  &X86Architecture::Table_2_4a,
  &X86Architecture::Table_2_4b,
  &X86Architecture::Table_2_4c,
  &X86Architecture::Table_2_4d,
  &X86Architecture::Table_2_4e,
  &X86Architecture::Table_2_4f,
  &X86Architecture::Table_2_50,
  &X86Architecture::Table_2_51,
  &X86Architecture::Table_2_52,
  &X86Architecture::Table_2_53,
  &X86Architecture::Table_2_54,
  &X86Architecture::Table_2_55,
  &X86Architecture::Table_2_56,
  &X86Architecture::Table_2_57,
  &X86Architecture::Table_2_58,
  &X86Architecture::Table_2_59,
  &X86Architecture::Table_2_5a,
  &X86Architecture::Table_2_5b,
  &X86Architecture::Table_2_5c,
  &X86Architecture::Table_2_5d,
  &X86Architecture::Table_2_5e,
  &X86Architecture::Table_2_5f,
  &X86Architecture::Table_2_60,
  &X86Architecture::Table_2_61,
  &X86Architecture::Table_2_62,
  &X86Architecture::Table_2_63,
  &X86Architecture::Table_2_64,
  &X86Architecture::Table_2_65,
  &X86Architecture::Table_2_66,
  &X86Architecture::Table_2_67,
  &X86Architecture::Table_2_68,
  &X86Architecture::Table_2_69,
  &X86Architecture::Table_2_6a,
  &X86Architecture::Table_2_6b,
  &X86Architecture::Table_2_6c,
  &X86Architecture::Table_2_6d,
  &X86Architecture::Table_2_6e,
  &X86Architecture::Table_2_6f,
  &X86Architecture::Table_2_70,
  &X86Architecture::Table_2_71,
  &X86Architecture::Table_2_72,
  &X86Architecture::Table_2_73,
  &X86Architecture::Table_2_74,
  &X86Architecture::Table_2_75,
  &X86Architecture::Table_2_76,
  &X86Architecture::Table_2_77,
  &X86Architecture::Table_2_78,
  &X86Architecture::Table_2_79,
  &X86Architecture::Table_2_7a,
  &X86Architecture::Table_2_7b,
  &X86Architecture::Table_2_7c,
  &X86Architecture::Table_2_7d,
  &X86Architecture::Table_2_7e,
  &X86Architecture::Table_2_7f,
  &X86Architecture::Table_2_80,
  &X86Architecture::Table_2_81,
  &X86Architecture::Table_2_82,
  &X86Architecture::Table_2_83,
  &X86Architecture::Table_2_84,
  &X86Architecture::Table_2_85,
  &X86Architecture::Table_2_86,
  &X86Architecture::Table_2_87,
  &X86Architecture::Table_2_88,
  &X86Architecture::Table_2_89,
  &X86Architecture::Table_2_8a,
  &X86Architecture::Table_2_8b,
  &X86Architecture::Table_2_8c,
  &X86Architecture::Table_2_8d,
  &X86Architecture::Table_2_8e,
  &X86Architecture::Table_2_8f,
  &X86Architecture::Table_2_90,
  &X86Architecture::Table_2_91,
  &X86Architecture::Table_2_92,
  &X86Architecture::Table_2_93,
  &X86Architecture::Table_2_94,
  &X86Architecture::Table_2_95,
  &X86Architecture::Table_2_96,
  &X86Architecture::Table_2_97,
  &X86Architecture::Table_2_98,
  &X86Architecture::Table_2_99,
  &X86Architecture::Table_2_9a,
  &X86Architecture::Table_2_9b,
  &X86Architecture::Table_2_9c,
  &X86Architecture::Table_2_9d,
  &X86Architecture::Table_2_9e,
  &X86Architecture::Table_2_9f,
  &X86Architecture::Table_2_a0,
  &X86Architecture::Table_2_a1,
  &X86Architecture::Table_2_a2,
  &X86Architecture::Table_2_a3,
  &X86Architecture::Table_2_a4,
  &X86Architecture::Table_2_a5,
  &X86Architecture::Table_2_a6,
  &X86Architecture::Table_2_a7,
  &X86Architecture::Table_2_a8,
  &X86Architecture::Table_2_a9,
  &X86Architecture::Table_2_aa,
  &X86Architecture::Table_2_ab,
  &X86Architecture::Table_2_ac,
  &X86Architecture::Table_2_ad,
  &X86Architecture::Table_2_ae,
  &X86Architecture::Table_2_af,
  &X86Architecture::Table_2_b0,
  &X86Architecture::Table_2_b1,
  &X86Architecture::Table_2_b2,
  &X86Architecture::Table_2_b3,
  &X86Architecture::Table_2_b4,
  &X86Architecture::Table_2_b5,
  &X86Architecture::Table_2_b6,
  &X86Architecture::Table_2_b7,
  &X86Architecture::Table_2_b8,
  &X86Architecture::Table_2_b9,
  &X86Architecture::Table_2_ba,
  &X86Architecture::Table_2_bb,
  &X86Architecture::Table_2_bc,
  &X86Architecture::Table_2_bd,
  &X86Architecture::Table_2_be,
  &X86Architecture::Table_2_bf,
  &X86Architecture::Table_2_c0,
  &X86Architecture::Table_2_c1,
  &X86Architecture::Table_2_c2,
  &X86Architecture::Table_2_c3,
  &X86Architecture::Table_2_c4,
  &X86Architecture::Table_2_c5,
  &X86Architecture::Table_2_c6,
  &X86Architecture::Table_2_c7,
  &X86Architecture::Table_2_c8,
  &X86Architecture::Table_2_c9,
  &X86Architecture::Table_2_ca,
  &X86Architecture::Table_2_cb,
  &X86Architecture::Table_2_cc,
  &X86Architecture::Table_2_cd,
  &X86Architecture::Table_2_ce,
  &X86Architecture::Table_2_cf,
  &X86Architecture::Table_2_d0,
  &X86Architecture::Table_2_d1,
  &X86Architecture::Table_2_d2,
  &X86Architecture::Table_2_d3,
  &X86Architecture::Table_2_d4,
  &X86Architecture::Table_2_d5,
  &X86Architecture::Table_2_d6,
  &X86Architecture::Table_2_d7,
  &X86Architecture::Table_2_d8,
  &X86Architecture::Table_2_d9,
  &X86Architecture::Table_2_da,
  &X86Architecture::Table_2_db,
  &X86Architecture::Table_2_dc,
  &X86Architecture::Table_2_dd,
  &X86Architecture::Table_2_de,
  &X86Architecture::Table_2_df,
  &X86Architecture::Table_2_e0,
  &X86Architecture::Table_2_e1,
  &X86Architecture::Table_2_e2,
  &X86Architecture::Table_2_e3,
  &X86Architecture::Table_2_e4,
  &X86Architecture::Table_2_e5,
  &X86Architecture::Table_2_e6,
  &X86Architecture::Table_2_e7,
  &X86Architecture::Table_2_e8,
  &X86Architecture::Table_2_e9,
  &X86Architecture::Table_2_ea,
  &X86Architecture::Table_2_eb,
  &X86Architecture::Table_2_ec,
  &X86Architecture::Table_2_ed,
  &X86Architecture::Table_2_ee,
  &X86Architecture::Table_2_ef,
  &X86Architecture::Table_2_f0,
  &X86Architecture::Table_2_f1,
  &X86Architecture::Table_2_f2,
  &X86Architecture::Table_2_f3,
  &X86Architecture::Table_2_f4,
  &X86Architecture::Table_2_f5,
  &X86Architecture::Table_2_f6,
  &X86Architecture::Table_2_f7,
  &X86Architecture::Table_2_f8,
  &X86Architecture::Table_2_f9,
  &X86Architecture::Table_2_fa,
  &X86Architecture::Table_2_fb,
  &X86Architecture::Table_2_fc,
  &X86Architecture::Table_2_fd,
  &X86Architecture::Table_2_fe,
  &X86Architecture::Table_2_ff
};

const X86Architecture::TDisassembler X86Architecture::m_Table_3dnow1[0x100] =
{
  &X86Architecture::Table_3dnow1_00,
  &X86Architecture::Table_3dnow1_01,
  &X86Architecture::Table_3dnow1_02,
  &X86Architecture::Table_3dnow1_03,
  &X86Architecture::Table_3dnow1_04,
  &X86Architecture::Table_3dnow1_05,
  &X86Architecture::Table_3dnow1_06,
  &X86Architecture::Table_3dnow1_07,
  &X86Architecture::Table_3dnow1_08,
  &X86Architecture::Table_3dnow1_09,
  &X86Architecture::Table_3dnow1_0a,
  &X86Architecture::Table_3dnow1_0b,
  &X86Architecture::Table_3dnow1_0c,
  &X86Architecture::Table_3dnow1_0d,
  &X86Architecture::Table_3dnow1_0e,
  &X86Architecture::Table_3dnow1_0f,
  &X86Architecture::Table_3dnow1_10,
  &X86Architecture::Table_3dnow1_11,
  &X86Architecture::Table_3dnow1_12,
  &X86Architecture::Table_3dnow1_13,
  &X86Architecture::Table_3dnow1_14,
  &X86Architecture::Table_3dnow1_15,
  &X86Architecture::Table_3dnow1_16,
  &X86Architecture::Table_3dnow1_17,
  &X86Architecture::Table_3dnow1_18,
  &X86Architecture::Table_3dnow1_19,
  &X86Architecture::Table_3dnow1_1a,
  &X86Architecture::Table_3dnow1_1b,
  &X86Architecture::Table_3dnow1_1c,
  &X86Architecture::Table_3dnow1_1d,
  &X86Architecture::Table_3dnow1_1e,
  &X86Architecture::Table_3dnow1_1f,
  &X86Architecture::Table_3dnow1_20,
  &X86Architecture::Table_3dnow1_21,
  &X86Architecture::Table_3dnow1_22,
  &X86Architecture::Table_3dnow1_23,
  &X86Architecture::Table_3dnow1_24,
  &X86Architecture::Table_3dnow1_25,
  &X86Architecture::Table_3dnow1_26,
  &X86Architecture::Table_3dnow1_27,
  &X86Architecture::Table_3dnow1_28,
  &X86Architecture::Table_3dnow1_29,
  &X86Architecture::Table_3dnow1_2a,
  &X86Architecture::Table_3dnow1_2b,
  &X86Architecture::Table_3dnow1_2c,
  &X86Architecture::Table_3dnow1_2d,
  &X86Architecture::Table_3dnow1_2e,
  &X86Architecture::Table_3dnow1_2f,
  &X86Architecture::Table_3dnow1_30,
  &X86Architecture::Table_3dnow1_31,
  &X86Architecture::Table_3dnow1_32,
  &X86Architecture::Table_3dnow1_33,
  &X86Architecture::Table_3dnow1_34,
  &X86Architecture::Table_3dnow1_35,
  &X86Architecture::Table_3dnow1_36,
  &X86Architecture::Table_3dnow1_37,
  &X86Architecture::Table_3dnow1_38,
  &X86Architecture::Table_3dnow1_39,
  &X86Architecture::Table_3dnow1_3a,
  &X86Architecture::Table_3dnow1_3b,
  &X86Architecture::Table_3dnow1_3c,
  &X86Architecture::Table_3dnow1_3d,
  &X86Architecture::Table_3dnow1_3e,
  &X86Architecture::Table_3dnow1_3f,
  &X86Architecture::Table_3dnow1_40,
  &X86Architecture::Table_3dnow1_41,
  &X86Architecture::Table_3dnow1_42,
  &X86Architecture::Table_3dnow1_43,
  &X86Architecture::Table_3dnow1_44,
  &X86Architecture::Table_3dnow1_45,
  &X86Architecture::Table_3dnow1_46,
  &X86Architecture::Table_3dnow1_47,
  &X86Architecture::Table_3dnow1_48,
  &X86Architecture::Table_3dnow1_49,
  &X86Architecture::Table_3dnow1_4a,
  &X86Architecture::Table_3dnow1_4b,
  &X86Architecture::Table_3dnow1_4c,
  &X86Architecture::Table_3dnow1_4d,
  &X86Architecture::Table_3dnow1_4e,
  &X86Architecture::Table_3dnow1_4f,
  &X86Architecture::Table_3dnow1_50,
  &X86Architecture::Table_3dnow1_51,
  &X86Architecture::Table_3dnow1_52,
  &X86Architecture::Table_3dnow1_53,
  &X86Architecture::Table_3dnow1_54,
  &X86Architecture::Table_3dnow1_55,
  &X86Architecture::Table_3dnow1_56,
  &X86Architecture::Table_3dnow1_57,
  &X86Architecture::Table_3dnow1_58,
  &X86Architecture::Table_3dnow1_59,
  &X86Architecture::Table_3dnow1_5a,
  &X86Architecture::Table_3dnow1_5b,
  &X86Architecture::Table_3dnow1_5c,
  &X86Architecture::Table_3dnow1_5d,
  &X86Architecture::Table_3dnow1_5e,
  &X86Architecture::Table_3dnow1_5f,
  &X86Architecture::Table_3dnow1_60,
  &X86Architecture::Table_3dnow1_61,
  &X86Architecture::Table_3dnow1_62,
  &X86Architecture::Table_3dnow1_63,
  &X86Architecture::Table_3dnow1_64,
  &X86Architecture::Table_3dnow1_65,
  &X86Architecture::Table_3dnow1_66,
  &X86Architecture::Table_3dnow1_67,
  &X86Architecture::Table_3dnow1_68,
  &X86Architecture::Table_3dnow1_69,
  &X86Architecture::Table_3dnow1_6a,
  &X86Architecture::Table_3dnow1_6b,
  &X86Architecture::Table_3dnow1_6c,
  &X86Architecture::Table_3dnow1_6d,
  &X86Architecture::Table_3dnow1_6e,
  &X86Architecture::Table_3dnow1_6f,
  &X86Architecture::Table_3dnow1_70,
  &X86Architecture::Table_3dnow1_71,
  &X86Architecture::Table_3dnow1_72,
  &X86Architecture::Table_3dnow1_73,
  &X86Architecture::Table_3dnow1_74,
  &X86Architecture::Table_3dnow1_75,
  &X86Architecture::Table_3dnow1_76,
  &X86Architecture::Table_3dnow1_77,
  &X86Architecture::Table_3dnow1_78,
  &X86Architecture::Table_3dnow1_79,
  &X86Architecture::Table_3dnow1_7a,
  &X86Architecture::Table_3dnow1_7b,
  &X86Architecture::Table_3dnow1_7c,
  &X86Architecture::Table_3dnow1_7d,
  &X86Architecture::Table_3dnow1_7e,
  &X86Architecture::Table_3dnow1_7f,
  &X86Architecture::Table_3dnow1_80,
  &X86Architecture::Table_3dnow1_81,
  &X86Architecture::Table_3dnow1_82,
  &X86Architecture::Table_3dnow1_83,
  &X86Architecture::Table_3dnow1_84,
  &X86Architecture::Table_3dnow1_85,
  &X86Architecture::Table_3dnow1_86,
  &X86Architecture::Table_3dnow1_87,
  &X86Architecture::Table_3dnow1_88,
  &X86Architecture::Table_3dnow1_89,
  &X86Architecture::Table_3dnow1_8a,
  &X86Architecture::Table_3dnow1_8b,
  &X86Architecture::Table_3dnow1_8c,
  &X86Architecture::Table_3dnow1_8d,
  &X86Architecture::Table_3dnow1_8e,
  &X86Architecture::Table_3dnow1_8f,
  &X86Architecture::Table_3dnow1_90,
  &X86Architecture::Table_3dnow1_91,
  &X86Architecture::Table_3dnow1_92,
  &X86Architecture::Table_3dnow1_93,
  &X86Architecture::Table_3dnow1_94,
  &X86Architecture::Table_3dnow1_95,
  &X86Architecture::Table_3dnow1_96,
  &X86Architecture::Table_3dnow1_97,
  &X86Architecture::Table_3dnow1_98,
  &X86Architecture::Table_3dnow1_99,
  &X86Architecture::Table_3dnow1_9a,
  &X86Architecture::Table_3dnow1_9b,
  &X86Architecture::Table_3dnow1_9c,
  &X86Architecture::Table_3dnow1_9d,
  &X86Architecture::Table_3dnow1_9e,
  &X86Architecture::Table_3dnow1_9f,
  &X86Architecture::Table_3dnow1_a0,
  &X86Architecture::Table_3dnow1_a1,
  &X86Architecture::Table_3dnow1_a2,
  &X86Architecture::Table_3dnow1_a3,
  &X86Architecture::Table_3dnow1_a4,
  &X86Architecture::Table_3dnow1_a5,
  &X86Architecture::Table_3dnow1_a6,
  &X86Architecture::Table_3dnow1_a7,
  &X86Architecture::Table_3dnow1_a8,
  &X86Architecture::Table_3dnow1_a9,
  &X86Architecture::Table_3dnow1_aa,
  &X86Architecture::Table_3dnow1_ab,
  &X86Architecture::Table_3dnow1_ac,
  &X86Architecture::Table_3dnow1_ad,
  &X86Architecture::Table_3dnow1_ae,
  &X86Architecture::Table_3dnow1_af,
  &X86Architecture::Table_3dnow1_b0,
  &X86Architecture::Table_3dnow1_b1,
  &X86Architecture::Table_3dnow1_b2,
  &X86Architecture::Table_3dnow1_b3,
  &X86Architecture::Table_3dnow1_b4,
  &X86Architecture::Table_3dnow1_b5,
  &X86Architecture::Table_3dnow1_b6,
  &X86Architecture::Table_3dnow1_b7,
  &X86Architecture::Table_3dnow1_b8,
  &X86Architecture::Table_3dnow1_b9,
  &X86Architecture::Table_3dnow1_ba,
  &X86Architecture::Table_3dnow1_bb,
  &X86Architecture::Table_3dnow1_bc,
  &X86Architecture::Table_3dnow1_bd,
  &X86Architecture::Table_3dnow1_be,
  &X86Architecture::Table_3dnow1_bf,
  &X86Architecture::Table_3dnow1_c0,
  &X86Architecture::Table_3dnow1_c1,
  &X86Architecture::Table_3dnow1_c2,
  &X86Architecture::Table_3dnow1_c3,
  &X86Architecture::Table_3dnow1_c4,
  &X86Architecture::Table_3dnow1_c5,
  &X86Architecture::Table_3dnow1_c6,
  &X86Architecture::Table_3dnow1_c7,
  &X86Architecture::Table_3dnow1_c8,
  &X86Architecture::Table_3dnow1_c9,
  &X86Architecture::Table_3dnow1_ca,
  &X86Architecture::Table_3dnow1_cb,
  &X86Architecture::Table_3dnow1_cc,
  &X86Architecture::Table_3dnow1_cd,
  &X86Architecture::Table_3dnow1_ce,
  &X86Architecture::Table_3dnow1_cf,
  &X86Architecture::Table_3dnow1_d0,
  &X86Architecture::Table_3dnow1_d1,
  &X86Architecture::Table_3dnow1_d2,
  &X86Architecture::Table_3dnow1_d3,
  &X86Architecture::Table_3dnow1_d4,
  &X86Architecture::Table_3dnow1_d5,
  &X86Architecture::Table_3dnow1_d6,
  &X86Architecture::Table_3dnow1_d7,
  &X86Architecture::Table_3dnow1_d8,
  &X86Architecture::Table_3dnow1_d9,
  &X86Architecture::Table_3dnow1_da,
  &X86Architecture::Table_3dnow1_db,
  &X86Architecture::Table_3dnow1_dc,
  &X86Architecture::Table_3dnow1_dd,
  &X86Architecture::Table_3dnow1_de,
  &X86Architecture::Table_3dnow1_df,
  &X86Architecture::Table_3dnow1_e0,
  &X86Architecture::Table_3dnow1_e1,
  &X86Architecture::Table_3dnow1_e2,
  &X86Architecture::Table_3dnow1_e3,
  &X86Architecture::Table_3dnow1_e4,
  &X86Architecture::Table_3dnow1_e5,
  &X86Architecture::Table_3dnow1_e6,
  &X86Architecture::Table_3dnow1_e7,
  &X86Architecture::Table_3dnow1_e8,
  &X86Architecture::Table_3dnow1_e9,
  &X86Architecture::Table_3dnow1_ea,
  &X86Architecture::Table_3dnow1_eb,
  &X86Architecture::Table_3dnow1_ec,
  &X86Architecture::Table_3dnow1_ed,
  &X86Architecture::Table_3dnow1_ee,
  &X86Architecture::Table_3dnow1_ef,
  &X86Architecture::Table_3dnow1_f0,
  &X86Architecture::Table_3dnow1_f1,
  &X86Architecture::Table_3dnow1_f2,
  &X86Architecture::Table_3dnow1_f3,
  &X86Architecture::Table_3dnow1_f4,
  &X86Architecture::Table_3dnow1_f5,
  &X86Architecture::Table_3dnow1_f6,
  &X86Architecture::Table_3dnow1_f7,
  &X86Architecture::Table_3dnow1_f8,
  &X86Architecture::Table_3dnow1_f9,
  &X86Architecture::Table_3dnow1_fa,
  &X86Architecture::Table_3dnow1_fb,
  &X86Architecture::Table_3dnow1_fc,
  &X86Architecture::Table_3dnow1_fd,
  &X86Architecture::Table_3dnow1_fe,
  &X86Architecture::Table_3dnow1_ff
};

const X86Architecture::TDisassembler X86Architecture::m_Table_3_38[0x100] =
{
  &X86Architecture::Table_3_38_00,
  &X86Architecture::Table_3_38_01,
  &X86Architecture::Table_3_38_02,
  &X86Architecture::Table_3_38_03,
  &X86Architecture::Table_3_38_04,
  &X86Architecture::Table_3_38_05,
  &X86Architecture::Table_3_38_06,
  &X86Architecture::Table_3_38_07,
  &X86Architecture::Table_3_38_08,
  &X86Architecture::Table_3_38_09,
  &X86Architecture::Table_3_38_0a,
  &X86Architecture::Table_3_38_0b,
  &X86Architecture::Table_3_38_0c,
  &X86Architecture::Table_3_38_0d,
  &X86Architecture::Table_3_38_0e,
  &X86Architecture::Table_3_38_0f,
  &X86Architecture::Table_3_38_10,
  &X86Architecture::Table_3_38_11,
  &X86Architecture::Table_3_38_12,
  &X86Architecture::Table_3_38_13,
  &X86Architecture::Table_3_38_14,
  &X86Architecture::Table_3_38_15,
  &X86Architecture::Table_3_38_16,
  &X86Architecture::Table_3_38_17,
  &X86Architecture::Table_3_38_18,
  &X86Architecture::Table_3_38_19,
  &X86Architecture::Table_3_38_1a,
  &X86Architecture::Table_3_38_1b,
  &X86Architecture::Table_3_38_1c,
  &X86Architecture::Table_3_38_1d,
  &X86Architecture::Table_3_38_1e,
  &X86Architecture::Table_3_38_1f,
  &X86Architecture::Table_3_38_20,
  &X86Architecture::Table_3_38_21,
  &X86Architecture::Table_3_38_22,
  &X86Architecture::Table_3_38_23,
  &X86Architecture::Table_3_38_24,
  &X86Architecture::Table_3_38_25,
  &X86Architecture::Table_3_38_26,
  &X86Architecture::Table_3_38_27,
  &X86Architecture::Table_3_38_28,
  &X86Architecture::Table_3_38_29,
  &X86Architecture::Table_3_38_2a,
  &X86Architecture::Table_3_38_2b,
  &X86Architecture::Table_3_38_2c,
  &X86Architecture::Table_3_38_2d,
  &X86Architecture::Table_3_38_2e,
  &X86Architecture::Table_3_38_2f,
  &X86Architecture::Table_3_38_30,
  &X86Architecture::Table_3_38_31,
  &X86Architecture::Table_3_38_32,
  &X86Architecture::Table_3_38_33,
  &X86Architecture::Table_3_38_34,
  &X86Architecture::Table_3_38_35,
  &X86Architecture::Table_3_38_36,
  &X86Architecture::Table_3_38_37,
  &X86Architecture::Table_3_38_38,
  &X86Architecture::Table_3_38_39,
  &X86Architecture::Table_3_38_3a,
  &X86Architecture::Table_3_38_3b,
  &X86Architecture::Table_3_38_3c,
  &X86Architecture::Table_3_38_3d,
  &X86Architecture::Table_3_38_3e,
  &X86Architecture::Table_3_38_3f,
  &X86Architecture::Table_3_38_40,
  &X86Architecture::Table_3_38_41,
  &X86Architecture::Table_3_38_42,
  &X86Architecture::Table_3_38_43,
  &X86Architecture::Table_3_38_44,
  &X86Architecture::Table_3_38_45,
  &X86Architecture::Table_3_38_46,
  &X86Architecture::Table_3_38_47,
  &X86Architecture::Table_3_38_48,
  &X86Architecture::Table_3_38_49,
  &X86Architecture::Table_3_38_4a,
  &X86Architecture::Table_3_38_4b,
  &X86Architecture::Table_3_38_4c,
  &X86Architecture::Table_3_38_4d,
  &X86Architecture::Table_3_38_4e,
  &X86Architecture::Table_3_38_4f,
  &X86Architecture::Table_3_38_50,
  &X86Architecture::Table_3_38_51,
  &X86Architecture::Table_3_38_52,
  &X86Architecture::Table_3_38_53,
  &X86Architecture::Table_3_38_54,
  &X86Architecture::Table_3_38_55,
  &X86Architecture::Table_3_38_56,
  &X86Architecture::Table_3_38_57,
  &X86Architecture::Table_3_38_58,
  &X86Architecture::Table_3_38_59,
  &X86Architecture::Table_3_38_5a,
  &X86Architecture::Table_3_38_5b,
  &X86Architecture::Table_3_38_5c,
  &X86Architecture::Table_3_38_5d,
  &X86Architecture::Table_3_38_5e,
  &X86Architecture::Table_3_38_5f,
  &X86Architecture::Table_3_38_60,
  &X86Architecture::Table_3_38_61,
  &X86Architecture::Table_3_38_62,
  &X86Architecture::Table_3_38_63,
  &X86Architecture::Table_3_38_64,
  &X86Architecture::Table_3_38_65,
  &X86Architecture::Table_3_38_66,
  &X86Architecture::Table_3_38_67,
  &X86Architecture::Table_3_38_68,
  &X86Architecture::Table_3_38_69,
  &X86Architecture::Table_3_38_6a,
  &X86Architecture::Table_3_38_6b,
  &X86Architecture::Table_3_38_6c,
  &X86Architecture::Table_3_38_6d,
  &X86Architecture::Table_3_38_6e,
  &X86Architecture::Table_3_38_6f,
  &X86Architecture::Table_3_38_70,
  &X86Architecture::Table_3_38_71,
  &X86Architecture::Table_3_38_72,
  &X86Architecture::Table_3_38_73,
  &X86Architecture::Table_3_38_74,
  &X86Architecture::Table_3_38_75,
  &X86Architecture::Table_3_38_76,
  &X86Architecture::Table_3_38_77,
  &X86Architecture::Table_3_38_78,
  &X86Architecture::Table_3_38_79,
  &X86Architecture::Table_3_38_7a,
  &X86Architecture::Table_3_38_7b,
  &X86Architecture::Table_3_38_7c,
  &X86Architecture::Table_3_38_7d,
  &X86Architecture::Table_3_38_7e,
  &X86Architecture::Table_3_38_7f,
  &X86Architecture::Table_3_38_80,
  &X86Architecture::Table_3_38_81,
  &X86Architecture::Table_3_38_82,
  &X86Architecture::Table_3_38_83,
  &X86Architecture::Table_3_38_84,
  &X86Architecture::Table_3_38_85,
  &X86Architecture::Table_3_38_86,
  &X86Architecture::Table_3_38_87,
  &X86Architecture::Table_3_38_88,
  &X86Architecture::Table_3_38_89,
  &X86Architecture::Table_3_38_8a,
  &X86Architecture::Table_3_38_8b,
  &X86Architecture::Table_3_38_8c,
  &X86Architecture::Table_3_38_8d,
  &X86Architecture::Table_3_38_8e,
  &X86Architecture::Table_3_38_8f,
  &X86Architecture::Table_3_38_90,
  &X86Architecture::Table_3_38_91,
  &X86Architecture::Table_3_38_92,
  &X86Architecture::Table_3_38_93,
  &X86Architecture::Table_3_38_94,
  &X86Architecture::Table_3_38_95,
  &X86Architecture::Table_3_38_96,
  &X86Architecture::Table_3_38_97,
  &X86Architecture::Table_3_38_98,
  &X86Architecture::Table_3_38_99,
  &X86Architecture::Table_3_38_9a,
  &X86Architecture::Table_3_38_9b,
  &X86Architecture::Table_3_38_9c,
  &X86Architecture::Table_3_38_9d,
  &X86Architecture::Table_3_38_9e,
  &X86Architecture::Table_3_38_9f,
  &X86Architecture::Table_3_38_a0,
  &X86Architecture::Table_3_38_a1,
  &X86Architecture::Table_3_38_a2,
  &X86Architecture::Table_3_38_a3,
  &X86Architecture::Table_3_38_a4,
  &X86Architecture::Table_3_38_a5,
  &X86Architecture::Table_3_38_a6,
  &X86Architecture::Table_3_38_a7,
  &X86Architecture::Table_3_38_a8,
  &X86Architecture::Table_3_38_a9,
  &X86Architecture::Table_3_38_aa,
  &X86Architecture::Table_3_38_ab,
  &X86Architecture::Table_3_38_ac,
  &X86Architecture::Table_3_38_ad,
  &X86Architecture::Table_3_38_ae,
  &X86Architecture::Table_3_38_af,
  &X86Architecture::Table_3_38_b0,
  &X86Architecture::Table_3_38_b1,
  &X86Architecture::Table_3_38_b2,
  &X86Architecture::Table_3_38_b3,
  &X86Architecture::Table_3_38_b4,
  &X86Architecture::Table_3_38_b5,
  &X86Architecture::Table_3_38_b6,
  &X86Architecture::Table_3_38_b7,
  &X86Architecture::Table_3_38_b8,
  &X86Architecture::Table_3_38_b9,
  &X86Architecture::Table_3_38_ba,
  &X86Architecture::Table_3_38_bb,
  &X86Architecture::Table_3_38_bc,
  &X86Architecture::Table_3_38_bd,
  &X86Architecture::Table_3_38_be,
  &X86Architecture::Table_3_38_bf,
  &X86Architecture::Table_3_38_c0,
  &X86Architecture::Table_3_38_c1,
  &X86Architecture::Table_3_38_c2,
  &X86Architecture::Table_3_38_c3,
  &X86Architecture::Table_3_38_c4,
  &X86Architecture::Table_3_38_c5,
  &X86Architecture::Table_3_38_c6,
  &X86Architecture::Table_3_38_c7,
  &X86Architecture::Table_3_38_c8,
  &X86Architecture::Table_3_38_c9,
  &X86Architecture::Table_3_38_ca,
  &X86Architecture::Table_3_38_cb,
  &X86Architecture::Table_3_38_cc,
  &X86Architecture::Table_3_38_cd,
  &X86Architecture::Table_3_38_ce,
  &X86Architecture::Table_3_38_cf,
  &X86Architecture::Table_3_38_d0,
  &X86Architecture::Table_3_38_d1,
  &X86Architecture::Table_3_38_d2,
  &X86Architecture::Table_3_38_d3,
  &X86Architecture::Table_3_38_d4,
  &X86Architecture::Table_3_38_d5,
  &X86Architecture::Table_3_38_d6,
  &X86Architecture::Table_3_38_d7,
  &X86Architecture::Table_3_38_d8,
  &X86Architecture::Table_3_38_d9,
  &X86Architecture::Table_3_38_da,
  &X86Architecture::Table_3_38_db,
  &X86Architecture::Table_3_38_dc,
  &X86Architecture::Table_3_38_dd,
  &X86Architecture::Table_3_38_de,
  &X86Architecture::Table_3_38_df,
  &X86Architecture::Table_3_38_e0,
  &X86Architecture::Table_3_38_e1,
  &X86Architecture::Table_3_38_e2,
  &X86Architecture::Table_3_38_e3,
  &X86Architecture::Table_3_38_e4,
  &X86Architecture::Table_3_38_e5,
  &X86Architecture::Table_3_38_e6,
  &X86Architecture::Table_3_38_e7,
  &X86Architecture::Table_3_38_e8,
  &X86Architecture::Table_3_38_e9,
  &X86Architecture::Table_3_38_ea,
  &X86Architecture::Table_3_38_eb,
  &X86Architecture::Table_3_38_ec,
  &X86Architecture::Table_3_38_ed,
  &X86Architecture::Table_3_38_ee,
  &X86Architecture::Table_3_38_ef,
  &X86Architecture::Table_3_38_f0,
  &X86Architecture::Table_3_38_f1,
  &X86Architecture::Table_3_38_f2,
  &X86Architecture::Table_3_38_f3,
  &X86Architecture::Table_3_38_f4,
  &X86Architecture::Table_3_38_f5,
  &X86Architecture::Table_3_38_f6,
  &X86Architecture::Table_3_38_f7,
  &X86Architecture::Table_3_38_f8,
  &X86Architecture::Table_3_38_f9,
  &X86Architecture::Table_3_38_fa,
  &X86Architecture::Table_3_38_fb,
  &X86Architecture::Table_3_38_fc,
  &X86Architecture::Table_3_38_fd,
  &X86Architecture::Table_3_38_fe,
  &X86Architecture::Table_3_38_ff
};

const X86Architecture::TDisassembler X86Architecture::m_Table_3_3a[0x100] =
{
  &X86Architecture::Table_3_3a_00,
  &X86Architecture::Table_3_3a_01,
  &X86Architecture::Table_3_3a_02,
  &X86Architecture::Table_3_3a_03,
  &X86Architecture::Table_3_3a_04,
  &X86Architecture::Table_3_3a_05,
  &X86Architecture::Table_3_3a_06,
  &X86Architecture::Table_3_3a_07,
  &X86Architecture::Table_3_3a_08,
  &X86Architecture::Table_3_3a_09,
  &X86Architecture::Table_3_3a_0a,
  &X86Architecture::Table_3_3a_0b,
  &X86Architecture::Table_3_3a_0c,
  &X86Architecture::Table_3_3a_0d,
  &X86Architecture::Table_3_3a_0e,
  &X86Architecture::Table_3_3a_0f,
  &X86Architecture::Table_3_3a_10,
  &X86Architecture::Table_3_3a_11,
  &X86Architecture::Table_3_3a_12,
  &X86Architecture::Table_3_3a_13,
  &X86Architecture::Table_3_3a_14,
  &X86Architecture::Table_3_3a_15,
  &X86Architecture::Table_3_3a_16,
  &X86Architecture::Table_3_3a_17,
  &X86Architecture::Table_3_3a_18,
  &X86Architecture::Table_3_3a_19,
  &X86Architecture::Table_3_3a_1a,
  &X86Architecture::Table_3_3a_1b,
  &X86Architecture::Table_3_3a_1c,
  &X86Architecture::Table_3_3a_1d,
  &X86Architecture::Table_3_3a_1e,
  &X86Architecture::Table_3_3a_1f,
  &X86Architecture::Table_3_3a_20,
  &X86Architecture::Table_3_3a_21,
  &X86Architecture::Table_3_3a_22,
  &X86Architecture::Table_3_3a_23,
  &X86Architecture::Table_3_3a_24,
  &X86Architecture::Table_3_3a_25,
  &X86Architecture::Table_3_3a_26,
  &X86Architecture::Table_3_3a_27,
  &X86Architecture::Table_3_3a_28,
  &X86Architecture::Table_3_3a_29,
  &X86Architecture::Table_3_3a_2a,
  &X86Architecture::Table_3_3a_2b,
  &X86Architecture::Table_3_3a_2c,
  &X86Architecture::Table_3_3a_2d,
  &X86Architecture::Table_3_3a_2e,
  &X86Architecture::Table_3_3a_2f,
  &X86Architecture::Table_3_3a_30,
  &X86Architecture::Table_3_3a_31,
  &X86Architecture::Table_3_3a_32,
  &X86Architecture::Table_3_3a_33,
  &X86Architecture::Table_3_3a_34,
  &X86Architecture::Table_3_3a_35,
  &X86Architecture::Table_3_3a_36,
  &X86Architecture::Table_3_3a_37,
  &X86Architecture::Table_3_3a_38,
  &X86Architecture::Table_3_3a_39,
  &X86Architecture::Table_3_3a_3a,
  &X86Architecture::Table_3_3a_3b,
  &X86Architecture::Table_3_3a_3c,
  &X86Architecture::Table_3_3a_3d,
  &X86Architecture::Table_3_3a_3e,
  &X86Architecture::Table_3_3a_3f,
  &X86Architecture::Table_3_3a_40,
  &X86Architecture::Table_3_3a_41,
  &X86Architecture::Table_3_3a_42,
  &X86Architecture::Table_3_3a_43,
  &X86Architecture::Table_3_3a_44,
  &X86Architecture::Table_3_3a_45,
  &X86Architecture::Table_3_3a_46,
  &X86Architecture::Table_3_3a_47,
  &X86Architecture::Table_3_3a_48,
  &X86Architecture::Table_3_3a_49,
  &X86Architecture::Table_3_3a_4a,
  &X86Architecture::Table_3_3a_4b,
  &X86Architecture::Table_3_3a_4c,
  &X86Architecture::Table_3_3a_4d,
  &X86Architecture::Table_3_3a_4e,
  &X86Architecture::Table_3_3a_4f,
  &X86Architecture::Table_3_3a_50,
  &X86Architecture::Table_3_3a_51,
  &X86Architecture::Table_3_3a_52,
  &X86Architecture::Table_3_3a_53,
  &X86Architecture::Table_3_3a_54,
  &X86Architecture::Table_3_3a_55,
  &X86Architecture::Table_3_3a_56,
  &X86Architecture::Table_3_3a_57,
  &X86Architecture::Table_3_3a_58,
  &X86Architecture::Table_3_3a_59,
  &X86Architecture::Table_3_3a_5a,
  &X86Architecture::Table_3_3a_5b,
  &X86Architecture::Table_3_3a_5c,
  &X86Architecture::Table_3_3a_5d,
  &X86Architecture::Table_3_3a_5e,
  &X86Architecture::Table_3_3a_5f,
  &X86Architecture::Table_3_3a_60,
  &X86Architecture::Table_3_3a_61,
  &X86Architecture::Table_3_3a_62,
  &X86Architecture::Table_3_3a_63,
  &X86Architecture::Table_3_3a_64,
  &X86Architecture::Table_3_3a_65,
  &X86Architecture::Table_3_3a_66,
  &X86Architecture::Table_3_3a_67,
  &X86Architecture::Table_3_3a_68,
  &X86Architecture::Table_3_3a_69,
  &X86Architecture::Table_3_3a_6a,
  &X86Architecture::Table_3_3a_6b,
  &X86Architecture::Table_3_3a_6c,
  &X86Architecture::Table_3_3a_6d,
  &X86Architecture::Table_3_3a_6e,
  &X86Architecture::Table_3_3a_6f,
  &X86Architecture::Table_3_3a_70,
  &X86Architecture::Table_3_3a_71,
  &X86Architecture::Table_3_3a_72,
  &X86Architecture::Table_3_3a_73,
  &X86Architecture::Table_3_3a_74,
  &X86Architecture::Table_3_3a_75,
  &X86Architecture::Table_3_3a_76,
  &X86Architecture::Table_3_3a_77,
  &X86Architecture::Table_3_3a_78,
  &X86Architecture::Table_3_3a_79,
  &X86Architecture::Table_3_3a_7a,
  &X86Architecture::Table_3_3a_7b,
  &X86Architecture::Table_3_3a_7c,
  &X86Architecture::Table_3_3a_7d,
  &X86Architecture::Table_3_3a_7e,
  &X86Architecture::Table_3_3a_7f,
  &X86Architecture::Table_3_3a_80,
  &X86Architecture::Table_3_3a_81,
  &X86Architecture::Table_3_3a_82,
  &X86Architecture::Table_3_3a_83,
  &X86Architecture::Table_3_3a_84,
  &X86Architecture::Table_3_3a_85,
  &X86Architecture::Table_3_3a_86,
  &X86Architecture::Table_3_3a_87,
  &X86Architecture::Table_3_3a_88,
  &X86Architecture::Table_3_3a_89,
  &X86Architecture::Table_3_3a_8a,
  &X86Architecture::Table_3_3a_8b,
  &X86Architecture::Table_3_3a_8c,
  &X86Architecture::Table_3_3a_8d,
  &X86Architecture::Table_3_3a_8e,
  &X86Architecture::Table_3_3a_8f,
  &X86Architecture::Table_3_3a_90,
  &X86Architecture::Table_3_3a_91,
  &X86Architecture::Table_3_3a_92,
  &X86Architecture::Table_3_3a_93,
  &X86Architecture::Table_3_3a_94,
  &X86Architecture::Table_3_3a_95,
  &X86Architecture::Table_3_3a_96,
  &X86Architecture::Table_3_3a_97,
  &X86Architecture::Table_3_3a_98,
  &X86Architecture::Table_3_3a_99,
  &X86Architecture::Table_3_3a_9a,
  &X86Architecture::Table_3_3a_9b,
  &X86Architecture::Table_3_3a_9c,
  &X86Architecture::Table_3_3a_9d,
  &X86Architecture::Table_3_3a_9e,
  &X86Architecture::Table_3_3a_9f,
  &X86Architecture::Table_3_3a_a0,
  &X86Architecture::Table_3_3a_a1,
  &X86Architecture::Table_3_3a_a2,
  &X86Architecture::Table_3_3a_a3,
  &X86Architecture::Table_3_3a_a4,
  &X86Architecture::Table_3_3a_a5,
  &X86Architecture::Table_3_3a_a6,
  &X86Architecture::Table_3_3a_a7,
  &X86Architecture::Table_3_3a_a8,
  &X86Architecture::Table_3_3a_a9,
  &X86Architecture::Table_3_3a_aa,
  &X86Architecture::Table_3_3a_ab,
  &X86Architecture::Table_3_3a_ac,
  &X86Architecture::Table_3_3a_ad,
  &X86Architecture::Table_3_3a_ae,
  &X86Architecture::Table_3_3a_af,
  &X86Architecture::Table_3_3a_b0,
  &X86Architecture::Table_3_3a_b1,
  &X86Architecture::Table_3_3a_b2,
  &X86Architecture::Table_3_3a_b3,
  &X86Architecture::Table_3_3a_b4,
  &X86Architecture::Table_3_3a_b5,
  &X86Architecture::Table_3_3a_b6,
  &X86Architecture::Table_3_3a_b7,
  &X86Architecture::Table_3_3a_b8,
  &X86Architecture::Table_3_3a_b9,
  &X86Architecture::Table_3_3a_ba,
  &X86Architecture::Table_3_3a_bb,
  &X86Architecture::Table_3_3a_bc,
  &X86Architecture::Table_3_3a_bd,
  &X86Architecture::Table_3_3a_be,
  &X86Architecture::Table_3_3a_bf,
  &X86Architecture::Table_3_3a_c0,
  &X86Architecture::Table_3_3a_c1,
  &X86Architecture::Table_3_3a_c2,
  &X86Architecture::Table_3_3a_c3,
  &X86Architecture::Table_3_3a_c4,
  &X86Architecture::Table_3_3a_c5,
  &X86Architecture::Table_3_3a_c6,
  &X86Architecture::Table_3_3a_c7,
  &X86Architecture::Table_3_3a_c8,
  &X86Architecture::Table_3_3a_c9,
  &X86Architecture::Table_3_3a_ca,
  &X86Architecture::Table_3_3a_cb,
  &X86Architecture::Table_3_3a_cc,
  &X86Architecture::Table_3_3a_cd,
  &X86Architecture::Table_3_3a_ce,
  &X86Architecture::Table_3_3a_cf,
  &X86Architecture::Table_3_3a_d0,
  &X86Architecture::Table_3_3a_d1,
  &X86Architecture::Table_3_3a_d2,
  &X86Architecture::Table_3_3a_d3,
  &X86Architecture::Table_3_3a_d4,
  &X86Architecture::Table_3_3a_d5,
  &X86Architecture::Table_3_3a_d6,
  &X86Architecture::Table_3_3a_d7,
  &X86Architecture::Table_3_3a_d8,
  &X86Architecture::Table_3_3a_d9,
  &X86Architecture::Table_3_3a_da,
  &X86Architecture::Table_3_3a_db,
  &X86Architecture::Table_3_3a_dc,
  &X86Architecture::Table_3_3a_dd,
  &X86Architecture::Table_3_3a_de,
  &X86Architecture::Table_3_3a_df,
  &X86Architecture::Table_3_3a_e0,
  &X86Architecture::Table_3_3a_e1,
  &X86Architecture::Table_3_3a_e2,
  &X86Architecture::Table_3_3a_e3,
  &X86Architecture::Table_3_3a_e4,
  &X86Architecture::Table_3_3a_e5,
  &X86Architecture::Table_3_3a_e6,
  &X86Architecture::Table_3_3a_e7,
  &X86Architecture::Table_3_3a_e8,
  &X86Architecture::Table_3_3a_e9,
  &X86Architecture::Table_3_3a_ea,
  &X86Architecture::Table_3_3a_eb,
  &X86Architecture::Table_3_3a_ec,
  &X86Architecture::Table_3_3a_ed,
  &X86Architecture::Table_3_3a_ee,
  &X86Architecture::Table_3_3a_ef,
  &X86Architecture::Table_3_3a_f0,
  &X86Architecture::Table_3_3a_f1,
  &X86Architecture::Table_3_3a_f2,
  &X86Architecture::Table_3_3a_f3,
  &X86Architecture::Table_3_3a_f4,
  &X86Architecture::Table_3_3a_f5,
  &X86Architecture::Table_3_3a_f6,
  &X86Architecture::Table_3_3a_f7,
  &X86Architecture::Table_3_3a_f8,
  &X86Architecture::Table_3_3a_f9,
  &X86Architecture::Table_3_3a_fa,
  &X86Architecture::Table_3_3a_fb,
  &X86Architecture::Table_3_3a_fc,
  &X86Architecture::Table_3_3a_fd,
  &X86Architecture::Table_3_3a_fe,
  &X86Architecture::Table_3_3a_ff
};

const X86Architecture::TDisassembler X86Architecture::m_Table_fp1[0x40] =
{
  &X86Architecture::Table_fp1_c0,
  &X86Architecture::Table_fp1_c1,
  &X86Architecture::Table_fp1_c2,
  &X86Architecture::Table_fp1_c3,
  &X86Architecture::Table_fp1_c4,
  &X86Architecture::Table_fp1_c5,
  &X86Architecture::Table_fp1_c6,
  &X86Architecture::Table_fp1_c7,
  &X86Architecture::Table_fp1_c8,
  &X86Architecture::Table_fp1_c9,
  &X86Architecture::Table_fp1_ca,
  &X86Architecture::Table_fp1_cb,
  &X86Architecture::Table_fp1_cc,
  &X86Architecture::Table_fp1_cd,
  &X86Architecture::Table_fp1_ce,
  &X86Architecture::Table_fp1_cf,
  &X86Architecture::Table_fp1_d0,
  &X86Architecture::Table_fp1_d1,
  &X86Architecture::Table_fp1_d2,
  &X86Architecture::Table_fp1_d3,
  &X86Architecture::Table_fp1_d4,
  &X86Architecture::Table_fp1_d5,
  &X86Architecture::Table_fp1_d6,
  &X86Architecture::Table_fp1_d7,
  &X86Architecture::Table_fp1_d8,
  &X86Architecture::Table_fp1_d9,
  &X86Architecture::Table_fp1_da,
  &X86Architecture::Table_fp1_db,
  &X86Architecture::Table_fp1_dc,
  &X86Architecture::Table_fp1_dd,
  &X86Architecture::Table_fp1_de,
  &X86Architecture::Table_fp1_df,
  &X86Architecture::Table_fp1_e0,
  &X86Architecture::Table_fp1_e1,
  &X86Architecture::Table_fp1_e2,
  &X86Architecture::Table_fp1_e3,
  &X86Architecture::Table_fp1_e4,
  &X86Architecture::Table_fp1_e5,
  &X86Architecture::Table_fp1_e6,
  &X86Architecture::Table_fp1_e7,
  &X86Architecture::Table_fp1_e8,
  &X86Architecture::Table_fp1_e9,
  &X86Architecture::Table_fp1_ea,
  &X86Architecture::Table_fp1_eb,
  &X86Architecture::Table_fp1_ec,
  &X86Architecture::Table_fp1_ed,
  &X86Architecture::Table_fp1_ee,
  &X86Architecture::Table_fp1_ef,
  &X86Architecture::Table_fp1_f0,
  &X86Architecture::Table_fp1_f1,
  &X86Architecture::Table_fp1_f2,
  &X86Architecture::Table_fp1_f3,
  &X86Architecture::Table_fp1_f4,
  &X86Architecture::Table_fp1_f5,
  &X86Architecture::Table_fp1_f6,
  &X86Architecture::Table_fp1_f7,
  &X86Architecture::Table_fp1_f8,
  &X86Architecture::Table_fp1_f9,
  &X86Architecture::Table_fp1_fa,
  &X86Architecture::Table_fp1_fb,
  &X86Architecture::Table_fp1_fc,
  &X86Architecture::Table_fp1_fd,
  &X86Architecture::Table_fp1_fe,
  &X86Architecture::Table_fp1_ff
};

const X86Architecture::TDisassembler X86Architecture::m_Table_fp2[0x40] =
{
  &X86Architecture::Table_fp2_c0,
  &X86Architecture::Table_fp2_c1,
  &X86Architecture::Table_fp2_c2,
  &X86Architecture::Table_fp2_c3,
  &X86Architecture::Table_fp2_c4,
  &X86Architecture::Table_fp2_c5,
  &X86Architecture::Table_fp2_c6,
  &X86Architecture::Table_fp2_c7,
  &X86Architecture::Table_fp2_c8,
  &X86Architecture::Table_fp2_c9,
  &X86Architecture::Table_fp2_ca,
  &X86Architecture::Table_fp2_cb,
  &X86Architecture::Table_fp2_cc,
  &X86Architecture::Table_fp2_cd,
  &X86Architecture::Table_fp2_ce,
  &X86Architecture::Table_fp2_cf,
  &X86Architecture::Table_fp2_d0,
  &X86Architecture::Table_fp2_d1,
  &X86Architecture::Table_fp2_d2,
  &X86Architecture::Table_fp2_d3,
  &X86Architecture::Table_fp2_d4,
  &X86Architecture::Table_fp2_d5,
  &X86Architecture::Table_fp2_d6,
  &X86Architecture::Table_fp2_d7,
  &X86Architecture::Table_fp2_d8,
  &X86Architecture::Table_fp2_d9,
  &X86Architecture::Table_fp2_da,
  &X86Architecture::Table_fp2_db,
  &X86Architecture::Table_fp2_dc,
  &X86Architecture::Table_fp2_dd,
  &X86Architecture::Table_fp2_de,
  &X86Architecture::Table_fp2_df,
  &X86Architecture::Table_fp2_e0,
  &X86Architecture::Table_fp2_e1,
  &X86Architecture::Table_fp2_e2,
  &X86Architecture::Table_fp2_e3,
  &X86Architecture::Table_fp2_e4,
  &X86Architecture::Table_fp2_e5,
  &X86Architecture::Table_fp2_e6,
  &X86Architecture::Table_fp2_e7,
  &X86Architecture::Table_fp2_e8,
  &X86Architecture::Table_fp2_e9,
  &X86Architecture::Table_fp2_ea,
  &X86Architecture::Table_fp2_eb,
  &X86Architecture::Table_fp2_ec,
  &X86Architecture::Table_fp2_ed,
  &X86Architecture::Table_fp2_ee,
  &X86Architecture::Table_fp2_ef,
  &X86Architecture::Table_fp2_f0,
  &X86Architecture::Table_fp2_f1,
  &X86Architecture::Table_fp2_f2,
  &X86Architecture::Table_fp2_f3,
  &X86Architecture::Table_fp2_f4,
  &X86Architecture::Table_fp2_f5,
  &X86Architecture::Table_fp2_f6,
  &X86Architecture::Table_fp2_f7,
  &X86Architecture::Table_fp2_f8,
  &X86Architecture::Table_fp2_f9,
  &X86Architecture::Table_fp2_fa,
  &X86Architecture::Table_fp2_fb,
  &X86Architecture::Table_fp2_fc,
  &X86Architecture::Table_fp2_fd,
  &X86Architecture::Table_fp2_fe,
  &X86Architecture::Table_fp2_ff
};

const X86Architecture::TDisassembler X86Architecture::m_Table_fp3[0x40] =
{
  &X86Architecture::Table_fp3_c0,
  &X86Architecture::Table_fp3_c1,
  &X86Architecture::Table_fp3_c2,
  &X86Architecture::Table_fp3_c3,
  &X86Architecture::Table_fp3_c4,
  &X86Architecture::Table_fp3_c5,
  &X86Architecture::Table_fp3_c6,
  &X86Architecture::Table_fp3_c7,
  &X86Architecture::Table_fp3_c8,
  &X86Architecture::Table_fp3_c9,
  &X86Architecture::Table_fp3_ca,
  &X86Architecture::Table_fp3_cb,
  &X86Architecture::Table_fp3_cc,
  &X86Architecture::Table_fp3_cd,
  &X86Architecture::Table_fp3_ce,
  &X86Architecture::Table_fp3_cf,
  &X86Architecture::Table_fp3_d0,
  &X86Architecture::Table_fp3_d1,
  &X86Architecture::Table_fp3_d2,
  &X86Architecture::Table_fp3_d3,
  &X86Architecture::Table_fp3_d4,
  &X86Architecture::Table_fp3_d5,
  &X86Architecture::Table_fp3_d6,
  &X86Architecture::Table_fp3_d7,
  &X86Architecture::Table_fp3_d8,
  &X86Architecture::Table_fp3_d9,
  &X86Architecture::Table_fp3_da,
  &X86Architecture::Table_fp3_db,
  &X86Architecture::Table_fp3_dc,
  &X86Architecture::Table_fp3_dd,
  &X86Architecture::Table_fp3_de,
  &X86Architecture::Table_fp3_df,
  &X86Architecture::Table_fp3_e0,
  &X86Architecture::Table_fp3_e1,
  &X86Architecture::Table_fp3_e2,
  &X86Architecture::Table_fp3_e3,
  &X86Architecture::Table_fp3_e4,
  &X86Architecture::Table_fp3_e5,
  &X86Architecture::Table_fp3_e6,
  &X86Architecture::Table_fp3_e7,
  &X86Architecture::Table_fp3_e8,
  &X86Architecture::Table_fp3_e9,
  &X86Architecture::Table_fp3_ea,
  &X86Architecture::Table_fp3_eb,
  &X86Architecture::Table_fp3_ec,
  &X86Architecture::Table_fp3_ed,
  &X86Architecture::Table_fp3_ee,
  &X86Architecture::Table_fp3_ef,
  &X86Architecture::Table_fp3_f0,
  &X86Architecture::Table_fp3_f1,
  &X86Architecture::Table_fp3_f2,
  &X86Architecture::Table_fp3_f3,
  &X86Architecture::Table_fp3_f4,
  &X86Architecture::Table_fp3_f5,
  &X86Architecture::Table_fp3_f6,
  &X86Architecture::Table_fp3_f7,
  &X86Architecture::Table_fp3_f8,
  &X86Architecture::Table_fp3_f9,
  &X86Architecture::Table_fp3_fa,
  &X86Architecture::Table_fp3_fb,
  &X86Architecture::Table_fp3_fc,
  &X86Architecture::Table_fp3_fd,
  &X86Architecture::Table_fp3_fe,
  &X86Architecture::Table_fp3_ff
};

const X86Architecture::TDisassembler X86Architecture::m_Table_fp4[0x40] =
{
  &X86Architecture::Table_fp4_c0,
  &X86Architecture::Table_fp4_c1,
  &X86Architecture::Table_fp4_c2,
  &X86Architecture::Table_fp4_c3,
  &X86Architecture::Table_fp4_c4,
  &X86Architecture::Table_fp4_c5,
  &X86Architecture::Table_fp4_c6,
  &X86Architecture::Table_fp4_c7,
  &X86Architecture::Table_fp4_c8,
  &X86Architecture::Table_fp4_c9,
  &X86Architecture::Table_fp4_ca,
  &X86Architecture::Table_fp4_cb,
  &X86Architecture::Table_fp4_cc,
  &X86Architecture::Table_fp4_cd,
  &X86Architecture::Table_fp4_ce,
  &X86Architecture::Table_fp4_cf,
  &X86Architecture::Table_fp4_d0,
  &X86Architecture::Table_fp4_d1,
  &X86Architecture::Table_fp4_d2,
  &X86Architecture::Table_fp4_d3,
  &X86Architecture::Table_fp4_d4,
  &X86Architecture::Table_fp4_d5,
  &X86Architecture::Table_fp4_d6,
  &X86Architecture::Table_fp4_d7,
  &X86Architecture::Table_fp4_d8,
  &X86Architecture::Table_fp4_d9,
  &X86Architecture::Table_fp4_da,
  &X86Architecture::Table_fp4_db,
  &X86Architecture::Table_fp4_dc,
  &X86Architecture::Table_fp4_dd,
  &X86Architecture::Table_fp4_de,
  &X86Architecture::Table_fp4_df,
  &X86Architecture::Table_fp4_e0,
  &X86Architecture::Table_fp4_e1,
  &X86Architecture::Table_fp4_e2,
  &X86Architecture::Table_fp4_e3,
  &X86Architecture::Table_fp4_e4,
  &X86Architecture::Table_fp4_e5,
  &X86Architecture::Table_fp4_e6,
  &X86Architecture::Table_fp4_e7,
  &X86Architecture::Table_fp4_e8,
  &X86Architecture::Table_fp4_e9,
  &X86Architecture::Table_fp4_ea,
  &X86Architecture::Table_fp4_eb,
  &X86Architecture::Table_fp4_ec,
  &X86Architecture::Table_fp4_ed,
  &X86Architecture::Table_fp4_ee,
  &X86Architecture::Table_fp4_ef,
  &X86Architecture::Table_fp4_f0,
  &X86Architecture::Table_fp4_f1,
  &X86Architecture::Table_fp4_f2,
  &X86Architecture::Table_fp4_f3,
  &X86Architecture::Table_fp4_f4,
  &X86Architecture::Table_fp4_f5,
  &X86Architecture::Table_fp4_f6,
  &X86Architecture::Table_fp4_f7,
  &X86Architecture::Table_fp4_f8,
  &X86Architecture::Table_fp4_f9,
  &X86Architecture::Table_fp4_fa,
  &X86Architecture::Table_fp4_fb,
  &X86Architecture::Table_fp4_fc,
  &X86Architecture::Table_fp4_fd,
  &X86Architecture::Table_fp4_fe,
  &X86Architecture::Table_fp4_ff
};

const X86Architecture::TDisassembler X86Architecture::m_Table_fp5[0x40] =
{
  &X86Architecture::Table_fp5_c0,
  &X86Architecture::Table_fp5_c1,
  &X86Architecture::Table_fp5_c2,
  &X86Architecture::Table_fp5_c3,
  &X86Architecture::Table_fp5_c4,
  &X86Architecture::Table_fp5_c5,
  &X86Architecture::Table_fp5_c6,
  &X86Architecture::Table_fp5_c7,
  &X86Architecture::Table_fp5_c8,
  &X86Architecture::Table_fp5_c9,
  &X86Architecture::Table_fp5_ca,
  &X86Architecture::Table_fp5_cb,
  &X86Architecture::Table_fp5_cc,
  &X86Architecture::Table_fp5_cd,
  &X86Architecture::Table_fp5_ce,
  &X86Architecture::Table_fp5_cf,
  &X86Architecture::Table_fp5_d0,
  &X86Architecture::Table_fp5_d1,
  &X86Architecture::Table_fp5_d2,
  &X86Architecture::Table_fp5_d3,
  &X86Architecture::Table_fp5_d4,
  &X86Architecture::Table_fp5_d5,
  &X86Architecture::Table_fp5_d6,
  &X86Architecture::Table_fp5_d7,
  &X86Architecture::Table_fp5_d8,
  &X86Architecture::Table_fp5_d9,
  &X86Architecture::Table_fp5_da,
  &X86Architecture::Table_fp5_db,
  &X86Architecture::Table_fp5_dc,
  &X86Architecture::Table_fp5_dd,
  &X86Architecture::Table_fp5_de,
  &X86Architecture::Table_fp5_df,
  &X86Architecture::Table_fp5_e0,
  &X86Architecture::Table_fp5_e1,
  &X86Architecture::Table_fp5_e2,
  &X86Architecture::Table_fp5_e3,
  &X86Architecture::Table_fp5_e4,
  &X86Architecture::Table_fp5_e5,
  &X86Architecture::Table_fp5_e6,
  &X86Architecture::Table_fp5_e7,
  &X86Architecture::Table_fp5_e8,
  &X86Architecture::Table_fp5_e9,
  &X86Architecture::Table_fp5_ea,
  &X86Architecture::Table_fp5_eb,
  &X86Architecture::Table_fp5_ec,
  &X86Architecture::Table_fp5_ed,
  &X86Architecture::Table_fp5_ee,
  &X86Architecture::Table_fp5_ef,
  &X86Architecture::Table_fp5_f0,
  &X86Architecture::Table_fp5_f1,
  &X86Architecture::Table_fp5_f2,
  &X86Architecture::Table_fp5_f3,
  &X86Architecture::Table_fp5_f4,
  &X86Architecture::Table_fp5_f5,
  &X86Architecture::Table_fp5_f6,
  &X86Architecture::Table_fp5_f7,
  &X86Architecture::Table_fp5_f8,
  &X86Architecture::Table_fp5_f9,
  &X86Architecture::Table_fp5_fa,
  &X86Architecture::Table_fp5_fb,
  &X86Architecture::Table_fp5_fc,
  &X86Architecture::Table_fp5_fd,
  &X86Architecture::Table_fp5_fe,
  &X86Architecture::Table_fp5_ff
};

const X86Architecture::TDisassembler X86Architecture::m_Table_fp6[0x40] =
{
  &X86Architecture::Table_fp6_c0,
  &X86Architecture::Table_fp6_c1,
  &X86Architecture::Table_fp6_c2,
  &X86Architecture::Table_fp6_c3,
  &X86Architecture::Table_fp6_c4,
  &X86Architecture::Table_fp6_c5,
  &X86Architecture::Table_fp6_c6,
  &X86Architecture::Table_fp6_c7,
  &X86Architecture::Table_fp6_c8,
  &X86Architecture::Table_fp6_c9,
  &X86Architecture::Table_fp6_ca,
  &X86Architecture::Table_fp6_cb,
  &X86Architecture::Table_fp6_cc,
  &X86Architecture::Table_fp6_cd,
  &X86Architecture::Table_fp6_ce,
  &X86Architecture::Table_fp6_cf,
  &X86Architecture::Table_fp6_d0,
  &X86Architecture::Table_fp6_d1,
  &X86Architecture::Table_fp6_d2,
  &X86Architecture::Table_fp6_d3,
  &X86Architecture::Table_fp6_d4,
  &X86Architecture::Table_fp6_d5,
  &X86Architecture::Table_fp6_d6,
  &X86Architecture::Table_fp6_d7,
  &X86Architecture::Table_fp6_d8,
  &X86Architecture::Table_fp6_d9,
  &X86Architecture::Table_fp6_da,
  &X86Architecture::Table_fp6_db,
  &X86Architecture::Table_fp6_dc,
  &X86Architecture::Table_fp6_dd,
  &X86Architecture::Table_fp6_de,
  &X86Architecture::Table_fp6_df,
  &X86Architecture::Table_fp6_e0,
  &X86Architecture::Table_fp6_e1,
  &X86Architecture::Table_fp6_e2,
  &X86Architecture::Table_fp6_e3,
  &X86Architecture::Table_fp6_e4,
  &X86Architecture::Table_fp6_e5,
  &X86Architecture::Table_fp6_e6,
  &X86Architecture::Table_fp6_e7,
  &X86Architecture::Table_fp6_e8,
  &X86Architecture::Table_fp6_e9,
  &X86Architecture::Table_fp6_ea,
  &X86Architecture::Table_fp6_eb,
  &X86Architecture::Table_fp6_ec,
  &X86Architecture::Table_fp6_ed,
  &X86Architecture::Table_fp6_ee,
  &X86Architecture::Table_fp6_ef,
  &X86Architecture::Table_fp6_f0,
  &X86Architecture::Table_fp6_f1,
  &X86Architecture::Table_fp6_f2,
  &X86Architecture::Table_fp6_f3,
  &X86Architecture::Table_fp6_f4,
  &X86Architecture::Table_fp6_f5,
  &X86Architecture::Table_fp6_f6,
  &X86Architecture::Table_fp6_f7,
  &X86Architecture::Table_fp6_f8,
  &X86Architecture::Table_fp6_f9,
  &X86Architecture::Table_fp6_fa,
  &X86Architecture::Table_fp6_fb,
  &X86Architecture::Table_fp6_fc,
  &X86Architecture::Table_fp6_fd,
  &X86Architecture::Table_fp6_fe,
  &X86Architecture::Table_fp6_ff
};

const X86Architecture::TDisassembler X86Architecture::m_Table_fp7[0x40] =
{
  &X86Architecture::Table_fp7_c0,
  &X86Architecture::Table_fp7_c1,
  &X86Architecture::Table_fp7_c2,
  &X86Architecture::Table_fp7_c3,
  &X86Architecture::Table_fp7_c4,
  &X86Architecture::Table_fp7_c5,
  &X86Architecture::Table_fp7_c6,
  &X86Architecture::Table_fp7_c7,
  &X86Architecture::Table_fp7_c8,
  &X86Architecture::Table_fp7_c9,
  &X86Architecture::Table_fp7_ca,
  &X86Architecture::Table_fp7_cb,
  &X86Architecture::Table_fp7_cc,
  &X86Architecture::Table_fp7_cd,
  &X86Architecture::Table_fp7_ce,
  &X86Architecture::Table_fp7_cf,
  &X86Architecture::Table_fp7_d0,
  &X86Architecture::Table_fp7_d1,
  &X86Architecture::Table_fp7_d2,
  &X86Architecture::Table_fp7_d3,
  &X86Architecture::Table_fp7_d4,
  &X86Architecture::Table_fp7_d5,
  &X86Architecture::Table_fp7_d6,
  &X86Architecture::Table_fp7_d7,
  &X86Architecture::Table_fp7_d8,
  &X86Architecture::Table_fp7_d9,
  &X86Architecture::Table_fp7_da,
  &X86Architecture::Table_fp7_db,
  &X86Architecture::Table_fp7_dc,
  &X86Architecture::Table_fp7_dd,
  &X86Architecture::Table_fp7_de,
  &X86Architecture::Table_fp7_df,
  &X86Architecture::Table_fp7_e0,
  &X86Architecture::Table_fp7_e1,
  &X86Architecture::Table_fp7_e2,
  &X86Architecture::Table_fp7_e3,
  &X86Architecture::Table_fp7_e4,
  &X86Architecture::Table_fp7_e5,
  &X86Architecture::Table_fp7_e6,
  &X86Architecture::Table_fp7_e7,
  &X86Architecture::Table_fp7_e8,
  &X86Architecture::Table_fp7_e9,
  &X86Architecture::Table_fp7_ea,
  &X86Architecture::Table_fp7_eb,
  &X86Architecture::Table_fp7_ec,
  &X86Architecture::Table_fp7_ed,
  &X86Architecture::Table_fp7_ee,
  &X86Architecture::Table_fp7_ef,
  &X86Architecture::Table_fp7_f0,
  &X86Architecture::Table_fp7_f1,
  &X86Architecture::Table_fp7_f2,
  &X86Architecture::Table_fp7_f3,
  &X86Architecture::Table_fp7_f4,
  &X86Architecture::Table_fp7_f5,
  &X86Architecture::Table_fp7_f6,
  &X86Architecture::Table_fp7_f7,
  &X86Architecture::Table_fp7_f8,
  &X86Architecture::Table_fp7_f9,
  &X86Architecture::Table_fp7_fa,
  &X86Architecture::Table_fp7_fb,
  &X86Architecture::Table_fp7_fc,
  &X86Architecture::Table_fp7_fd,
  &X86Architecture::Table_fp7_fe,
  &X86Architecture::Table_fp7_ff
};

const X86Architecture::TDisassembler X86Architecture::m_Table_fp8[0x40] =
{
  &X86Architecture::Table_fp8_c0,
  &X86Architecture::Table_fp8_c1,
  &X86Architecture::Table_fp8_c2,
  &X86Architecture::Table_fp8_c3,
  &X86Architecture::Table_fp8_c4,
  &X86Architecture::Table_fp8_c5,
  &X86Architecture::Table_fp8_c6,
  &X86Architecture::Table_fp8_c7,
  &X86Architecture::Table_fp8_c8,
  &X86Architecture::Table_fp8_c9,
  &X86Architecture::Table_fp8_ca,
  &X86Architecture::Table_fp8_cb,
  &X86Architecture::Table_fp8_cc,
  &X86Architecture::Table_fp8_cd,
  &X86Architecture::Table_fp8_ce,
  &X86Architecture::Table_fp8_cf,
  &X86Architecture::Table_fp8_d0,
  &X86Architecture::Table_fp8_d1,
  &X86Architecture::Table_fp8_d2,
  &X86Architecture::Table_fp8_d3,
  &X86Architecture::Table_fp8_d4,
  &X86Architecture::Table_fp8_d5,
  &X86Architecture::Table_fp8_d6,
  &X86Architecture::Table_fp8_d7,
  &X86Architecture::Table_fp8_d8,
  &X86Architecture::Table_fp8_d9,
  &X86Architecture::Table_fp8_da,
  &X86Architecture::Table_fp8_db,
  &X86Architecture::Table_fp8_dc,
  &X86Architecture::Table_fp8_dd,
  &X86Architecture::Table_fp8_de,
  &X86Architecture::Table_fp8_df,
  &X86Architecture::Table_fp8_e0,
  &X86Architecture::Table_fp8_e1,
  &X86Architecture::Table_fp8_e2,
  &X86Architecture::Table_fp8_e3,
  &X86Architecture::Table_fp8_e4,
  &X86Architecture::Table_fp8_e5,
  &X86Architecture::Table_fp8_e6,
  &X86Architecture::Table_fp8_e7,
  &X86Architecture::Table_fp8_e8,
  &X86Architecture::Table_fp8_e9,
  &X86Architecture::Table_fp8_ea,
  &X86Architecture::Table_fp8_eb,
  &X86Architecture::Table_fp8_ec,
  &X86Architecture::Table_fp8_ed,
  &X86Architecture::Table_fp8_ee,
  &X86Architecture::Table_fp8_ef,
  &X86Architecture::Table_fp8_f0,
  &X86Architecture::Table_fp8_f1,
  &X86Architecture::Table_fp8_f2,
  &X86Architecture::Table_fp8_f3,
  &X86Architecture::Table_fp8_f4,
  &X86Architecture::Table_fp8_f5,
  &X86Architecture::Table_fp8_f6,
  &X86Architecture::Table_fp8_f7,
  &X86Architecture::Table_fp8_f8,
  &X86Architecture::Table_fp8_f9,
  &X86Architecture::Table_fp8_fa,
  &X86Architecture::Table_fp8_fb,
  &X86Architecture::Table_fp8_fc,
  &X86Architecture::Table_fp8_fd,
  &X86Architecture::Table_fp8_fe,
  &X86Architecture::Table_fp8_ff
};

const X86Architecture::TDisassembler X86Architecture::m_Table_sse5a[0x100] =
{
  &X86Architecture::Table_sse5a_00,
  &X86Architecture::Table_sse5a_01,
  &X86Architecture::Table_sse5a_02,
  &X86Architecture::Table_sse5a_03,
  &X86Architecture::Table_sse5a_04,
  &X86Architecture::Table_sse5a_05,
  &X86Architecture::Table_sse5a_06,
  &X86Architecture::Table_sse5a_07,
  &X86Architecture::Table_sse5a_08,
  &X86Architecture::Table_sse5a_09,
  &X86Architecture::Table_sse5a_0a,
  &X86Architecture::Table_sse5a_0b,
  &X86Architecture::Table_sse5a_0c,
  &X86Architecture::Table_sse5a_0d,
  &X86Architecture::Table_sse5a_0e,
  &X86Architecture::Table_sse5a_0f,
  &X86Architecture::Table_sse5a_10,
  &X86Architecture::Table_sse5a_11,
  &X86Architecture::Table_sse5a_12,
  &X86Architecture::Table_sse5a_13,
  &X86Architecture::Table_sse5a_14,
  &X86Architecture::Table_sse5a_15,
  &X86Architecture::Table_sse5a_16,
  &X86Architecture::Table_sse5a_17,
  &X86Architecture::Table_sse5a_18,
  &X86Architecture::Table_sse5a_19,
  &X86Architecture::Table_sse5a_1a,
  &X86Architecture::Table_sse5a_1b,
  &X86Architecture::Table_sse5a_1c,
  &X86Architecture::Table_sse5a_1d,
  &X86Architecture::Table_sse5a_1e,
  &X86Architecture::Table_sse5a_1f,
  &X86Architecture::Table_sse5a_20,
  &X86Architecture::Table_sse5a_21,
  &X86Architecture::Table_sse5a_22,
  &X86Architecture::Table_sse5a_23,
  &X86Architecture::Table_sse5a_24,
  &X86Architecture::Table_sse5a_25,
  &X86Architecture::Table_sse5a_26,
  &X86Architecture::Table_sse5a_27,
  &X86Architecture::Table_sse5a_28,
  &X86Architecture::Table_sse5a_29,
  &X86Architecture::Table_sse5a_2a,
  &X86Architecture::Table_sse5a_2b,
  &X86Architecture::Table_sse5a_2c,
  &X86Architecture::Table_sse5a_2d,
  &X86Architecture::Table_sse5a_2e,
  &X86Architecture::Table_sse5a_2f,
  &X86Architecture::Table_sse5a_30,
  &X86Architecture::Table_sse5a_31,
  &X86Architecture::Table_sse5a_32,
  &X86Architecture::Table_sse5a_33,
  &X86Architecture::Table_sse5a_34,
  &X86Architecture::Table_sse5a_35,
  &X86Architecture::Table_sse5a_36,
  &X86Architecture::Table_sse5a_37,
  &X86Architecture::Table_sse5a_38,
  &X86Architecture::Table_sse5a_39,
  &X86Architecture::Table_sse5a_3a,
  &X86Architecture::Table_sse5a_3b,
  &X86Architecture::Table_sse5a_3c,
  &X86Architecture::Table_sse5a_3d,
  &X86Architecture::Table_sse5a_3e,
  &X86Architecture::Table_sse5a_3f,
  &X86Architecture::Table_sse5a_40,
  &X86Architecture::Table_sse5a_41,
  &X86Architecture::Table_sse5a_42,
  &X86Architecture::Table_sse5a_43,
  &X86Architecture::Table_sse5a_44,
  &X86Architecture::Table_sse5a_45,
  &X86Architecture::Table_sse5a_46,
  &X86Architecture::Table_sse5a_47,
  &X86Architecture::Table_sse5a_48,
  &X86Architecture::Table_sse5a_49,
  &X86Architecture::Table_sse5a_4a,
  &X86Architecture::Table_sse5a_4b,
  &X86Architecture::Table_sse5a_4c,
  &X86Architecture::Table_sse5a_4d,
  &X86Architecture::Table_sse5a_4e,
  &X86Architecture::Table_sse5a_4f,
  &X86Architecture::Table_sse5a_50,
  &X86Architecture::Table_sse5a_51,
  &X86Architecture::Table_sse5a_52,
  &X86Architecture::Table_sse5a_53,
  &X86Architecture::Table_sse5a_54,
  &X86Architecture::Table_sse5a_55,
  &X86Architecture::Table_sse5a_56,
  &X86Architecture::Table_sse5a_57,
  &X86Architecture::Table_sse5a_58,
  &X86Architecture::Table_sse5a_59,
  &X86Architecture::Table_sse5a_5a,
  &X86Architecture::Table_sse5a_5b,
  &X86Architecture::Table_sse5a_5c,
  &X86Architecture::Table_sse5a_5d,
  &X86Architecture::Table_sse5a_5e,
  &X86Architecture::Table_sse5a_5f,
  &X86Architecture::Table_sse5a_60,
  &X86Architecture::Table_sse5a_61,
  &X86Architecture::Table_sse5a_62,
  &X86Architecture::Table_sse5a_63,
  &X86Architecture::Table_sse5a_64,
  &X86Architecture::Table_sse5a_65,
  &X86Architecture::Table_sse5a_66,
  &X86Architecture::Table_sse5a_67,
  &X86Architecture::Table_sse5a_68,
  &X86Architecture::Table_sse5a_69,
  &X86Architecture::Table_sse5a_6a,
  &X86Architecture::Table_sse5a_6b,
  &X86Architecture::Table_sse5a_6c,
  &X86Architecture::Table_sse5a_6d,
  &X86Architecture::Table_sse5a_6e,
  &X86Architecture::Table_sse5a_6f,
  &X86Architecture::Table_sse5a_70,
  &X86Architecture::Table_sse5a_71,
  &X86Architecture::Table_sse5a_72,
  &X86Architecture::Table_sse5a_73,
  &X86Architecture::Table_sse5a_74,
  &X86Architecture::Table_sse5a_75,
  &X86Architecture::Table_sse5a_76,
  &X86Architecture::Table_sse5a_77,
  &X86Architecture::Table_sse5a_78,
  &X86Architecture::Table_sse5a_79,
  &X86Architecture::Table_sse5a_7a,
  &X86Architecture::Table_sse5a_7b,
  &X86Architecture::Table_sse5a_7c,
  &X86Architecture::Table_sse5a_7d,
  &X86Architecture::Table_sse5a_7e,
  &X86Architecture::Table_sse5a_7f,
  &X86Architecture::Table_sse5a_80,
  &X86Architecture::Table_sse5a_81,
  &X86Architecture::Table_sse5a_82,
  &X86Architecture::Table_sse5a_83,
  &X86Architecture::Table_sse5a_84,
  &X86Architecture::Table_sse5a_85,
  &X86Architecture::Table_sse5a_86,
  &X86Architecture::Table_sse5a_87,
  &X86Architecture::Table_sse5a_88,
  &X86Architecture::Table_sse5a_89,
  &X86Architecture::Table_sse5a_8a,
  &X86Architecture::Table_sse5a_8b,
  &X86Architecture::Table_sse5a_8c,
  &X86Architecture::Table_sse5a_8d,
  &X86Architecture::Table_sse5a_8e,
  &X86Architecture::Table_sse5a_8f,
  &X86Architecture::Table_sse5a_90,
  &X86Architecture::Table_sse5a_91,
  &X86Architecture::Table_sse5a_92,
  &X86Architecture::Table_sse5a_93,
  &X86Architecture::Table_sse5a_94,
  &X86Architecture::Table_sse5a_95,
  &X86Architecture::Table_sse5a_96,
  &X86Architecture::Table_sse5a_97,
  &X86Architecture::Table_sse5a_98,
  &X86Architecture::Table_sse5a_99,
  &X86Architecture::Table_sse5a_9a,
  &X86Architecture::Table_sse5a_9b,
  &X86Architecture::Table_sse5a_9c,
  &X86Architecture::Table_sse5a_9d,
  &X86Architecture::Table_sse5a_9e,
  &X86Architecture::Table_sse5a_9f,
  &X86Architecture::Table_sse5a_a0,
  &X86Architecture::Table_sse5a_a1,
  &X86Architecture::Table_sse5a_a2,
  &X86Architecture::Table_sse5a_a3,
  &X86Architecture::Table_sse5a_a4,
  &X86Architecture::Table_sse5a_a5,
  &X86Architecture::Table_sse5a_a6,
  &X86Architecture::Table_sse5a_a7,
  &X86Architecture::Table_sse5a_a8,
  &X86Architecture::Table_sse5a_a9,
  &X86Architecture::Table_sse5a_aa,
  &X86Architecture::Table_sse5a_ab,
  &X86Architecture::Table_sse5a_ac,
  &X86Architecture::Table_sse5a_ad,
  &X86Architecture::Table_sse5a_ae,
  &X86Architecture::Table_sse5a_af,
  &X86Architecture::Table_sse5a_b0,
  &X86Architecture::Table_sse5a_b1,
  &X86Architecture::Table_sse5a_b2,
  &X86Architecture::Table_sse5a_b3,
  &X86Architecture::Table_sse5a_b4,
  &X86Architecture::Table_sse5a_b5,
  &X86Architecture::Table_sse5a_b6,
  &X86Architecture::Table_sse5a_b7,
  &X86Architecture::Table_sse5a_b8,
  &X86Architecture::Table_sse5a_b9,
  &X86Architecture::Table_sse5a_ba,
  &X86Architecture::Table_sse5a_bb,
  &X86Architecture::Table_sse5a_bc,
  &X86Architecture::Table_sse5a_bd,
  &X86Architecture::Table_sse5a_be,
  &X86Architecture::Table_sse5a_bf,
  &X86Architecture::Table_sse5a_c0,
  &X86Architecture::Table_sse5a_c1,
  &X86Architecture::Table_sse5a_c2,
  &X86Architecture::Table_sse5a_c3,
  &X86Architecture::Table_sse5a_c4,
  &X86Architecture::Table_sse5a_c5,
  &X86Architecture::Table_sse5a_c6,
  &X86Architecture::Table_sse5a_c7,
  &X86Architecture::Table_sse5a_c8,
  &X86Architecture::Table_sse5a_c9,
  &X86Architecture::Table_sse5a_ca,
  &X86Architecture::Table_sse5a_cb,
  &X86Architecture::Table_sse5a_cc,
  &X86Architecture::Table_sse5a_cd,
  &X86Architecture::Table_sse5a_ce,
  &X86Architecture::Table_sse5a_cf,
  &X86Architecture::Table_sse5a_d0,
  &X86Architecture::Table_sse5a_d1,
  &X86Architecture::Table_sse5a_d2,
  &X86Architecture::Table_sse5a_d3,
  &X86Architecture::Table_sse5a_d4,
  &X86Architecture::Table_sse5a_d5,
  &X86Architecture::Table_sse5a_d6,
  &X86Architecture::Table_sse5a_d7,
  &X86Architecture::Table_sse5a_d8,
  &X86Architecture::Table_sse5a_d9,
  &X86Architecture::Table_sse5a_da,
  &X86Architecture::Table_sse5a_db,
  &X86Architecture::Table_sse5a_dc,
  &X86Architecture::Table_sse5a_dd,
  &X86Architecture::Table_sse5a_de,
  &X86Architecture::Table_sse5a_df,
  &X86Architecture::Table_sse5a_e0,
  &X86Architecture::Table_sse5a_e1,
  &X86Architecture::Table_sse5a_e2,
  &X86Architecture::Table_sse5a_e3,
  &X86Architecture::Table_sse5a_e4,
  &X86Architecture::Table_sse5a_e5,
  &X86Architecture::Table_sse5a_e6,
  &X86Architecture::Table_sse5a_e7,
  &X86Architecture::Table_sse5a_e8,
  &X86Architecture::Table_sse5a_e9,
  &X86Architecture::Table_sse5a_ea,
  &X86Architecture::Table_sse5a_eb,
  &X86Architecture::Table_sse5a_ec,
  &X86Architecture::Table_sse5a_ed,
  &X86Architecture::Table_sse5a_ee,
  &X86Architecture::Table_sse5a_ef,
  &X86Architecture::Table_sse5a_f0,
  &X86Architecture::Table_sse5a_f1,
  &X86Architecture::Table_sse5a_f2,
  &X86Architecture::Table_sse5a_f3,
  &X86Architecture::Table_sse5a_f4,
  &X86Architecture::Table_sse5a_f5,
  &X86Architecture::Table_sse5a_f6,
  &X86Architecture::Table_sse5a_f7,
  &X86Architecture::Table_sse5a_f8,
  &X86Architecture::Table_sse5a_f9,
  &X86Architecture::Table_sse5a_fa,
  &X86Architecture::Table_sse5a_fb,
  &X86Architecture::Table_sse5a_fc,
  &X86Architecture::Table_sse5a_fd,
  &X86Architecture::Table_sse5a_fe,
  &X86Architecture::Table_sse5a_ff
};

/** instruction
 * mnemonic: add
 * operand: ['Eb', 'Gb']
 * update_flags: ['cf', 'pf', 'af', 'zf', 'sf', 'of']
 * opcode: 00
 * semantic: alloc_var('res', op0.bit);
res.val = op0.val + op1.val;
call('overflow_flag_add');
call('carry_flag_add');
call('sign_flag');
call('zero_flag');
call('parity_flag');
call('adjust_flag');
op0.val = res.val;
free_var('res');

**/
bool X86Architecture::Table_1_00(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Add);
    if (Operand__Eb_Gb(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    {
      Expression::LSPType AllExpr;
      rInsn.SetUpdatedFlags(X86_FlCf | X86_FlPf | X86_FlAf | X86_FlZf | X86_FlSf | X86_FlOf);
      /* semantic: alloc_var('res', op0.bit) */
      AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
      /* semantic: res.val = op0.val + op1.val */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("res", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpAdd,
          rInsn.GetOperand(0),
          rInsn.GetOperand(1))));
      /* semantic: call('overflow_flag_add') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlOf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeBinOp(
            OperationExpression::OpAnd,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              rInsn.GetOperand(0),
              Expr::MakeVar("res", VariableExpression::Use)),
            Expr::MakeUnOp(
              OperationExpression::OpNot,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                rInsn.GetOperand(1)))),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
      /* semantic: call('carry_flag_add') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlCf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              rInsn.GetOperand(0),
              rInsn.GetOperand(1)),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  rInsn.GetOperand(0),
                  rInsn.GetOperand(1)),
                Expr::MakeVar("res", VariableExpression::Use)),
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                rInsn.GetOperand(1)))),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
      /* semantic: call('sign_flag') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlSf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
      /* semantic: call('zero_flag') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlZf, &m_CpuInfo),
        Expr::MakeTernaryCond(ConditionExpression::CondEq,
        Expr::MakeVar("res", VariableExpression::Use),
        Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
        Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))));
      /* semantic: call('parity_flag') */
      AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBitVector(1, 0x1)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlPf, &m_CpuInfo),
        Expr::MakeVar("pf_tmp", VariableExpression::Use)));
      AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
      /* semantic: call('adjust_flag') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlAf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              rInsn.GetOperand(0),
              rInsn.GetOperand(1)),
            Expr::MakeVar("res", VariableExpression::Use)),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))));
      /* semantic: op0.val = res.val */
      AllExpr.push_back(Expr::MakeAssign(
        rInsn.GetOperand(0),
        Expr::MakeVar("res", VariableExpression::Use)));
      /* semantic: free_var('res') */
      AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instruction
 * mnemonic: add
 * operand: ['Ev', 'Gv']
 * update_flags: ['cf', 'pf', 'af', 'zf', 'sf', 'of']
 * opcode: 01
 * semantic: alloc_var('res', op0.bit);
res.val = op0.val + op1.val;
call('overflow_flag_add');
call('carry_flag_add');
call('sign_flag');
call('zero_flag');
call('parity_flag');
call('adjust_flag');
op0.val = res.val;
free_var('res');

**/
bool X86Architecture::Table_1_01(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Add);
    if (Operand__Ev_Gv(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    {
      Expression::LSPType AllExpr;
      rInsn.SetUpdatedFlags(X86_FlCf | X86_FlPf | X86_FlAf | X86_FlZf | X86_FlSf | X86_FlOf);
      /* semantic: alloc_var('res', op0.bit) */
      AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
      /* semantic: res.val = op0.val + op1.val */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("res", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpAdd,
          rInsn.GetOperand(0),
          rInsn.GetOperand(1))));
      /* semantic: call('overflow_flag_add') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlOf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeBinOp(
            OperationExpression::OpAnd,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              rInsn.GetOperand(0),
              Expr::MakeVar("res", VariableExpression::Use)),
            Expr::MakeUnOp(
              OperationExpression::OpNot,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                rInsn.GetOperand(1)))),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
      /* semantic: call('carry_flag_add') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlCf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              rInsn.GetOperand(0),
              rInsn.GetOperand(1)),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  rInsn.GetOperand(0),
                  rInsn.GetOperand(1)),
                Expr::MakeVar("res", VariableExpression::Use)),
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                rInsn.GetOperand(1)))),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
      /* semantic: call('sign_flag') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlSf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
      /* semantic: call('zero_flag') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlZf, &m_CpuInfo),
        Expr::MakeTernaryCond(ConditionExpression::CondEq,
        Expr::MakeVar("res", VariableExpression::Use),
        Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
        Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))));
      /* semantic: call('parity_flag') */
      AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBitVector(1, 0x1)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlPf, &m_CpuInfo),
        Expr::MakeVar("pf_tmp", VariableExpression::Use)));
      AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
      /* semantic: call('adjust_flag') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlAf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              rInsn.GetOperand(0),
              rInsn.GetOperand(1)),
            Expr::MakeVar("res", VariableExpression::Use)),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))));
      /* semantic: op0.val = res.val */
      AllExpr.push_back(Expr::MakeAssign(
        rInsn.GetOperand(0),
        Expr::MakeVar("res", VariableExpression::Use)));
      /* semantic: free_var('res') */
      AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instruction
 * mnemonic: add
 * operand: ['Gb', 'Eb']
 * update_flags: ['cf', 'pf', 'af', 'zf', 'sf', 'of']
 * opcode: 02
 * semantic: alloc_var('res', op0.bit);
res.val = op0.val + op1.val;
call('overflow_flag_add');
call('carry_flag_add');
call('sign_flag');
call('zero_flag');
call('parity_flag');
call('adjust_flag');
op0.val = res.val;
free_var('res');

**/
bool X86Architecture::Table_1_02(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Add);
    if (Operand__Gb_Eb(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    {
      Expression::LSPType AllExpr;
      rInsn.SetUpdatedFlags(X86_FlCf | X86_FlPf | X86_FlAf | X86_FlZf | X86_FlSf | X86_FlOf);
      /* semantic: alloc_var('res', op0.bit) */
      AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
      /* semantic: res.val = op0.val + op1.val */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("res", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpAdd,
          rInsn.GetOperand(0),
          rInsn.GetOperand(1))));
      /* semantic: call('overflow_flag_add') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlOf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeBinOp(
            OperationExpression::OpAnd,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              rInsn.GetOperand(0),
              Expr::MakeVar("res", VariableExpression::Use)),
            Expr::MakeUnOp(
              OperationExpression::OpNot,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                rInsn.GetOperand(1)))),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
      /* semantic: call('carry_flag_add') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlCf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              rInsn.GetOperand(0),
              rInsn.GetOperand(1)),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  rInsn.GetOperand(0),
                  rInsn.GetOperand(1)),
                Expr::MakeVar("res", VariableExpression::Use)),
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                rInsn.GetOperand(1)))),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
      /* semantic: call('sign_flag') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlSf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
      /* semantic: call('zero_flag') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlZf, &m_CpuInfo),
        Expr::MakeTernaryCond(ConditionExpression::CondEq,
        Expr::MakeVar("res", VariableExpression::Use),
        Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
        Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))));
      /* semantic: call('parity_flag') */
      AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBitVector(1, 0x1)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlPf, &m_CpuInfo),
        Expr::MakeVar("pf_tmp", VariableExpression::Use)));
      AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
      /* semantic: call('adjust_flag') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlAf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              rInsn.GetOperand(0),
              rInsn.GetOperand(1)),
            Expr::MakeVar("res", VariableExpression::Use)),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))));
      /* semantic: op0.val = res.val */
      AllExpr.push_back(Expr::MakeAssign(
        rInsn.GetOperand(0),
        Expr::MakeVar("res", VariableExpression::Use)));
      /* semantic: free_var('res') */
      AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instruction
 * mnemonic: add
 * operand: ['Gv', 'Ev']
 * update_flags: ['cf', 'pf', 'af', 'zf', 'sf', 'of']
 * opcode: 03
 * semantic: alloc_var('res', op0.bit);
res.val = op0.val + op1.val;
call('overflow_flag_add');
call('carry_flag_add');
call('sign_flag');
call('zero_flag');
call('parity_flag');
call('adjust_flag');
op0.val = res.val;
free_var('res');

**/
bool X86Architecture::Table_1_03(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Add);
    if (Operand__Gv_Ev(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    {
      Expression::LSPType AllExpr;
      rInsn.SetUpdatedFlags(X86_FlCf | X86_FlPf | X86_FlAf | X86_FlZf | X86_FlSf | X86_FlOf);
      /* semantic: alloc_var('res', op0.bit) */
      AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
      /* semantic: res.val = op0.val + op1.val */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("res", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpAdd,
          rInsn.GetOperand(0),
          rInsn.GetOperand(1))));
      /* semantic: call('overflow_flag_add') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlOf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeBinOp(
            OperationExpression::OpAnd,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              rInsn.GetOperand(0),
              Expr::MakeVar("res", VariableExpression::Use)),
            Expr::MakeUnOp(
              OperationExpression::OpNot,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                rInsn.GetOperand(1)))),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
      /* semantic: call('carry_flag_add') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlCf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              rInsn.GetOperand(0),
              rInsn.GetOperand(1)),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  rInsn.GetOperand(0),
                  rInsn.GetOperand(1)),
                Expr::MakeVar("res", VariableExpression::Use)),
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                rInsn.GetOperand(1)))),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
      /* semantic: call('sign_flag') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlSf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
      /* semantic: call('zero_flag') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlZf, &m_CpuInfo),
        Expr::MakeTernaryCond(ConditionExpression::CondEq,
        Expr::MakeVar("res", VariableExpression::Use),
        Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
        Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))));
      /* semantic: call('parity_flag') */
      AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBitVector(1, 0x1)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlPf, &m_CpuInfo),
        Expr::MakeVar("pf_tmp", VariableExpression::Use)));
      AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
      /* semantic: call('adjust_flag') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlAf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              rInsn.GetOperand(0),
              rInsn.GetOperand(1)),
            Expr::MakeVar("res", VariableExpression::Use)),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))));
      /* semantic: op0.val = res.val */
      AllExpr.push_back(Expr::MakeAssign(
        rInsn.GetOperand(0),
        Expr::MakeVar("res", VariableExpression::Use)));
      /* semantic: free_var('res') */
      AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instruction
 * mnemonic: add
 * operand: ['AL', 'Ib']
 * update_flags: ['cf', 'pf', 'af', 'zf', 'sf', 'of']
 * opcode: 04
 * semantic: alloc_var('res', op0.bit);
res.val = op0.val + op1.val;
call('overflow_flag_add');
call('carry_flag_add');
call('sign_flag');
call('zero_flag');
call('parity_flag');
call('adjust_flag');
op0.val = res.val;
free_var('res');

**/
bool X86Architecture::Table_1_04(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Add);
    if (Operand__AL_Ib(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    {
      Expression::LSPType AllExpr;
      rInsn.SetUpdatedFlags(X86_FlCf | X86_FlPf | X86_FlAf | X86_FlZf | X86_FlSf | X86_FlOf);
      /* semantic: alloc_var('res', op0.bit) */
      AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
      /* semantic: res.val = op0.val + op1.val */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("res", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpAdd,
          rInsn.GetOperand(0),
          rInsn.GetOperand(1))));
      /* semantic: call('overflow_flag_add') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlOf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeBinOp(
            OperationExpression::OpAnd,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              rInsn.GetOperand(0),
              Expr::MakeVar("res", VariableExpression::Use)),
            Expr::MakeUnOp(
              OperationExpression::OpNot,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                rInsn.GetOperand(1)))),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
      /* semantic: call('carry_flag_add') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlCf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              rInsn.GetOperand(0),
              rInsn.GetOperand(1)),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  rInsn.GetOperand(0),
                  rInsn.GetOperand(1)),
                Expr::MakeVar("res", VariableExpression::Use)),
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                rInsn.GetOperand(1)))),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
      /* semantic: call('sign_flag') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlSf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
      /* semantic: call('zero_flag') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlZf, &m_CpuInfo),
        Expr::MakeTernaryCond(ConditionExpression::CondEq,
        Expr::MakeVar("res", VariableExpression::Use),
        Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
        Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))));
      /* semantic: call('parity_flag') */
      AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBitVector(1, 0x1)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlPf, &m_CpuInfo),
        Expr::MakeVar("pf_tmp", VariableExpression::Use)));
      AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
      /* semantic: call('adjust_flag') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlAf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              rInsn.GetOperand(0),
              rInsn.GetOperand(1)),
            Expr::MakeVar("res", VariableExpression::Use)),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))));
      /* semantic: op0.val = res.val */
      AllExpr.push_back(Expr::MakeAssign(
        rInsn.GetOperand(0),
        Expr::MakeVar("res", VariableExpression::Use)));
      /* semantic: free_var('res') */
      AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instruction
 * mnemonic: add
 * operand: ['rAX', 'Iz']
 * update_flags: ['cf', 'pf', 'af', 'zf', 'sf', 'of']
 * opcode: 05
 * semantic: alloc_var('res', op0.bit);
res.val = op0.val + op1.val;
call('overflow_flag_add');
call('carry_flag_add');
call('sign_flag');
call('zero_flag');
call('parity_flag');
call('adjust_flag');
op0.val = res.val;
free_var('res');

**/
bool X86Architecture::Table_1_05(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Add);
    if (Operand__rAX_Iz(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    {
      Expression::LSPType AllExpr;
      rInsn.SetUpdatedFlags(X86_FlCf | X86_FlPf | X86_FlAf | X86_FlZf | X86_FlSf | X86_FlOf);
      /* semantic: alloc_var('res', op0.bit) */
      AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
      /* semantic: res.val = op0.val + op1.val */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("res", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpAdd,
          rInsn.GetOperand(0),
          rInsn.GetOperand(1))));
      /* semantic: call('overflow_flag_add') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlOf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeBinOp(
            OperationExpression::OpAnd,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              rInsn.GetOperand(0),
              Expr::MakeVar("res", VariableExpression::Use)),
            Expr::MakeUnOp(
              OperationExpression::OpNot,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                rInsn.GetOperand(1)))),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
      /* semantic: call('carry_flag_add') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlCf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              rInsn.GetOperand(0),
              rInsn.GetOperand(1)),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  rInsn.GetOperand(0),
                  rInsn.GetOperand(1)),
                Expr::MakeVar("res", VariableExpression::Use)),
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                rInsn.GetOperand(1)))),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
      /* semantic: call('sign_flag') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlSf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
      /* semantic: call('zero_flag') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlZf, &m_CpuInfo),
        Expr::MakeTernaryCond(ConditionExpression::CondEq,
        Expr::MakeVar("res", VariableExpression::Use),
        Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
        Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))));
      /* semantic: call('parity_flag') */
      AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBitVector(1, 0x1)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlPf, &m_CpuInfo),
        Expr::MakeVar("pf_tmp", VariableExpression::Use)));
      AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
      /* semantic: call('adjust_flag') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlAf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              rInsn.GetOperand(0),
              rInsn.GetOperand(1)),
            Expr::MakeVar("res", VariableExpression::Use)),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))));
      /* semantic: op0.val = res.val */
      AllExpr.push_back(Expr::MakeAssign(
        rInsn.GetOperand(0),
        Expr::MakeVar("res", VariableExpression::Use)));
      /* semantic: free_var('res') */
      AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instruction
 * mnemonic: push
 * operand: ['ES']
 * opcode: 06
 * attr: ['nm64']
 * semantic: alloc_var('pushed_value', stack.bit);
pushed_value = sign_extend(op0.val, int(stack.bit, stack.bit));
stack.id -= stack.size;
stack.mem = pushed_value;
free_var('pushed_value');

**/
bool X86Architecture::Table_1_06(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (Mode != X86_Bit_64)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Push);
      if (Operand__ES(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('pushed_value', stack.bit) */
        AllExpr.push_back(Expr::MakeVar("pushed_value", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()))));
        /* semantic: pushed_value = sign_extend(op0.val, int(stack.bit, stack.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pushed_value", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpSext, rInsn.GetOperand(0), Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()))))));
        /* semantic: stack.id -= stack.size */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
            Expr::MakeBitVector(
              m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())),
              m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())) / 8)))
        );
        /* semantic: stack.mem = pushed_value */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeMem(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), nullptr, Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo)),
          Expr::MakeVar("pushed_value", VariableExpression::Use)));
        /* semantic: free_var('pushed_value') */
        AllExpr.push_back(Expr::MakeVar("pushed_value", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    else
      return false;
}

/** instruction
 * mnemonic: pop
 * operand: ['ES']
 * opcode: 07
 * attr: ['nm64']
 * semantic: alloc_var('popped_value', stack.bit);
popped_value = stack.mem;
stack.id += stack.size;
op0.val = popped_value;
free_var('popped_value');

**/
bool X86Architecture::Table_1_07(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (Mode != X86_Bit_64)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pop);
      if (Operand__ES(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('popped_value', stack.bit) */
        AllExpr.push_back(Expr::MakeVar("popped_value", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()))));
        /* semantic: popped_value = stack.mem */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("popped_value", VariableExpression::Use),
          Expr::MakeMem(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), nullptr, Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo))));
        /* semantic: stack.id += stack.size */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeBinOp(
            OperationExpression::OpAdd,
            Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
            Expr::MakeBitVector(
              m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())),
              m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())) / 8)))
        );
        /* semantic: op0.val = popped_value */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("popped_value", VariableExpression::Use)));
        /* semantic: free_var('popped_value') */
        AllExpr.push_back(Expr::MakeVar("popped_value", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    else
      return false;
}

/** instruction
 * mnemonic: or
 * clear_flags: ['af', 'of', 'cf']
 * semantic: alloc_var('res', op0.bit);
res = op0.val | op1.val;
of.id = int1(0)
cf.id = int1(0)
call('sign_flag')
call('zero_flag')
call('parity_flag')
op0.val = res;
free_var('res');

 * operand: ['Eb', 'Gb']
 * opcode: 08
 * update_flags: ['cf', 'pf', 'af', 'zf', 'sf', 'of']
**/
bool X86Architecture::Table_1_08(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Or);
    if (Operand__Eb_Gb(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    {
      Expression::LSPType AllExpr;
      rInsn.SetUpdatedFlags(X86_FlCf | X86_FlPf | X86_FlAf | X86_FlZf | X86_FlSf | X86_FlOf);
      rInsn.SetClearedFlags(X86_FlAf | X86_FlOf | X86_FlCf);
      AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlAf, &m_CpuInfo), Expr::MakeBoolean(false)));
      AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlOf, &m_CpuInfo), Expr::MakeBoolean(false)));
      AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlCf, &m_CpuInfo), Expr::MakeBoolean(false)));
      /* semantic: alloc_var('res', op0.bit) */
      AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
      /* semantic: res = op0.val | op1.val */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("res", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpOr,
          rInsn.GetOperand(0),
          rInsn.GetOperand(1))));
      /* semantic: of.id = int1(0)
      cf.id = int1(0)
      call('sign_flag')
      call('zero_flag')
      call('parity_flag')
      op0.val = res */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlOf, &m_CpuInfo),
        Expr::MakeBitVector(1, 0x0)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlCf, &m_CpuInfo),
        Expr::MakeBitVector(1, 0x0)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlSf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlZf, &m_CpuInfo),
        Expr::MakeTernaryCond(ConditionExpression::CondEq,
        Expr::MakeVar("res", VariableExpression::Use),
        Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
        Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))));
      AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBitVector(1, 0x1)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlPf, &m_CpuInfo),
        Expr::MakeVar("pf_tmp", VariableExpression::Use)));
      AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
      AllExpr.push_back(Expr::MakeAssign(
        rInsn.GetOperand(0),
        Expr::MakeVar("res", VariableExpression::Use)));
      /* semantic: free_var('res') */
      AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instruction
 * mnemonic: or
 * clear_flags: ['af', 'of', 'cf']
 * semantic: alloc_var('res', op0.bit);
res = op0.val | op1.val;
of.id = int1(0)
cf.id = int1(0)
call('sign_flag')
call('zero_flag')
call('parity_flag')
op0.val = res;
free_var('res');

 * operand: ['Ev', 'Gv']
 * opcode: 09
 * update_flags: ['cf', 'pf', 'af', 'zf', 'sf', 'of']
**/
bool X86Architecture::Table_1_09(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Or);
    if (Operand__Ev_Gv(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    {
      Expression::LSPType AllExpr;
      rInsn.SetUpdatedFlags(X86_FlCf | X86_FlPf | X86_FlAf | X86_FlZf | X86_FlSf | X86_FlOf);
      rInsn.SetClearedFlags(X86_FlAf | X86_FlOf | X86_FlCf);
      AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlAf, &m_CpuInfo), Expr::MakeBoolean(false)));
      AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlOf, &m_CpuInfo), Expr::MakeBoolean(false)));
      AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlCf, &m_CpuInfo), Expr::MakeBoolean(false)));
      /* semantic: alloc_var('res', op0.bit) */
      AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
      /* semantic: res = op0.val | op1.val */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("res", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpOr,
          rInsn.GetOperand(0),
          rInsn.GetOperand(1))));
      /* semantic: of.id = int1(0)
      cf.id = int1(0)
      call('sign_flag')
      call('zero_flag')
      call('parity_flag')
      op0.val = res */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlOf, &m_CpuInfo),
        Expr::MakeBitVector(1, 0x0)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlCf, &m_CpuInfo),
        Expr::MakeBitVector(1, 0x0)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlSf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlZf, &m_CpuInfo),
        Expr::MakeTernaryCond(ConditionExpression::CondEq,
        Expr::MakeVar("res", VariableExpression::Use),
        Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
        Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))));
      AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBitVector(1, 0x1)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlPf, &m_CpuInfo),
        Expr::MakeVar("pf_tmp", VariableExpression::Use)));
      AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
      AllExpr.push_back(Expr::MakeAssign(
        rInsn.GetOperand(0),
        Expr::MakeVar("res", VariableExpression::Use)));
      /* semantic: free_var('res') */
      AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instruction
 * mnemonic: or
 * clear_flags: ['af', 'of', 'cf']
 * semantic: alloc_var('res', op0.bit);
res = op0.val | op1.val;
of.id = int1(0)
cf.id = int1(0)
call('sign_flag')
call('zero_flag')
call('parity_flag')
op0.val = res;
free_var('res');

 * operand: ['Gb', 'Eb']
 * opcode: 0a
 * update_flags: ['cf', 'pf', 'af', 'zf', 'sf', 'of']
**/
bool X86Architecture::Table_1_0a(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Or);
    if (Operand__Gb_Eb(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    {
      Expression::LSPType AllExpr;
      rInsn.SetUpdatedFlags(X86_FlCf | X86_FlPf | X86_FlAf | X86_FlZf | X86_FlSf | X86_FlOf);
      rInsn.SetClearedFlags(X86_FlAf | X86_FlOf | X86_FlCf);
      AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlAf, &m_CpuInfo), Expr::MakeBoolean(false)));
      AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlOf, &m_CpuInfo), Expr::MakeBoolean(false)));
      AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlCf, &m_CpuInfo), Expr::MakeBoolean(false)));
      /* semantic: alloc_var('res', op0.bit) */
      AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
      /* semantic: res = op0.val | op1.val */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("res", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpOr,
          rInsn.GetOperand(0),
          rInsn.GetOperand(1))));
      /* semantic: of.id = int1(0)
      cf.id = int1(0)
      call('sign_flag')
      call('zero_flag')
      call('parity_flag')
      op0.val = res */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlOf, &m_CpuInfo),
        Expr::MakeBitVector(1, 0x0)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlCf, &m_CpuInfo),
        Expr::MakeBitVector(1, 0x0)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlSf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlZf, &m_CpuInfo),
        Expr::MakeTernaryCond(ConditionExpression::CondEq,
        Expr::MakeVar("res", VariableExpression::Use),
        Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
        Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))));
      AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBitVector(1, 0x1)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlPf, &m_CpuInfo),
        Expr::MakeVar("pf_tmp", VariableExpression::Use)));
      AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
      AllExpr.push_back(Expr::MakeAssign(
        rInsn.GetOperand(0),
        Expr::MakeVar("res", VariableExpression::Use)));
      /* semantic: free_var('res') */
      AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instruction
 * mnemonic: or
 * clear_flags: ['af', 'of', 'cf']
 * semantic: alloc_var('res', op0.bit);
res = op0.val | op1.val;
of.id = int1(0)
cf.id = int1(0)
call('sign_flag')
call('zero_flag')
call('parity_flag')
op0.val = res;
free_var('res');

 * operand: ['Gv', 'Ev']
 * opcode: 0b
 * update_flags: ['cf', 'pf', 'af', 'zf', 'sf', 'of']
**/
bool X86Architecture::Table_1_0b(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Or);
    if (Operand__Gv_Ev(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    {
      Expression::LSPType AllExpr;
      rInsn.SetUpdatedFlags(X86_FlCf | X86_FlPf | X86_FlAf | X86_FlZf | X86_FlSf | X86_FlOf);
      rInsn.SetClearedFlags(X86_FlAf | X86_FlOf | X86_FlCf);
      AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlAf, &m_CpuInfo), Expr::MakeBoolean(false)));
      AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlOf, &m_CpuInfo), Expr::MakeBoolean(false)));
      AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlCf, &m_CpuInfo), Expr::MakeBoolean(false)));
      /* semantic: alloc_var('res', op0.bit) */
      AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
      /* semantic: res = op0.val | op1.val */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("res", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpOr,
          rInsn.GetOperand(0),
          rInsn.GetOperand(1))));
      /* semantic: of.id = int1(0)
      cf.id = int1(0)
      call('sign_flag')
      call('zero_flag')
      call('parity_flag')
      op0.val = res */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlOf, &m_CpuInfo),
        Expr::MakeBitVector(1, 0x0)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlCf, &m_CpuInfo),
        Expr::MakeBitVector(1, 0x0)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlSf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlZf, &m_CpuInfo),
        Expr::MakeTernaryCond(ConditionExpression::CondEq,
        Expr::MakeVar("res", VariableExpression::Use),
        Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
        Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))));
      AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBitVector(1, 0x1)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlPf, &m_CpuInfo),
        Expr::MakeVar("pf_tmp", VariableExpression::Use)));
      AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
      AllExpr.push_back(Expr::MakeAssign(
        rInsn.GetOperand(0),
        Expr::MakeVar("res", VariableExpression::Use)));
      /* semantic: free_var('res') */
      AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instruction
 * mnemonic: or
 * clear_flags: ['af', 'of', 'cf']
 * semantic: alloc_var('res', op0.bit);
res = op0.val | op1.val;
of.id = int1(0)
cf.id = int1(0)
call('sign_flag')
call('zero_flag')
call('parity_flag')
op0.val = res;
free_var('res');

 * operand: ['AL', 'Ib']
 * opcode: 0c
 * update_flags: ['cf', 'pf', 'af', 'zf', 'sf', 'of']
**/
bool X86Architecture::Table_1_0c(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Or);
    if (Operand__AL_Ib(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    {
      Expression::LSPType AllExpr;
      rInsn.SetUpdatedFlags(X86_FlCf | X86_FlPf | X86_FlAf | X86_FlZf | X86_FlSf | X86_FlOf);
      rInsn.SetClearedFlags(X86_FlAf | X86_FlOf | X86_FlCf);
      AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlAf, &m_CpuInfo), Expr::MakeBoolean(false)));
      AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlOf, &m_CpuInfo), Expr::MakeBoolean(false)));
      AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlCf, &m_CpuInfo), Expr::MakeBoolean(false)));
      /* semantic: alloc_var('res', op0.bit) */
      AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
      /* semantic: res = op0.val | op1.val */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("res", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpOr,
          rInsn.GetOperand(0),
          rInsn.GetOperand(1))));
      /* semantic: of.id = int1(0)
      cf.id = int1(0)
      call('sign_flag')
      call('zero_flag')
      call('parity_flag')
      op0.val = res */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlOf, &m_CpuInfo),
        Expr::MakeBitVector(1, 0x0)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlCf, &m_CpuInfo),
        Expr::MakeBitVector(1, 0x0)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlSf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlZf, &m_CpuInfo),
        Expr::MakeTernaryCond(ConditionExpression::CondEq,
        Expr::MakeVar("res", VariableExpression::Use),
        Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
        Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))));
      AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBitVector(1, 0x1)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlPf, &m_CpuInfo),
        Expr::MakeVar("pf_tmp", VariableExpression::Use)));
      AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
      AllExpr.push_back(Expr::MakeAssign(
        rInsn.GetOperand(0),
        Expr::MakeVar("res", VariableExpression::Use)));
      /* semantic: free_var('res') */
      AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instruction
 * mnemonic: or
 * clear_flags: ['af', 'of', 'cf']
 * semantic: alloc_var('res', op0.bit);
res = op0.val | op1.val;
of.id = int1(0)
cf.id = int1(0)
call('sign_flag')
call('zero_flag')
call('parity_flag')
op0.val = res;
free_var('res');

 * operand: ['rAX', 'Iz']
 * opcode: 0d
 * update_flags: ['cf', 'pf', 'af', 'zf', 'sf', 'of']
**/
bool X86Architecture::Table_1_0d(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Or);
    if (Operand__rAX_Iz(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    {
      Expression::LSPType AllExpr;
      rInsn.SetUpdatedFlags(X86_FlCf | X86_FlPf | X86_FlAf | X86_FlZf | X86_FlSf | X86_FlOf);
      rInsn.SetClearedFlags(X86_FlAf | X86_FlOf | X86_FlCf);
      AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlAf, &m_CpuInfo), Expr::MakeBoolean(false)));
      AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlOf, &m_CpuInfo), Expr::MakeBoolean(false)));
      AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlCf, &m_CpuInfo), Expr::MakeBoolean(false)));
      /* semantic: alloc_var('res', op0.bit) */
      AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
      /* semantic: res = op0.val | op1.val */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("res", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpOr,
          rInsn.GetOperand(0),
          rInsn.GetOperand(1))));
      /* semantic: of.id = int1(0)
      cf.id = int1(0)
      call('sign_flag')
      call('zero_flag')
      call('parity_flag')
      op0.val = res */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlOf, &m_CpuInfo),
        Expr::MakeBitVector(1, 0x0)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlCf, &m_CpuInfo),
        Expr::MakeBitVector(1, 0x0)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlSf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlZf, &m_CpuInfo),
        Expr::MakeTernaryCond(ConditionExpression::CondEq,
        Expr::MakeVar("res", VariableExpression::Use),
        Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
        Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))));
      AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBitVector(1, 0x1)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlPf, &m_CpuInfo),
        Expr::MakeVar("pf_tmp", VariableExpression::Use)));
      AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
      AllExpr.push_back(Expr::MakeAssign(
        rInsn.GetOperand(0),
        Expr::MakeVar("res", VariableExpression::Use)));
      /* semantic: free_var('res') */
      AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instruction
 * mnemonic: push
 * operand: ['CS']
 * opcode: 0e
 * attr: ['nm64']
 * semantic: alloc_var('pushed_value', stack.bit);
pushed_value = sign_extend(op0.val, int(stack.bit, stack.bit));
stack.id -= stack.size;
stack.mem = pushed_value;
free_var('pushed_value');

**/
bool X86Architecture::Table_1_0e(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (Mode != X86_Bit_64)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Push);
      if (Operand__CS(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('pushed_value', stack.bit) */
        AllExpr.push_back(Expr::MakeVar("pushed_value", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()))));
        /* semantic: pushed_value = sign_extend(op0.val, int(stack.bit, stack.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pushed_value", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpSext, rInsn.GetOperand(0), Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()))))));
        /* semantic: stack.id -= stack.size */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
            Expr::MakeBitVector(
              m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())),
              m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())) / 8)))
        );
        /* semantic: stack.mem = pushed_value */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeMem(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), nullptr, Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo)),
          Expr::MakeVar("pushed_value", VariableExpression::Use)));
        /* semantic: free_var('pushed_value') */
        AllExpr.push_back(Expr::MakeVar("pushed_value", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    else
      return false;
}

/** instruction
 * opcode: 0f
 * cpu_model: >= X86_Arch_80286
 * reference: table_2
**/
bool X86Architecture::Table_1_0f(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    u8 Opcode;
    if (!rBinStrm.Read(Offset, Opcode))
      return false;

    rInsn.Length()++;
    if (Opcode + 1 > sizeof(m_Table_2))
      return false;
    return (this->*m_Table_2[Opcode])(rBinStrm, Offset + 1, rInsn, Mode);
}

/** instruction
 * mnemonic: adc
 * test_flags: ['cf']
 * semantic: alloc_var('res', op0.bit);
res.val = op0.val + op1.val + bit_cast(cf.id, int(op0.bit, op0.bit));
call('overflow_flag_add');
call('carry_flag_add');
call('sign_flag');
call('zero_flag');
call('parity_flag');
call('adjust_flag');
op0.val = res.val;
free_var('res');

 * operand: ['Eb', 'Gb']
 * opcode: 10
 * update_flags: ['cf', 'pf', 'af', 'zf', 'sf', 'of']
**/
bool X86Architecture::Table_1_10(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Adc);
    if (Operand__Eb_Gb(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    {
      Expression::LSPType AllExpr;
      rInsn.SetTestedFlags(X86_FlCf);
      rInsn.SetUpdatedFlags(X86_FlCf | X86_FlPf | X86_FlAf | X86_FlZf | X86_FlSf | X86_FlOf);
      /* semantic: alloc_var('res', op0.bit) */
      AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
      /* semantic: res.val = op0.val + op1.val + bit_cast(cf.id, int(op0.bit, op0.bit)) */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("res", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpAdd,
          Expr::MakeBinOp(
            OperationExpression::OpAdd,
            rInsn.GetOperand(0),
            rInsn.GetOperand(1)),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeId(X86_FlCf, &m_CpuInfo), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize())))));
      /* semantic: call('overflow_flag_add') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlOf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeBinOp(
            OperationExpression::OpAnd,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              rInsn.GetOperand(0),
              Expr::MakeVar("res", VariableExpression::Use)),
            Expr::MakeUnOp(
              OperationExpression::OpNot,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                rInsn.GetOperand(1)))),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
      /* semantic: call('carry_flag_add') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlCf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              rInsn.GetOperand(0),
              rInsn.GetOperand(1)),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  rInsn.GetOperand(0),
                  rInsn.GetOperand(1)),
                Expr::MakeVar("res", VariableExpression::Use)),
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                rInsn.GetOperand(1)))),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
      /* semantic: call('sign_flag') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlSf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
      /* semantic: call('zero_flag') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlZf, &m_CpuInfo),
        Expr::MakeTernaryCond(ConditionExpression::CondEq,
        Expr::MakeVar("res", VariableExpression::Use),
        Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
        Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))));
      /* semantic: call('parity_flag') */
      AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBitVector(1, 0x1)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlPf, &m_CpuInfo),
        Expr::MakeVar("pf_tmp", VariableExpression::Use)));
      AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
      /* semantic: call('adjust_flag') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlAf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              rInsn.GetOperand(0),
              rInsn.GetOperand(1)),
            Expr::MakeVar("res", VariableExpression::Use)),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))));
      /* semantic: op0.val = res.val */
      AllExpr.push_back(Expr::MakeAssign(
        rInsn.GetOperand(0),
        Expr::MakeVar("res", VariableExpression::Use)));
      /* semantic: free_var('res') */
      AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instruction
 * mnemonic: adc
 * test_flags: ['cf']
 * semantic: alloc_var('res', op0.bit);
res.val = op0.val + op1.val + bit_cast(cf.id, int(op0.bit, op0.bit));
call('overflow_flag_add');
call('carry_flag_add');
call('sign_flag');
call('zero_flag');
call('parity_flag');
call('adjust_flag');
op0.val = res.val;
free_var('res');

 * operand: ['Ev', 'Gv']
 * opcode: 11
 * update_flags: ['cf', 'pf', 'af', 'zf', 'sf', 'of']
**/
bool X86Architecture::Table_1_11(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Adc);
    if (Operand__Ev_Gv(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    {
      Expression::LSPType AllExpr;
      rInsn.SetTestedFlags(X86_FlCf);
      rInsn.SetUpdatedFlags(X86_FlCf | X86_FlPf | X86_FlAf | X86_FlZf | X86_FlSf | X86_FlOf);
      /* semantic: alloc_var('res', op0.bit) */
      AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
      /* semantic: res.val = op0.val + op1.val + bit_cast(cf.id, int(op0.bit, op0.bit)) */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("res", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpAdd,
          Expr::MakeBinOp(
            OperationExpression::OpAdd,
            rInsn.GetOperand(0),
            rInsn.GetOperand(1)),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeId(X86_FlCf, &m_CpuInfo), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize())))));
      /* semantic: call('overflow_flag_add') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlOf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeBinOp(
            OperationExpression::OpAnd,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              rInsn.GetOperand(0),
              Expr::MakeVar("res", VariableExpression::Use)),
            Expr::MakeUnOp(
              OperationExpression::OpNot,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                rInsn.GetOperand(1)))),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
      /* semantic: call('carry_flag_add') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlCf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              rInsn.GetOperand(0),
              rInsn.GetOperand(1)),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  rInsn.GetOperand(0),
                  rInsn.GetOperand(1)),
                Expr::MakeVar("res", VariableExpression::Use)),
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                rInsn.GetOperand(1)))),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
      /* semantic: call('sign_flag') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlSf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
      /* semantic: call('zero_flag') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlZf, &m_CpuInfo),
        Expr::MakeTernaryCond(ConditionExpression::CondEq,
        Expr::MakeVar("res", VariableExpression::Use),
        Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
        Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))));
      /* semantic: call('parity_flag') */
      AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBitVector(1, 0x1)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlPf, &m_CpuInfo),
        Expr::MakeVar("pf_tmp", VariableExpression::Use)));
      AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
      /* semantic: call('adjust_flag') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlAf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              rInsn.GetOperand(0),
              rInsn.GetOperand(1)),
            Expr::MakeVar("res", VariableExpression::Use)),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))));
      /* semantic: op0.val = res.val */
      AllExpr.push_back(Expr::MakeAssign(
        rInsn.GetOperand(0),
        Expr::MakeVar("res", VariableExpression::Use)));
      /* semantic: free_var('res') */
      AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instruction
 * mnemonic: adc
 * test_flags: ['cf']
 * semantic: alloc_var('res', op0.bit);
res.val = op0.val + op1.val + bit_cast(cf.id, int(op0.bit, op0.bit));
call('overflow_flag_add');
call('carry_flag_add');
call('sign_flag');
call('zero_flag');
call('parity_flag');
call('adjust_flag');
op0.val = res.val;
free_var('res');

 * operand: ['Gb', 'Eb']
 * opcode: 12
 * update_flags: ['cf', 'pf', 'af', 'zf', 'sf', 'of']
**/
bool X86Architecture::Table_1_12(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Adc);
    if (Operand__Gb_Eb(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    {
      Expression::LSPType AllExpr;
      rInsn.SetTestedFlags(X86_FlCf);
      rInsn.SetUpdatedFlags(X86_FlCf | X86_FlPf | X86_FlAf | X86_FlZf | X86_FlSf | X86_FlOf);
      /* semantic: alloc_var('res', op0.bit) */
      AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
      /* semantic: res.val = op0.val + op1.val + bit_cast(cf.id, int(op0.bit, op0.bit)) */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("res", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpAdd,
          Expr::MakeBinOp(
            OperationExpression::OpAdd,
            rInsn.GetOperand(0),
            rInsn.GetOperand(1)),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeId(X86_FlCf, &m_CpuInfo), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize())))));
      /* semantic: call('overflow_flag_add') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlOf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeBinOp(
            OperationExpression::OpAnd,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              rInsn.GetOperand(0),
              Expr::MakeVar("res", VariableExpression::Use)),
            Expr::MakeUnOp(
              OperationExpression::OpNot,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                rInsn.GetOperand(1)))),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
      /* semantic: call('carry_flag_add') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlCf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              rInsn.GetOperand(0),
              rInsn.GetOperand(1)),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  rInsn.GetOperand(0),
                  rInsn.GetOperand(1)),
                Expr::MakeVar("res", VariableExpression::Use)),
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                rInsn.GetOperand(1)))),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
      /* semantic: call('sign_flag') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlSf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
      /* semantic: call('zero_flag') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlZf, &m_CpuInfo),
        Expr::MakeTernaryCond(ConditionExpression::CondEq,
        Expr::MakeVar("res", VariableExpression::Use),
        Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
        Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))));
      /* semantic: call('parity_flag') */
      AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBitVector(1, 0x1)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlPf, &m_CpuInfo),
        Expr::MakeVar("pf_tmp", VariableExpression::Use)));
      AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
      /* semantic: call('adjust_flag') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlAf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              rInsn.GetOperand(0),
              rInsn.GetOperand(1)),
            Expr::MakeVar("res", VariableExpression::Use)),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))));
      /* semantic: op0.val = res.val */
      AllExpr.push_back(Expr::MakeAssign(
        rInsn.GetOperand(0),
        Expr::MakeVar("res", VariableExpression::Use)));
      /* semantic: free_var('res') */
      AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instruction
 * mnemonic: adc
 * test_flags: ['cf']
 * semantic: alloc_var('res', op0.bit);
res.val = op0.val + op1.val + bit_cast(cf.id, int(op0.bit, op0.bit));
call('overflow_flag_add');
call('carry_flag_add');
call('sign_flag');
call('zero_flag');
call('parity_flag');
call('adjust_flag');
op0.val = res.val;
free_var('res');

 * operand: ['Gv', 'Ev']
 * opcode: 13
 * update_flags: ['cf', 'pf', 'af', 'zf', 'sf', 'of']
**/
bool X86Architecture::Table_1_13(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Adc);
    if (Operand__Gv_Ev(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    {
      Expression::LSPType AllExpr;
      rInsn.SetTestedFlags(X86_FlCf);
      rInsn.SetUpdatedFlags(X86_FlCf | X86_FlPf | X86_FlAf | X86_FlZf | X86_FlSf | X86_FlOf);
      /* semantic: alloc_var('res', op0.bit) */
      AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
      /* semantic: res.val = op0.val + op1.val + bit_cast(cf.id, int(op0.bit, op0.bit)) */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("res", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpAdd,
          Expr::MakeBinOp(
            OperationExpression::OpAdd,
            rInsn.GetOperand(0),
            rInsn.GetOperand(1)),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeId(X86_FlCf, &m_CpuInfo), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize())))));
      /* semantic: call('overflow_flag_add') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlOf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeBinOp(
            OperationExpression::OpAnd,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              rInsn.GetOperand(0),
              Expr::MakeVar("res", VariableExpression::Use)),
            Expr::MakeUnOp(
              OperationExpression::OpNot,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                rInsn.GetOperand(1)))),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
      /* semantic: call('carry_flag_add') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlCf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              rInsn.GetOperand(0),
              rInsn.GetOperand(1)),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  rInsn.GetOperand(0),
                  rInsn.GetOperand(1)),
                Expr::MakeVar("res", VariableExpression::Use)),
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                rInsn.GetOperand(1)))),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
      /* semantic: call('sign_flag') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlSf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
      /* semantic: call('zero_flag') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlZf, &m_CpuInfo),
        Expr::MakeTernaryCond(ConditionExpression::CondEq,
        Expr::MakeVar("res", VariableExpression::Use),
        Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
        Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))));
      /* semantic: call('parity_flag') */
      AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBitVector(1, 0x1)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlPf, &m_CpuInfo),
        Expr::MakeVar("pf_tmp", VariableExpression::Use)));
      AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
      /* semantic: call('adjust_flag') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlAf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              rInsn.GetOperand(0),
              rInsn.GetOperand(1)),
            Expr::MakeVar("res", VariableExpression::Use)),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))));
      /* semantic: op0.val = res.val */
      AllExpr.push_back(Expr::MakeAssign(
        rInsn.GetOperand(0),
        Expr::MakeVar("res", VariableExpression::Use)));
      /* semantic: free_var('res') */
      AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instruction
 * mnemonic: adc
 * test_flags: ['cf']
 * semantic: alloc_var('res', op0.bit);
res.val = op0.val + op1.val + bit_cast(cf.id, int(op0.bit, op0.bit));
call('overflow_flag_add');
call('carry_flag_add');
call('sign_flag');
call('zero_flag');
call('parity_flag');
call('adjust_flag');
op0.val = res.val;
free_var('res');

 * operand: ['AL', 'Ib']
 * opcode: 14
 * update_flags: ['cf', 'pf', 'af', 'zf', 'sf', 'of']
**/
bool X86Architecture::Table_1_14(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Adc);
    if (Operand__AL_Ib(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    {
      Expression::LSPType AllExpr;
      rInsn.SetTestedFlags(X86_FlCf);
      rInsn.SetUpdatedFlags(X86_FlCf | X86_FlPf | X86_FlAf | X86_FlZf | X86_FlSf | X86_FlOf);
      /* semantic: alloc_var('res', op0.bit) */
      AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
      /* semantic: res.val = op0.val + op1.val + bit_cast(cf.id, int(op0.bit, op0.bit)) */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("res", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpAdd,
          Expr::MakeBinOp(
            OperationExpression::OpAdd,
            rInsn.GetOperand(0),
            rInsn.GetOperand(1)),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeId(X86_FlCf, &m_CpuInfo), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize())))));
      /* semantic: call('overflow_flag_add') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlOf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeBinOp(
            OperationExpression::OpAnd,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              rInsn.GetOperand(0),
              Expr::MakeVar("res", VariableExpression::Use)),
            Expr::MakeUnOp(
              OperationExpression::OpNot,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                rInsn.GetOperand(1)))),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
      /* semantic: call('carry_flag_add') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlCf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              rInsn.GetOperand(0),
              rInsn.GetOperand(1)),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  rInsn.GetOperand(0),
                  rInsn.GetOperand(1)),
                Expr::MakeVar("res", VariableExpression::Use)),
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                rInsn.GetOperand(1)))),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
      /* semantic: call('sign_flag') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlSf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
      /* semantic: call('zero_flag') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlZf, &m_CpuInfo),
        Expr::MakeTernaryCond(ConditionExpression::CondEq,
        Expr::MakeVar("res", VariableExpression::Use),
        Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
        Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))));
      /* semantic: call('parity_flag') */
      AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBitVector(1, 0x1)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlPf, &m_CpuInfo),
        Expr::MakeVar("pf_tmp", VariableExpression::Use)));
      AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
      /* semantic: call('adjust_flag') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlAf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              rInsn.GetOperand(0),
              rInsn.GetOperand(1)),
            Expr::MakeVar("res", VariableExpression::Use)),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))));
      /* semantic: op0.val = res.val */
      AllExpr.push_back(Expr::MakeAssign(
        rInsn.GetOperand(0),
        Expr::MakeVar("res", VariableExpression::Use)));
      /* semantic: free_var('res') */
      AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instruction
 * mnemonic: adc
 * test_flags: ['cf']
 * semantic: alloc_var('res', op0.bit);
res.val = op0.val + op1.val + bit_cast(cf.id, int(op0.bit, op0.bit));
call('overflow_flag_add');
call('carry_flag_add');
call('sign_flag');
call('zero_flag');
call('parity_flag');
call('adjust_flag');
op0.val = res.val;
free_var('res');

 * operand: ['rAX', 'Iz']
 * opcode: 15
 * update_flags: ['cf', 'pf', 'af', 'zf', 'sf', 'of']
**/
bool X86Architecture::Table_1_15(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Adc);
    if (Operand__rAX_Iz(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    {
      Expression::LSPType AllExpr;
      rInsn.SetTestedFlags(X86_FlCf);
      rInsn.SetUpdatedFlags(X86_FlCf | X86_FlPf | X86_FlAf | X86_FlZf | X86_FlSf | X86_FlOf);
      /* semantic: alloc_var('res', op0.bit) */
      AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
      /* semantic: res.val = op0.val + op1.val + bit_cast(cf.id, int(op0.bit, op0.bit)) */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("res", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpAdd,
          Expr::MakeBinOp(
            OperationExpression::OpAdd,
            rInsn.GetOperand(0),
            rInsn.GetOperand(1)),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeId(X86_FlCf, &m_CpuInfo), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize())))));
      /* semantic: call('overflow_flag_add') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlOf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeBinOp(
            OperationExpression::OpAnd,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              rInsn.GetOperand(0),
              Expr::MakeVar("res", VariableExpression::Use)),
            Expr::MakeUnOp(
              OperationExpression::OpNot,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                rInsn.GetOperand(1)))),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
      /* semantic: call('carry_flag_add') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlCf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              rInsn.GetOperand(0),
              rInsn.GetOperand(1)),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  rInsn.GetOperand(0),
                  rInsn.GetOperand(1)),
                Expr::MakeVar("res", VariableExpression::Use)),
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                rInsn.GetOperand(1)))),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
      /* semantic: call('sign_flag') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlSf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
      /* semantic: call('zero_flag') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlZf, &m_CpuInfo),
        Expr::MakeTernaryCond(ConditionExpression::CondEq,
        Expr::MakeVar("res", VariableExpression::Use),
        Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
        Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))));
      /* semantic: call('parity_flag') */
      AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBitVector(1, 0x1)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlPf, &m_CpuInfo),
        Expr::MakeVar("pf_tmp", VariableExpression::Use)));
      AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
      /* semantic: call('adjust_flag') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlAf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              rInsn.GetOperand(0),
              rInsn.GetOperand(1)),
            Expr::MakeVar("res", VariableExpression::Use)),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))));
      /* semantic: op0.val = res.val */
      AllExpr.push_back(Expr::MakeAssign(
        rInsn.GetOperand(0),
        Expr::MakeVar("res", VariableExpression::Use)));
      /* semantic: free_var('res') */
      AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instruction
 * mnemonic: push
 * operand: ['SS']
 * opcode: 16
 * attr: ['nm64']
 * semantic: alloc_var('pushed_value', stack.bit);
pushed_value = sign_extend(op0.val, int(stack.bit, stack.bit));
stack.id -= stack.size;
stack.mem = pushed_value;
free_var('pushed_value');

**/
bool X86Architecture::Table_1_16(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (Mode != X86_Bit_64)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Push);
      if (Operand__SS(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('pushed_value', stack.bit) */
        AllExpr.push_back(Expr::MakeVar("pushed_value", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()))));
        /* semantic: pushed_value = sign_extend(op0.val, int(stack.bit, stack.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pushed_value", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpSext, rInsn.GetOperand(0), Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()))))));
        /* semantic: stack.id -= stack.size */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
            Expr::MakeBitVector(
              m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())),
              m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())) / 8)))
        );
        /* semantic: stack.mem = pushed_value */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeMem(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), nullptr, Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo)),
          Expr::MakeVar("pushed_value", VariableExpression::Use)));
        /* semantic: free_var('pushed_value') */
        AllExpr.push_back(Expr::MakeVar("pushed_value", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    else
      return false;
}

/** instruction
 * mnemonic: pop
 * operand: ['SS']
 * opcode: 17
 * attr: ['nm64']
 * semantic: alloc_var('popped_value', stack.bit);
popped_value = stack.mem;
stack.id += stack.size;
op0.val = popped_value;
free_var('popped_value');

**/
bool X86Architecture::Table_1_17(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (Mode != X86_Bit_64)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pop);
      if (Operand__SS(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('popped_value', stack.bit) */
        AllExpr.push_back(Expr::MakeVar("popped_value", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()))));
        /* semantic: popped_value = stack.mem */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("popped_value", VariableExpression::Use),
          Expr::MakeMem(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), nullptr, Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo))));
        /* semantic: stack.id += stack.size */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeBinOp(
            OperationExpression::OpAdd,
            Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
            Expr::MakeBitVector(
              m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())),
              m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())) / 8)))
        );
        /* semantic: op0.val = popped_value */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("popped_value", VariableExpression::Use)));
        /* semantic: free_var('popped_value') */
        AllExpr.push_back(Expr::MakeVar("popped_value", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    else
      return false;
}

/** instruction
 * mnemonic: sbb
 * test_flags: ['cf']
 * semantic: alloc_var('res', op0.bit);
res = op0.val - op1.val - bit_cast(cf.id, int(op0.bit, op0.bit));
call('overflow_flag_sub');
call('carry_flag_sub');
call('sign_flag');
call('zero_flag');
call('parity_flag');
call('adjust_flag');
op0.val = res.val;
free_var('res');

 * operand: ['Eb', 'Gb']
 * opcode: 18
 * update_flags: ['cf', 'pf', 'af', 'zf', 'sf', 'of']
**/
bool X86Architecture::Table_1_18(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Sbb);
    if (Operand__Eb_Gb(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    {
      Expression::LSPType AllExpr;
      rInsn.SetTestedFlags(X86_FlCf);
      rInsn.SetUpdatedFlags(X86_FlCf | X86_FlPf | X86_FlAf | X86_FlZf | X86_FlSf | X86_FlOf);
      /* semantic: alloc_var('res', op0.bit) */
      AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
      /* semantic: res = op0.val - op1.val - bit_cast(cf.id, int(op0.bit, op0.bit)) */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("res", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpSub,
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            rInsn.GetOperand(0),
            rInsn.GetOperand(1)),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeId(X86_FlCf, &m_CpuInfo), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize())))));
      /* semantic: call('overflow_flag_sub') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlOf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeBinOp(
            OperationExpression::OpAnd,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              rInsn.GetOperand(0),
              Expr::MakeVar("res", VariableExpression::Use)),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              rInsn.GetOperand(0),
              rInsn.GetOperand(1))),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
      /* semantic: call('carry_flag_sub') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlCf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                rInsn.GetOperand(1)),
              Expr::MakeVar("res", VariableExpression::Use)),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                Expr::MakeVar("res", VariableExpression::Use)),
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                rInsn.GetOperand(1)))),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
      /* semantic: call('sign_flag') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlSf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
      /* semantic: call('zero_flag') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlZf, &m_CpuInfo),
        Expr::MakeTernaryCond(ConditionExpression::CondEq,
        Expr::MakeVar("res", VariableExpression::Use),
        Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
        Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))));
      /* semantic: call('parity_flag') */
      AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBitVector(1, 0x1)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlPf, &m_CpuInfo),
        Expr::MakeVar("pf_tmp", VariableExpression::Use)));
      AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
      /* semantic: call('adjust_flag') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlAf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              rInsn.GetOperand(0),
              rInsn.GetOperand(1)),
            Expr::MakeVar("res", VariableExpression::Use)),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))));
      /* semantic: op0.val = res.val */
      AllExpr.push_back(Expr::MakeAssign(
        rInsn.GetOperand(0),
        Expr::MakeVar("res", VariableExpression::Use)));
      /* semantic: free_var('res') */
      AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instruction
 * mnemonic: sbb
 * test_flags: ['cf']
 * semantic: alloc_var('res', op0.bit);
res = op0.val - op1.val - bit_cast(cf.id, int(op0.bit, op0.bit));
call('overflow_flag_sub');
call('carry_flag_sub');
call('sign_flag');
call('zero_flag');
call('parity_flag');
call('adjust_flag');
op0.val = res.val;
free_var('res');

 * operand: ['Ev', 'Gv']
 * opcode: 19
 * update_flags: ['cf', 'pf', 'af', 'zf', 'sf', 'of']
**/
bool X86Architecture::Table_1_19(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Sbb);
    if (Operand__Ev_Gv(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    {
      Expression::LSPType AllExpr;
      rInsn.SetTestedFlags(X86_FlCf);
      rInsn.SetUpdatedFlags(X86_FlCf | X86_FlPf | X86_FlAf | X86_FlZf | X86_FlSf | X86_FlOf);
      /* semantic: alloc_var('res', op0.bit) */
      AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
      /* semantic: res = op0.val - op1.val - bit_cast(cf.id, int(op0.bit, op0.bit)) */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("res", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpSub,
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            rInsn.GetOperand(0),
            rInsn.GetOperand(1)),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeId(X86_FlCf, &m_CpuInfo), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize())))));
      /* semantic: call('overflow_flag_sub') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlOf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeBinOp(
            OperationExpression::OpAnd,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              rInsn.GetOperand(0),
              Expr::MakeVar("res", VariableExpression::Use)),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              rInsn.GetOperand(0),
              rInsn.GetOperand(1))),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
      /* semantic: call('carry_flag_sub') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlCf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                rInsn.GetOperand(1)),
              Expr::MakeVar("res", VariableExpression::Use)),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                Expr::MakeVar("res", VariableExpression::Use)),
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                rInsn.GetOperand(1)))),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
      /* semantic: call('sign_flag') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlSf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
      /* semantic: call('zero_flag') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlZf, &m_CpuInfo),
        Expr::MakeTernaryCond(ConditionExpression::CondEq,
        Expr::MakeVar("res", VariableExpression::Use),
        Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
        Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))));
      /* semantic: call('parity_flag') */
      AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBitVector(1, 0x1)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlPf, &m_CpuInfo),
        Expr::MakeVar("pf_tmp", VariableExpression::Use)));
      AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
      /* semantic: call('adjust_flag') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlAf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              rInsn.GetOperand(0),
              rInsn.GetOperand(1)),
            Expr::MakeVar("res", VariableExpression::Use)),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))));
      /* semantic: op0.val = res.val */
      AllExpr.push_back(Expr::MakeAssign(
        rInsn.GetOperand(0),
        Expr::MakeVar("res", VariableExpression::Use)));
      /* semantic: free_var('res') */
      AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instruction
 * mnemonic: sbb
 * test_flags: ['cf']
 * semantic: alloc_var('res', op0.bit);
res = op0.val - op1.val - bit_cast(cf.id, int(op0.bit, op0.bit));
call('overflow_flag_sub');
call('carry_flag_sub');
call('sign_flag');
call('zero_flag');
call('parity_flag');
call('adjust_flag');
op0.val = res.val;
free_var('res');

 * operand: ['Gb', 'Eb']
 * opcode: 1a
 * update_flags: ['cf', 'pf', 'af', 'zf', 'sf', 'of']
**/
bool X86Architecture::Table_1_1a(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Sbb);
    if (Operand__Gb_Eb(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    {
      Expression::LSPType AllExpr;
      rInsn.SetTestedFlags(X86_FlCf);
      rInsn.SetUpdatedFlags(X86_FlCf | X86_FlPf | X86_FlAf | X86_FlZf | X86_FlSf | X86_FlOf);
      /* semantic: alloc_var('res', op0.bit) */
      AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
      /* semantic: res = op0.val - op1.val - bit_cast(cf.id, int(op0.bit, op0.bit)) */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("res", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpSub,
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            rInsn.GetOperand(0),
            rInsn.GetOperand(1)),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeId(X86_FlCf, &m_CpuInfo), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize())))));
      /* semantic: call('overflow_flag_sub') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlOf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeBinOp(
            OperationExpression::OpAnd,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              rInsn.GetOperand(0),
              Expr::MakeVar("res", VariableExpression::Use)),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              rInsn.GetOperand(0),
              rInsn.GetOperand(1))),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
      /* semantic: call('carry_flag_sub') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlCf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                rInsn.GetOperand(1)),
              Expr::MakeVar("res", VariableExpression::Use)),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                Expr::MakeVar("res", VariableExpression::Use)),
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                rInsn.GetOperand(1)))),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
      /* semantic: call('sign_flag') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlSf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
      /* semantic: call('zero_flag') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlZf, &m_CpuInfo),
        Expr::MakeTernaryCond(ConditionExpression::CondEq,
        Expr::MakeVar("res", VariableExpression::Use),
        Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
        Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))));
      /* semantic: call('parity_flag') */
      AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBitVector(1, 0x1)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlPf, &m_CpuInfo),
        Expr::MakeVar("pf_tmp", VariableExpression::Use)));
      AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
      /* semantic: call('adjust_flag') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlAf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              rInsn.GetOperand(0),
              rInsn.GetOperand(1)),
            Expr::MakeVar("res", VariableExpression::Use)),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))));
      /* semantic: op0.val = res.val */
      AllExpr.push_back(Expr::MakeAssign(
        rInsn.GetOperand(0),
        Expr::MakeVar("res", VariableExpression::Use)));
      /* semantic: free_var('res') */
      AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instruction
 * mnemonic: sbb
 * test_flags: ['cf']
 * semantic: alloc_var('res', op0.bit);
res = op0.val - op1.val - bit_cast(cf.id, int(op0.bit, op0.bit));
call('overflow_flag_sub');
call('carry_flag_sub');
call('sign_flag');
call('zero_flag');
call('parity_flag');
call('adjust_flag');
op0.val = res.val;
free_var('res');

 * operand: ['Gv', 'Ev']
 * opcode: 1b
 * update_flags: ['cf', 'pf', 'af', 'zf', 'sf', 'of']
**/
bool X86Architecture::Table_1_1b(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Sbb);
    if (Operand__Gv_Ev(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    {
      Expression::LSPType AllExpr;
      rInsn.SetTestedFlags(X86_FlCf);
      rInsn.SetUpdatedFlags(X86_FlCf | X86_FlPf | X86_FlAf | X86_FlZf | X86_FlSf | X86_FlOf);
      /* semantic: alloc_var('res', op0.bit) */
      AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
      /* semantic: res = op0.val - op1.val - bit_cast(cf.id, int(op0.bit, op0.bit)) */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("res", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpSub,
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            rInsn.GetOperand(0),
            rInsn.GetOperand(1)),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeId(X86_FlCf, &m_CpuInfo), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize())))));
      /* semantic: call('overflow_flag_sub') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlOf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeBinOp(
            OperationExpression::OpAnd,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              rInsn.GetOperand(0),
              Expr::MakeVar("res", VariableExpression::Use)),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              rInsn.GetOperand(0),
              rInsn.GetOperand(1))),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
      /* semantic: call('carry_flag_sub') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlCf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                rInsn.GetOperand(1)),
              Expr::MakeVar("res", VariableExpression::Use)),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                Expr::MakeVar("res", VariableExpression::Use)),
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                rInsn.GetOperand(1)))),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
      /* semantic: call('sign_flag') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlSf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
      /* semantic: call('zero_flag') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlZf, &m_CpuInfo),
        Expr::MakeTernaryCond(ConditionExpression::CondEq,
        Expr::MakeVar("res", VariableExpression::Use),
        Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
        Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))));
      /* semantic: call('parity_flag') */
      AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBitVector(1, 0x1)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlPf, &m_CpuInfo),
        Expr::MakeVar("pf_tmp", VariableExpression::Use)));
      AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
      /* semantic: call('adjust_flag') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlAf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              rInsn.GetOperand(0),
              rInsn.GetOperand(1)),
            Expr::MakeVar("res", VariableExpression::Use)),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))));
      /* semantic: op0.val = res.val */
      AllExpr.push_back(Expr::MakeAssign(
        rInsn.GetOperand(0),
        Expr::MakeVar("res", VariableExpression::Use)));
      /* semantic: free_var('res') */
      AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instruction
 * mnemonic: sbb
 * test_flags: ['cf']
 * semantic: alloc_var('res', op0.bit);
res = op0.val - op1.val - bit_cast(cf.id, int(op0.bit, op0.bit));
call('overflow_flag_sub');
call('carry_flag_sub');
call('sign_flag');
call('zero_flag');
call('parity_flag');
call('adjust_flag');
op0.val = res.val;
free_var('res');

 * operand: ['AL', 'Ib']
 * opcode: 1c
 * update_flags: ['cf', 'pf', 'af', 'zf', 'sf', 'of']
**/
bool X86Architecture::Table_1_1c(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Sbb);
    if (Operand__AL_Ib(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    {
      Expression::LSPType AllExpr;
      rInsn.SetTestedFlags(X86_FlCf);
      rInsn.SetUpdatedFlags(X86_FlCf | X86_FlPf | X86_FlAf | X86_FlZf | X86_FlSf | X86_FlOf);
      /* semantic: alloc_var('res', op0.bit) */
      AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
      /* semantic: res = op0.val - op1.val - bit_cast(cf.id, int(op0.bit, op0.bit)) */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("res", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpSub,
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            rInsn.GetOperand(0),
            rInsn.GetOperand(1)),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeId(X86_FlCf, &m_CpuInfo), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize())))));
      /* semantic: call('overflow_flag_sub') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlOf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeBinOp(
            OperationExpression::OpAnd,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              rInsn.GetOperand(0),
              Expr::MakeVar("res", VariableExpression::Use)),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              rInsn.GetOperand(0),
              rInsn.GetOperand(1))),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
      /* semantic: call('carry_flag_sub') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlCf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                rInsn.GetOperand(1)),
              Expr::MakeVar("res", VariableExpression::Use)),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                Expr::MakeVar("res", VariableExpression::Use)),
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                rInsn.GetOperand(1)))),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
      /* semantic: call('sign_flag') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlSf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
      /* semantic: call('zero_flag') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlZf, &m_CpuInfo),
        Expr::MakeTernaryCond(ConditionExpression::CondEq,
        Expr::MakeVar("res", VariableExpression::Use),
        Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
        Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))));
      /* semantic: call('parity_flag') */
      AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBitVector(1, 0x1)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlPf, &m_CpuInfo),
        Expr::MakeVar("pf_tmp", VariableExpression::Use)));
      AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
      /* semantic: call('adjust_flag') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlAf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              rInsn.GetOperand(0),
              rInsn.GetOperand(1)),
            Expr::MakeVar("res", VariableExpression::Use)),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))));
      /* semantic: op0.val = res.val */
      AllExpr.push_back(Expr::MakeAssign(
        rInsn.GetOperand(0),
        Expr::MakeVar("res", VariableExpression::Use)));
      /* semantic: free_var('res') */
      AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instruction
 * mnemonic: sbb
 * test_flags: ['cf']
 * semantic: alloc_var('res', op0.bit);
res = op0.val - op1.val - bit_cast(cf.id, int(op0.bit, op0.bit));
call('overflow_flag_sub');
call('carry_flag_sub');
call('sign_flag');
call('zero_flag');
call('parity_flag');
call('adjust_flag');
op0.val = res.val;
free_var('res');

 * operand: ['rAX', 'Iz']
 * opcode: 1d
 * update_flags: ['cf', 'pf', 'af', 'zf', 'sf', 'of']
**/
bool X86Architecture::Table_1_1d(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Sbb);
    if (Operand__rAX_Iz(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    {
      Expression::LSPType AllExpr;
      rInsn.SetTestedFlags(X86_FlCf);
      rInsn.SetUpdatedFlags(X86_FlCf | X86_FlPf | X86_FlAf | X86_FlZf | X86_FlSf | X86_FlOf);
      /* semantic: alloc_var('res', op0.bit) */
      AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
      /* semantic: res = op0.val - op1.val - bit_cast(cf.id, int(op0.bit, op0.bit)) */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("res", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpSub,
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            rInsn.GetOperand(0),
            rInsn.GetOperand(1)),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeId(X86_FlCf, &m_CpuInfo), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize())))));
      /* semantic: call('overflow_flag_sub') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlOf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeBinOp(
            OperationExpression::OpAnd,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              rInsn.GetOperand(0),
              Expr::MakeVar("res", VariableExpression::Use)),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              rInsn.GetOperand(0),
              rInsn.GetOperand(1))),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
      /* semantic: call('carry_flag_sub') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlCf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                rInsn.GetOperand(1)),
              Expr::MakeVar("res", VariableExpression::Use)),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                Expr::MakeVar("res", VariableExpression::Use)),
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                rInsn.GetOperand(1)))),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
      /* semantic: call('sign_flag') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlSf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
      /* semantic: call('zero_flag') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlZf, &m_CpuInfo),
        Expr::MakeTernaryCond(ConditionExpression::CondEq,
        Expr::MakeVar("res", VariableExpression::Use),
        Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
        Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))));
      /* semantic: call('parity_flag') */
      AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBitVector(1, 0x1)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlPf, &m_CpuInfo),
        Expr::MakeVar("pf_tmp", VariableExpression::Use)));
      AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
      /* semantic: call('adjust_flag') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlAf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              rInsn.GetOperand(0),
              rInsn.GetOperand(1)),
            Expr::MakeVar("res", VariableExpression::Use)),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))));
      /* semantic: op0.val = res.val */
      AllExpr.push_back(Expr::MakeAssign(
        rInsn.GetOperand(0),
        Expr::MakeVar("res", VariableExpression::Use)));
      /* semantic: free_var('res') */
      AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instruction
 * mnemonic: push
 * operand: ['DS']
 * opcode: 1e
 * attr: ['nm64']
 * semantic: alloc_var('pushed_value', stack.bit);
pushed_value = sign_extend(op0.val, int(stack.bit, stack.bit));
stack.id -= stack.size;
stack.mem = pushed_value;
free_var('pushed_value');

**/
bool X86Architecture::Table_1_1e(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (Mode != X86_Bit_64)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Push);
      if (Operand__DS(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('pushed_value', stack.bit) */
        AllExpr.push_back(Expr::MakeVar("pushed_value", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()))));
        /* semantic: pushed_value = sign_extend(op0.val, int(stack.bit, stack.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pushed_value", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpSext, rInsn.GetOperand(0), Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()))))));
        /* semantic: stack.id -= stack.size */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
            Expr::MakeBitVector(
              m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())),
              m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())) / 8)))
        );
        /* semantic: stack.mem = pushed_value */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeMem(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), nullptr, Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo)),
          Expr::MakeVar("pushed_value", VariableExpression::Use)));
        /* semantic: free_var('pushed_value') */
        AllExpr.push_back(Expr::MakeVar("pushed_value", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    else
      return false;
}

/** instruction
 * mnemonic: pop
 * operand: ['DS']
 * opcode: 1f
 * attr: ['nm64']
 * semantic: alloc_var('popped_value', stack.bit);
popped_value = stack.mem;
stack.id += stack.size;
op0.val = popped_value;
free_var('popped_value');

**/
bool X86Architecture::Table_1_1f(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (Mode != X86_Bit_64)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pop);
      if (Operand__DS(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('popped_value', stack.bit) */
        AllExpr.push_back(Expr::MakeVar("popped_value", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()))));
        /* semantic: popped_value = stack.mem */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("popped_value", VariableExpression::Use),
          Expr::MakeMem(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), nullptr, Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo))));
        /* semantic: stack.id += stack.size */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeBinOp(
            OperationExpression::OpAdd,
            Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
            Expr::MakeBitVector(
              m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())),
              m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())) / 8)))
        );
        /* semantic: op0.val = popped_value */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("popped_value", VariableExpression::Use)));
        /* semantic: free_var('popped_value') */
        AllExpr.push_back(Expr::MakeVar("popped_value", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    else
      return false;
}

/** instruction
 * mnemonic: and
 * clear_flags: ['af', 'of', 'cf']
 * semantic: alloc_var('res', op0.bit);
res = op0.val & op1.val;
of.id = int1(0)
cf.id = int1(0)
call('sign_flag')
call('zero_flag')
call('parity_flag')
op0.val = res;
free_var('res');

 * operand: ['Eb', 'Gb']
 * opcode: 20
 * update_flags: ['cf', 'pf', 'af', 'zf', 'sf', 'of']
**/
bool X86Architecture::Table_1_20(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_And);
    if (Operand__Eb_Gb(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    {
      Expression::LSPType AllExpr;
      rInsn.SetUpdatedFlags(X86_FlCf | X86_FlPf | X86_FlAf | X86_FlZf | X86_FlSf | X86_FlOf);
      rInsn.SetClearedFlags(X86_FlAf | X86_FlOf | X86_FlCf);
      AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlAf, &m_CpuInfo), Expr::MakeBoolean(false)));
      AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlOf, &m_CpuInfo), Expr::MakeBoolean(false)));
      AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlCf, &m_CpuInfo), Expr::MakeBoolean(false)));
      /* semantic: alloc_var('res', op0.bit) */
      AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
      /* semantic: res = op0.val & op1.val */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("res", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpAnd,
          rInsn.GetOperand(0),
          rInsn.GetOperand(1))));
      /* semantic: of.id = int1(0)
      cf.id = int1(0)
      call('sign_flag')
      call('zero_flag')
      call('parity_flag')
      op0.val = res */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlOf, &m_CpuInfo),
        Expr::MakeBitVector(1, 0x0)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlCf, &m_CpuInfo),
        Expr::MakeBitVector(1, 0x0)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlSf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlZf, &m_CpuInfo),
        Expr::MakeTernaryCond(ConditionExpression::CondEq,
        Expr::MakeVar("res", VariableExpression::Use),
        Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
        Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))));
      AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBitVector(1, 0x1)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlPf, &m_CpuInfo),
        Expr::MakeVar("pf_tmp", VariableExpression::Use)));
      AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
      AllExpr.push_back(Expr::MakeAssign(
        rInsn.GetOperand(0),
        Expr::MakeVar("res", VariableExpression::Use)));
      /* semantic: free_var('res') */
      AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instruction
 * mnemonic: and
 * clear_flags: ['af', 'of', 'cf']
 * semantic: alloc_var('res', op0.bit);
res = op0.val & op1.val;
of.id = int1(0)
cf.id = int1(0)
call('sign_flag')
call('zero_flag')
call('parity_flag')
op0.val = res;
free_var('res');

 * operand: ['Ev', 'Gv']
 * opcode: 21
 * update_flags: ['cf', 'pf', 'af', 'zf', 'sf', 'of']
**/
bool X86Architecture::Table_1_21(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_And);
    if (Operand__Ev_Gv(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    {
      Expression::LSPType AllExpr;
      rInsn.SetUpdatedFlags(X86_FlCf | X86_FlPf | X86_FlAf | X86_FlZf | X86_FlSf | X86_FlOf);
      rInsn.SetClearedFlags(X86_FlAf | X86_FlOf | X86_FlCf);
      AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlAf, &m_CpuInfo), Expr::MakeBoolean(false)));
      AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlOf, &m_CpuInfo), Expr::MakeBoolean(false)));
      AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlCf, &m_CpuInfo), Expr::MakeBoolean(false)));
      /* semantic: alloc_var('res', op0.bit) */
      AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
      /* semantic: res = op0.val & op1.val */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("res", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpAnd,
          rInsn.GetOperand(0),
          rInsn.GetOperand(1))));
      /* semantic: of.id = int1(0)
      cf.id = int1(0)
      call('sign_flag')
      call('zero_flag')
      call('parity_flag')
      op0.val = res */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlOf, &m_CpuInfo),
        Expr::MakeBitVector(1, 0x0)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlCf, &m_CpuInfo),
        Expr::MakeBitVector(1, 0x0)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlSf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlZf, &m_CpuInfo),
        Expr::MakeTernaryCond(ConditionExpression::CondEq,
        Expr::MakeVar("res", VariableExpression::Use),
        Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
        Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))));
      AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBitVector(1, 0x1)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlPf, &m_CpuInfo),
        Expr::MakeVar("pf_tmp", VariableExpression::Use)));
      AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
      AllExpr.push_back(Expr::MakeAssign(
        rInsn.GetOperand(0),
        Expr::MakeVar("res", VariableExpression::Use)));
      /* semantic: free_var('res') */
      AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instruction
 * mnemonic: and
 * clear_flags: ['af', 'of', 'cf']
 * semantic: alloc_var('res', op0.bit);
res = op0.val & op1.val;
of.id = int1(0)
cf.id = int1(0)
call('sign_flag')
call('zero_flag')
call('parity_flag')
op0.val = res;
free_var('res');

 * operand: ['Gb', 'Eb']
 * opcode: 22
 * update_flags: ['cf', 'pf', 'af', 'zf', 'sf', 'of']
**/
bool X86Architecture::Table_1_22(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_And);
    if (Operand__Gb_Eb(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    {
      Expression::LSPType AllExpr;
      rInsn.SetUpdatedFlags(X86_FlCf | X86_FlPf | X86_FlAf | X86_FlZf | X86_FlSf | X86_FlOf);
      rInsn.SetClearedFlags(X86_FlAf | X86_FlOf | X86_FlCf);
      AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlAf, &m_CpuInfo), Expr::MakeBoolean(false)));
      AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlOf, &m_CpuInfo), Expr::MakeBoolean(false)));
      AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlCf, &m_CpuInfo), Expr::MakeBoolean(false)));
      /* semantic: alloc_var('res', op0.bit) */
      AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
      /* semantic: res = op0.val & op1.val */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("res", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpAnd,
          rInsn.GetOperand(0),
          rInsn.GetOperand(1))));
      /* semantic: of.id = int1(0)
      cf.id = int1(0)
      call('sign_flag')
      call('zero_flag')
      call('parity_flag')
      op0.val = res */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlOf, &m_CpuInfo),
        Expr::MakeBitVector(1, 0x0)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlCf, &m_CpuInfo),
        Expr::MakeBitVector(1, 0x0)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlSf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlZf, &m_CpuInfo),
        Expr::MakeTernaryCond(ConditionExpression::CondEq,
        Expr::MakeVar("res", VariableExpression::Use),
        Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
        Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))));
      AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBitVector(1, 0x1)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlPf, &m_CpuInfo),
        Expr::MakeVar("pf_tmp", VariableExpression::Use)));
      AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
      AllExpr.push_back(Expr::MakeAssign(
        rInsn.GetOperand(0),
        Expr::MakeVar("res", VariableExpression::Use)));
      /* semantic: free_var('res') */
      AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instruction
 * mnemonic: and
 * clear_flags: ['af', 'of', 'cf']
 * semantic: alloc_var('res', op0.bit);
res = op0.val & op1.val;
of.id = int1(0)
cf.id = int1(0)
call('sign_flag')
call('zero_flag')
call('parity_flag')
op0.val = res;
free_var('res');

 * operand: ['Gv', 'Ev']
 * opcode: 23
 * update_flags: ['cf', 'pf', 'af', 'zf', 'sf', 'of']
**/
bool X86Architecture::Table_1_23(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_And);
    if (Operand__Gv_Ev(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    {
      Expression::LSPType AllExpr;
      rInsn.SetUpdatedFlags(X86_FlCf | X86_FlPf | X86_FlAf | X86_FlZf | X86_FlSf | X86_FlOf);
      rInsn.SetClearedFlags(X86_FlAf | X86_FlOf | X86_FlCf);
      AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlAf, &m_CpuInfo), Expr::MakeBoolean(false)));
      AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlOf, &m_CpuInfo), Expr::MakeBoolean(false)));
      AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlCf, &m_CpuInfo), Expr::MakeBoolean(false)));
      /* semantic: alloc_var('res', op0.bit) */
      AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
      /* semantic: res = op0.val & op1.val */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("res", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpAnd,
          rInsn.GetOperand(0),
          rInsn.GetOperand(1))));
      /* semantic: of.id = int1(0)
      cf.id = int1(0)
      call('sign_flag')
      call('zero_flag')
      call('parity_flag')
      op0.val = res */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlOf, &m_CpuInfo),
        Expr::MakeBitVector(1, 0x0)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlCf, &m_CpuInfo),
        Expr::MakeBitVector(1, 0x0)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlSf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlZf, &m_CpuInfo),
        Expr::MakeTernaryCond(ConditionExpression::CondEq,
        Expr::MakeVar("res", VariableExpression::Use),
        Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
        Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))));
      AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBitVector(1, 0x1)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlPf, &m_CpuInfo),
        Expr::MakeVar("pf_tmp", VariableExpression::Use)));
      AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
      AllExpr.push_back(Expr::MakeAssign(
        rInsn.GetOperand(0),
        Expr::MakeVar("res", VariableExpression::Use)));
      /* semantic: free_var('res') */
      AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instruction
 * mnemonic: and
 * clear_flags: ['af', 'of', 'cf']
 * semantic: alloc_var('res', op0.bit);
res = op0.val & op1.val;
of.id = int1(0)
cf.id = int1(0)
call('sign_flag')
call('zero_flag')
call('parity_flag')
op0.val = res;
free_var('res');

 * operand: ['AL', 'Ib']
 * opcode: 24
 * update_flags: ['cf', 'pf', 'af', 'zf', 'sf', 'of']
**/
bool X86Architecture::Table_1_24(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_And);
    if (Operand__AL_Ib(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    {
      Expression::LSPType AllExpr;
      rInsn.SetUpdatedFlags(X86_FlCf | X86_FlPf | X86_FlAf | X86_FlZf | X86_FlSf | X86_FlOf);
      rInsn.SetClearedFlags(X86_FlAf | X86_FlOf | X86_FlCf);
      AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlAf, &m_CpuInfo), Expr::MakeBoolean(false)));
      AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlOf, &m_CpuInfo), Expr::MakeBoolean(false)));
      AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlCf, &m_CpuInfo), Expr::MakeBoolean(false)));
      /* semantic: alloc_var('res', op0.bit) */
      AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
      /* semantic: res = op0.val & op1.val */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("res", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpAnd,
          rInsn.GetOperand(0),
          rInsn.GetOperand(1))));
      /* semantic: of.id = int1(0)
      cf.id = int1(0)
      call('sign_flag')
      call('zero_flag')
      call('parity_flag')
      op0.val = res */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlOf, &m_CpuInfo),
        Expr::MakeBitVector(1, 0x0)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlCf, &m_CpuInfo),
        Expr::MakeBitVector(1, 0x0)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlSf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlZf, &m_CpuInfo),
        Expr::MakeTernaryCond(ConditionExpression::CondEq,
        Expr::MakeVar("res", VariableExpression::Use),
        Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
        Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))));
      AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBitVector(1, 0x1)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlPf, &m_CpuInfo),
        Expr::MakeVar("pf_tmp", VariableExpression::Use)));
      AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
      AllExpr.push_back(Expr::MakeAssign(
        rInsn.GetOperand(0),
        Expr::MakeVar("res", VariableExpression::Use)));
      /* semantic: free_var('res') */
      AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instruction
 * mnemonic: and
 * clear_flags: ['af', 'of', 'cf']
 * semantic: alloc_var('res', op0.bit);
res = op0.val & op1.val;
of.id = int1(0)
cf.id = int1(0)
call('sign_flag')
call('zero_flag')
call('parity_flag')
op0.val = res;
free_var('res');

 * operand: ['rAX', 'Iz']
 * opcode: 25
 * update_flags: ['cf', 'pf', 'af', 'zf', 'sf', 'of']
**/
bool X86Architecture::Table_1_25(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_And);
    if (Operand__rAX_Iz(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    {
      Expression::LSPType AllExpr;
      rInsn.SetUpdatedFlags(X86_FlCf | X86_FlPf | X86_FlAf | X86_FlZf | X86_FlSf | X86_FlOf);
      rInsn.SetClearedFlags(X86_FlAf | X86_FlOf | X86_FlCf);
      AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlAf, &m_CpuInfo), Expr::MakeBoolean(false)));
      AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlOf, &m_CpuInfo), Expr::MakeBoolean(false)));
      AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlCf, &m_CpuInfo), Expr::MakeBoolean(false)));
      /* semantic: alloc_var('res', op0.bit) */
      AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
      /* semantic: res = op0.val & op1.val */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("res", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpAnd,
          rInsn.GetOperand(0),
          rInsn.GetOperand(1))));
      /* semantic: of.id = int1(0)
      cf.id = int1(0)
      call('sign_flag')
      call('zero_flag')
      call('parity_flag')
      op0.val = res */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlOf, &m_CpuInfo),
        Expr::MakeBitVector(1, 0x0)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlCf, &m_CpuInfo),
        Expr::MakeBitVector(1, 0x0)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlSf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlZf, &m_CpuInfo),
        Expr::MakeTernaryCond(ConditionExpression::CondEq,
        Expr::MakeVar("res", VariableExpression::Use),
        Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
        Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))));
      AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBitVector(1, 0x1)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlPf, &m_CpuInfo),
        Expr::MakeVar("pf_tmp", VariableExpression::Use)));
      AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
      AllExpr.push_back(Expr::MakeAssign(
        rInsn.GetOperand(0),
        Expr::MakeVar("res", VariableExpression::Use)));
      /* semantic: free_var('res') */
      AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instruction
 * mnemonic: ES
 * opcode: 26
 * constraint: pfx1
**/
bool X86Architecture::Table_1_26(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.Prefix() |= X86_Prefix_ES;
    return Disassemble(rBinStrm, Offset, rInsn, Mode);
}

/** instruction
 * mnemonic: daa
 * clear_flags: ['of']
 * test_flags: ['af', 'cf']
 * semantic: alloc_var('old_al', al.bit);
alloc_var('old_cf', 1);
alloc_var('cond', 1);
alloc_var('pf_tmp', pf.bit);
old_cf = cf.id;
old_al = al.id;
cf.id = int1(0);
cond = int1(0);
if __expr and (al.id & int(al.bit, 0x0f)) > int(al.bit, 9): cond |= int1(1);
if __expr and af.id == int1(1): cond |= int1(1);
if __expr and cond == int1(1):
  if __expr and al.id > int(al.bit, 0xf9): cf.id = int1(1)
  else: cf.id = old_cf
  al.id += int(al.bit, 0x6)
  af.id = int1(1)
else:
  af.id = int1(0);
cond = int1(0);
if __expr and old_al > int(al.bit, 0x99): cond |= int1(1);
if __expr and old_cf == int1(1): cond |= int1(1);
if __expr and cond == int1(1):
  al.id += int(al.bit, 0x60)
  cf.id = int1(1)
else:
  cf.id = int1(0);
# Start updating ZF
if __expr and al.id == int(al.bit, 0): zf.id = int1(1)
else: zf.id = int1(0);
# Start updating SF
sf.id = bit_cast(al.id >> (int(al.bit, al.bit) - int(al.bit, 1)), int1(1));
# Start updating PF
pf_tmp = int1(1);
pf_tmp ^= bit_cast(al.id >> int(al.bit, 0), int1(1));
pf_tmp ^= bit_cast(al.id >> int(al.bit, 1), int1(1));
pf_tmp ^= bit_cast(al.id >> int(al.bit, 2), int1(1));
pf_tmp ^= bit_cast(al.id >> int(al.bit, 3), int1(1));
pf_tmp ^= bit_cast(al.id >> int(al.bit, 4), int1(1));
pf_tmp ^= bit_cast(al.id >> int(al.bit, 5), int1(1));
pf_tmp ^= bit_cast(al.id >> int(al.bit, 6), int1(1));
pf_tmp ^= bit_cast(al.id >> int(al.bit, 7), int1(1));
pf.id = pf_tmp;
free_var('pf_tmp');
free_var('cond');
free_var('old_cf');
free_var('old_al');

 * attr: ['nm64']
 * opcode: 27
 * update_flags: ['cf', 'pf', 'af', 'zf', 'sf', 'of']
**/
bool X86Architecture::Table_1_27(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (Mode != X86_Bit_64)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Daa);
      {
        Expression::LSPType AllExpr;
        rInsn.SetTestedFlags(X86_FlAf | X86_FlCf);
        rInsn.SetUpdatedFlags(X86_FlCf | X86_FlPf | X86_FlAf | X86_FlZf | X86_FlSf | X86_FlOf);
        rInsn.SetClearedFlags(X86_FlOf);
        AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlOf, &m_CpuInfo), Expr::MakeBoolean(false)));
        /* semantic: alloc_var('old_al', al.bit) */
        AllExpr.push_back(Expr::MakeVar("old_al", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_Reg_Al)));
        /* semantic: alloc_var('old_cf', 1) */
        AllExpr.push_back(Expr::MakeVar("old_cf", VariableExpression::Alloc, 0x1));
        /* semantic: alloc_var('cond', 1) */
        AllExpr.push_back(Expr::MakeVar("cond", VariableExpression::Alloc, 0x1));
        /* semantic: alloc_var('pf_tmp', pf.bit) */
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
        /* semantic: old_cf = cf.id */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("old_cf", VariableExpression::Use),
          Expr::MakeId(X86_FlCf, &m_CpuInfo)));
        /* semantic: old_al = al.id */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("old_al", VariableExpression::Use),
          Expr::MakeId(X86_Reg_Al, &m_CpuInfo)));
        /* semantic: cf.id = int1(0) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlCf, &m_CpuInfo),
          Expr::MakeBitVector(1, 0x0)));
        /* semantic: cond = int1(0) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("cond", VariableExpression::Use),
          Expr::MakeBitVector(1, 0x0)));
        /* semantic: if __expr and (al.id & int(al.bit, 0x0f)) > int(al.bit, 9): cond |= int1(1) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondUgt,
          Expr::MakeBinOp(
            OperationExpression::OpAnd,
            Expr::MakeId(X86_Reg_Al, &m_CpuInfo),
            Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(X86_Reg_Al), 0xf)),
          Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(X86_Reg_Al), 0x9),
          Expr::MakeAssign(
            Expr::MakeVar("cond", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpOr,
              Expr::MakeVar("cond", VariableExpression::Use),
              Expr::MakeBitVector(1, 0x1)))
        , nullptr)
        );
        /* semantic: if __expr and af.id == int1(1): cond |= int1(1) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeId(X86_FlAf, &m_CpuInfo),
          Expr::MakeBitVector(1, 0x1),
          Expr::MakeAssign(
            Expr::MakeVar("cond", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpOr,
              Expr::MakeVar("cond", VariableExpression::Use),
              Expr::MakeBitVector(1, 0x1)))
        , nullptr)
        );
        /* semantic: if __expr and cond == int1(1):
          if __expr and al.id > int(al.bit, 0xf9): cf.id = int1(1)
          else: cf.id = old_cf
          al.id += int(al.bit, 0x6)
          af.id = int1(1)
        else:
          af.id = int1(0) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeVar("cond", VariableExpression::Use),
          Expr::MakeBitVector(1, 0x1),
          Expr::MakeBind({
          Expr::MakeIfElseCond(
            ConditionExpression::CondUgt,
            Expr::MakeId(X86_Reg_Al, &m_CpuInfo),
            Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(X86_Reg_Al), 0xf9),
            Expr::MakeAssign(
              Expr::MakeId(X86_FlCf, &m_CpuInfo),
              Expr::MakeBitVector(1, 0x1)),
            Expr::MakeAssign(
              Expr::MakeId(X86_FlCf, &m_CpuInfo),
              Expr::MakeVar("old_cf", VariableExpression::Use))),
          Expr::MakeAssign(
            Expr::MakeId(X86_Reg_Al, &m_CpuInfo),
            Expr::MakeBinOp(
              OperationExpression::OpAdd,
              Expr::MakeId(X86_Reg_Al, &m_CpuInfo),
              Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(X86_Reg_Al), 0x6)))
          ,
          Expr::MakeAssign(
            Expr::MakeId(X86_FlAf, &m_CpuInfo),
            Expr::MakeBitVector(1, 0x1))})
        ,
          Expr::MakeAssign(
            Expr::MakeId(X86_FlAf, &m_CpuInfo),
            Expr::MakeBitVector(1, 0x0))));
        /* semantic: cond = int1(0) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("cond", VariableExpression::Use),
          Expr::MakeBitVector(1, 0x0)));
        /* semantic: if __expr and old_al > int(al.bit, 0x99): cond |= int1(1) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondUgt,
          Expr::MakeVar("old_al", VariableExpression::Use),
          Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(X86_Reg_Al), 0x99),
          Expr::MakeAssign(
            Expr::MakeVar("cond", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpOr,
              Expr::MakeVar("cond", VariableExpression::Use),
              Expr::MakeBitVector(1, 0x1)))
        , nullptr)
        );
        /* semantic: if __expr and old_cf == int1(1): cond |= int1(1) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeVar("old_cf", VariableExpression::Use),
          Expr::MakeBitVector(1, 0x1),
          Expr::MakeAssign(
            Expr::MakeVar("cond", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpOr,
              Expr::MakeVar("cond", VariableExpression::Use),
              Expr::MakeBitVector(1, 0x1)))
        , nullptr)
        );
        /* semantic: if __expr and cond == int1(1):
          al.id += int(al.bit, 0x60)
          cf.id = int1(1)
        else:
          cf.id = int1(0) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeVar("cond", VariableExpression::Use),
          Expr::MakeBitVector(1, 0x1),
          Expr::MakeBind({
          Expr::MakeAssign(
            Expr::MakeId(X86_Reg_Al, &m_CpuInfo),
            Expr::MakeBinOp(
              OperationExpression::OpAdd,
              Expr::MakeId(X86_Reg_Al, &m_CpuInfo),
              Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(X86_Reg_Al), 0x60)))
          ,
          Expr::MakeAssign(
            Expr::MakeId(X86_FlCf, &m_CpuInfo),
            Expr::MakeBitVector(1, 0x1))})
        ,
          Expr::MakeAssign(
            Expr::MakeId(X86_FlCf, &m_CpuInfo),
            Expr::MakeBitVector(1, 0x0))));
        /* semantic: # Start updating ZF
        if __expr and al.id == int(al.bit, 0): zf.id = int1(1)
        else: zf.id = int1(0) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeId(X86_Reg_Al, &m_CpuInfo),
          Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(X86_Reg_Al), 0x0),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlZf, &m_CpuInfo),
            Expr::MakeBitVector(1, 0x1)),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlZf, &m_CpuInfo),
            Expr::MakeBitVector(1, 0x0))));
        /* semantic: # Start updating SF
        sf.id = bit_cast(al.id >> (int(al.bit, al.bit) - int(al.bit, 1)), int1(1)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlSf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeId(X86_Reg_Al, &m_CpuInfo),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(X86_Reg_Al), m_CpuInfo.GetSizeOfRegisterInBit(X86_Reg_Al)),
              Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(X86_Reg_Al), 0x1))), Expr::MakeBitVector(1, 0x1))));
        /* semantic: # Start updating PF
        pf_tmp = int1(1) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBitVector(1, 0x1)));
        /* semantic: pf_tmp ^= bit_cast(al.id >> int(al.bit, 0), int1(1)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeId(X86_Reg_Al, &m_CpuInfo),
              Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(X86_Reg_Al), 0x0)), Expr::MakeBitVector(1, 0x1))))
        );
        /* semantic: pf_tmp ^= bit_cast(al.id >> int(al.bit, 1), int1(1)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeId(X86_Reg_Al, &m_CpuInfo),
              Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(X86_Reg_Al), 0x1)), Expr::MakeBitVector(1, 0x1))))
        );
        /* semantic: pf_tmp ^= bit_cast(al.id >> int(al.bit, 2), int1(1)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeId(X86_Reg_Al, &m_CpuInfo),
              Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(X86_Reg_Al), 0x2)), Expr::MakeBitVector(1, 0x1))))
        );
        /* semantic: pf_tmp ^= bit_cast(al.id >> int(al.bit, 3), int1(1)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeId(X86_Reg_Al, &m_CpuInfo),
              Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(X86_Reg_Al), 0x3)), Expr::MakeBitVector(1, 0x1))))
        );
        /* semantic: pf_tmp ^= bit_cast(al.id >> int(al.bit, 4), int1(1)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeId(X86_Reg_Al, &m_CpuInfo),
              Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(X86_Reg_Al), 0x4)), Expr::MakeBitVector(1, 0x1))))
        );
        /* semantic: pf_tmp ^= bit_cast(al.id >> int(al.bit, 5), int1(1)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeId(X86_Reg_Al, &m_CpuInfo),
              Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(X86_Reg_Al), 0x5)), Expr::MakeBitVector(1, 0x1))))
        );
        /* semantic: pf_tmp ^= bit_cast(al.id >> int(al.bit, 6), int1(1)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeId(X86_Reg_Al, &m_CpuInfo),
              Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(X86_Reg_Al), 0x6)), Expr::MakeBitVector(1, 0x1))))
        );
        /* semantic: pf_tmp ^= bit_cast(al.id >> int(al.bit, 7), int1(1)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeId(X86_Reg_Al, &m_CpuInfo),
              Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(X86_Reg_Al), 0x7)), Expr::MakeBitVector(1, 0x1))))
        );
        /* semantic: pf.id = pf_tmp */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlPf, &m_CpuInfo),
          Expr::MakeVar("pf_tmp", VariableExpression::Use)));
        /* semantic: free_var('pf_tmp') */
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
        /* semantic: free_var('cond') */
        AllExpr.push_back(Expr::MakeVar("cond", VariableExpression::Free));
        /* semantic: free_var('old_cf') */
        AllExpr.push_back(Expr::MakeVar("old_cf", VariableExpression::Free));
        /* semantic: free_var('old_al') */
        AllExpr.push_back(Expr::MakeVar("old_al", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    else
      return false;
}

/** instruction
 * mnemonic: sub
 * operand: ['Eb', 'Gb']
 * update_flags: ['cf', 'pf', 'af', 'zf', 'sf', 'of']
 * opcode: 28
 * semantic: alloc_var('res', op0.bit);
res = op0.val - op1.val;
call('overflow_flag_sub');
call('carry_flag_sub');
call('sign_flag');
call('zero_flag');
call('parity_flag');
call('adjust_flag');
op0.val = res;
free_var('res');

**/
bool X86Architecture::Table_1_28(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Sub);
    if (Operand__Eb_Gb(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    {
      Expression::LSPType AllExpr;
      rInsn.SetUpdatedFlags(X86_FlCf | X86_FlPf | X86_FlAf | X86_FlZf | X86_FlSf | X86_FlOf);
      /* semantic: alloc_var('res', op0.bit) */
      AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
      /* semantic: res = op0.val - op1.val */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("res", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpSub,
          rInsn.GetOperand(0),
          rInsn.GetOperand(1))));
      /* semantic: call('overflow_flag_sub') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlOf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeBinOp(
            OperationExpression::OpAnd,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              rInsn.GetOperand(0),
              Expr::MakeVar("res", VariableExpression::Use)),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              rInsn.GetOperand(0),
              rInsn.GetOperand(1))),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
      /* semantic: call('carry_flag_sub') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlCf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                rInsn.GetOperand(1)),
              Expr::MakeVar("res", VariableExpression::Use)),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                Expr::MakeVar("res", VariableExpression::Use)),
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                rInsn.GetOperand(1)))),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
      /* semantic: call('sign_flag') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlSf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
      /* semantic: call('zero_flag') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlZf, &m_CpuInfo),
        Expr::MakeTernaryCond(ConditionExpression::CondEq,
        Expr::MakeVar("res", VariableExpression::Use),
        Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
        Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))));
      /* semantic: call('parity_flag') */
      AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBitVector(1, 0x1)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlPf, &m_CpuInfo),
        Expr::MakeVar("pf_tmp", VariableExpression::Use)));
      AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
      /* semantic: call('adjust_flag') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlAf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              rInsn.GetOperand(0),
              rInsn.GetOperand(1)),
            Expr::MakeVar("res", VariableExpression::Use)),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))));
      /* semantic: op0.val = res */
      AllExpr.push_back(Expr::MakeAssign(
        rInsn.GetOperand(0),
        Expr::MakeVar("res", VariableExpression::Use)));
      /* semantic: free_var('res') */
      AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instruction
 * mnemonic: sub
 * operand: ['Ev', 'Gv']
 * update_flags: ['cf', 'pf', 'af', 'zf', 'sf', 'of']
 * opcode: 29
 * semantic: alloc_var('res', op0.bit);
res = op0.val - op1.val;
call('overflow_flag_sub');
call('carry_flag_sub');
call('sign_flag');
call('zero_flag');
call('parity_flag');
call('adjust_flag');
op0.val = res;
free_var('res');

**/
bool X86Architecture::Table_1_29(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Sub);
    if (Operand__Ev_Gv(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    {
      Expression::LSPType AllExpr;
      rInsn.SetUpdatedFlags(X86_FlCf | X86_FlPf | X86_FlAf | X86_FlZf | X86_FlSf | X86_FlOf);
      /* semantic: alloc_var('res', op0.bit) */
      AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
      /* semantic: res = op0.val - op1.val */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("res", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpSub,
          rInsn.GetOperand(0),
          rInsn.GetOperand(1))));
      /* semantic: call('overflow_flag_sub') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlOf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeBinOp(
            OperationExpression::OpAnd,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              rInsn.GetOperand(0),
              Expr::MakeVar("res", VariableExpression::Use)),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              rInsn.GetOperand(0),
              rInsn.GetOperand(1))),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
      /* semantic: call('carry_flag_sub') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlCf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                rInsn.GetOperand(1)),
              Expr::MakeVar("res", VariableExpression::Use)),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                Expr::MakeVar("res", VariableExpression::Use)),
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                rInsn.GetOperand(1)))),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
      /* semantic: call('sign_flag') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlSf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
      /* semantic: call('zero_flag') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlZf, &m_CpuInfo),
        Expr::MakeTernaryCond(ConditionExpression::CondEq,
        Expr::MakeVar("res", VariableExpression::Use),
        Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
        Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))));
      /* semantic: call('parity_flag') */
      AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBitVector(1, 0x1)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlPf, &m_CpuInfo),
        Expr::MakeVar("pf_tmp", VariableExpression::Use)));
      AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
      /* semantic: call('adjust_flag') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlAf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              rInsn.GetOperand(0),
              rInsn.GetOperand(1)),
            Expr::MakeVar("res", VariableExpression::Use)),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))));
      /* semantic: op0.val = res */
      AllExpr.push_back(Expr::MakeAssign(
        rInsn.GetOperand(0),
        Expr::MakeVar("res", VariableExpression::Use)));
      /* semantic: free_var('res') */
      AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instruction
 * mnemonic: sub
 * operand: ['Gb', 'Eb']
 * update_flags: ['cf', 'pf', 'af', 'zf', 'sf', 'of']
 * opcode: 2a
 * semantic: alloc_var('res', op0.bit);
res = op0.val - op1.val;
call('overflow_flag_sub');
call('carry_flag_sub');
call('sign_flag');
call('zero_flag');
call('parity_flag');
call('adjust_flag');
op0.val = res;
free_var('res');

**/
bool X86Architecture::Table_1_2a(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Sub);
    if (Operand__Gb_Eb(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    {
      Expression::LSPType AllExpr;
      rInsn.SetUpdatedFlags(X86_FlCf | X86_FlPf | X86_FlAf | X86_FlZf | X86_FlSf | X86_FlOf);
      /* semantic: alloc_var('res', op0.bit) */
      AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
      /* semantic: res = op0.val - op1.val */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("res", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpSub,
          rInsn.GetOperand(0),
          rInsn.GetOperand(1))));
      /* semantic: call('overflow_flag_sub') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlOf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeBinOp(
            OperationExpression::OpAnd,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              rInsn.GetOperand(0),
              Expr::MakeVar("res", VariableExpression::Use)),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              rInsn.GetOperand(0),
              rInsn.GetOperand(1))),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
      /* semantic: call('carry_flag_sub') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlCf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                rInsn.GetOperand(1)),
              Expr::MakeVar("res", VariableExpression::Use)),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                Expr::MakeVar("res", VariableExpression::Use)),
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                rInsn.GetOperand(1)))),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
      /* semantic: call('sign_flag') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlSf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
      /* semantic: call('zero_flag') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlZf, &m_CpuInfo),
        Expr::MakeTernaryCond(ConditionExpression::CondEq,
        Expr::MakeVar("res", VariableExpression::Use),
        Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
        Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))));
      /* semantic: call('parity_flag') */
      AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBitVector(1, 0x1)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlPf, &m_CpuInfo),
        Expr::MakeVar("pf_tmp", VariableExpression::Use)));
      AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
      /* semantic: call('adjust_flag') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlAf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              rInsn.GetOperand(0),
              rInsn.GetOperand(1)),
            Expr::MakeVar("res", VariableExpression::Use)),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))));
      /* semantic: op0.val = res */
      AllExpr.push_back(Expr::MakeAssign(
        rInsn.GetOperand(0),
        Expr::MakeVar("res", VariableExpression::Use)));
      /* semantic: free_var('res') */
      AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instruction
 * mnemonic: sub
 * operand: ['Gv', 'Ev']
 * update_flags: ['cf', 'pf', 'af', 'zf', 'sf', 'of']
 * opcode: 2b
 * semantic: alloc_var('res', op0.bit);
res = op0.val - op1.val;
call('overflow_flag_sub');
call('carry_flag_sub');
call('sign_flag');
call('zero_flag');
call('parity_flag');
call('adjust_flag');
op0.val = res;
free_var('res');

**/
bool X86Architecture::Table_1_2b(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Sub);
    if (Operand__Gv_Ev(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    {
      Expression::LSPType AllExpr;
      rInsn.SetUpdatedFlags(X86_FlCf | X86_FlPf | X86_FlAf | X86_FlZf | X86_FlSf | X86_FlOf);
      /* semantic: alloc_var('res', op0.bit) */
      AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
      /* semantic: res = op0.val - op1.val */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("res", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpSub,
          rInsn.GetOperand(0),
          rInsn.GetOperand(1))));
      /* semantic: call('overflow_flag_sub') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlOf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeBinOp(
            OperationExpression::OpAnd,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              rInsn.GetOperand(0),
              Expr::MakeVar("res", VariableExpression::Use)),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              rInsn.GetOperand(0),
              rInsn.GetOperand(1))),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
      /* semantic: call('carry_flag_sub') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlCf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                rInsn.GetOperand(1)),
              Expr::MakeVar("res", VariableExpression::Use)),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                Expr::MakeVar("res", VariableExpression::Use)),
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                rInsn.GetOperand(1)))),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
      /* semantic: call('sign_flag') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlSf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
      /* semantic: call('zero_flag') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlZf, &m_CpuInfo),
        Expr::MakeTernaryCond(ConditionExpression::CondEq,
        Expr::MakeVar("res", VariableExpression::Use),
        Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
        Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))));
      /* semantic: call('parity_flag') */
      AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBitVector(1, 0x1)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlPf, &m_CpuInfo),
        Expr::MakeVar("pf_tmp", VariableExpression::Use)));
      AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
      /* semantic: call('adjust_flag') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlAf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              rInsn.GetOperand(0),
              rInsn.GetOperand(1)),
            Expr::MakeVar("res", VariableExpression::Use)),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))));
      /* semantic: op0.val = res */
      AllExpr.push_back(Expr::MakeAssign(
        rInsn.GetOperand(0),
        Expr::MakeVar("res", VariableExpression::Use)));
      /* semantic: free_var('res') */
      AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instruction
 * mnemonic: sub
 * operand: ['AL', 'Ib']
 * update_flags: ['cf', 'pf', 'af', 'zf', 'sf', 'of']
 * opcode: 2c
 * semantic: alloc_var('res', op0.bit);
res = op0.val - op1.val;
call('overflow_flag_sub');
call('carry_flag_sub');
call('sign_flag');
call('zero_flag');
call('parity_flag');
call('adjust_flag');
op0.val = res;
free_var('res');

**/
bool X86Architecture::Table_1_2c(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Sub);
    if (Operand__AL_Ib(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    {
      Expression::LSPType AllExpr;
      rInsn.SetUpdatedFlags(X86_FlCf | X86_FlPf | X86_FlAf | X86_FlZf | X86_FlSf | X86_FlOf);
      /* semantic: alloc_var('res', op0.bit) */
      AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
      /* semantic: res = op0.val - op1.val */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("res", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpSub,
          rInsn.GetOperand(0),
          rInsn.GetOperand(1))));
      /* semantic: call('overflow_flag_sub') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlOf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeBinOp(
            OperationExpression::OpAnd,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              rInsn.GetOperand(0),
              Expr::MakeVar("res", VariableExpression::Use)),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              rInsn.GetOperand(0),
              rInsn.GetOperand(1))),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
      /* semantic: call('carry_flag_sub') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlCf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                rInsn.GetOperand(1)),
              Expr::MakeVar("res", VariableExpression::Use)),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                Expr::MakeVar("res", VariableExpression::Use)),
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                rInsn.GetOperand(1)))),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
      /* semantic: call('sign_flag') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlSf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
      /* semantic: call('zero_flag') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlZf, &m_CpuInfo),
        Expr::MakeTernaryCond(ConditionExpression::CondEq,
        Expr::MakeVar("res", VariableExpression::Use),
        Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
        Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))));
      /* semantic: call('parity_flag') */
      AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBitVector(1, 0x1)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlPf, &m_CpuInfo),
        Expr::MakeVar("pf_tmp", VariableExpression::Use)));
      AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
      /* semantic: call('adjust_flag') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlAf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              rInsn.GetOperand(0),
              rInsn.GetOperand(1)),
            Expr::MakeVar("res", VariableExpression::Use)),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))));
      /* semantic: op0.val = res */
      AllExpr.push_back(Expr::MakeAssign(
        rInsn.GetOperand(0),
        Expr::MakeVar("res", VariableExpression::Use)));
      /* semantic: free_var('res') */
      AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instruction
 * mnemonic: sub
 * operand: ['rAX', 'Iz']
 * update_flags: ['cf', 'pf', 'af', 'zf', 'sf', 'of']
 * opcode: 2d
 * semantic: alloc_var('res', op0.bit);
res = op0.val - op1.val;
call('overflow_flag_sub');
call('carry_flag_sub');
call('sign_flag');
call('zero_flag');
call('parity_flag');
call('adjust_flag');
op0.val = res;
free_var('res');

**/
bool X86Architecture::Table_1_2d(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Sub);
    if (Operand__rAX_Iz(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    {
      Expression::LSPType AllExpr;
      rInsn.SetUpdatedFlags(X86_FlCf | X86_FlPf | X86_FlAf | X86_FlZf | X86_FlSf | X86_FlOf);
      /* semantic: alloc_var('res', op0.bit) */
      AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
      /* semantic: res = op0.val - op1.val */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("res", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpSub,
          rInsn.GetOperand(0),
          rInsn.GetOperand(1))));
      /* semantic: call('overflow_flag_sub') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlOf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeBinOp(
            OperationExpression::OpAnd,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              rInsn.GetOperand(0),
              Expr::MakeVar("res", VariableExpression::Use)),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              rInsn.GetOperand(0),
              rInsn.GetOperand(1))),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
      /* semantic: call('carry_flag_sub') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlCf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                rInsn.GetOperand(1)),
              Expr::MakeVar("res", VariableExpression::Use)),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                Expr::MakeVar("res", VariableExpression::Use)),
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                rInsn.GetOperand(1)))),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
      /* semantic: call('sign_flag') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlSf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
      /* semantic: call('zero_flag') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlZf, &m_CpuInfo),
        Expr::MakeTernaryCond(ConditionExpression::CondEq,
        Expr::MakeVar("res", VariableExpression::Use),
        Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
        Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))));
      /* semantic: call('parity_flag') */
      AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBitVector(1, 0x1)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlPf, &m_CpuInfo),
        Expr::MakeVar("pf_tmp", VariableExpression::Use)));
      AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
      /* semantic: call('adjust_flag') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlAf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              rInsn.GetOperand(0),
              rInsn.GetOperand(1)),
            Expr::MakeVar("res", VariableExpression::Use)),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))));
      /* semantic: op0.val = res */
      AllExpr.push_back(Expr::MakeAssign(
        rInsn.GetOperand(0),
        Expr::MakeVar("res", VariableExpression::Use)));
      /* semantic: free_var('res') */
      AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instruction
 * mnemonic: CS
 * opcode: 2e
 * constraint: pfx1
**/
bool X86Architecture::Table_1_2e(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.Prefix() |= X86_Prefix_CS;
    return Disassemble(rBinStrm, Offset, rInsn, Mode);
}

/** instruction
 * mnemonic: das
 * clear_flags: ['of']
 * test_flags: ['af', 'cf']
 * semantic: alloc_var('old_al', al.bit);
alloc_var('old_cf', 1);
alloc_var('cond', 1);
alloc_var('pf_tmp', pf.bit);
old_cf = cf.id;
old_al = al.id;
cf.id = int1(0);
cond = int1(0);
if __expr and (al.id & int(al.bit, 0x0f)) > int(al.bit, 9): cond |= int1(1);
if __expr and af.id == int1(1): cond |= int1(1);
if __expr and cond == int1(1):
  if __expr and int(al.bit, 0x6) > al.id: cf.id = int1(1)
  else: cf.id = old_cf
  al.id -= int(al.bit, 0x6)
  af.id = int1(1)
else:
  af.id = int1(0);
cond = int1(0);
if __expr and old_al > int(al.bit, 0x99): cond |= int1(1);
if __expr and old_cf == int1(1): cond |= int1(1);
if __expr and cond == int1(1):
  al.id -= int(al.bit, 0x60)
  cf.id = int1(1);
# Start updating ZF
if __expr and al.id == int(al.bit, 0): zf.id = int1(1)
else: zf.id = int1(0);
# Start updating SF
sf.id = bit_cast(al.id >> (int(al.bit, al.bit) - int(al.bit, 1)), int1(1));
# Start updating PF
pf_tmp = int1(1);
pf_tmp ^= bit_cast(al.id >> int(al.bit, 0), int1(1));
pf_tmp ^= bit_cast(al.id >> int(al.bit, 1), int1(1));
pf_tmp ^= bit_cast(al.id >> int(al.bit, 2), int1(1));
pf_tmp ^= bit_cast(al.id >> int(al.bit, 3), int1(1));
pf_tmp ^= bit_cast(al.id >> int(al.bit, 4), int1(1));
pf_tmp ^= bit_cast(al.id >> int(al.bit, 5), int1(1));
pf_tmp ^= bit_cast(al.id >> int(al.bit, 6), int1(1));
pf_tmp ^= bit_cast(al.id >> int(al.bit, 7), int1(1));
pf.id = pf_tmp;
free_var('pf_tmp');
free_var('cond');
free_var('old_cf');
free_var('old_al');

 * attr: ['nm64']
 * opcode: 2f
 * update_flags: ['cf', 'pf', 'af', 'zf', 'sf', 'of']
**/
bool X86Architecture::Table_1_2f(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (Mode != X86_Bit_64)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Das);
      {
        Expression::LSPType AllExpr;
        rInsn.SetTestedFlags(X86_FlAf | X86_FlCf);
        rInsn.SetUpdatedFlags(X86_FlCf | X86_FlPf | X86_FlAf | X86_FlZf | X86_FlSf | X86_FlOf);
        rInsn.SetClearedFlags(X86_FlOf);
        AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlOf, &m_CpuInfo), Expr::MakeBoolean(false)));
        /* semantic: alloc_var('old_al', al.bit) */
        AllExpr.push_back(Expr::MakeVar("old_al", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_Reg_Al)));
        /* semantic: alloc_var('old_cf', 1) */
        AllExpr.push_back(Expr::MakeVar("old_cf", VariableExpression::Alloc, 0x1));
        /* semantic: alloc_var('cond', 1) */
        AllExpr.push_back(Expr::MakeVar("cond", VariableExpression::Alloc, 0x1));
        /* semantic: alloc_var('pf_tmp', pf.bit) */
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
        /* semantic: old_cf = cf.id */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("old_cf", VariableExpression::Use),
          Expr::MakeId(X86_FlCf, &m_CpuInfo)));
        /* semantic: old_al = al.id */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("old_al", VariableExpression::Use),
          Expr::MakeId(X86_Reg_Al, &m_CpuInfo)));
        /* semantic: cf.id = int1(0) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlCf, &m_CpuInfo),
          Expr::MakeBitVector(1, 0x0)));
        /* semantic: cond = int1(0) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("cond", VariableExpression::Use),
          Expr::MakeBitVector(1, 0x0)));
        /* semantic: if __expr and (al.id & int(al.bit, 0x0f)) > int(al.bit, 9): cond |= int1(1) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondUgt,
          Expr::MakeBinOp(
            OperationExpression::OpAnd,
            Expr::MakeId(X86_Reg_Al, &m_CpuInfo),
            Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(X86_Reg_Al), 0xf)),
          Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(X86_Reg_Al), 0x9),
          Expr::MakeAssign(
            Expr::MakeVar("cond", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpOr,
              Expr::MakeVar("cond", VariableExpression::Use),
              Expr::MakeBitVector(1, 0x1)))
        , nullptr)
        );
        /* semantic: if __expr and af.id == int1(1): cond |= int1(1) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeId(X86_FlAf, &m_CpuInfo),
          Expr::MakeBitVector(1, 0x1),
          Expr::MakeAssign(
            Expr::MakeVar("cond", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpOr,
              Expr::MakeVar("cond", VariableExpression::Use),
              Expr::MakeBitVector(1, 0x1)))
        , nullptr)
        );
        /* semantic: if __expr and cond == int1(1):
          if __expr and int(al.bit, 0x6) > al.id: cf.id = int1(1)
          else: cf.id = old_cf
          al.id -= int(al.bit, 0x6)
          af.id = int1(1)
        else:
          af.id = int1(0) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeVar("cond", VariableExpression::Use),
          Expr::MakeBitVector(1, 0x1),
          Expr::MakeBind({
          Expr::MakeIfElseCond(
            ConditionExpression::CondUgt,
            Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(X86_Reg_Al), 0x6),
            Expr::MakeId(X86_Reg_Al, &m_CpuInfo),
            Expr::MakeAssign(
              Expr::MakeId(X86_FlCf, &m_CpuInfo),
              Expr::MakeBitVector(1, 0x1)),
            Expr::MakeAssign(
              Expr::MakeId(X86_FlCf, &m_CpuInfo),
              Expr::MakeVar("old_cf", VariableExpression::Use))),
          Expr::MakeAssign(
            Expr::MakeId(X86_Reg_Al, &m_CpuInfo),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeId(X86_Reg_Al, &m_CpuInfo),
              Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(X86_Reg_Al), 0x6)))
          ,
          Expr::MakeAssign(
            Expr::MakeId(X86_FlAf, &m_CpuInfo),
            Expr::MakeBitVector(1, 0x1))})
        ,
          Expr::MakeAssign(
            Expr::MakeId(X86_FlAf, &m_CpuInfo),
            Expr::MakeBitVector(1, 0x0))));
        /* semantic: cond = int1(0) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("cond", VariableExpression::Use),
          Expr::MakeBitVector(1, 0x0)));
        /* semantic: if __expr and old_al > int(al.bit, 0x99): cond |= int1(1) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondUgt,
          Expr::MakeVar("old_al", VariableExpression::Use),
          Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(X86_Reg_Al), 0x99),
          Expr::MakeAssign(
            Expr::MakeVar("cond", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpOr,
              Expr::MakeVar("cond", VariableExpression::Use),
              Expr::MakeBitVector(1, 0x1)))
        , nullptr)
        );
        /* semantic: if __expr and old_cf == int1(1): cond |= int1(1) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeVar("old_cf", VariableExpression::Use),
          Expr::MakeBitVector(1, 0x1),
          Expr::MakeAssign(
            Expr::MakeVar("cond", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpOr,
              Expr::MakeVar("cond", VariableExpression::Use),
              Expr::MakeBitVector(1, 0x1)))
        , nullptr)
        );
        /* semantic: if __expr and cond == int1(1):
          al.id -= int(al.bit, 0x60)
          cf.id = int1(1) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeVar("cond", VariableExpression::Use),
          Expr::MakeBitVector(1, 0x1),
          Expr::MakeBind({
          Expr::MakeAssign(
            Expr::MakeId(X86_Reg_Al, &m_CpuInfo),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeId(X86_Reg_Al, &m_CpuInfo),
              Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(X86_Reg_Al), 0x60)))
          ,
          Expr::MakeAssign(
            Expr::MakeId(X86_FlCf, &m_CpuInfo),
            Expr::MakeBitVector(1, 0x1))})
        , nullptr)
        );
        /* semantic: # Start updating ZF
        if __expr and al.id == int(al.bit, 0): zf.id = int1(1)
        else: zf.id = int1(0) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeId(X86_Reg_Al, &m_CpuInfo),
          Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(X86_Reg_Al), 0x0),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlZf, &m_CpuInfo),
            Expr::MakeBitVector(1, 0x1)),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlZf, &m_CpuInfo),
            Expr::MakeBitVector(1, 0x0))));
        /* semantic: # Start updating SF
        sf.id = bit_cast(al.id >> (int(al.bit, al.bit) - int(al.bit, 1)), int1(1)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlSf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeId(X86_Reg_Al, &m_CpuInfo),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(X86_Reg_Al), m_CpuInfo.GetSizeOfRegisterInBit(X86_Reg_Al)),
              Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(X86_Reg_Al), 0x1))), Expr::MakeBitVector(1, 0x1))));
        /* semantic: # Start updating PF
        pf_tmp = int1(1) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBitVector(1, 0x1)));
        /* semantic: pf_tmp ^= bit_cast(al.id >> int(al.bit, 0), int1(1)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeId(X86_Reg_Al, &m_CpuInfo),
              Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(X86_Reg_Al), 0x0)), Expr::MakeBitVector(1, 0x1))))
        );
        /* semantic: pf_tmp ^= bit_cast(al.id >> int(al.bit, 1), int1(1)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeId(X86_Reg_Al, &m_CpuInfo),
              Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(X86_Reg_Al), 0x1)), Expr::MakeBitVector(1, 0x1))))
        );
        /* semantic: pf_tmp ^= bit_cast(al.id >> int(al.bit, 2), int1(1)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeId(X86_Reg_Al, &m_CpuInfo),
              Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(X86_Reg_Al), 0x2)), Expr::MakeBitVector(1, 0x1))))
        );
        /* semantic: pf_tmp ^= bit_cast(al.id >> int(al.bit, 3), int1(1)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeId(X86_Reg_Al, &m_CpuInfo),
              Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(X86_Reg_Al), 0x3)), Expr::MakeBitVector(1, 0x1))))
        );
        /* semantic: pf_tmp ^= bit_cast(al.id >> int(al.bit, 4), int1(1)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeId(X86_Reg_Al, &m_CpuInfo),
              Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(X86_Reg_Al), 0x4)), Expr::MakeBitVector(1, 0x1))))
        );
        /* semantic: pf_tmp ^= bit_cast(al.id >> int(al.bit, 5), int1(1)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeId(X86_Reg_Al, &m_CpuInfo),
              Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(X86_Reg_Al), 0x5)), Expr::MakeBitVector(1, 0x1))))
        );
        /* semantic: pf_tmp ^= bit_cast(al.id >> int(al.bit, 6), int1(1)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeId(X86_Reg_Al, &m_CpuInfo),
              Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(X86_Reg_Al), 0x6)), Expr::MakeBitVector(1, 0x1))))
        );
        /* semantic: pf_tmp ^= bit_cast(al.id >> int(al.bit, 7), int1(1)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeId(X86_Reg_Al, &m_CpuInfo),
              Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(X86_Reg_Al), 0x7)), Expr::MakeBitVector(1, 0x1))))
        );
        /* semantic: pf.id = pf_tmp */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlPf, &m_CpuInfo),
          Expr::MakeVar("pf_tmp", VariableExpression::Use)));
        /* semantic: free_var('pf_tmp') */
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
        /* semantic: free_var('cond') */
        AllExpr.push_back(Expr::MakeVar("cond", VariableExpression::Free));
        /* semantic: free_var('old_cf') */
        AllExpr.push_back(Expr::MakeVar("old_cf", VariableExpression::Free));
        /* semantic: free_var('old_al') */
        AllExpr.push_back(Expr::MakeVar("old_al", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    else
      return false;
}

/** instruction
 * mnemonic: xor
 * clear_flags: ['af', 'of', 'cf']
 * semantic: alloc_var('res', op0.bit);
res = op0.val ^ op1.val;
of.id = int1(0)
cf.id = int1(0)
call('sign_flag')
call('zero_flag')
call('parity_flag')
op0.val = res;
free_var('res');

 * operand: ['Eb', 'Gb']
 * opcode: 30
 * update_flags: ['cf', 'pf', 'af', 'zf', 'sf', 'of']
**/
bool X86Architecture::Table_1_30(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Xor);
    if (Operand__Eb_Gb(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    {
      Expression::LSPType AllExpr;
      rInsn.SetUpdatedFlags(X86_FlCf | X86_FlPf | X86_FlAf | X86_FlZf | X86_FlSf | X86_FlOf);
      rInsn.SetClearedFlags(X86_FlAf | X86_FlOf | X86_FlCf);
      AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlAf, &m_CpuInfo), Expr::MakeBoolean(false)));
      AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlOf, &m_CpuInfo), Expr::MakeBoolean(false)));
      AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlCf, &m_CpuInfo), Expr::MakeBoolean(false)));
      /* semantic: alloc_var('res', op0.bit) */
      AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
      /* semantic: res = op0.val ^ op1.val */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("res", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          rInsn.GetOperand(0),
          rInsn.GetOperand(1))));
      /* semantic: of.id = int1(0)
      cf.id = int1(0)
      call('sign_flag')
      call('zero_flag')
      call('parity_flag')
      op0.val = res */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlOf, &m_CpuInfo),
        Expr::MakeBitVector(1, 0x0)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlCf, &m_CpuInfo),
        Expr::MakeBitVector(1, 0x0)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlSf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlZf, &m_CpuInfo),
        Expr::MakeTernaryCond(ConditionExpression::CondEq,
        Expr::MakeVar("res", VariableExpression::Use),
        Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
        Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))));
      AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBitVector(1, 0x1)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlPf, &m_CpuInfo),
        Expr::MakeVar("pf_tmp", VariableExpression::Use)));
      AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
      AllExpr.push_back(Expr::MakeAssign(
        rInsn.GetOperand(0),
        Expr::MakeVar("res", VariableExpression::Use)));
      /* semantic: free_var('res') */
      AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instruction
 * mnemonic: xor
 * clear_flags: ['af', 'of', 'cf']
 * semantic: alloc_var('res', op0.bit);
res = op0.val ^ op1.val;
of.id = int1(0)
cf.id = int1(0)
call('sign_flag')
call('zero_flag')
call('parity_flag')
op0.val = res;
free_var('res');

 * operand: ['Ev', 'Gv']
 * opcode: 31
 * update_flags: ['cf', 'pf', 'af', 'zf', 'sf', 'of']
**/
bool X86Architecture::Table_1_31(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Xor);
    if (Operand__Ev_Gv(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    {
      Expression::LSPType AllExpr;
      rInsn.SetUpdatedFlags(X86_FlCf | X86_FlPf | X86_FlAf | X86_FlZf | X86_FlSf | X86_FlOf);
      rInsn.SetClearedFlags(X86_FlAf | X86_FlOf | X86_FlCf);
      AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlAf, &m_CpuInfo), Expr::MakeBoolean(false)));
      AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlOf, &m_CpuInfo), Expr::MakeBoolean(false)));
      AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlCf, &m_CpuInfo), Expr::MakeBoolean(false)));
      /* semantic: alloc_var('res', op0.bit) */
      AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
      /* semantic: res = op0.val ^ op1.val */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("res", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          rInsn.GetOperand(0),
          rInsn.GetOperand(1))));
      /* semantic: of.id = int1(0)
      cf.id = int1(0)
      call('sign_flag')
      call('zero_flag')
      call('parity_flag')
      op0.val = res */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlOf, &m_CpuInfo),
        Expr::MakeBitVector(1, 0x0)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlCf, &m_CpuInfo),
        Expr::MakeBitVector(1, 0x0)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlSf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlZf, &m_CpuInfo),
        Expr::MakeTernaryCond(ConditionExpression::CondEq,
        Expr::MakeVar("res", VariableExpression::Use),
        Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
        Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))));
      AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBitVector(1, 0x1)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlPf, &m_CpuInfo),
        Expr::MakeVar("pf_tmp", VariableExpression::Use)));
      AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
      AllExpr.push_back(Expr::MakeAssign(
        rInsn.GetOperand(0),
        Expr::MakeVar("res", VariableExpression::Use)));
      /* semantic: free_var('res') */
      AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instruction
 * mnemonic: xor
 * clear_flags: ['af', 'of', 'cf']
 * semantic: alloc_var('res', op0.bit);
res = op0.val ^ op1.val;
of.id = int1(0)
cf.id = int1(0)
call('sign_flag')
call('zero_flag')
call('parity_flag')
op0.val = res;
free_var('res');

 * operand: ['Gb', 'Eb']
 * opcode: 32
 * update_flags: ['cf', 'pf', 'af', 'zf', 'sf', 'of']
**/
bool X86Architecture::Table_1_32(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Xor);
    if (Operand__Gb_Eb(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    {
      Expression::LSPType AllExpr;
      rInsn.SetUpdatedFlags(X86_FlCf | X86_FlPf | X86_FlAf | X86_FlZf | X86_FlSf | X86_FlOf);
      rInsn.SetClearedFlags(X86_FlAf | X86_FlOf | X86_FlCf);
      AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlAf, &m_CpuInfo), Expr::MakeBoolean(false)));
      AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlOf, &m_CpuInfo), Expr::MakeBoolean(false)));
      AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlCf, &m_CpuInfo), Expr::MakeBoolean(false)));
      /* semantic: alloc_var('res', op0.bit) */
      AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
      /* semantic: res = op0.val ^ op1.val */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("res", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          rInsn.GetOperand(0),
          rInsn.GetOperand(1))));
      /* semantic: of.id = int1(0)
      cf.id = int1(0)
      call('sign_flag')
      call('zero_flag')
      call('parity_flag')
      op0.val = res */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlOf, &m_CpuInfo),
        Expr::MakeBitVector(1, 0x0)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlCf, &m_CpuInfo),
        Expr::MakeBitVector(1, 0x0)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlSf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlZf, &m_CpuInfo),
        Expr::MakeTernaryCond(ConditionExpression::CondEq,
        Expr::MakeVar("res", VariableExpression::Use),
        Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
        Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))));
      AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBitVector(1, 0x1)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlPf, &m_CpuInfo),
        Expr::MakeVar("pf_tmp", VariableExpression::Use)));
      AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
      AllExpr.push_back(Expr::MakeAssign(
        rInsn.GetOperand(0),
        Expr::MakeVar("res", VariableExpression::Use)));
      /* semantic: free_var('res') */
      AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instruction
 * mnemonic: xor
 * clear_flags: ['af', 'of', 'cf']
 * semantic: alloc_var('res', op0.bit);
res = op0.val ^ op1.val;
of.id = int1(0)
cf.id = int1(0)
call('sign_flag')
call('zero_flag')
call('parity_flag')
op0.val = res;
free_var('res');

 * operand: ['Gv', 'Ev']
 * opcode: 33
 * update_flags: ['cf', 'pf', 'af', 'zf', 'sf', 'of']
**/
bool X86Architecture::Table_1_33(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Xor);
    if (Operand__Gv_Ev(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    {
      Expression::LSPType AllExpr;
      rInsn.SetUpdatedFlags(X86_FlCf | X86_FlPf | X86_FlAf | X86_FlZf | X86_FlSf | X86_FlOf);
      rInsn.SetClearedFlags(X86_FlAf | X86_FlOf | X86_FlCf);
      AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlAf, &m_CpuInfo), Expr::MakeBoolean(false)));
      AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlOf, &m_CpuInfo), Expr::MakeBoolean(false)));
      AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlCf, &m_CpuInfo), Expr::MakeBoolean(false)));
      /* semantic: alloc_var('res', op0.bit) */
      AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
      /* semantic: res = op0.val ^ op1.val */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("res", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          rInsn.GetOperand(0),
          rInsn.GetOperand(1))));
      /* semantic: of.id = int1(0)
      cf.id = int1(0)
      call('sign_flag')
      call('zero_flag')
      call('parity_flag')
      op0.val = res */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlOf, &m_CpuInfo),
        Expr::MakeBitVector(1, 0x0)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlCf, &m_CpuInfo),
        Expr::MakeBitVector(1, 0x0)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlSf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlZf, &m_CpuInfo),
        Expr::MakeTernaryCond(ConditionExpression::CondEq,
        Expr::MakeVar("res", VariableExpression::Use),
        Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
        Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))));
      AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBitVector(1, 0x1)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlPf, &m_CpuInfo),
        Expr::MakeVar("pf_tmp", VariableExpression::Use)));
      AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
      AllExpr.push_back(Expr::MakeAssign(
        rInsn.GetOperand(0),
        Expr::MakeVar("res", VariableExpression::Use)));
      /* semantic: free_var('res') */
      AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instruction
 * mnemonic: xor
 * clear_flags: ['af', 'of', 'cf']
 * semantic: alloc_var('res', op0.bit);
res = op0.val ^ op1.val;
of.id = int1(0)
cf.id = int1(0)
call('sign_flag')
call('zero_flag')
call('parity_flag')
op0.val = res;
free_var('res');

 * operand: ['AL', 'Ib']
 * opcode: 34
 * update_flags: ['cf', 'pf', 'af', 'zf', 'sf', 'of']
**/
bool X86Architecture::Table_1_34(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Xor);
    if (Operand__AL_Ib(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    {
      Expression::LSPType AllExpr;
      rInsn.SetUpdatedFlags(X86_FlCf | X86_FlPf | X86_FlAf | X86_FlZf | X86_FlSf | X86_FlOf);
      rInsn.SetClearedFlags(X86_FlAf | X86_FlOf | X86_FlCf);
      AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlAf, &m_CpuInfo), Expr::MakeBoolean(false)));
      AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlOf, &m_CpuInfo), Expr::MakeBoolean(false)));
      AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlCf, &m_CpuInfo), Expr::MakeBoolean(false)));
      /* semantic: alloc_var('res', op0.bit) */
      AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
      /* semantic: res = op0.val ^ op1.val */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("res", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          rInsn.GetOperand(0),
          rInsn.GetOperand(1))));
      /* semantic: of.id = int1(0)
      cf.id = int1(0)
      call('sign_flag')
      call('zero_flag')
      call('parity_flag')
      op0.val = res */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlOf, &m_CpuInfo),
        Expr::MakeBitVector(1, 0x0)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlCf, &m_CpuInfo),
        Expr::MakeBitVector(1, 0x0)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlSf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlZf, &m_CpuInfo),
        Expr::MakeTernaryCond(ConditionExpression::CondEq,
        Expr::MakeVar("res", VariableExpression::Use),
        Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
        Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))));
      AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBitVector(1, 0x1)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlPf, &m_CpuInfo),
        Expr::MakeVar("pf_tmp", VariableExpression::Use)));
      AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
      AllExpr.push_back(Expr::MakeAssign(
        rInsn.GetOperand(0),
        Expr::MakeVar("res", VariableExpression::Use)));
      /* semantic: free_var('res') */
      AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instruction
 * mnemonic: xor
 * clear_flags: ['af', 'of', 'cf']
 * semantic: alloc_var('res', op0.bit);
res = op0.val ^ op1.val;
of.id = int1(0)
cf.id = int1(0)
call('sign_flag')
call('zero_flag')
call('parity_flag')
op0.val = res;
free_var('res');

 * operand: ['rAX', 'Iz']
 * opcode: 35
 * update_flags: ['cf', 'pf', 'af', 'zf', 'sf', 'of']
**/
bool X86Architecture::Table_1_35(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Xor);
    if (Operand__rAX_Iz(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    {
      Expression::LSPType AllExpr;
      rInsn.SetUpdatedFlags(X86_FlCf | X86_FlPf | X86_FlAf | X86_FlZf | X86_FlSf | X86_FlOf);
      rInsn.SetClearedFlags(X86_FlAf | X86_FlOf | X86_FlCf);
      AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlAf, &m_CpuInfo), Expr::MakeBoolean(false)));
      AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlOf, &m_CpuInfo), Expr::MakeBoolean(false)));
      AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlCf, &m_CpuInfo), Expr::MakeBoolean(false)));
      /* semantic: alloc_var('res', op0.bit) */
      AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
      /* semantic: res = op0.val ^ op1.val */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("res", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          rInsn.GetOperand(0),
          rInsn.GetOperand(1))));
      /* semantic: of.id = int1(0)
      cf.id = int1(0)
      call('sign_flag')
      call('zero_flag')
      call('parity_flag')
      op0.val = res */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlOf, &m_CpuInfo),
        Expr::MakeBitVector(1, 0x0)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlCf, &m_CpuInfo),
        Expr::MakeBitVector(1, 0x0)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlSf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlZf, &m_CpuInfo),
        Expr::MakeTernaryCond(ConditionExpression::CondEq,
        Expr::MakeVar("res", VariableExpression::Use),
        Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
        Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))));
      AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBitVector(1, 0x1)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlPf, &m_CpuInfo),
        Expr::MakeVar("pf_tmp", VariableExpression::Use)));
      AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
      AllExpr.push_back(Expr::MakeAssign(
        rInsn.GetOperand(0),
        Expr::MakeVar("res", VariableExpression::Use)));
      /* semantic: free_var('res') */
      AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instruction
 * mnemonic: SS
 * opcode: 36
 * constraint: pfx1
**/
bool X86Architecture::Table_1_36(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.Prefix() |= X86_Prefix_SS;
    return Disassemble(rBinStrm, Offset, rInsn, Mode);
}

/** instruction
 * mnemonic: aaa
 * clear_flags: ['of']
 * test_flags: ['af', 'cf']
 * semantic: alloc_var('cond', 1);
cond = int1(0);
if __expr and ((al.id & int(al.bit, 0x0f)) > int(al.bit, 9)): cond |= int1(1);
if __expr and af.id == int1(1): cond |= int1(1);
if __expr and cond == int1(1):
  ax.id += int(ax.bit, 0x106)
  af.id = int1(1)
  cf.id = int1(1)
else:
  af.id = int1(0)
  cf.id = int1(0);
al.id &= int(al.bit, 0x0f);
free_var('cond');

 * opcode: 37
 * update_flags: ['cf', 'pf', 'af', 'zf', 'sf', 'of']
**/
bool X86Architecture::Table_1_37(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Aaa);
    {
      Expression::LSPType AllExpr;
      rInsn.SetTestedFlags(X86_FlAf | X86_FlCf);
      rInsn.SetUpdatedFlags(X86_FlCf | X86_FlPf | X86_FlAf | X86_FlZf | X86_FlSf | X86_FlOf);
      rInsn.SetClearedFlags(X86_FlOf);
      AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlOf, &m_CpuInfo), Expr::MakeBoolean(false)));
      /* semantic: alloc_var('cond', 1) */
      AllExpr.push_back(Expr::MakeVar("cond", VariableExpression::Alloc, 0x1));
      /* semantic: cond = int1(0) */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("cond", VariableExpression::Use),
        Expr::MakeBitVector(1, 0x0)));
      /* semantic: if __expr and ((al.id & int(al.bit, 0x0f)) > int(al.bit, 9)): cond |= int1(1) */
      AllExpr.push_back(Expr::MakeIfElseCond(
        ConditionExpression::CondUgt,
        Expr::MakeBinOp(
          OperationExpression::OpAnd,
          Expr::MakeId(X86_Reg_Al, &m_CpuInfo),
          Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(X86_Reg_Al), 0xf)),
        Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(X86_Reg_Al), 0x9),
        Expr::MakeAssign(
          Expr::MakeVar("cond", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpOr,
            Expr::MakeVar("cond", VariableExpression::Use),
            Expr::MakeBitVector(1, 0x1)))
      , nullptr)
      );
      /* semantic: if __expr and af.id == int1(1): cond |= int1(1) */
      AllExpr.push_back(Expr::MakeIfElseCond(
        ConditionExpression::CondEq,
        Expr::MakeId(X86_FlAf, &m_CpuInfo),
        Expr::MakeBitVector(1, 0x1),
        Expr::MakeAssign(
          Expr::MakeVar("cond", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpOr,
            Expr::MakeVar("cond", VariableExpression::Use),
            Expr::MakeBitVector(1, 0x1)))
      , nullptr)
      );
      /* semantic: if __expr and cond == int1(1):
        ax.id += int(ax.bit, 0x106)
        af.id = int1(1)
        cf.id = int1(1)
      else:
        af.id = int1(0)
        cf.id = int1(0) */
      AllExpr.push_back(Expr::MakeIfElseCond(
        ConditionExpression::CondEq,
        Expr::MakeVar("cond", VariableExpression::Use),
        Expr::MakeBitVector(1, 0x1),
        Expr::MakeBind({
        Expr::MakeAssign(
          Expr::MakeId(X86_Reg_Ax, &m_CpuInfo),
          Expr::MakeBinOp(
            OperationExpression::OpAdd,
            Expr::MakeId(X86_Reg_Ax, &m_CpuInfo),
            Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(X86_Reg_Ax), 0x106)))
        ,
        Expr::MakeAssign(
          Expr::MakeId(X86_FlAf, &m_CpuInfo),
          Expr::MakeBitVector(1, 0x1)),
        Expr::MakeAssign(
          Expr::MakeId(X86_FlCf, &m_CpuInfo),
          Expr::MakeBitVector(1, 0x1))})
      ,
        Expr::MakeBind({
        Expr::MakeAssign(
          Expr::MakeId(X86_FlAf, &m_CpuInfo),
          Expr::MakeBitVector(1, 0x0)),
        Expr::MakeAssign(
          Expr::MakeId(X86_FlCf, &m_CpuInfo),
          Expr::MakeBitVector(1, 0x0))})
      ));
      /* semantic: al.id &= int(al.bit, 0x0f) */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_Reg_Al, &m_CpuInfo),
        Expr::MakeBinOp(
          OperationExpression::OpAnd,
          Expr::MakeId(X86_Reg_Al, &m_CpuInfo),
          Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(X86_Reg_Al), 0xf)))
      );
      /* semantic: free_var('cond') */
      AllExpr.push_back(Expr::MakeVar("cond", VariableExpression::Free));
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instruction
 * mnemonic: cmp
 * operand: ['Eb', 'Gb']
 * update_flags: ['cf', 'pf', 'af', 'zf', 'sf', 'of']
 * opcode: 38
 * semantic: alloc_var('res', op0.bit);
res = op0.val - op1.val;
call('overflow_flag_sub');
call('carry_flag_sub');
call('sign_flag');
call('zero_flag');
call('parity_flag');
call('adjust_flag');
free_var('res');

**/
bool X86Architecture::Table_1_38(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Cmp);
    if (Operand__Eb_Gb(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    {
      Expression::LSPType AllExpr;
      rInsn.SetUpdatedFlags(X86_FlCf | X86_FlPf | X86_FlAf | X86_FlZf | X86_FlSf | X86_FlOf);
      /* semantic: alloc_var('res', op0.bit) */
      AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
      /* semantic: res = op0.val - op1.val */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("res", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpSub,
          rInsn.GetOperand(0),
          rInsn.GetOperand(1))));
      /* semantic: call('overflow_flag_sub') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlOf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeBinOp(
            OperationExpression::OpAnd,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              rInsn.GetOperand(0),
              Expr::MakeVar("res", VariableExpression::Use)),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              rInsn.GetOperand(0),
              rInsn.GetOperand(1))),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
      /* semantic: call('carry_flag_sub') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlCf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                rInsn.GetOperand(1)),
              Expr::MakeVar("res", VariableExpression::Use)),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                Expr::MakeVar("res", VariableExpression::Use)),
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                rInsn.GetOperand(1)))),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
      /* semantic: call('sign_flag') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlSf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
      /* semantic: call('zero_flag') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlZf, &m_CpuInfo),
        Expr::MakeTernaryCond(ConditionExpression::CondEq,
        Expr::MakeVar("res", VariableExpression::Use),
        Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
        Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))));
      /* semantic: call('parity_flag') */
      AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBitVector(1, 0x1)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlPf, &m_CpuInfo),
        Expr::MakeVar("pf_tmp", VariableExpression::Use)));
      AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
      /* semantic: call('adjust_flag') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlAf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              rInsn.GetOperand(0),
              rInsn.GetOperand(1)),
            Expr::MakeVar("res", VariableExpression::Use)),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))));
      /* semantic: free_var('res') */
      AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instruction
 * mnemonic: cmp
 * operand: ['Ev', 'Gv']
 * update_flags: ['cf', 'pf', 'af', 'zf', 'sf', 'of']
 * opcode: 39
 * semantic: alloc_var('res', op0.bit);
res = op0.val - op1.val;
call('overflow_flag_sub');
call('carry_flag_sub');
call('sign_flag');
call('zero_flag');
call('parity_flag');
call('adjust_flag');
free_var('res');

**/
bool X86Architecture::Table_1_39(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Cmp);
    if (Operand__Ev_Gv(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    {
      Expression::LSPType AllExpr;
      rInsn.SetUpdatedFlags(X86_FlCf | X86_FlPf | X86_FlAf | X86_FlZf | X86_FlSf | X86_FlOf);
      /* semantic: alloc_var('res', op0.bit) */
      AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
      /* semantic: res = op0.val - op1.val */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("res", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpSub,
          rInsn.GetOperand(0),
          rInsn.GetOperand(1))));
      /* semantic: call('overflow_flag_sub') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlOf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeBinOp(
            OperationExpression::OpAnd,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              rInsn.GetOperand(0),
              Expr::MakeVar("res", VariableExpression::Use)),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              rInsn.GetOperand(0),
              rInsn.GetOperand(1))),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
      /* semantic: call('carry_flag_sub') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlCf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                rInsn.GetOperand(1)),
              Expr::MakeVar("res", VariableExpression::Use)),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                Expr::MakeVar("res", VariableExpression::Use)),
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                rInsn.GetOperand(1)))),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
      /* semantic: call('sign_flag') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlSf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
      /* semantic: call('zero_flag') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlZf, &m_CpuInfo),
        Expr::MakeTernaryCond(ConditionExpression::CondEq,
        Expr::MakeVar("res", VariableExpression::Use),
        Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
        Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))));
      /* semantic: call('parity_flag') */
      AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBitVector(1, 0x1)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlPf, &m_CpuInfo),
        Expr::MakeVar("pf_tmp", VariableExpression::Use)));
      AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
      /* semantic: call('adjust_flag') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlAf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              rInsn.GetOperand(0),
              rInsn.GetOperand(1)),
            Expr::MakeVar("res", VariableExpression::Use)),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))));
      /* semantic: free_var('res') */
      AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instruction
 * mnemonic: cmp
 * operand: ['Gb', 'Eb']
 * update_flags: ['cf', 'pf', 'af', 'zf', 'sf', 'of']
 * opcode: 3a
 * semantic: alloc_var('res', op0.bit);
res = op0.val - op1.val;
call('overflow_flag_sub');
call('carry_flag_sub');
call('sign_flag');
call('zero_flag');
call('parity_flag');
call('adjust_flag');
free_var('res');

**/
bool X86Architecture::Table_1_3a(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Cmp);
    if (Operand__Gb_Eb(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    {
      Expression::LSPType AllExpr;
      rInsn.SetUpdatedFlags(X86_FlCf | X86_FlPf | X86_FlAf | X86_FlZf | X86_FlSf | X86_FlOf);
      /* semantic: alloc_var('res', op0.bit) */
      AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
      /* semantic: res = op0.val - op1.val */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("res", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpSub,
          rInsn.GetOperand(0),
          rInsn.GetOperand(1))));
      /* semantic: call('overflow_flag_sub') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlOf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeBinOp(
            OperationExpression::OpAnd,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              rInsn.GetOperand(0),
              Expr::MakeVar("res", VariableExpression::Use)),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              rInsn.GetOperand(0),
              rInsn.GetOperand(1))),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
      /* semantic: call('carry_flag_sub') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlCf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                rInsn.GetOperand(1)),
              Expr::MakeVar("res", VariableExpression::Use)),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                Expr::MakeVar("res", VariableExpression::Use)),
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                rInsn.GetOperand(1)))),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
      /* semantic: call('sign_flag') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlSf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
      /* semantic: call('zero_flag') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlZf, &m_CpuInfo),
        Expr::MakeTernaryCond(ConditionExpression::CondEq,
        Expr::MakeVar("res", VariableExpression::Use),
        Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
        Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))));
      /* semantic: call('parity_flag') */
      AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBitVector(1, 0x1)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlPf, &m_CpuInfo),
        Expr::MakeVar("pf_tmp", VariableExpression::Use)));
      AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
      /* semantic: call('adjust_flag') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlAf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              rInsn.GetOperand(0),
              rInsn.GetOperand(1)),
            Expr::MakeVar("res", VariableExpression::Use)),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))));
      /* semantic: free_var('res') */
      AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instruction
 * mnemonic: cmp
 * operand: ['Gv', 'Ev']
 * update_flags: ['cf', 'pf', 'af', 'zf', 'sf', 'of']
 * opcode: 3b
 * semantic: alloc_var('res', op0.bit);
res = op0.val - op1.val;
call('overflow_flag_sub');
call('carry_flag_sub');
call('sign_flag');
call('zero_flag');
call('parity_flag');
call('adjust_flag');
free_var('res');

**/
bool X86Architecture::Table_1_3b(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Cmp);
    if (Operand__Gv_Ev(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    {
      Expression::LSPType AllExpr;
      rInsn.SetUpdatedFlags(X86_FlCf | X86_FlPf | X86_FlAf | X86_FlZf | X86_FlSf | X86_FlOf);
      /* semantic: alloc_var('res', op0.bit) */
      AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
      /* semantic: res = op0.val - op1.val */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("res", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpSub,
          rInsn.GetOperand(0),
          rInsn.GetOperand(1))));
      /* semantic: call('overflow_flag_sub') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlOf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeBinOp(
            OperationExpression::OpAnd,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              rInsn.GetOperand(0),
              Expr::MakeVar("res", VariableExpression::Use)),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              rInsn.GetOperand(0),
              rInsn.GetOperand(1))),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
      /* semantic: call('carry_flag_sub') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlCf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                rInsn.GetOperand(1)),
              Expr::MakeVar("res", VariableExpression::Use)),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                Expr::MakeVar("res", VariableExpression::Use)),
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                rInsn.GetOperand(1)))),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
      /* semantic: call('sign_flag') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlSf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
      /* semantic: call('zero_flag') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlZf, &m_CpuInfo),
        Expr::MakeTernaryCond(ConditionExpression::CondEq,
        Expr::MakeVar("res", VariableExpression::Use),
        Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
        Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))));
      /* semantic: call('parity_flag') */
      AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBitVector(1, 0x1)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlPf, &m_CpuInfo),
        Expr::MakeVar("pf_tmp", VariableExpression::Use)));
      AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
      /* semantic: call('adjust_flag') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlAf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              rInsn.GetOperand(0),
              rInsn.GetOperand(1)),
            Expr::MakeVar("res", VariableExpression::Use)),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))));
      /* semantic: free_var('res') */
      AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instruction
 * mnemonic: cmp
 * operand: ['AL', 'Ib']
 * update_flags: ['cf', 'pf', 'af', 'zf', 'sf', 'of']
 * opcode: 3c
 * semantic: alloc_var('res', op0.bit);
res = op0.val - op1.val;
call('overflow_flag_sub');
call('carry_flag_sub');
call('sign_flag');
call('zero_flag');
call('parity_flag');
call('adjust_flag');
free_var('res');

**/
bool X86Architecture::Table_1_3c(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Cmp);
    if (Operand__AL_Ib(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    {
      Expression::LSPType AllExpr;
      rInsn.SetUpdatedFlags(X86_FlCf | X86_FlPf | X86_FlAf | X86_FlZf | X86_FlSf | X86_FlOf);
      /* semantic: alloc_var('res', op0.bit) */
      AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
      /* semantic: res = op0.val - op1.val */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("res", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpSub,
          rInsn.GetOperand(0),
          rInsn.GetOperand(1))));
      /* semantic: call('overflow_flag_sub') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlOf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeBinOp(
            OperationExpression::OpAnd,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              rInsn.GetOperand(0),
              Expr::MakeVar("res", VariableExpression::Use)),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              rInsn.GetOperand(0),
              rInsn.GetOperand(1))),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
      /* semantic: call('carry_flag_sub') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlCf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                rInsn.GetOperand(1)),
              Expr::MakeVar("res", VariableExpression::Use)),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                Expr::MakeVar("res", VariableExpression::Use)),
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                rInsn.GetOperand(1)))),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
      /* semantic: call('sign_flag') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlSf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
      /* semantic: call('zero_flag') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlZf, &m_CpuInfo),
        Expr::MakeTernaryCond(ConditionExpression::CondEq,
        Expr::MakeVar("res", VariableExpression::Use),
        Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
        Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))));
      /* semantic: call('parity_flag') */
      AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBitVector(1, 0x1)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlPf, &m_CpuInfo),
        Expr::MakeVar("pf_tmp", VariableExpression::Use)));
      AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
      /* semantic: call('adjust_flag') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlAf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              rInsn.GetOperand(0),
              rInsn.GetOperand(1)),
            Expr::MakeVar("res", VariableExpression::Use)),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))));
      /* semantic: free_var('res') */
      AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instruction
 * mnemonic: cmp
 * operand: ['rAX', 'Iz']
 * update_flags: ['cf', 'pf', 'af', 'zf', 'sf', 'of']
 * opcode: 3d
 * semantic: alloc_var('res', op0.bit);
res = op0.val - op1.val;
call('overflow_flag_sub');
call('carry_flag_sub');
call('sign_flag');
call('zero_flag');
call('parity_flag');
call('adjust_flag');
free_var('res');

**/
bool X86Architecture::Table_1_3d(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Cmp);
    if (Operand__rAX_Iz(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    {
      Expression::LSPType AllExpr;
      rInsn.SetUpdatedFlags(X86_FlCf | X86_FlPf | X86_FlAf | X86_FlZf | X86_FlSf | X86_FlOf);
      /* semantic: alloc_var('res', op0.bit) */
      AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
      /* semantic: res = op0.val - op1.val */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("res", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpSub,
          rInsn.GetOperand(0),
          rInsn.GetOperand(1))));
      /* semantic: call('overflow_flag_sub') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlOf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeBinOp(
            OperationExpression::OpAnd,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              rInsn.GetOperand(0),
              Expr::MakeVar("res", VariableExpression::Use)),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              rInsn.GetOperand(0),
              rInsn.GetOperand(1))),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
      /* semantic: call('carry_flag_sub') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlCf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                rInsn.GetOperand(1)),
              Expr::MakeVar("res", VariableExpression::Use)),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                Expr::MakeVar("res", VariableExpression::Use)),
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                rInsn.GetOperand(1)))),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
      /* semantic: call('sign_flag') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlSf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
      /* semantic: call('zero_flag') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlZf, &m_CpuInfo),
        Expr::MakeTernaryCond(ConditionExpression::CondEq,
        Expr::MakeVar("res", VariableExpression::Use),
        Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
        Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))));
      /* semantic: call('parity_flag') */
      AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBitVector(1, 0x1)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlPf, &m_CpuInfo),
        Expr::MakeVar("pf_tmp", VariableExpression::Use)));
      AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
      /* semantic: call('adjust_flag') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlAf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              rInsn.GetOperand(0),
              rInsn.GetOperand(1)),
            Expr::MakeVar("res", VariableExpression::Use)),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))));
      /* semantic: free_var('res') */
      AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instruction
 * mnemonic: DS
 * opcode: 3e
 * constraint: pfx1
**/
bool X86Architecture::Table_1_3e(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.Prefix() |= X86_Prefix_DS;
    return Disassemble(rBinStrm, Offset, rInsn, Mode);
}

/** instruction
 * mnemonic: aas
 * clear_flags: ['of', 'sf', 'zf', 'pf']
 * test_flags: ['af']
 * semantic: alloc_var('cond', 1);
cond = int1(0);
if __expr and ((al.id & int(al.bit, 0x0f)) > int(al.bit, 9)): cond |= int1(1)
if __expr and af.id == int1(1): cond |= int1(1);
if __expr and cond == int1(1):
  ax.id -= int(ax.bit, 0x6)
  ah.id -= int(ah.bit, 1)
  af.id = int1(1)
  cf.id = int1(1)
else:
  cf.id = int1(0)
  af.id = int1(0);
al.id &= int(al.bit, 0x0f);
free_var('cond');

 * attr: ['nm64']
 * opcode: 3f
 * update_flags: ['cf', 'pf', 'af', 'zf', 'sf', 'of']
**/
bool X86Architecture::Table_1_3f(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (Mode != X86_Bit_64)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Aas);
      {
        Expression::LSPType AllExpr;
        rInsn.SetTestedFlags(X86_FlAf);
        rInsn.SetUpdatedFlags(X86_FlCf | X86_FlPf | X86_FlAf | X86_FlZf | X86_FlSf | X86_FlOf);
        rInsn.SetClearedFlags(X86_FlOf | X86_FlSf | X86_FlZf | X86_FlPf);
        AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlOf, &m_CpuInfo), Expr::MakeBoolean(false)));
        AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlSf, &m_CpuInfo), Expr::MakeBoolean(false)));
        AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlZf, &m_CpuInfo), Expr::MakeBoolean(false)));
        AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlPf, &m_CpuInfo), Expr::MakeBoolean(false)));
        /* semantic: alloc_var('cond', 1) */
        AllExpr.push_back(Expr::MakeVar("cond", VariableExpression::Alloc, 0x1));
        /* semantic: cond = int1(0) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("cond", VariableExpression::Use),
          Expr::MakeBitVector(1, 0x0)));
        /* semantic: if __expr and ((al.id & int(al.bit, 0x0f)) > int(al.bit, 9)): cond |= int1(1)
        if __expr and af.id == int1(1): cond |= int1(1) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondUgt,
          Expr::MakeBinOp(
            OperationExpression::OpAnd,
            Expr::MakeId(X86_Reg_Al, &m_CpuInfo),
            Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(X86_Reg_Al), 0xf)),
          Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(X86_Reg_Al), 0x9),
          Expr::MakeAssign(
            Expr::MakeVar("cond", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpOr,
              Expr::MakeVar("cond", VariableExpression::Use),
              Expr::MakeBitVector(1, 0x1)))
        , nullptr)
        );
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeId(X86_FlAf, &m_CpuInfo),
          Expr::MakeBitVector(1, 0x1),
          Expr::MakeAssign(
            Expr::MakeVar("cond", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpOr,
              Expr::MakeVar("cond", VariableExpression::Use),
              Expr::MakeBitVector(1, 0x1)))
        , nullptr)
        );
        /* semantic: if __expr and cond == int1(1):
          ax.id -= int(ax.bit, 0x6)
          ah.id -= int(ah.bit, 1)
          af.id = int1(1)
          cf.id = int1(1)
        else:
          cf.id = int1(0)
          af.id = int1(0) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeVar("cond", VariableExpression::Use),
          Expr::MakeBitVector(1, 0x1),
          Expr::MakeBind({
          Expr::MakeAssign(
            Expr::MakeId(X86_Reg_Ax, &m_CpuInfo),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeId(X86_Reg_Ax, &m_CpuInfo),
              Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(X86_Reg_Ax), 0x6)))
          ,
          Expr::MakeAssign(
            Expr::MakeId(X86_Reg_Ah, &m_CpuInfo),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeId(X86_Reg_Ah, &m_CpuInfo),
              Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(X86_Reg_Ah), 0x1)))
          ,
          Expr::MakeAssign(
            Expr::MakeId(X86_FlAf, &m_CpuInfo),
            Expr::MakeBitVector(1, 0x1)),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlCf, &m_CpuInfo),
            Expr::MakeBitVector(1, 0x1))})
        ,
          Expr::MakeBind({
          Expr::MakeAssign(
            Expr::MakeId(X86_FlCf, &m_CpuInfo),
            Expr::MakeBitVector(1, 0x0)),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlAf, &m_CpuInfo),
            Expr::MakeBitVector(1, 0x0))})
        ));
        /* semantic: al.id &= int(al.bit, 0x0f) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_Reg_Al, &m_CpuInfo),
          Expr::MakeBinOp(
            OperationExpression::OpAnd,
            Expr::MakeId(X86_Reg_Al, &m_CpuInfo),
            Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(X86_Reg_Al), 0xf)))
        );
        /* semantic: free_var('cond') */
        AllExpr.push_back(Expr::MakeVar("cond", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    else
      return false;
}

/** instructions
 * opcode: 40
 *
 * mnemonic: inc
 * operand: ['eAX']
 * update_flags: ['pf', 'af', 'zf', 'sf', 'of']
 * semantic: alloc_var('op1', op0.bit);
alloc_var('res', op0.bit);
op1.val = int(op0.bit, 1);
res.val = op0.val + op1.val;
call('overflow_flag_add');
call('sign_flag');
call('zero_flag');
call('parity_flag');
call('adjust_flag');
op0.val = res.val;
free_var('op1');
free_var('res');

 *
 * mnemonic: REX
 * attr: ['m64']
 * constraint: pfx1
 *
**/
bool X86Architecture::Table_1_40(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (Mode == X86_Bit_64)
    {
      rInsn.Length()++;
      rInsn.Prefix() |= X86_Prefix_REX;
      return Disassemble(rBinStrm, Offset, rInsn, Mode);
    }
    else
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Inc);
      if (Operand__eAX(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        rInsn.SetUpdatedFlags(X86_FlPf | X86_FlAf | X86_FlZf | X86_FlSf | X86_FlOf);
        /* semantic: alloc_var('op1', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("op1", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: op1.val = int(op0.bit, 1) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("op1", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)));
        /* semantic: res.val = op0.val + op1.val */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpAdd,
            rInsn.GetOperand(0),
            Expr::MakeVar("op1", VariableExpression::Use))));
        /* semantic: call('overflow_flag_add') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlOf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                Expr::MakeVar("res", VariableExpression::Use)),
              Expr::MakeUnOp(
                OperationExpression::OpNot,
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  rInsn.GetOperand(0),
                  Expr::MakeVar("op1", VariableExpression::Use)))),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        /* semantic: call('sign_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlSf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        /* semantic: call('zero_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlZf, &m_CpuInfo),
          Expr::MakeTernaryCond(ConditionExpression::CondEq,
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))));
        /* semantic: call('parity_flag') */
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBitVector(1, 0x1)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlPf, &m_CpuInfo),
          Expr::MakeVar("pf_tmp", VariableExpression::Use)));
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
        /* semantic: call('adjust_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlAf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                Expr::MakeVar("op1", VariableExpression::Use)),
              Expr::MakeVar("res", VariableExpression::Use)),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))));
        /* semantic: op0.val = res.val */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("res", VariableExpression::Use)));
        /* semantic: free_var('op1') */
        AllExpr.push_back(Expr::MakeVar("op1", VariableExpression::Free));
        /* semantic: free_var('res') */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
}

/** instructions
 * opcode: 41
 *
 * mnemonic: inc
 * operand: ['eCX']
 * update_flags: ['pf', 'af', 'zf', 'sf', 'of']
 * semantic: alloc_var('op1', op0.bit);
alloc_var('res', op0.bit);
op1.val = int(op0.bit, 1);
res.val = op0.val + op1.val;
call('overflow_flag_add');
call('sign_flag');
call('zero_flag');
call('parity_flag');
call('adjust_flag');
op0.val = res.val;
free_var('op1');
free_var('res');

 *
 * mnemonic: REX_b
 * attr: ['m64']
 * constraint: pfx1
 *
**/
bool X86Architecture::Table_1_41(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (Mode == X86_Bit_64)
    {
      rInsn.Length()++;
      rInsn.Prefix() |= X86_Prefix_REX_b;
      return Disassemble(rBinStrm, Offset, rInsn, Mode);
    }
    else
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Inc);
      if (Operand__eCX(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        rInsn.SetUpdatedFlags(X86_FlPf | X86_FlAf | X86_FlZf | X86_FlSf | X86_FlOf);
        /* semantic: alloc_var('op1', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("op1", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: op1.val = int(op0.bit, 1) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("op1", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)));
        /* semantic: res.val = op0.val + op1.val */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpAdd,
            rInsn.GetOperand(0),
            Expr::MakeVar("op1", VariableExpression::Use))));
        /* semantic: call('overflow_flag_add') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlOf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                Expr::MakeVar("res", VariableExpression::Use)),
              Expr::MakeUnOp(
                OperationExpression::OpNot,
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  rInsn.GetOperand(0),
                  Expr::MakeVar("op1", VariableExpression::Use)))),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        /* semantic: call('sign_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlSf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        /* semantic: call('zero_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlZf, &m_CpuInfo),
          Expr::MakeTernaryCond(ConditionExpression::CondEq,
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))));
        /* semantic: call('parity_flag') */
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBitVector(1, 0x1)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlPf, &m_CpuInfo),
          Expr::MakeVar("pf_tmp", VariableExpression::Use)));
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
        /* semantic: call('adjust_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlAf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                Expr::MakeVar("op1", VariableExpression::Use)),
              Expr::MakeVar("res", VariableExpression::Use)),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))));
        /* semantic: op0.val = res.val */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("res", VariableExpression::Use)));
        /* semantic: free_var('op1') */
        AllExpr.push_back(Expr::MakeVar("op1", VariableExpression::Free));
        /* semantic: free_var('res') */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
}

/** instructions
 * opcode: 42
 *
 * mnemonic: inc
 * operand: ['eDX']
 * update_flags: ['pf', 'af', 'zf', 'sf', 'of']
 * semantic: alloc_var('op1', op0.bit);
alloc_var('res', op0.bit);
op1.val = int(op0.bit, 1);
res.val = op0.val + op1.val;
call('overflow_flag_add');
call('sign_flag');
call('zero_flag');
call('parity_flag');
call('adjust_flag');
op0.val = res.val;
free_var('op1');
free_var('res');

 *
 * mnemonic: REX_x
 * attr: ['m64']
 * constraint: pfx1
 *
**/
bool X86Architecture::Table_1_42(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (Mode == X86_Bit_64)
    {
      rInsn.Length()++;
      rInsn.Prefix() |= X86_Prefix_REX_x;
      return Disassemble(rBinStrm, Offset, rInsn, Mode);
    }
    else
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Inc);
      if (Operand__eDX(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        rInsn.SetUpdatedFlags(X86_FlPf | X86_FlAf | X86_FlZf | X86_FlSf | X86_FlOf);
        /* semantic: alloc_var('op1', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("op1", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: op1.val = int(op0.bit, 1) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("op1", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)));
        /* semantic: res.val = op0.val + op1.val */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpAdd,
            rInsn.GetOperand(0),
            Expr::MakeVar("op1", VariableExpression::Use))));
        /* semantic: call('overflow_flag_add') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlOf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                Expr::MakeVar("res", VariableExpression::Use)),
              Expr::MakeUnOp(
                OperationExpression::OpNot,
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  rInsn.GetOperand(0),
                  Expr::MakeVar("op1", VariableExpression::Use)))),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        /* semantic: call('sign_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlSf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        /* semantic: call('zero_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlZf, &m_CpuInfo),
          Expr::MakeTernaryCond(ConditionExpression::CondEq,
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))));
        /* semantic: call('parity_flag') */
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBitVector(1, 0x1)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlPf, &m_CpuInfo),
          Expr::MakeVar("pf_tmp", VariableExpression::Use)));
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
        /* semantic: call('adjust_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlAf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                Expr::MakeVar("op1", VariableExpression::Use)),
              Expr::MakeVar("res", VariableExpression::Use)),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))));
        /* semantic: op0.val = res.val */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("res", VariableExpression::Use)));
        /* semantic: free_var('op1') */
        AllExpr.push_back(Expr::MakeVar("op1", VariableExpression::Free));
        /* semantic: free_var('res') */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
}

/** instructions
 * opcode: 43
 *
 * mnemonic: inc
 * operand: ['eBX']
 * update_flags: ['pf', 'af', 'zf', 'sf', 'of']
 * semantic: alloc_var('op1', op0.bit);
alloc_var('res', op0.bit);
op1.val = int(op0.bit, 1);
res.val = op0.val + op1.val;
call('overflow_flag_add');
call('sign_flag');
call('zero_flag');
call('parity_flag');
call('adjust_flag');
op0.val = res.val;
free_var('op1');
free_var('res');

 *
 * mnemonic: REX_xb
 * attr: ['m64']
 * constraint: pfx1
 *
**/
bool X86Architecture::Table_1_43(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (Mode == X86_Bit_64)
    {
      rInsn.Length()++;
      rInsn.Prefix() |= X86_Prefix_REX_xb;
      return Disassemble(rBinStrm, Offset, rInsn, Mode);
    }
    else
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Inc);
      if (Operand__eBX(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        rInsn.SetUpdatedFlags(X86_FlPf | X86_FlAf | X86_FlZf | X86_FlSf | X86_FlOf);
        /* semantic: alloc_var('op1', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("op1", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: op1.val = int(op0.bit, 1) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("op1", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)));
        /* semantic: res.val = op0.val + op1.val */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpAdd,
            rInsn.GetOperand(0),
            Expr::MakeVar("op1", VariableExpression::Use))));
        /* semantic: call('overflow_flag_add') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlOf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                Expr::MakeVar("res", VariableExpression::Use)),
              Expr::MakeUnOp(
                OperationExpression::OpNot,
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  rInsn.GetOperand(0),
                  Expr::MakeVar("op1", VariableExpression::Use)))),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        /* semantic: call('sign_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlSf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        /* semantic: call('zero_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlZf, &m_CpuInfo),
          Expr::MakeTernaryCond(ConditionExpression::CondEq,
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))));
        /* semantic: call('parity_flag') */
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBitVector(1, 0x1)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlPf, &m_CpuInfo),
          Expr::MakeVar("pf_tmp", VariableExpression::Use)));
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
        /* semantic: call('adjust_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlAf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                Expr::MakeVar("op1", VariableExpression::Use)),
              Expr::MakeVar("res", VariableExpression::Use)),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))));
        /* semantic: op0.val = res.val */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("res", VariableExpression::Use)));
        /* semantic: free_var('op1') */
        AllExpr.push_back(Expr::MakeVar("op1", VariableExpression::Free));
        /* semantic: free_var('res') */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
}

/** instructions
 * opcode: 44
 *
 * mnemonic: inc
 * operand: ['eSP']
 * update_flags: ['pf', 'af', 'zf', 'sf', 'of']
 * semantic: alloc_var('op1', op0.bit);
alloc_var('res', op0.bit);
op1.val = int(op0.bit, 1);
res.val = op0.val + op1.val;
call('overflow_flag_add');
call('sign_flag');
call('zero_flag');
call('parity_flag');
call('adjust_flag');
op0.val = res.val;
free_var('op1');
free_var('res');

 *
 * mnemonic: REX_r
 * attr: ['m64']
 * constraint: pfx1
 *
**/
bool X86Architecture::Table_1_44(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (Mode == X86_Bit_64)
    {
      rInsn.Length()++;
      rInsn.Prefix() |= X86_Prefix_REX_r;
      return Disassemble(rBinStrm, Offset, rInsn, Mode);
    }
    else
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Inc);
      if (Operand__eSP(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        rInsn.SetUpdatedFlags(X86_FlPf | X86_FlAf | X86_FlZf | X86_FlSf | X86_FlOf);
        /* semantic: alloc_var('op1', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("op1", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: op1.val = int(op0.bit, 1) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("op1", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)));
        /* semantic: res.val = op0.val + op1.val */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpAdd,
            rInsn.GetOperand(0),
            Expr::MakeVar("op1", VariableExpression::Use))));
        /* semantic: call('overflow_flag_add') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlOf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                Expr::MakeVar("res", VariableExpression::Use)),
              Expr::MakeUnOp(
                OperationExpression::OpNot,
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  rInsn.GetOperand(0),
                  Expr::MakeVar("op1", VariableExpression::Use)))),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        /* semantic: call('sign_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlSf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        /* semantic: call('zero_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlZf, &m_CpuInfo),
          Expr::MakeTernaryCond(ConditionExpression::CondEq,
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))));
        /* semantic: call('parity_flag') */
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBitVector(1, 0x1)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlPf, &m_CpuInfo),
          Expr::MakeVar("pf_tmp", VariableExpression::Use)));
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
        /* semantic: call('adjust_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlAf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                Expr::MakeVar("op1", VariableExpression::Use)),
              Expr::MakeVar("res", VariableExpression::Use)),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))));
        /* semantic: op0.val = res.val */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("res", VariableExpression::Use)));
        /* semantic: free_var('op1') */
        AllExpr.push_back(Expr::MakeVar("op1", VariableExpression::Free));
        /* semantic: free_var('res') */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
}

/** instructions
 * opcode: 45
 *
 * mnemonic: inc
 * operand: ['eBP']
 * update_flags: ['pf', 'af', 'zf', 'sf', 'of']
 * semantic: alloc_var('op1', op0.bit);
alloc_var('res', op0.bit);
op1.val = int(op0.bit, 1);
res.val = op0.val + op1.val;
call('overflow_flag_add');
call('sign_flag');
call('zero_flag');
call('parity_flag');
call('adjust_flag');
op0.val = res.val;
free_var('op1');
free_var('res');

 *
 * mnemonic: REX_rb
 * attr: ['m64']
 * constraint: pfx1
 *
**/
bool X86Architecture::Table_1_45(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (Mode == X86_Bit_64)
    {
      rInsn.Length()++;
      rInsn.Prefix() |= X86_Prefix_REX_rb;
      return Disassemble(rBinStrm, Offset, rInsn, Mode);
    }
    else
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Inc);
      if (Operand__eBP(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        rInsn.SetUpdatedFlags(X86_FlPf | X86_FlAf | X86_FlZf | X86_FlSf | X86_FlOf);
        /* semantic: alloc_var('op1', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("op1", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: op1.val = int(op0.bit, 1) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("op1", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)));
        /* semantic: res.val = op0.val + op1.val */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpAdd,
            rInsn.GetOperand(0),
            Expr::MakeVar("op1", VariableExpression::Use))));
        /* semantic: call('overflow_flag_add') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlOf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                Expr::MakeVar("res", VariableExpression::Use)),
              Expr::MakeUnOp(
                OperationExpression::OpNot,
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  rInsn.GetOperand(0),
                  Expr::MakeVar("op1", VariableExpression::Use)))),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        /* semantic: call('sign_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlSf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        /* semantic: call('zero_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlZf, &m_CpuInfo),
          Expr::MakeTernaryCond(ConditionExpression::CondEq,
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))));
        /* semantic: call('parity_flag') */
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBitVector(1, 0x1)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlPf, &m_CpuInfo),
          Expr::MakeVar("pf_tmp", VariableExpression::Use)));
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
        /* semantic: call('adjust_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlAf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                Expr::MakeVar("op1", VariableExpression::Use)),
              Expr::MakeVar("res", VariableExpression::Use)),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))));
        /* semantic: op0.val = res.val */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("res", VariableExpression::Use)));
        /* semantic: free_var('op1') */
        AllExpr.push_back(Expr::MakeVar("op1", VariableExpression::Free));
        /* semantic: free_var('res') */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
}

/** instructions
 * opcode: 46
 *
 * mnemonic: inc
 * operand: ['eSI']
 * update_flags: ['pf', 'af', 'zf', 'sf', 'of']
 * semantic: alloc_var('op1', op0.bit);
alloc_var('res', op0.bit);
op1.val = int(op0.bit, 1);
res.val = op0.val + op1.val;
call('overflow_flag_add');
call('sign_flag');
call('zero_flag');
call('parity_flag');
call('adjust_flag');
op0.val = res.val;
free_var('op1');
free_var('res');

 *
 * mnemonic: REX_rx
 * attr: ['m64']
 * constraint: pfx1
 *
**/
bool X86Architecture::Table_1_46(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (Mode == X86_Bit_64)
    {
      rInsn.Length()++;
      rInsn.Prefix() |= X86_Prefix_REX_rx;
      return Disassemble(rBinStrm, Offset, rInsn, Mode);
    }
    else
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Inc);
      if (Operand__eSI(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        rInsn.SetUpdatedFlags(X86_FlPf | X86_FlAf | X86_FlZf | X86_FlSf | X86_FlOf);
        /* semantic: alloc_var('op1', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("op1", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: op1.val = int(op0.bit, 1) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("op1", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)));
        /* semantic: res.val = op0.val + op1.val */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpAdd,
            rInsn.GetOperand(0),
            Expr::MakeVar("op1", VariableExpression::Use))));
        /* semantic: call('overflow_flag_add') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlOf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                Expr::MakeVar("res", VariableExpression::Use)),
              Expr::MakeUnOp(
                OperationExpression::OpNot,
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  rInsn.GetOperand(0),
                  Expr::MakeVar("op1", VariableExpression::Use)))),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        /* semantic: call('sign_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlSf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        /* semantic: call('zero_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlZf, &m_CpuInfo),
          Expr::MakeTernaryCond(ConditionExpression::CondEq,
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))));
        /* semantic: call('parity_flag') */
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBitVector(1, 0x1)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlPf, &m_CpuInfo),
          Expr::MakeVar("pf_tmp", VariableExpression::Use)));
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
        /* semantic: call('adjust_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlAf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                Expr::MakeVar("op1", VariableExpression::Use)),
              Expr::MakeVar("res", VariableExpression::Use)),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))));
        /* semantic: op0.val = res.val */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("res", VariableExpression::Use)));
        /* semantic: free_var('op1') */
        AllExpr.push_back(Expr::MakeVar("op1", VariableExpression::Free));
        /* semantic: free_var('res') */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
}

/** instructions
 * opcode: 47
 *
 * mnemonic: inc
 * operand: ['eDI']
 * update_flags: ['pf', 'af', 'zf', 'sf', 'of']
 * semantic: alloc_var('op1', op0.bit);
alloc_var('res', op0.bit);
op1.val = int(op0.bit, 1);
res.val = op0.val + op1.val;
call('overflow_flag_add');
call('sign_flag');
call('zero_flag');
call('parity_flag');
call('adjust_flag');
op0.val = res.val;
free_var('op1');
free_var('res');

 *
 * mnemonic: REX_rxb
 * attr: ['m64']
 * constraint: pfx1
 *
**/
bool X86Architecture::Table_1_47(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (Mode == X86_Bit_64)
    {
      rInsn.Length()++;
      rInsn.Prefix() |= X86_Prefix_REX_rxb;
      return Disassemble(rBinStrm, Offset, rInsn, Mode);
    }
    else
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Inc);
      if (Operand__eDI(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        rInsn.SetUpdatedFlags(X86_FlPf | X86_FlAf | X86_FlZf | X86_FlSf | X86_FlOf);
        /* semantic: alloc_var('op1', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("op1", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: op1.val = int(op0.bit, 1) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("op1", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)));
        /* semantic: res.val = op0.val + op1.val */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpAdd,
            rInsn.GetOperand(0),
            Expr::MakeVar("op1", VariableExpression::Use))));
        /* semantic: call('overflow_flag_add') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlOf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                Expr::MakeVar("res", VariableExpression::Use)),
              Expr::MakeUnOp(
                OperationExpression::OpNot,
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  rInsn.GetOperand(0),
                  Expr::MakeVar("op1", VariableExpression::Use)))),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        /* semantic: call('sign_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlSf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        /* semantic: call('zero_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlZf, &m_CpuInfo),
          Expr::MakeTernaryCond(ConditionExpression::CondEq,
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))));
        /* semantic: call('parity_flag') */
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBitVector(1, 0x1)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlPf, &m_CpuInfo),
          Expr::MakeVar("pf_tmp", VariableExpression::Use)));
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
        /* semantic: call('adjust_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlAf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                Expr::MakeVar("op1", VariableExpression::Use)),
              Expr::MakeVar("res", VariableExpression::Use)),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))));
        /* semantic: op0.val = res.val */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("res", VariableExpression::Use)));
        /* semantic: free_var('op1') */
        AllExpr.push_back(Expr::MakeVar("op1", VariableExpression::Free));
        /* semantic: free_var('res') */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
}

/** instructions
 * opcode: 48
 *
 * mnemonic: dec
 * operand: ['eAX']
 * update_flags: ['pf', 'af', 'zf', 'sf', 'of']
 * semantic: alloc_var('res', op0.bit);
alloc_var('op1', op0.bit);
op1 = int(op0.bit, 1);
res = op0.val - op1;
call('overflow_flag_sub');
call('sign_flag');
call('zero_flag');
call('parity_flag');
call('adjust_flag');
op0.val = res;
free_var('res');

 *
 * mnemonic: REX_w
 * attr: ['m64']
 * constraint: pfx1
 *
**/
bool X86Architecture::Table_1_48(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (Mode == X86_Bit_64)
    {
      rInsn.Length()++;
      rInsn.Prefix() |= X86_Prefix_REX_w;
      return Disassemble(rBinStrm, Offset, rInsn, Mode);
    }
    else
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Dec);
      if (Operand__eAX(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        rInsn.SetUpdatedFlags(X86_FlPf | X86_FlAf | X86_FlZf | X86_FlSf | X86_FlOf);
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: alloc_var('op1', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("op1", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: op1 = int(op0.bit, 1) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("op1", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)));
        /* semantic: res = op0.val - op1 */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            rInsn.GetOperand(0),
            Expr::MakeVar("op1", VariableExpression::Use))));
        /* semantic: call('overflow_flag_sub') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlOf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                Expr::MakeVar("res", VariableExpression::Use)),
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                Expr::MakeVar("op1", VariableExpression::Use))),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        /* semantic: call('sign_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlSf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        /* semantic: call('zero_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlZf, &m_CpuInfo),
          Expr::MakeTernaryCond(ConditionExpression::CondEq,
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))));
        /* semantic: call('parity_flag') */
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBitVector(1, 0x1)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlPf, &m_CpuInfo),
          Expr::MakeVar("pf_tmp", VariableExpression::Use)));
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
        /* semantic: call('adjust_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlAf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                Expr::MakeVar("op1", VariableExpression::Use)),
              Expr::MakeVar("res", VariableExpression::Use)),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))));
        /* semantic: op0.val = res */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("res", VariableExpression::Use)));
        /* semantic: free_var('res') */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
}

/** instructions
 * opcode: 49
 *
 * mnemonic: dec
 * operand: ['eCX']
 * update_flags: ['pf', 'af', 'zf', 'sf', 'of']
 * semantic: alloc_var('res', op0.bit);
alloc_var('op1', op0.bit);
op1 = int(op0.bit, 1);
res = op0.val - op1;
call('overflow_flag_sub');
call('sign_flag');
call('zero_flag');
call('parity_flag');
call('adjust_flag');
op0.val = res;
free_var('res');

 *
 * mnemonic: REX_wb
 * attr: ['m64']
 * constraint: pfx1
 *
**/
bool X86Architecture::Table_1_49(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (Mode == X86_Bit_64)
    {
      rInsn.Length()++;
      rInsn.Prefix() |= X86_Prefix_REX_wb;
      return Disassemble(rBinStrm, Offset, rInsn, Mode);
    }
    else
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Dec);
      if (Operand__eCX(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        rInsn.SetUpdatedFlags(X86_FlPf | X86_FlAf | X86_FlZf | X86_FlSf | X86_FlOf);
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: alloc_var('op1', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("op1", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: op1 = int(op0.bit, 1) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("op1", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)));
        /* semantic: res = op0.val - op1 */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            rInsn.GetOperand(0),
            Expr::MakeVar("op1", VariableExpression::Use))));
        /* semantic: call('overflow_flag_sub') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlOf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                Expr::MakeVar("res", VariableExpression::Use)),
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                Expr::MakeVar("op1", VariableExpression::Use))),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        /* semantic: call('sign_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlSf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        /* semantic: call('zero_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlZf, &m_CpuInfo),
          Expr::MakeTernaryCond(ConditionExpression::CondEq,
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))));
        /* semantic: call('parity_flag') */
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBitVector(1, 0x1)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlPf, &m_CpuInfo),
          Expr::MakeVar("pf_tmp", VariableExpression::Use)));
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
        /* semantic: call('adjust_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlAf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                Expr::MakeVar("op1", VariableExpression::Use)),
              Expr::MakeVar("res", VariableExpression::Use)),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))));
        /* semantic: op0.val = res */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("res", VariableExpression::Use)));
        /* semantic: free_var('res') */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
}

/** instructions
 * opcode: 4a
 *
 * mnemonic: dec
 * operand: ['eDX']
 * update_flags: ['pf', 'af', 'zf', 'sf', 'of']
 * semantic: alloc_var('res', op0.bit);
alloc_var('op1', op0.bit);
op1 = int(op0.bit, 1);
res = op0.val - op1;
call('overflow_flag_sub');
call('sign_flag');
call('zero_flag');
call('parity_flag');
call('adjust_flag');
op0.val = res;
free_var('res');

 *
 * mnemonic: REX_wx
 * attr: ['m64']
 * constraint: pfx1
 *
**/
bool X86Architecture::Table_1_4a(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (Mode == X86_Bit_64)
    {
      rInsn.Length()++;
      rInsn.Prefix() |= X86_Prefix_REX_wx;
      return Disassemble(rBinStrm, Offset, rInsn, Mode);
    }
    else
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Dec);
      if (Operand__eDX(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        rInsn.SetUpdatedFlags(X86_FlPf | X86_FlAf | X86_FlZf | X86_FlSf | X86_FlOf);
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: alloc_var('op1', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("op1", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: op1 = int(op0.bit, 1) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("op1", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)));
        /* semantic: res = op0.val - op1 */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            rInsn.GetOperand(0),
            Expr::MakeVar("op1", VariableExpression::Use))));
        /* semantic: call('overflow_flag_sub') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlOf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                Expr::MakeVar("res", VariableExpression::Use)),
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                Expr::MakeVar("op1", VariableExpression::Use))),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        /* semantic: call('sign_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlSf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        /* semantic: call('zero_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlZf, &m_CpuInfo),
          Expr::MakeTernaryCond(ConditionExpression::CondEq,
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))));
        /* semantic: call('parity_flag') */
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBitVector(1, 0x1)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlPf, &m_CpuInfo),
          Expr::MakeVar("pf_tmp", VariableExpression::Use)));
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
        /* semantic: call('adjust_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlAf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                Expr::MakeVar("op1", VariableExpression::Use)),
              Expr::MakeVar("res", VariableExpression::Use)),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))));
        /* semantic: op0.val = res */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("res", VariableExpression::Use)));
        /* semantic: free_var('res') */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
}

/** instructions
 * opcode: 4b
 *
 * mnemonic: dec
 * operand: ['eBX']
 * update_flags: ['pf', 'af', 'zf', 'sf', 'of']
 * semantic: alloc_var('res', op0.bit);
alloc_var('op1', op0.bit);
op1 = int(op0.bit, 1);
res = op0.val - op1;
call('overflow_flag_sub');
call('sign_flag');
call('zero_flag');
call('parity_flag');
call('adjust_flag');
op0.val = res;
free_var('res');

 *
 * mnemonic: REX_wxb
 * attr: ['m64']
 * constraint: pfx1
 *
**/
bool X86Architecture::Table_1_4b(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (Mode == X86_Bit_64)
    {
      rInsn.Length()++;
      rInsn.Prefix() |= X86_Prefix_REX_wxb;
      return Disassemble(rBinStrm, Offset, rInsn, Mode);
    }
    else
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Dec);
      if (Operand__eBX(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        rInsn.SetUpdatedFlags(X86_FlPf | X86_FlAf | X86_FlZf | X86_FlSf | X86_FlOf);
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: alloc_var('op1', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("op1", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: op1 = int(op0.bit, 1) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("op1", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)));
        /* semantic: res = op0.val - op1 */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            rInsn.GetOperand(0),
            Expr::MakeVar("op1", VariableExpression::Use))));
        /* semantic: call('overflow_flag_sub') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlOf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                Expr::MakeVar("res", VariableExpression::Use)),
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                Expr::MakeVar("op1", VariableExpression::Use))),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        /* semantic: call('sign_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlSf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        /* semantic: call('zero_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlZf, &m_CpuInfo),
          Expr::MakeTernaryCond(ConditionExpression::CondEq,
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))));
        /* semantic: call('parity_flag') */
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBitVector(1, 0x1)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlPf, &m_CpuInfo),
          Expr::MakeVar("pf_tmp", VariableExpression::Use)));
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
        /* semantic: call('adjust_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlAf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                Expr::MakeVar("op1", VariableExpression::Use)),
              Expr::MakeVar("res", VariableExpression::Use)),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))));
        /* semantic: op0.val = res */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("res", VariableExpression::Use)));
        /* semantic: free_var('res') */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
}

/** instructions
 * opcode: 4c
 *
 * mnemonic: dec
 * operand: ['eSP']
 * update_flags: ['pf', 'af', 'zf', 'sf', 'of']
 * semantic: alloc_var('res', op0.bit);
alloc_var('op1', op0.bit);
op1 = int(op0.bit, 1);
res = op0.val - op1;
call('overflow_flag_sub');
call('sign_flag');
call('zero_flag');
call('parity_flag');
call('adjust_flag');
op0.val = res;
free_var('res');

 *
 * mnemonic: REX_wr
 * attr: ['m64']
 * constraint: pfx1
 *
**/
bool X86Architecture::Table_1_4c(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (Mode == X86_Bit_64)
    {
      rInsn.Length()++;
      rInsn.Prefix() |= X86_Prefix_REX_wr;
      return Disassemble(rBinStrm, Offset, rInsn, Mode);
    }
    else
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Dec);
      if (Operand__eSP(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        rInsn.SetUpdatedFlags(X86_FlPf | X86_FlAf | X86_FlZf | X86_FlSf | X86_FlOf);
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: alloc_var('op1', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("op1", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: op1 = int(op0.bit, 1) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("op1", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)));
        /* semantic: res = op0.val - op1 */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            rInsn.GetOperand(0),
            Expr::MakeVar("op1", VariableExpression::Use))));
        /* semantic: call('overflow_flag_sub') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlOf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                Expr::MakeVar("res", VariableExpression::Use)),
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                Expr::MakeVar("op1", VariableExpression::Use))),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        /* semantic: call('sign_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlSf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        /* semantic: call('zero_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlZf, &m_CpuInfo),
          Expr::MakeTernaryCond(ConditionExpression::CondEq,
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))));
        /* semantic: call('parity_flag') */
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBitVector(1, 0x1)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlPf, &m_CpuInfo),
          Expr::MakeVar("pf_tmp", VariableExpression::Use)));
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
        /* semantic: call('adjust_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlAf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                Expr::MakeVar("op1", VariableExpression::Use)),
              Expr::MakeVar("res", VariableExpression::Use)),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))));
        /* semantic: op0.val = res */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("res", VariableExpression::Use)));
        /* semantic: free_var('res') */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
}

/** instructions
 * opcode: 4d
 *
 * mnemonic: dec
 * operand: ['eBP']
 * update_flags: ['pf', 'af', 'zf', 'sf', 'of']
 * semantic: alloc_var('res', op0.bit);
alloc_var('op1', op0.bit);
op1 = int(op0.bit, 1);
res = op0.val - op1;
call('overflow_flag_sub');
call('sign_flag');
call('zero_flag');
call('parity_flag');
call('adjust_flag');
op0.val = res;
free_var('res');

 *
 * mnemonic: REX_wrb
 * attr: ['m64']
 * constraint: pfx1
 *
**/
bool X86Architecture::Table_1_4d(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (Mode == X86_Bit_64)
    {
      rInsn.Length()++;
      rInsn.Prefix() |= X86_Prefix_REX_wrb;
      return Disassemble(rBinStrm, Offset, rInsn, Mode);
    }
    else
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Dec);
      if (Operand__eBP(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        rInsn.SetUpdatedFlags(X86_FlPf | X86_FlAf | X86_FlZf | X86_FlSf | X86_FlOf);
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: alloc_var('op1', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("op1", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: op1 = int(op0.bit, 1) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("op1", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)));
        /* semantic: res = op0.val - op1 */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            rInsn.GetOperand(0),
            Expr::MakeVar("op1", VariableExpression::Use))));
        /* semantic: call('overflow_flag_sub') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlOf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                Expr::MakeVar("res", VariableExpression::Use)),
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                Expr::MakeVar("op1", VariableExpression::Use))),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        /* semantic: call('sign_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlSf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        /* semantic: call('zero_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlZf, &m_CpuInfo),
          Expr::MakeTernaryCond(ConditionExpression::CondEq,
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))));
        /* semantic: call('parity_flag') */
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBitVector(1, 0x1)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlPf, &m_CpuInfo),
          Expr::MakeVar("pf_tmp", VariableExpression::Use)));
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
        /* semantic: call('adjust_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlAf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                Expr::MakeVar("op1", VariableExpression::Use)),
              Expr::MakeVar("res", VariableExpression::Use)),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))));
        /* semantic: op0.val = res */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("res", VariableExpression::Use)));
        /* semantic: free_var('res') */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
}

/** instructions
 * opcode: 4e
 *
 * mnemonic: dec
 * operand: ['eSI']
 * update_flags: ['pf', 'af', 'zf', 'sf', 'of']
 * semantic: alloc_var('res', op0.bit);
alloc_var('op1', op0.bit);
op1 = int(op0.bit, 1);
res = op0.val - op1;
call('overflow_flag_sub');
call('sign_flag');
call('zero_flag');
call('parity_flag');
call('adjust_flag');
op0.val = res;
free_var('res');

 *
 * mnemonic: REX_wrx
 * attr: ['m64']
 * constraint: pfx1
 *
**/
bool X86Architecture::Table_1_4e(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (Mode == X86_Bit_64)
    {
      rInsn.Length()++;
      rInsn.Prefix() |= X86_Prefix_REX_wrx;
      return Disassemble(rBinStrm, Offset, rInsn, Mode);
    }
    else
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Dec);
      if (Operand__eSI(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        rInsn.SetUpdatedFlags(X86_FlPf | X86_FlAf | X86_FlZf | X86_FlSf | X86_FlOf);
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: alloc_var('op1', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("op1", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: op1 = int(op0.bit, 1) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("op1", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)));
        /* semantic: res = op0.val - op1 */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            rInsn.GetOperand(0),
            Expr::MakeVar("op1", VariableExpression::Use))));
        /* semantic: call('overflow_flag_sub') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlOf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                Expr::MakeVar("res", VariableExpression::Use)),
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                Expr::MakeVar("op1", VariableExpression::Use))),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        /* semantic: call('sign_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlSf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        /* semantic: call('zero_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlZf, &m_CpuInfo),
          Expr::MakeTernaryCond(ConditionExpression::CondEq,
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))));
        /* semantic: call('parity_flag') */
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBitVector(1, 0x1)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlPf, &m_CpuInfo),
          Expr::MakeVar("pf_tmp", VariableExpression::Use)));
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
        /* semantic: call('adjust_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlAf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                Expr::MakeVar("op1", VariableExpression::Use)),
              Expr::MakeVar("res", VariableExpression::Use)),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))));
        /* semantic: op0.val = res */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("res", VariableExpression::Use)));
        /* semantic: free_var('res') */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
}

/** instructions
 * opcode: 4f
 *
 * mnemonic: dec
 * operand: ['eDI']
 * update_flags: ['pf', 'af', 'zf', 'sf', 'of']
 * semantic: alloc_var('res', op0.bit);
alloc_var('op1', op0.bit);
op1 = int(op0.bit, 1);
res = op0.val - op1;
call('overflow_flag_sub');
call('sign_flag');
call('zero_flag');
call('parity_flag');
call('adjust_flag');
op0.val = res;
free_var('res');

 *
 * mnemonic: REX_wrxb
 * attr: ['m64']
 * constraint: pfx1
 *
**/
bool X86Architecture::Table_1_4f(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (Mode == X86_Bit_64)
    {
      rInsn.Length()++;
      rInsn.Prefix() |= X86_Prefix_REX_wrxb;
      return Disassemble(rBinStrm, Offset, rInsn, Mode);
    }
    else
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Dec);
      if (Operand__eDI(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        rInsn.SetUpdatedFlags(X86_FlPf | X86_FlAf | X86_FlZf | X86_FlSf | X86_FlOf);
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: alloc_var('op1', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("op1", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: op1 = int(op0.bit, 1) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("op1", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)));
        /* semantic: res = op0.val - op1 */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            rInsn.GetOperand(0),
            Expr::MakeVar("op1", VariableExpression::Use))));
        /* semantic: call('overflow_flag_sub') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlOf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                Expr::MakeVar("res", VariableExpression::Use)),
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                Expr::MakeVar("op1", VariableExpression::Use))),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        /* semantic: call('sign_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlSf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        /* semantic: call('zero_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlZf, &m_CpuInfo),
          Expr::MakeTernaryCond(ConditionExpression::CondEq,
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))));
        /* semantic: call('parity_flag') */
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBitVector(1, 0x1)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlPf, &m_CpuInfo),
          Expr::MakeVar("pf_tmp", VariableExpression::Use)));
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
        /* semantic: call('adjust_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlAf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                Expr::MakeVar("op1", VariableExpression::Use)),
              Expr::MakeVar("res", VariableExpression::Use)),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))));
        /* semantic: op0.val = res */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("res", VariableExpression::Use)));
        /* semantic: free_var('res') */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
}

/** instructions
 * opcode: 50
 *
 * mnemonic: push
 * operand: ['d64_rAX']
 * semantic: alloc_var('pushed_value', stack.bit);
pushed_value = sign_extend(op0.val, int(stack.bit, stack.bit));
stack.id -= stack.size;
stack.mem = pushed_value;
free_var('pushed_value');

 * constraint: d64
 *
 * mnemonic: push
 * operand: ['d64_r8']
 * semantic: alloc_var('pushed_value', stack.bit);
pushed_value = sign_extend(op0.val, int(stack.bit, stack.bit));
stack.id -= stack.size;
stack.mem = pushed_value;
free_var('pushed_value');

 * attr: ['rexb', 'm64']
 *
**/
bool X86Architecture::Table_1_50(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if ((rInsn.GetPrefix() & X86_Prefix_REX_b) == X86_Prefix_REX_b && Mode == X86_Bit_64)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Push);
      if (Operand__d64_r8(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('pushed_value', stack.bit) */
        AllExpr.push_back(Expr::MakeVar("pushed_value", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()))));
        /* semantic: pushed_value = sign_extend(op0.val, int(stack.bit, stack.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pushed_value", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpSext, rInsn.GetOperand(0), Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()))))));
        /* semantic: stack.id -= stack.size */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
            Expr::MakeBitVector(
              m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())),
              m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())) / 8)))
        );
        /* semantic: stack.mem = pushed_value */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeMem(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), nullptr, Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo)),
          Expr::MakeVar("pushed_value", VariableExpression::Use)));
        /* semantic: free_var('pushed_value') */
        AllExpr.push_back(Expr::MakeVar("pushed_value", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    else
    {
      if (!(rInsn.Prefix() & X86_Prefix_OpSize))
      {
        rInsn.Prefix() |= X86_Prefix_REX_w; /* d64/df64 constraint */
      }
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Push);
      if (Operand__d64_rAX(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('pushed_value', stack.bit) */
        AllExpr.push_back(Expr::MakeVar("pushed_value", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()))));
        /* semantic: pushed_value = sign_extend(op0.val, int(stack.bit, stack.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pushed_value", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpSext, rInsn.GetOperand(0), Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()))))));
        /* semantic: stack.id -= stack.size */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
            Expr::MakeBitVector(
              m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())),
              m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())) / 8)))
        );
        /* semantic: stack.mem = pushed_value */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeMem(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), nullptr, Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo)),
          Expr::MakeVar("pushed_value", VariableExpression::Use)));
        /* semantic: free_var('pushed_value') */
        AllExpr.push_back(Expr::MakeVar("pushed_value", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
}

/** instructions
 * opcode: 51
 *
 * mnemonic: push
 * operand: ['d64_rCX']
 * semantic: alloc_var('pushed_value', stack.bit);
pushed_value = sign_extend(op0.val, int(stack.bit, stack.bit));
stack.id -= stack.size;
stack.mem = pushed_value;
free_var('pushed_value');

 * constraint: d64
 *
 * mnemonic: push
 * operand: ['d64_r9']
 * semantic: alloc_var('pushed_value', stack.bit);
pushed_value = sign_extend(op0.val, int(stack.bit, stack.bit));
stack.id -= stack.size;
stack.mem = pushed_value;
free_var('pushed_value');

 * attr: ['rexb', 'm64']
 *
**/
bool X86Architecture::Table_1_51(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if ((rInsn.GetPrefix() & X86_Prefix_REX_b) == X86_Prefix_REX_b && Mode == X86_Bit_64)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Push);
      if (Operand__d64_r9(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('pushed_value', stack.bit) */
        AllExpr.push_back(Expr::MakeVar("pushed_value", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()))));
        /* semantic: pushed_value = sign_extend(op0.val, int(stack.bit, stack.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pushed_value", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpSext, rInsn.GetOperand(0), Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()))))));
        /* semantic: stack.id -= stack.size */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
            Expr::MakeBitVector(
              m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())),
              m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())) / 8)))
        );
        /* semantic: stack.mem = pushed_value */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeMem(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), nullptr, Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo)),
          Expr::MakeVar("pushed_value", VariableExpression::Use)));
        /* semantic: free_var('pushed_value') */
        AllExpr.push_back(Expr::MakeVar("pushed_value", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    else
    {
      if (!(rInsn.Prefix() & X86_Prefix_OpSize))
      {
        rInsn.Prefix() |= X86_Prefix_REX_w; /* d64/df64 constraint */
      }
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Push);
      if (Operand__d64_rCX(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('pushed_value', stack.bit) */
        AllExpr.push_back(Expr::MakeVar("pushed_value", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()))));
        /* semantic: pushed_value = sign_extend(op0.val, int(stack.bit, stack.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pushed_value", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpSext, rInsn.GetOperand(0), Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()))))));
        /* semantic: stack.id -= stack.size */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
            Expr::MakeBitVector(
              m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())),
              m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())) / 8)))
        );
        /* semantic: stack.mem = pushed_value */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeMem(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), nullptr, Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo)),
          Expr::MakeVar("pushed_value", VariableExpression::Use)));
        /* semantic: free_var('pushed_value') */
        AllExpr.push_back(Expr::MakeVar("pushed_value", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
}

/** instructions
 * opcode: 52
 *
 * mnemonic: push
 * operand: ['d64_rDX']
 * semantic: alloc_var('pushed_value', stack.bit);
pushed_value = sign_extend(op0.val, int(stack.bit, stack.bit));
stack.id -= stack.size;
stack.mem = pushed_value;
free_var('pushed_value');

 * constraint: d64
 *
 * mnemonic: push
 * operand: ['d64_r10']
 * semantic: alloc_var('pushed_value', stack.bit);
pushed_value = sign_extend(op0.val, int(stack.bit, stack.bit));
stack.id -= stack.size;
stack.mem = pushed_value;
free_var('pushed_value');

 * attr: ['rexb', 'm64']
 *
**/
bool X86Architecture::Table_1_52(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if ((rInsn.GetPrefix() & X86_Prefix_REX_b) == X86_Prefix_REX_b && Mode == X86_Bit_64)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Push);
      if (Operand__d64_r10(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('pushed_value', stack.bit) */
        AllExpr.push_back(Expr::MakeVar("pushed_value", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()))));
        /* semantic: pushed_value = sign_extend(op0.val, int(stack.bit, stack.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pushed_value", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpSext, rInsn.GetOperand(0), Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()))))));
        /* semantic: stack.id -= stack.size */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
            Expr::MakeBitVector(
              m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())),
              m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())) / 8)))
        );
        /* semantic: stack.mem = pushed_value */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeMem(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), nullptr, Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo)),
          Expr::MakeVar("pushed_value", VariableExpression::Use)));
        /* semantic: free_var('pushed_value') */
        AllExpr.push_back(Expr::MakeVar("pushed_value", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    else
    {
      if (!(rInsn.Prefix() & X86_Prefix_OpSize))
      {
        rInsn.Prefix() |= X86_Prefix_REX_w; /* d64/df64 constraint */
      }
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Push);
      if (Operand__d64_rDX(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('pushed_value', stack.bit) */
        AllExpr.push_back(Expr::MakeVar("pushed_value", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()))));
        /* semantic: pushed_value = sign_extend(op0.val, int(stack.bit, stack.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pushed_value", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpSext, rInsn.GetOperand(0), Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()))))));
        /* semantic: stack.id -= stack.size */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
            Expr::MakeBitVector(
              m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())),
              m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())) / 8)))
        );
        /* semantic: stack.mem = pushed_value */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeMem(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), nullptr, Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo)),
          Expr::MakeVar("pushed_value", VariableExpression::Use)));
        /* semantic: free_var('pushed_value') */
        AllExpr.push_back(Expr::MakeVar("pushed_value", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
}

/** instructions
 * opcode: 53
 *
 * mnemonic: push
 * operand: ['d64_rBX']
 * semantic: alloc_var('pushed_value', stack.bit);
pushed_value = sign_extend(op0.val, int(stack.bit, stack.bit));
stack.id -= stack.size;
stack.mem = pushed_value;
free_var('pushed_value');

 * constraint: d64
 *
 * mnemonic: push
 * operand: ['d64_r11']
 * semantic: alloc_var('pushed_value', stack.bit);
pushed_value = sign_extend(op0.val, int(stack.bit, stack.bit));
stack.id -= stack.size;
stack.mem = pushed_value;
free_var('pushed_value');

 * attr: ['rexb', 'm64']
 *
**/
bool X86Architecture::Table_1_53(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if ((rInsn.GetPrefix() & X86_Prefix_REX_b) == X86_Prefix_REX_b && Mode == X86_Bit_64)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Push);
      if (Operand__d64_r11(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('pushed_value', stack.bit) */
        AllExpr.push_back(Expr::MakeVar("pushed_value", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()))));
        /* semantic: pushed_value = sign_extend(op0.val, int(stack.bit, stack.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pushed_value", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpSext, rInsn.GetOperand(0), Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()))))));
        /* semantic: stack.id -= stack.size */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
            Expr::MakeBitVector(
              m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())),
              m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())) / 8)))
        );
        /* semantic: stack.mem = pushed_value */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeMem(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), nullptr, Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo)),
          Expr::MakeVar("pushed_value", VariableExpression::Use)));
        /* semantic: free_var('pushed_value') */
        AllExpr.push_back(Expr::MakeVar("pushed_value", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    else
    {
      if (!(rInsn.Prefix() & X86_Prefix_OpSize))
      {
        rInsn.Prefix() |= X86_Prefix_REX_w; /* d64/df64 constraint */
      }
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Push);
      if (Operand__d64_rBX(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('pushed_value', stack.bit) */
        AllExpr.push_back(Expr::MakeVar("pushed_value", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()))));
        /* semantic: pushed_value = sign_extend(op0.val, int(stack.bit, stack.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pushed_value", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpSext, rInsn.GetOperand(0), Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()))))));
        /* semantic: stack.id -= stack.size */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
            Expr::MakeBitVector(
              m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())),
              m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())) / 8)))
        );
        /* semantic: stack.mem = pushed_value */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeMem(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), nullptr, Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo)),
          Expr::MakeVar("pushed_value", VariableExpression::Use)));
        /* semantic: free_var('pushed_value') */
        AllExpr.push_back(Expr::MakeVar("pushed_value", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
}

/** instructions
 * opcode: 54
 *
 * mnemonic: push
 * operand: ['d64_rSP']
 * semantic: alloc_var('pushed_value', stack.bit);
pushed_value = sign_extend(op0.val, int(stack.bit, stack.bit));
stack.id -= stack.size;
stack.mem = pushed_value;
free_var('pushed_value');

 * constraint: d64
 *
 * mnemonic: push
 * operand: ['d64_r12']
 * semantic: alloc_var('pushed_value', stack.bit);
pushed_value = sign_extend(op0.val, int(stack.bit, stack.bit));
stack.id -= stack.size;
stack.mem = pushed_value;
free_var('pushed_value');

 * attr: ['rexb', 'm64']
 *
**/
bool X86Architecture::Table_1_54(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if ((rInsn.GetPrefix() & X86_Prefix_REX_b) == X86_Prefix_REX_b && Mode == X86_Bit_64)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Push);
      if (Operand__d64_r12(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('pushed_value', stack.bit) */
        AllExpr.push_back(Expr::MakeVar("pushed_value", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()))));
        /* semantic: pushed_value = sign_extend(op0.val, int(stack.bit, stack.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pushed_value", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpSext, rInsn.GetOperand(0), Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()))))));
        /* semantic: stack.id -= stack.size */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
            Expr::MakeBitVector(
              m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())),
              m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())) / 8)))
        );
        /* semantic: stack.mem = pushed_value */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeMem(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), nullptr, Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo)),
          Expr::MakeVar("pushed_value", VariableExpression::Use)));
        /* semantic: free_var('pushed_value') */
        AllExpr.push_back(Expr::MakeVar("pushed_value", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    else
    {
      if (!(rInsn.Prefix() & X86_Prefix_OpSize))
      {
        rInsn.Prefix() |= X86_Prefix_REX_w; /* d64/df64 constraint */
      }
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Push);
      if (Operand__d64_rSP(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('pushed_value', stack.bit) */
        AllExpr.push_back(Expr::MakeVar("pushed_value", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()))));
        /* semantic: pushed_value = sign_extend(op0.val, int(stack.bit, stack.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pushed_value", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpSext, rInsn.GetOperand(0), Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()))))));
        /* semantic: stack.id -= stack.size */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
            Expr::MakeBitVector(
              m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())),
              m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())) / 8)))
        );
        /* semantic: stack.mem = pushed_value */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeMem(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), nullptr, Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo)),
          Expr::MakeVar("pushed_value", VariableExpression::Use)));
        /* semantic: free_var('pushed_value') */
        AllExpr.push_back(Expr::MakeVar("pushed_value", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
}

/** instructions
 * opcode: 55
 *
 * mnemonic: push
 * operand: ['d64_rBP']
 * semantic: alloc_var('pushed_value', stack.bit);
pushed_value = sign_extend(op0.val, int(stack.bit, stack.bit));
stack.id -= stack.size;
stack.mem = pushed_value;
free_var('pushed_value');

 * constraint: d64
 *
 * mnemonic: push
 * operand: ['d64_r13']
 * semantic: alloc_var('pushed_value', stack.bit);
pushed_value = sign_extend(op0.val, int(stack.bit, stack.bit));
stack.id -= stack.size;
stack.mem = pushed_value;
free_var('pushed_value');

 * attr: ['rexb', 'm64']
 * constraint: d64
 *
**/
bool X86Architecture::Table_1_55(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if ((rInsn.GetPrefix() & X86_Prefix_REX_b) == X86_Prefix_REX_b && Mode == X86_Bit_64)
    {
      if (!(rInsn.Prefix() & X86_Prefix_OpSize))
      {
        rInsn.Prefix() |= X86_Prefix_REX_w; /* d64/df64 constraint */
      }
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Push);
      if (Operand__d64_r13(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('pushed_value', stack.bit) */
        AllExpr.push_back(Expr::MakeVar("pushed_value", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()))));
        /* semantic: pushed_value = sign_extend(op0.val, int(stack.bit, stack.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pushed_value", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpSext, rInsn.GetOperand(0), Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()))))));
        /* semantic: stack.id -= stack.size */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
            Expr::MakeBitVector(
              m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())),
              m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())) / 8)))
        );
        /* semantic: stack.mem = pushed_value */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeMem(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), nullptr, Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo)),
          Expr::MakeVar("pushed_value", VariableExpression::Use)));
        /* semantic: free_var('pushed_value') */
        AllExpr.push_back(Expr::MakeVar("pushed_value", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    else
    {
      if (!(rInsn.Prefix() & X86_Prefix_OpSize))
      {
        rInsn.Prefix() |= X86_Prefix_REX_w; /* d64/df64 constraint */
      }
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Push);
      if (Operand__d64_rBP(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('pushed_value', stack.bit) */
        AllExpr.push_back(Expr::MakeVar("pushed_value", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()))));
        /* semantic: pushed_value = sign_extend(op0.val, int(stack.bit, stack.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pushed_value", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpSext, rInsn.GetOperand(0), Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()))))));
        /* semantic: stack.id -= stack.size */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
            Expr::MakeBitVector(
              m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())),
              m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())) / 8)))
        );
        /* semantic: stack.mem = pushed_value */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeMem(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), nullptr, Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo)),
          Expr::MakeVar("pushed_value", VariableExpression::Use)));
        /* semantic: free_var('pushed_value') */
        AllExpr.push_back(Expr::MakeVar("pushed_value", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
}

/** instructions
 * opcode: 56
 *
 * mnemonic: push
 * operand: ['d64_rSI']
 * semantic: alloc_var('pushed_value', stack.bit);
pushed_value = sign_extend(op0.val, int(stack.bit, stack.bit));
stack.id -= stack.size;
stack.mem = pushed_value;
free_var('pushed_value');

 * constraint: d64
 *
 * mnemonic: push
 * operand: ['d64_r14']
 * semantic: alloc_var('pushed_value', stack.bit);
pushed_value = sign_extend(op0.val, int(stack.bit, stack.bit));
stack.id -= stack.size;
stack.mem = pushed_value;
free_var('pushed_value');

 * attr: ['rexb', 'm64']
 * constraint: d64
 *
**/
bool X86Architecture::Table_1_56(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if ((rInsn.GetPrefix() & X86_Prefix_REX_b) == X86_Prefix_REX_b && Mode == X86_Bit_64)
    {
      if (!(rInsn.Prefix() & X86_Prefix_OpSize))
      {
        rInsn.Prefix() |= X86_Prefix_REX_w; /* d64/df64 constraint */
      }
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Push);
      if (Operand__d64_r14(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('pushed_value', stack.bit) */
        AllExpr.push_back(Expr::MakeVar("pushed_value", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()))));
        /* semantic: pushed_value = sign_extend(op0.val, int(stack.bit, stack.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pushed_value", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpSext, rInsn.GetOperand(0), Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()))))));
        /* semantic: stack.id -= stack.size */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
            Expr::MakeBitVector(
              m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())),
              m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())) / 8)))
        );
        /* semantic: stack.mem = pushed_value */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeMem(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), nullptr, Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo)),
          Expr::MakeVar("pushed_value", VariableExpression::Use)));
        /* semantic: free_var('pushed_value') */
        AllExpr.push_back(Expr::MakeVar("pushed_value", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    else
    {
      if (!(rInsn.Prefix() & X86_Prefix_OpSize))
      {
        rInsn.Prefix() |= X86_Prefix_REX_w; /* d64/df64 constraint */
      }
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Push);
      if (Operand__d64_rSI(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('pushed_value', stack.bit) */
        AllExpr.push_back(Expr::MakeVar("pushed_value", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()))));
        /* semantic: pushed_value = sign_extend(op0.val, int(stack.bit, stack.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pushed_value", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpSext, rInsn.GetOperand(0), Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()))))));
        /* semantic: stack.id -= stack.size */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
            Expr::MakeBitVector(
              m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())),
              m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())) / 8)))
        );
        /* semantic: stack.mem = pushed_value */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeMem(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), nullptr, Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo)),
          Expr::MakeVar("pushed_value", VariableExpression::Use)));
        /* semantic: free_var('pushed_value') */
        AllExpr.push_back(Expr::MakeVar("pushed_value", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
}

/** instructions
 * opcode: 57
 *
 * mnemonic: push
 * operand: ['d64_rDI']
 * semantic: alloc_var('pushed_value', stack.bit);
pushed_value = sign_extend(op0.val, int(stack.bit, stack.bit));
stack.id -= stack.size;
stack.mem = pushed_value;
free_var('pushed_value');

 * constraint: d64
 *
 * mnemonic: push
 * operand: ['d64_r15']
 * semantic: alloc_var('pushed_value', stack.bit);
pushed_value = sign_extend(op0.val, int(stack.bit, stack.bit));
stack.id -= stack.size;
stack.mem = pushed_value;
free_var('pushed_value');

 * attr: ['rexb', 'm64']
 * constraint: d64
 *
**/
bool X86Architecture::Table_1_57(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if ((rInsn.GetPrefix() & X86_Prefix_REX_b) == X86_Prefix_REX_b && Mode == X86_Bit_64)
    {
      if (!(rInsn.Prefix() & X86_Prefix_OpSize))
      {
        rInsn.Prefix() |= X86_Prefix_REX_w; /* d64/df64 constraint */
      }
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Push);
      if (Operand__d64_r15(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('pushed_value', stack.bit) */
        AllExpr.push_back(Expr::MakeVar("pushed_value", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()))));
        /* semantic: pushed_value = sign_extend(op0.val, int(stack.bit, stack.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pushed_value", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpSext, rInsn.GetOperand(0), Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()))))));
        /* semantic: stack.id -= stack.size */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
            Expr::MakeBitVector(
              m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())),
              m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())) / 8)))
        );
        /* semantic: stack.mem = pushed_value */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeMem(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), nullptr, Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo)),
          Expr::MakeVar("pushed_value", VariableExpression::Use)));
        /* semantic: free_var('pushed_value') */
        AllExpr.push_back(Expr::MakeVar("pushed_value", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    else
    {
      if (!(rInsn.Prefix() & X86_Prefix_OpSize))
      {
        rInsn.Prefix() |= X86_Prefix_REX_w; /* d64/df64 constraint */
      }
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Push);
      if (Operand__d64_rDI(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('pushed_value', stack.bit) */
        AllExpr.push_back(Expr::MakeVar("pushed_value", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()))));
        /* semantic: pushed_value = sign_extend(op0.val, int(stack.bit, stack.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pushed_value", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpSext, rInsn.GetOperand(0), Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()))))));
        /* semantic: stack.id -= stack.size */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
            Expr::MakeBitVector(
              m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())),
              m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())) / 8)))
        );
        /* semantic: stack.mem = pushed_value */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeMem(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), nullptr, Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo)),
          Expr::MakeVar("pushed_value", VariableExpression::Use)));
        /* semantic: free_var('pushed_value') */
        AllExpr.push_back(Expr::MakeVar("pushed_value", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
}

/** instructions
 * opcode: 58
 *
 * mnemonic: pop
 * operand: ['d64_rAX']
 * semantic: alloc_var('popped_value', stack.bit);
popped_value = stack.mem;
stack.id += stack.size;
op0.val = popped_value;
free_var('popped_value');

 * constraint: d64
 *
 * mnemonic: pop
 * operand: ['d64_r8']
 * semantic: alloc_var('popped_value', stack.bit);
popped_value = stack.mem;
stack.id += stack.size;
op0.val = popped_value;
free_var('popped_value');

 * attr: ['rexb', 'm64']
 * constraint: d64
 *
**/
bool X86Architecture::Table_1_58(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if ((rInsn.GetPrefix() & X86_Prefix_REX_b) == X86_Prefix_REX_b && Mode == X86_Bit_64)
    {
      if (!(rInsn.Prefix() & X86_Prefix_OpSize))
      {
        rInsn.Prefix() |= X86_Prefix_REX_w; /* d64/df64 constraint */
      }
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pop);
      if (Operand__d64_r8(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('popped_value', stack.bit) */
        AllExpr.push_back(Expr::MakeVar("popped_value", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()))));
        /* semantic: popped_value = stack.mem */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("popped_value", VariableExpression::Use),
          Expr::MakeMem(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), nullptr, Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo))));
        /* semantic: stack.id += stack.size */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeBinOp(
            OperationExpression::OpAdd,
            Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
            Expr::MakeBitVector(
              m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())),
              m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())) / 8)))
        );
        /* semantic: op0.val = popped_value */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("popped_value", VariableExpression::Use)));
        /* semantic: free_var('popped_value') */
        AllExpr.push_back(Expr::MakeVar("popped_value", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    else
    {
      if (!(rInsn.Prefix() & X86_Prefix_OpSize))
      {
        rInsn.Prefix() |= X86_Prefix_REX_w; /* d64/df64 constraint */
      }
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pop);
      if (Operand__d64_rAX(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('popped_value', stack.bit) */
        AllExpr.push_back(Expr::MakeVar("popped_value", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()))));
        /* semantic: popped_value = stack.mem */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("popped_value", VariableExpression::Use),
          Expr::MakeMem(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), nullptr, Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo))));
        /* semantic: stack.id += stack.size */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeBinOp(
            OperationExpression::OpAdd,
            Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
            Expr::MakeBitVector(
              m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())),
              m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())) / 8)))
        );
        /* semantic: op0.val = popped_value */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("popped_value", VariableExpression::Use)));
        /* semantic: free_var('popped_value') */
        AllExpr.push_back(Expr::MakeVar("popped_value", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
}

/** instructions
 * opcode: 59
 *
 * mnemonic: pop
 * operand: ['d64_rCX']
 * semantic: alloc_var('popped_value', stack.bit);
popped_value = stack.mem;
stack.id += stack.size;
op0.val = popped_value;
free_var('popped_value');

 * constraint: d64
 *
 * mnemonic: pop
 * operand: ['d64_r9']
 * semantic: alloc_var('popped_value', stack.bit);
popped_value = stack.mem;
stack.id += stack.size;
op0.val = popped_value;
free_var('popped_value');

 * attr: ['rexb', 'm64']
 * constraint: d64
 *
**/
bool X86Architecture::Table_1_59(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if ((rInsn.GetPrefix() & X86_Prefix_REX_b) == X86_Prefix_REX_b && Mode == X86_Bit_64)
    {
      if (!(rInsn.Prefix() & X86_Prefix_OpSize))
      {
        rInsn.Prefix() |= X86_Prefix_REX_w; /* d64/df64 constraint */
      }
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pop);
      if (Operand__d64_r9(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('popped_value', stack.bit) */
        AllExpr.push_back(Expr::MakeVar("popped_value", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()))));
        /* semantic: popped_value = stack.mem */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("popped_value", VariableExpression::Use),
          Expr::MakeMem(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), nullptr, Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo))));
        /* semantic: stack.id += stack.size */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeBinOp(
            OperationExpression::OpAdd,
            Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
            Expr::MakeBitVector(
              m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())),
              m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())) / 8)))
        );
        /* semantic: op0.val = popped_value */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("popped_value", VariableExpression::Use)));
        /* semantic: free_var('popped_value') */
        AllExpr.push_back(Expr::MakeVar("popped_value", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    else
    {
      if (!(rInsn.Prefix() & X86_Prefix_OpSize))
      {
        rInsn.Prefix() |= X86_Prefix_REX_w; /* d64/df64 constraint */
      }
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pop);
      if (Operand__d64_rCX(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('popped_value', stack.bit) */
        AllExpr.push_back(Expr::MakeVar("popped_value", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()))));
        /* semantic: popped_value = stack.mem */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("popped_value", VariableExpression::Use),
          Expr::MakeMem(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), nullptr, Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo))));
        /* semantic: stack.id += stack.size */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeBinOp(
            OperationExpression::OpAdd,
            Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
            Expr::MakeBitVector(
              m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())),
              m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())) / 8)))
        );
        /* semantic: op0.val = popped_value */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("popped_value", VariableExpression::Use)));
        /* semantic: free_var('popped_value') */
        AllExpr.push_back(Expr::MakeVar("popped_value", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
}

/** instructions
 * opcode: 5a
 *
 * mnemonic: pop
 * operand: ['d64_rDX']
 * semantic: alloc_var('popped_value', stack.bit);
popped_value = stack.mem;
stack.id += stack.size;
op0.val = popped_value;
free_var('popped_value');

 * constraint: d64
 *
 * mnemonic: pop
 * operand: ['d64_r10']
 * semantic: alloc_var('popped_value', stack.bit);
popped_value = stack.mem;
stack.id += stack.size;
op0.val = popped_value;
free_var('popped_value');

 * attr: ['rexb', 'm64']
 * constraint: d64
 *
**/
bool X86Architecture::Table_1_5a(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if ((rInsn.GetPrefix() & X86_Prefix_REX_b) == X86_Prefix_REX_b && Mode == X86_Bit_64)
    {
      if (!(rInsn.Prefix() & X86_Prefix_OpSize))
      {
        rInsn.Prefix() |= X86_Prefix_REX_w; /* d64/df64 constraint */
      }
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pop);
      if (Operand__d64_r10(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('popped_value', stack.bit) */
        AllExpr.push_back(Expr::MakeVar("popped_value", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()))));
        /* semantic: popped_value = stack.mem */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("popped_value", VariableExpression::Use),
          Expr::MakeMem(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), nullptr, Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo))));
        /* semantic: stack.id += stack.size */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeBinOp(
            OperationExpression::OpAdd,
            Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
            Expr::MakeBitVector(
              m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())),
              m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())) / 8)))
        );
        /* semantic: op0.val = popped_value */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("popped_value", VariableExpression::Use)));
        /* semantic: free_var('popped_value') */
        AllExpr.push_back(Expr::MakeVar("popped_value", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    else
    {
      if (!(rInsn.Prefix() & X86_Prefix_OpSize))
      {
        rInsn.Prefix() |= X86_Prefix_REX_w; /* d64/df64 constraint */
      }
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pop);
      if (Operand__d64_rDX(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('popped_value', stack.bit) */
        AllExpr.push_back(Expr::MakeVar("popped_value", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()))));
        /* semantic: popped_value = stack.mem */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("popped_value", VariableExpression::Use),
          Expr::MakeMem(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), nullptr, Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo))));
        /* semantic: stack.id += stack.size */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeBinOp(
            OperationExpression::OpAdd,
            Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
            Expr::MakeBitVector(
              m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())),
              m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())) / 8)))
        );
        /* semantic: op0.val = popped_value */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("popped_value", VariableExpression::Use)));
        /* semantic: free_var('popped_value') */
        AllExpr.push_back(Expr::MakeVar("popped_value", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
}

/** instructions
 * opcode: 5b
 *
 * mnemonic: pop
 * operand: ['d64_rBX']
 * semantic: alloc_var('popped_value', stack.bit);
popped_value = stack.mem;
stack.id += stack.size;
op0.val = popped_value;
free_var('popped_value');

 * constraint: d64
 *
 * mnemonic: pop
 * operand: ['d64_r11']
 * semantic: alloc_var('popped_value', stack.bit);
popped_value = stack.mem;
stack.id += stack.size;
op0.val = popped_value;
free_var('popped_value');

 * attr: ['rexb', 'm64']
 * constraint: d64
 *
**/
bool X86Architecture::Table_1_5b(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if ((rInsn.GetPrefix() & X86_Prefix_REX_b) == X86_Prefix_REX_b && Mode == X86_Bit_64)
    {
      if (!(rInsn.Prefix() & X86_Prefix_OpSize))
      {
        rInsn.Prefix() |= X86_Prefix_REX_w; /* d64/df64 constraint */
      }
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pop);
      if (Operand__d64_r11(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('popped_value', stack.bit) */
        AllExpr.push_back(Expr::MakeVar("popped_value", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()))));
        /* semantic: popped_value = stack.mem */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("popped_value", VariableExpression::Use),
          Expr::MakeMem(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), nullptr, Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo))));
        /* semantic: stack.id += stack.size */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeBinOp(
            OperationExpression::OpAdd,
            Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
            Expr::MakeBitVector(
              m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())),
              m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())) / 8)))
        );
        /* semantic: op0.val = popped_value */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("popped_value", VariableExpression::Use)));
        /* semantic: free_var('popped_value') */
        AllExpr.push_back(Expr::MakeVar("popped_value", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    else
    {
      if (!(rInsn.Prefix() & X86_Prefix_OpSize))
      {
        rInsn.Prefix() |= X86_Prefix_REX_w; /* d64/df64 constraint */
      }
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pop);
      if (Operand__d64_rBX(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('popped_value', stack.bit) */
        AllExpr.push_back(Expr::MakeVar("popped_value", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()))));
        /* semantic: popped_value = stack.mem */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("popped_value", VariableExpression::Use),
          Expr::MakeMem(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), nullptr, Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo))));
        /* semantic: stack.id += stack.size */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeBinOp(
            OperationExpression::OpAdd,
            Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
            Expr::MakeBitVector(
              m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())),
              m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())) / 8)))
        );
        /* semantic: op0.val = popped_value */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("popped_value", VariableExpression::Use)));
        /* semantic: free_var('popped_value') */
        AllExpr.push_back(Expr::MakeVar("popped_value", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
}

/** instructions
 * opcode: 5c
 *
 * mnemonic: pop
 * operand: ['d64_rSP']
 * semantic: alloc_var('popped_value', stack.bit);
popped_value = stack.mem;
stack.id += stack.size;
op0.val = popped_value;
free_var('popped_value');

 * constraint: d64
 *
 * mnemonic: pop
 * operand: ['d64_r12']
 * semantic: alloc_var('popped_value', stack.bit);
popped_value = stack.mem;
stack.id += stack.size;
op0.val = popped_value;
free_var('popped_value');

 * attr: ['rexb', 'm64']
 * constraint: d64
 *
**/
bool X86Architecture::Table_1_5c(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if ((rInsn.GetPrefix() & X86_Prefix_REX_b) == X86_Prefix_REX_b && Mode == X86_Bit_64)
    {
      if (!(rInsn.Prefix() & X86_Prefix_OpSize))
      {
        rInsn.Prefix() |= X86_Prefix_REX_w; /* d64/df64 constraint */
      }
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pop);
      if (Operand__d64_r12(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('popped_value', stack.bit) */
        AllExpr.push_back(Expr::MakeVar("popped_value", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()))));
        /* semantic: popped_value = stack.mem */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("popped_value", VariableExpression::Use),
          Expr::MakeMem(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), nullptr, Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo))));
        /* semantic: stack.id += stack.size */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeBinOp(
            OperationExpression::OpAdd,
            Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
            Expr::MakeBitVector(
              m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())),
              m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())) / 8)))
        );
        /* semantic: op0.val = popped_value */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("popped_value", VariableExpression::Use)));
        /* semantic: free_var('popped_value') */
        AllExpr.push_back(Expr::MakeVar("popped_value", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    else
    {
      if (!(rInsn.Prefix() & X86_Prefix_OpSize))
      {
        rInsn.Prefix() |= X86_Prefix_REX_w; /* d64/df64 constraint */
      }
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pop);
      if (Operand__d64_rSP(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('popped_value', stack.bit) */
        AllExpr.push_back(Expr::MakeVar("popped_value", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()))));
        /* semantic: popped_value = stack.mem */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("popped_value", VariableExpression::Use),
          Expr::MakeMem(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), nullptr, Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo))));
        /* semantic: stack.id += stack.size */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeBinOp(
            OperationExpression::OpAdd,
            Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
            Expr::MakeBitVector(
              m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())),
              m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())) / 8)))
        );
        /* semantic: op0.val = popped_value */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("popped_value", VariableExpression::Use)));
        /* semantic: free_var('popped_value') */
        AllExpr.push_back(Expr::MakeVar("popped_value", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
}

/** instructions
 * opcode: 5d
 *
 * mnemonic: pop
 * operand: ['d64_rBP']
 * semantic: alloc_var('popped_value', stack.bit);
popped_value = stack.mem;
stack.id += stack.size;
op0.val = popped_value;
free_var('popped_value');

 * constraint: d64
 *
 * mnemonic: pop
 * operand: ['d64_r13']
 * semantic: alloc_var('popped_value', stack.bit);
popped_value = stack.mem;
stack.id += stack.size;
op0.val = popped_value;
free_var('popped_value');

 * attr: ['rexb', 'm64']
 * constraint: d64
 *
**/
bool X86Architecture::Table_1_5d(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if ((rInsn.GetPrefix() & X86_Prefix_REX_b) == X86_Prefix_REX_b && Mode == X86_Bit_64)
    {
      if (!(rInsn.Prefix() & X86_Prefix_OpSize))
      {
        rInsn.Prefix() |= X86_Prefix_REX_w; /* d64/df64 constraint */
      }
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pop);
      if (Operand__d64_r13(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('popped_value', stack.bit) */
        AllExpr.push_back(Expr::MakeVar("popped_value", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()))));
        /* semantic: popped_value = stack.mem */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("popped_value", VariableExpression::Use),
          Expr::MakeMem(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), nullptr, Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo))));
        /* semantic: stack.id += stack.size */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeBinOp(
            OperationExpression::OpAdd,
            Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
            Expr::MakeBitVector(
              m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())),
              m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())) / 8)))
        );
        /* semantic: op0.val = popped_value */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("popped_value", VariableExpression::Use)));
        /* semantic: free_var('popped_value') */
        AllExpr.push_back(Expr::MakeVar("popped_value", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    else
    {
      if (!(rInsn.Prefix() & X86_Prefix_OpSize))
      {
        rInsn.Prefix() |= X86_Prefix_REX_w; /* d64/df64 constraint */
      }
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pop);
      if (Operand__d64_rBP(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('popped_value', stack.bit) */
        AllExpr.push_back(Expr::MakeVar("popped_value", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()))));
        /* semantic: popped_value = stack.mem */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("popped_value", VariableExpression::Use),
          Expr::MakeMem(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), nullptr, Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo))));
        /* semantic: stack.id += stack.size */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeBinOp(
            OperationExpression::OpAdd,
            Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
            Expr::MakeBitVector(
              m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())),
              m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())) / 8)))
        );
        /* semantic: op0.val = popped_value */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("popped_value", VariableExpression::Use)));
        /* semantic: free_var('popped_value') */
        AllExpr.push_back(Expr::MakeVar("popped_value", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
}

/** instructions
 * opcode: 5e
 *
 * mnemonic: pop
 * operand: ['d64_rSI']
 * semantic: alloc_var('popped_value', stack.bit);
popped_value = stack.mem;
stack.id += stack.size;
op0.val = popped_value;
free_var('popped_value');

 * constraint: d64
 *
 * mnemonic: pop
 * operand: ['d64_r14']
 * semantic: alloc_var('popped_value', stack.bit);
popped_value = stack.mem;
stack.id += stack.size;
op0.val = popped_value;
free_var('popped_value');

 * attr: ['rexb', 'm64']
 * constraint: d64
 *
**/
bool X86Architecture::Table_1_5e(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if ((rInsn.GetPrefix() & X86_Prefix_REX_b) == X86_Prefix_REX_b && Mode == X86_Bit_64)
    {
      if (!(rInsn.Prefix() & X86_Prefix_OpSize))
      {
        rInsn.Prefix() |= X86_Prefix_REX_w; /* d64/df64 constraint */
      }
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pop);
      if (Operand__d64_r14(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('popped_value', stack.bit) */
        AllExpr.push_back(Expr::MakeVar("popped_value", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()))));
        /* semantic: popped_value = stack.mem */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("popped_value", VariableExpression::Use),
          Expr::MakeMem(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), nullptr, Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo))));
        /* semantic: stack.id += stack.size */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeBinOp(
            OperationExpression::OpAdd,
            Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
            Expr::MakeBitVector(
              m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())),
              m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())) / 8)))
        );
        /* semantic: op0.val = popped_value */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("popped_value", VariableExpression::Use)));
        /* semantic: free_var('popped_value') */
        AllExpr.push_back(Expr::MakeVar("popped_value", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    else
    {
      if (!(rInsn.Prefix() & X86_Prefix_OpSize))
      {
        rInsn.Prefix() |= X86_Prefix_REX_w; /* d64/df64 constraint */
      }
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pop);
      if (Operand__d64_rSI(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('popped_value', stack.bit) */
        AllExpr.push_back(Expr::MakeVar("popped_value", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()))));
        /* semantic: popped_value = stack.mem */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("popped_value", VariableExpression::Use),
          Expr::MakeMem(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), nullptr, Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo))));
        /* semantic: stack.id += stack.size */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeBinOp(
            OperationExpression::OpAdd,
            Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
            Expr::MakeBitVector(
              m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())),
              m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())) / 8)))
        );
        /* semantic: op0.val = popped_value */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("popped_value", VariableExpression::Use)));
        /* semantic: free_var('popped_value') */
        AllExpr.push_back(Expr::MakeVar("popped_value", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
}

/** instructions
 * opcode: 5f
 *
 * mnemonic: pop
 * operand: ['d64_rDI']
 * semantic: alloc_var('popped_value', stack.bit);
popped_value = stack.mem;
stack.id += stack.size;
op0.val = popped_value;
free_var('popped_value');

 * constraint: d64
 *
 * mnemonic: pop
 * operand: ['d64_r15']
 * semantic: alloc_var('popped_value', stack.bit);
popped_value = stack.mem;
stack.id += stack.size;
op0.val = popped_value;
free_var('popped_value');

 * attr: ['rexb', 'm64']
 * constraint: d64
 *
**/
bool X86Architecture::Table_1_5f(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if ((rInsn.GetPrefix() & X86_Prefix_REX_b) == X86_Prefix_REX_b && Mode == X86_Bit_64)
    {
      if (!(rInsn.Prefix() & X86_Prefix_OpSize))
      {
        rInsn.Prefix() |= X86_Prefix_REX_w; /* d64/df64 constraint */
      }
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pop);
      if (Operand__d64_r15(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('popped_value', stack.bit) */
        AllExpr.push_back(Expr::MakeVar("popped_value", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()))));
        /* semantic: popped_value = stack.mem */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("popped_value", VariableExpression::Use),
          Expr::MakeMem(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), nullptr, Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo))));
        /* semantic: stack.id += stack.size */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeBinOp(
            OperationExpression::OpAdd,
            Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
            Expr::MakeBitVector(
              m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())),
              m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())) / 8)))
        );
        /* semantic: op0.val = popped_value */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("popped_value", VariableExpression::Use)));
        /* semantic: free_var('popped_value') */
        AllExpr.push_back(Expr::MakeVar("popped_value", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    else
    {
      if (!(rInsn.Prefix() & X86_Prefix_OpSize))
      {
        rInsn.Prefix() |= X86_Prefix_REX_w; /* d64/df64 constraint */
      }
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pop);
      if (Operand__d64_rDI(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('popped_value', stack.bit) */
        AllExpr.push_back(Expr::MakeVar("popped_value", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()))));
        /* semantic: popped_value = stack.mem */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("popped_value", VariableExpression::Use),
          Expr::MakeMem(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), nullptr, Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo))));
        /* semantic: stack.id += stack.size */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeBinOp(
            OperationExpression::OpAdd,
            Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
            Expr::MakeBitVector(
              m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())),
              m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())) / 8)))
        );
        /* semantic: op0.val = popped_value */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("popped_value", VariableExpression::Use)));
        /* semantic: free_var('popped_value') */
        AllExpr.push_back(Expr::MakeVar("popped_value", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
}

/** instructions
 * opcode: 60
 *
 * mnemonic: pusha
 * semantic: stack.id -= int16(2);stack.mem = ax.id;
stack.id -= int16(2);stack.mem = cx.id;
stack.id -= int16(2);stack.mem = dx.id;
stack.id -= int16(2);stack.mem = bx.id;
stack.id -= int16(2);stack.mem = sp.id + int16(8);
stack.id -= int16(2);stack.mem = bp.id;
stack.id -= int16(2);stack.mem = si.id;
stack.id -= int16(2);stack.mem = di.id;

 * attr: ['nm64']
 * cpu_model: >= X86_Arch_80186
 *
 * mnemonic: pushad
 * semantic: stack.id -= int32(4);stack.mem = eax.id;
stack.id -= int32(4);stack.mem = ecx.id;
stack.id -= int32(4);stack.mem = edx.id;
stack.id -= int32(4);stack.mem = ebx.id;
stack.id -= int32(4);stack.mem = esp.id + int32(16);
stack.id -= int32(4);stack.mem = ebp.id;
stack.id -= int32(4);stack.mem = esi.id;
stack.id -= int32(4);stack.mem = edi.id;

 * attr: ['nm64', 'na16']
 * cpu_model: >= X86_Arch_80186
 *
**/
bool X86Architecture::Table_1_60(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_80186 && Mode != X86_Bit_64 && (Mode == X86_Bit_16 && rInsn.Prefix() & X86_Prefix_AdSize) || (Mode != X86_Bit_16 && !(rInsn.Prefix() & X86_Prefix_AdSize)))
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pushad);
      {
        Expression::LSPType AllExpr;
        /* semantic: stack.id -= int32(4) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
            Expr::MakeBitVector(32, 0x4)))
        );
        /* semantic: stack.mem = eax.id */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeMem(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), nullptr, Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo)),
          Expr::MakeId(X86_Reg_Eax, &m_CpuInfo)));
        /* semantic: stack.id -= int32(4) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
            Expr::MakeBitVector(32, 0x4)))
        );
        /* semantic: stack.mem = ecx.id */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeMem(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), nullptr, Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo)),
          Expr::MakeId(X86_Reg_Ecx, &m_CpuInfo)));
        /* semantic: stack.id -= int32(4) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
            Expr::MakeBitVector(32, 0x4)))
        );
        /* semantic: stack.mem = edx.id */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeMem(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), nullptr, Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo)),
          Expr::MakeId(X86_Reg_Edx, &m_CpuInfo)));
        /* semantic: stack.id -= int32(4) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
            Expr::MakeBitVector(32, 0x4)))
        );
        /* semantic: stack.mem = ebx.id */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeMem(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), nullptr, Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo)),
          Expr::MakeId(X86_Reg_Ebx, &m_CpuInfo)));
        /* semantic: stack.id -= int32(4) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
            Expr::MakeBitVector(32, 0x4)))
        );
        /* semantic: stack.mem = esp.id + int32(16) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeMem(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), nullptr, Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo)),
          Expr::MakeBinOp(
            OperationExpression::OpAdd,
            Expr::MakeId(X86_Reg_Esp, &m_CpuInfo),
            Expr::MakeBitVector(32, 0x10))));
        /* semantic: stack.id -= int32(4) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
            Expr::MakeBitVector(32, 0x4)))
        );
        /* semantic: stack.mem = ebp.id */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeMem(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), nullptr, Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo)),
          Expr::MakeId(X86_Reg_Ebp, &m_CpuInfo)));
        /* semantic: stack.id -= int32(4) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
            Expr::MakeBitVector(32, 0x4)))
        );
        /* semantic: stack.mem = esi.id */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeMem(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), nullptr, Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo)),
          Expr::MakeId(X86_Reg_Esi, &m_CpuInfo)));
        /* semantic: stack.id -= int32(4) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
            Expr::MakeBitVector(32, 0x4)))
        );
        /* semantic: stack.mem = edi.id */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeMem(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), nullptr, Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo)),
          Expr::MakeId(X86_Reg_Edi, &m_CpuInfo)));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_80186 && Mode != X86_Bit_64)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pusha);
      {
        Expression::LSPType AllExpr;
        /* semantic: stack.id -= int16(2) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
            Expr::MakeBitVector(16, 0x2)))
        );
        /* semantic: stack.mem = ax.id */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeMem(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), nullptr, Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo)),
          Expr::MakeId(X86_Reg_Ax, &m_CpuInfo)));
        /* semantic: stack.id -= int16(2) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
            Expr::MakeBitVector(16, 0x2)))
        );
        /* semantic: stack.mem = cx.id */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeMem(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), nullptr, Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo)),
          Expr::MakeId(X86_Reg_Cx, &m_CpuInfo)));
        /* semantic: stack.id -= int16(2) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
            Expr::MakeBitVector(16, 0x2)))
        );
        /* semantic: stack.mem = dx.id */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeMem(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), nullptr, Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo)),
          Expr::MakeId(X86_Reg_Dx, &m_CpuInfo)));
        /* semantic: stack.id -= int16(2) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
            Expr::MakeBitVector(16, 0x2)))
        );
        /* semantic: stack.mem = bx.id */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeMem(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), nullptr, Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo)),
          Expr::MakeId(X86_Reg_Bx, &m_CpuInfo)));
        /* semantic: stack.id -= int16(2) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
            Expr::MakeBitVector(16, 0x2)))
        );
        /* semantic: stack.mem = sp.id + int16(8) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeMem(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), nullptr, Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo)),
          Expr::MakeBinOp(
            OperationExpression::OpAdd,
            Expr::MakeId(X86_Reg_Sp, &m_CpuInfo),
            Expr::MakeBitVector(16, 0x8))));
        /* semantic: stack.id -= int16(2) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
            Expr::MakeBitVector(16, 0x2)))
        );
        /* semantic: stack.mem = bp.id */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeMem(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), nullptr, Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo)),
          Expr::MakeId(X86_Reg_Bp, &m_CpuInfo)));
        /* semantic: stack.id -= int16(2) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
            Expr::MakeBitVector(16, 0x2)))
        );
        /* semantic: stack.mem = si.id */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeMem(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), nullptr, Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo)),
          Expr::MakeId(X86_Reg_Si, &m_CpuInfo)));
        /* semantic: stack.id -= int16(2) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
            Expr::MakeBitVector(16, 0x2)))
        );
        /* semantic: stack.mem = di.id */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeMem(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), nullptr, Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo)),
          Expr::MakeId(X86_Reg_Di, &m_CpuInfo)));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    return false;
}

/** instructions
 * opcode: 61
 *
 * mnemonic: popa
 * semantic: di.id = stack.mem;stack.id += int16(2);
si.id = stack.mem;stack.id += int16(2);
bp.id = stack.mem;stack.id += int16(2);
sp.id = stack.mem;stack.id += int16(2);
bx.id = stack.mem;stack.id += int16(2);
dx.id = stack.mem;stack.id += int16(2);
cx.id = stack.mem;stack.id += int16(2);
ax.id = stack.mem;stack.id += int16(2);

 * attr: ['nm64']
 * cpu_model: >= X86_Arch_80186
 *
 * mnemonic: popad
 * semantic: edi.id = stack.mem;stack.id += int32(4);
esi.id = stack.mem;stack.id += int32(4);
ebp.id = stack.mem;stack.id += int32(4);
esp.id = stack.mem;stack.id += int32(4);
ebx.id = stack.mem;stack.id += int32(4);
edx.id = stack.mem;stack.id += int32(4);
ecx.id = stack.mem;stack.id += int32(4);
eax.id = stack.mem;stack.id += int32(4);

 * attr: ['nm64', 'na16']
 * cpu_model: >= X86_Arch_80186
 *
**/
bool X86Architecture::Table_1_61(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_80186 && Mode != X86_Bit_64 && (Mode == X86_Bit_16 && rInsn.Prefix() & X86_Prefix_AdSize) || (Mode != X86_Bit_16 && !(rInsn.Prefix() & X86_Prefix_AdSize)))
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Popad);
      {
        Expression::LSPType AllExpr;
        /* semantic: edi.id = stack.mem */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_Reg_Edi, &m_CpuInfo),
          Expr::MakeMem(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), nullptr, Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo))));
        /* semantic: stack.id += int32(4) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeBinOp(
            OperationExpression::OpAdd,
            Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
            Expr::MakeBitVector(32, 0x4)))
        );
        /* semantic: esi.id = stack.mem */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_Reg_Esi, &m_CpuInfo),
          Expr::MakeMem(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), nullptr, Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo))));
        /* semantic: stack.id += int32(4) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeBinOp(
            OperationExpression::OpAdd,
            Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
            Expr::MakeBitVector(32, 0x4)))
        );
        /* semantic: ebp.id = stack.mem */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_Reg_Ebp, &m_CpuInfo),
          Expr::MakeMem(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), nullptr, Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo))));
        /* semantic: stack.id += int32(4) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeBinOp(
            OperationExpression::OpAdd,
            Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
            Expr::MakeBitVector(32, 0x4)))
        );
        /* semantic: esp.id = stack.mem */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_Reg_Esp, &m_CpuInfo),
          Expr::MakeMem(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), nullptr, Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo))));
        /* semantic: stack.id += int32(4) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeBinOp(
            OperationExpression::OpAdd,
            Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
            Expr::MakeBitVector(32, 0x4)))
        );
        /* semantic: ebx.id = stack.mem */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_Reg_Ebx, &m_CpuInfo),
          Expr::MakeMem(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), nullptr, Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo))));
        /* semantic: stack.id += int32(4) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeBinOp(
            OperationExpression::OpAdd,
            Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
            Expr::MakeBitVector(32, 0x4)))
        );
        /* semantic: edx.id = stack.mem */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_Reg_Edx, &m_CpuInfo),
          Expr::MakeMem(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), nullptr, Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo))));
        /* semantic: stack.id += int32(4) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeBinOp(
            OperationExpression::OpAdd,
            Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
            Expr::MakeBitVector(32, 0x4)))
        );
        /* semantic: ecx.id = stack.mem */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_Reg_Ecx, &m_CpuInfo),
          Expr::MakeMem(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), nullptr, Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo))));
        /* semantic: stack.id += int32(4) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeBinOp(
            OperationExpression::OpAdd,
            Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
            Expr::MakeBitVector(32, 0x4)))
        );
        /* semantic: eax.id = stack.mem */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_Reg_Eax, &m_CpuInfo),
          Expr::MakeMem(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), nullptr, Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo))));
        /* semantic: stack.id += int32(4) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeBinOp(
            OperationExpression::OpAdd,
            Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
            Expr::MakeBitVector(32, 0x4)))
        );
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_80186 && Mode != X86_Bit_64)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Popa);
      {
        Expression::LSPType AllExpr;
        /* semantic: di.id = stack.mem */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_Reg_Di, &m_CpuInfo),
          Expr::MakeMem(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), nullptr, Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo))));
        /* semantic: stack.id += int16(2) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeBinOp(
            OperationExpression::OpAdd,
            Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
            Expr::MakeBitVector(16, 0x2)))
        );
        /* semantic: si.id = stack.mem */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_Reg_Si, &m_CpuInfo),
          Expr::MakeMem(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), nullptr, Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo))));
        /* semantic: stack.id += int16(2) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeBinOp(
            OperationExpression::OpAdd,
            Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
            Expr::MakeBitVector(16, 0x2)))
        );
        /* semantic: bp.id = stack.mem */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_Reg_Bp, &m_CpuInfo),
          Expr::MakeMem(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), nullptr, Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo))));
        /* semantic: stack.id += int16(2) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeBinOp(
            OperationExpression::OpAdd,
            Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
            Expr::MakeBitVector(16, 0x2)))
        );
        /* semantic: sp.id = stack.mem */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_Reg_Sp, &m_CpuInfo),
          Expr::MakeMem(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), nullptr, Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo))));
        /* semantic: stack.id += int16(2) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeBinOp(
            OperationExpression::OpAdd,
            Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
            Expr::MakeBitVector(16, 0x2)))
        );
        /* semantic: bx.id = stack.mem */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_Reg_Bx, &m_CpuInfo),
          Expr::MakeMem(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), nullptr, Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo))));
        /* semantic: stack.id += int16(2) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeBinOp(
            OperationExpression::OpAdd,
            Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
            Expr::MakeBitVector(16, 0x2)))
        );
        /* semantic: dx.id = stack.mem */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_Reg_Dx, &m_CpuInfo),
          Expr::MakeMem(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), nullptr, Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo))));
        /* semantic: stack.id += int16(2) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeBinOp(
            OperationExpression::OpAdd,
            Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
            Expr::MakeBitVector(16, 0x2)))
        );
        /* semantic: cx.id = stack.mem */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_Reg_Cx, &m_CpuInfo),
          Expr::MakeMem(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), nullptr, Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo))));
        /* semantic: stack.id += int16(2) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeBinOp(
            OperationExpression::OpAdd,
            Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
            Expr::MakeBitVector(16, 0x2)))
        );
        /* semantic: ax.id = stack.mem */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_Reg_Ax, &m_CpuInfo),
          Expr::MakeMem(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), nullptr, Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo))));
        /* semantic: stack.id += int16(2) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeBinOp(
            OperationExpression::OpAdd,
            Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
            Expr::MakeBitVector(16, 0x2)))
        );
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    return false;
}

/** instruction
 * mnemonic: bound
 * opcode: 62
 * attr: ['nm64']
 * operand: ['Gv', 'Ma']
 * update_flags: ['if']
 * cpu_model: >= X86_Arch_80186
**/
bool X86Architecture::Table_1_62(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_80186 && Mode != X86_Bit_64)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Bound);
      if (Operand__Gv_Ma(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        rInsn.SetUpdatedFlags(X86_FlIf);
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    else
      return false;
}

/** instructions
 * opcode: 63
 *
 * mnemonic: arpl
 * operand: ['Ew', 'Gw']
 * update_flags: ['zf']
 * attr: ['nm64']
 * cpu_model: == X86_Arch_80286
 *
 * mnemonic: movsx
 * operand: ['Gv', 'Ed']
 * semantic: op0.val = sign_extend(op1.val, int(op0.bit, op0.bit));

 * cpu_model: >= X86_Arch_80386
 *
**/
bool X86Architecture::Table_1_63(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_80386)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Movsx);
      if (Operand__Gv_Ed(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: op0.val = sign_extend(op1.val, int(op0.bit, op0.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeBinOp(OperationExpression::OpSext, rInsn.GetOperand(1), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()))));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") == X86_Arch_80286 && Mode != X86_Bit_64)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Arpl);
      if (Operand__Ew_Gw(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        rInsn.SetUpdatedFlags(X86_FlZf);
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    return false;
}

/** instruction
 * mnemonic: FS
 * opcode: 64
 * cpu_model: >= X86_Arch_80386
 * constraint: pfx1
**/
bool X86Architecture::Table_1_64(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_80386)
    {
      rInsn.Length()++;
      rInsn.Prefix() |= X86_Prefix_FS;
      return Disassemble(rBinStrm, Offset, rInsn, Mode);
    }
    else
      return false;
}

/** instruction
 * mnemonic: GS
 * opcode: 65
 * cpu_model: >= X86_Arch_80386
 * constraint: pfx1
**/
bool X86Architecture::Table_1_65(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_80386)
    {
      rInsn.Length()++;
      rInsn.Prefix() |= X86_Prefix_GS;
      return Disassemble(rBinStrm, Offset, rInsn, Mode);
    }
    else
      return false;
}

/** instruction
 * mnemonic: OpSize
 * opcode: 66
 * cpu_model: >= X86_Arch_80386
 * constraint: pfx1
**/
bool X86Architecture::Table_1_66(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_80386)
    {
      rInsn.Length()++;
      rInsn.Prefix() |= X86_Prefix_OpSize;
      return Disassemble(rBinStrm, Offset, rInsn, Mode);
    }
    else
      return false;
}

/** instruction
 * mnemonic: AdSize
 * opcode: 67
 * cpu_model: >= X86_Arch_80386
 * constraint: pfx1
**/
bool X86Architecture::Table_1_67(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_80386)
    {
      rInsn.Length()++;
      rInsn.Prefix() |= X86_Prefix_AdSize;
      return Disassemble(rBinStrm, Offset, rInsn, Mode);
    }
    else
      return false;
}

/** instruction
 * mnemonic: push
 * semantic: alloc_var('pushed_value', stack.bit);
pushed_value = sign_extend(op0.val, int(stack.bit, stack.bit));
stack.id -= stack.size;
stack.mem = pushed_value;
free_var('pushed_value');

 * constraint: d64
 * operand: ['Iz']
 * opcode: 68
 * cpu_model: >= X86_Arch_80186
**/
bool X86Architecture::Table_1_68(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_80186)
    {
      if (!(rInsn.Prefix() & X86_Prefix_OpSize))
      {
        rInsn.Prefix() |= X86_Prefix_REX_w; /* d64/df64 constraint */
      }
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Push);
      if (Operand__Iz(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('pushed_value', stack.bit) */
        AllExpr.push_back(Expr::MakeVar("pushed_value", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()))));
        /* semantic: pushed_value = sign_extend(op0.val, int(stack.bit, stack.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pushed_value", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpSext, rInsn.GetOperand(0), Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()))))));
        /* semantic: stack.id -= stack.size */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
            Expr::MakeBitVector(
              m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())),
              m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())) / 8)))
        );
        /* semantic: stack.mem = pushed_value */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeMem(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), nullptr, Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo)),
          Expr::MakeVar("pushed_value", VariableExpression::Use)));
        /* semantic: free_var('pushed_value') */
        AllExpr.push_back(Expr::MakeVar("pushed_value", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    else
      return false;
}

/** instruction
 * mnemonic: imul
 * clear_flags: ['sf', 'zf', 'af', 'pf']
 * semantic: alloc_var('res', op0.bit);
alloc_var('mul_res', concat(op0.bit, ignore(' * 2')));
alloc_var('extended', concat(op0.bit, ignore(' * 2')));
mul_res = sign_extend(op1.val, int_type(concat(op0.bit, ignore(' * 2')))) * sign_extend(op2.val, int_type(concat(op0.bit, ignore(' * 2'))));
res = bit_cast(mul_res, int_type(op0.bit));
call('sign_flag');
extended = sign_extend(res, int_type(concat(op0.bit, ignore(' * 2'))));
if __expr and extended == mul_res:
  of.id = int1(0)
  cf.id = int1(0)
else:
  of.id = int1(1)
  cf.id = int1(1);
op0.val = res;
free_var('extended');
free_var('mul_res');
free_var('res');

 * operand: ['Gv', 'Ev', 'Iz']
 * opcode: 69
 * update_flags: ['of', 'cf']
 * cpu_model: >= X86_Arch_80186
**/
bool X86Architecture::Table_1_69(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_80186)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Imul);
      if (Operand__Gv_Ev_Iz(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        rInsn.SetUpdatedFlags(X86_FlOf | X86_FlCf);
        rInsn.SetClearedFlags(X86_FlSf | X86_FlZf | X86_FlAf | X86_FlPf);
        AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlSf, &m_CpuInfo), Expr::MakeBoolean(false)));
        AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlZf, &m_CpuInfo), Expr::MakeBoolean(false)));
        AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlAf, &m_CpuInfo), Expr::MakeBoolean(false)));
        AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlPf, &m_CpuInfo), Expr::MakeBoolean(false)));
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: alloc_var('mul_res', concat(op0.bit, ignore(' * 2'))) */
        AllExpr.push_back(Expr::MakeVar("mul_res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize() * 2));
        /* semantic: alloc_var('extended', concat(op0.bit, ignore(' * 2'))) */
        AllExpr.push_back(Expr::MakeVar("extended", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize() * 2));
        /* semantic: mul_res = sign_extend(op1.val, int_type(concat(op0.bit, ignore(' * 2')))) * sign_extend(op2.val, int_type(concat(op0.bit, ignore(' * 2')))) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("mul_res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpMul,
            Expr::MakeBinOp(OperationExpression::OpSext, rInsn.GetOperand(1), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize() * 2, rInsn.GetOperand(0)->GetBitSize() * 2)),
            Expr::MakeBinOp(OperationExpression::OpSext, rInsn.GetOperand(2), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize() * 2, rInsn.GetOperand(0)->GetBitSize() * 2)))));
        /* semantic: res = bit_cast(mul_res, int_type(op0.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeVar("mul_res", VariableExpression::Use), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()))));
        /* semantic: call('sign_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlSf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        /* semantic: extended = sign_extend(res, int_type(concat(op0.bit, ignore(' * 2')))) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("extended", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpSext, Expr::MakeVar("res", VariableExpression::Use), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize() * 2, rInsn.GetOperand(0)->GetBitSize() * 2))));
        /* semantic: if __expr and extended == mul_res:
          of.id = int1(0)
          cf.id = int1(0)
        else:
          of.id = int1(1)
          cf.id = int1(1) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeVar("extended", VariableExpression::Use),
          Expr::MakeVar("mul_res", VariableExpression::Use),
          Expr::MakeBind({
          Expr::MakeAssign(
            Expr::MakeId(X86_FlOf, &m_CpuInfo),
            Expr::MakeBitVector(1, 0x0)),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlCf, &m_CpuInfo),
            Expr::MakeBitVector(1, 0x0))})
        ,
          Expr::MakeBind({
          Expr::MakeAssign(
            Expr::MakeId(X86_FlOf, &m_CpuInfo),
            Expr::MakeBitVector(1, 0x1)),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlCf, &m_CpuInfo),
            Expr::MakeBitVector(1, 0x1))})
        ));
        /* semantic: op0.val = res */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("res", VariableExpression::Use)));
        /* semantic: free_var('extended') */
        AllExpr.push_back(Expr::MakeVar("extended", VariableExpression::Free));
        /* semantic: free_var('mul_res') */
        AllExpr.push_back(Expr::MakeVar("mul_res", VariableExpression::Free));
        /* semantic: free_var('res') */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    else
      return false;
}

/** instruction
 * mnemonic: push
 * semantic: alloc_var('pushed_value', stack.bit);
pushed_value = sign_extend(op0.val, int(stack.bit, stack.bit));
stack.id -= stack.size;
stack.mem = pushed_value;
free_var('pushed_value');

 * constraint: d64
 * operand: ['Ib']
 * opcode: 6a
 * cpu_model: >= X86_Arch_80186
**/
bool X86Architecture::Table_1_6a(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_80186)
    {
      if (!(rInsn.Prefix() & X86_Prefix_OpSize))
      {
        rInsn.Prefix() |= X86_Prefix_REX_w; /* d64/df64 constraint */
      }
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Push);
      if (Operand__Ib(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('pushed_value', stack.bit) */
        AllExpr.push_back(Expr::MakeVar("pushed_value", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()))));
        /* semantic: pushed_value = sign_extend(op0.val, int(stack.bit, stack.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pushed_value", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpSext, rInsn.GetOperand(0), Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()))))));
        /* semantic: stack.id -= stack.size */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
            Expr::MakeBitVector(
              m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())),
              m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())) / 8)))
        );
        /* semantic: stack.mem = pushed_value */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeMem(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), nullptr, Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo)),
          Expr::MakeVar("pushed_value", VariableExpression::Use)));
        /* semantic: free_var('pushed_value') */
        AllExpr.push_back(Expr::MakeVar("pushed_value", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    else
      return false;
}

/** instruction
 * mnemonic: imul
 * clear_flags: ['sf', 'zf', 'af', 'pf']
 * semantic: alloc_var('res', op0.bit);
alloc_var('mul_res', concat(op0.bit, ignore(' * 2')));
alloc_var('extended', concat(op0.bit, ignore(' * 2')));
mul_res = sign_extend(op1.val, int_type(concat(op0.bit, ignore(' * 2')))) * sign_extend(op2.val, int_type(concat(op0.bit, ignore(' * 2'))));
res = bit_cast(mul_res, int_type(op0.bit));
call('sign_flag');
extended = sign_extend(res, int_type(concat(op0.bit, ignore(' * 2'))));
if __expr and extended == mul_res:
  of.id = int1(0)
  cf.id = int1(0)
else:
  of.id = int1(1)
  cf.id = int1(1);
op0.val = res;
free_var('extended');
free_var('mul_res');
free_var('res');

 * operand: ['Gv', 'Ev', 'Ibs']
 * opcode: 6b
 * update_flags: ['of', 'cf']
 * cpu_model: >= X86_Arch_80186
**/
bool X86Architecture::Table_1_6b(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_80186)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Imul);
      if (Operand__Gv_Ev_Ibs(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        rInsn.SetUpdatedFlags(X86_FlOf | X86_FlCf);
        rInsn.SetClearedFlags(X86_FlSf | X86_FlZf | X86_FlAf | X86_FlPf);
        AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlSf, &m_CpuInfo), Expr::MakeBoolean(false)));
        AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlZf, &m_CpuInfo), Expr::MakeBoolean(false)));
        AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlAf, &m_CpuInfo), Expr::MakeBoolean(false)));
        AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlPf, &m_CpuInfo), Expr::MakeBoolean(false)));
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: alloc_var('mul_res', concat(op0.bit, ignore(' * 2'))) */
        AllExpr.push_back(Expr::MakeVar("mul_res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize() * 2));
        /* semantic: alloc_var('extended', concat(op0.bit, ignore(' * 2'))) */
        AllExpr.push_back(Expr::MakeVar("extended", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize() * 2));
        /* semantic: mul_res = sign_extend(op1.val, int_type(concat(op0.bit, ignore(' * 2')))) * sign_extend(op2.val, int_type(concat(op0.bit, ignore(' * 2')))) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("mul_res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpMul,
            Expr::MakeBinOp(OperationExpression::OpSext, rInsn.GetOperand(1), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize() * 2, rInsn.GetOperand(0)->GetBitSize() * 2)),
            Expr::MakeBinOp(OperationExpression::OpSext, rInsn.GetOperand(2), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize() * 2, rInsn.GetOperand(0)->GetBitSize() * 2)))));
        /* semantic: res = bit_cast(mul_res, int_type(op0.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeVar("mul_res", VariableExpression::Use), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()))));
        /* semantic: call('sign_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlSf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        /* semantic: extended = sign_extend(res, int_type(concat(op0.bit, ignore(' * 2')))) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("extended", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpSext, Expr::MakeVar("res", VariableExpression::Use), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize() * 2, rInsn.GetOperand(0)->GetBitSize() * 2))));
        /* semantic: if __expr and extended == mul_res:
          of.id = int1(0)
          cf.id = int1(0)
        else:
          of.id = int1(1)
          cf.id = int1(1) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeVar("extended", VariableExpression::Use),
          Expr::MakeVar("mul_res", VariableExpression::Use),
          Expr::MakeBind({
          Expr::MakeAssign(
            Expr::MakeId(X86_FlOf, &m_CpuInfo),
            Expr::MakeBitVector(1, 0x0)),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlCf, &m_CpuInfo),
            Expr::MakeBitVector(1, 0x0))})
        ,
          Expr::MakeBind({
          Expr::MakeAssign(
            Expr::MakeId(X86_FlOf, &m_CpuInfo),
            Expr::MakeBitVector(1, 0x1)),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlCf, &m_CpuInfo),
            Expr::MakeBitVector(1, 0x1))})
        ));
        /* semantic: op0.val = res */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("res", VariableExpression::Use)));
        /* semantic: free_var('extended') */
        AllExpr.push_back(Expr::MakeVar("extended", VariableExpression::Free));
        /* semantic: free_var('mul_res') */
        AllExpr.push_back(Expr::MakeVar("mul_res", VariableExpression::Free));
        /* semantic: free_var('res') */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    else
      return false;
}

/** instruction
 * mnemonic: ins
 * operand: ['Yb', 'DX']
 * test_flags: ['df']
 * opcode: 6c
 * cpu_model: >= X86_Arch_80186
**/
bool X86Architecture::Table_1_6c(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_80186)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Ins);
      if (Operand__Yb_DX(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        rInsn.SetTestedFlags(X86_FlDf);
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    else
      return false;
}

/** instruction
 * mnemonic: ins
 * operand: ['Yz', 'DX']
 * test_flags: ['df']
 * opcode: 6d
 * cpu_model: >= X86_Arch_80186
**/
bool X86Architecture::Table_1_6d(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_80186)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Ins);
      if (Operand__Yz_DX(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        rInsn.SetTestedFlags(X86_FlDf);
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    else
      return false;
}

/** instruction
 * mnemonic: outs
 * operand: ['DX', 'Xb']
 * test_flags: ['df']
 * opcode: 6e
 * cpu_model: >= X86_Arch_80186
**/
bool X86Architecture::Table_1_6e(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_80186)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Outs);
      if (Operand__DX_Xb(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        rInsn.SetTestedFlags(X86_FlDf);
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    else
      return false;
}

/** instruction
 * mnemonic: outs
 * operand: ['DX', 'Xz']
 * test_flags: ['df']
 * opcode: 6f
 * cpu_model: >= X86_Arch_80186
**/
bool X86Architecture::Table_1_6f(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_80186)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Outs);
      if (Operand__DX_Xz(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        rInsn.SetTestedFlags(X86_FlDf);
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    else
      return false;
}

/** instruction
 * mnemonic: jo
 * operand: ['Jb']
 * test_flags: ['of']
 * semantic: if __expr and of.id == int1(1): program.id = op0.val;

 * operation_type: ['jmp', 'cond']
 * opcode: 70
**/
bool X86Architecture::Table_1_70(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Jo);
    rInsn.SubType() |= Instruction::JumpType | Instruction::ConditionalType;
    if (Operand__Jb(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    {
      Expression::LSPType AllExpr;
      rInsn.SetTestedFlags(X86_FlOf);
      /* semantic: if __expr and of.id == int1(1): program.id = op0.val */
      AllExpr.push_back(Expr::MakeIfElseCond(
        ConditionExpression::CondEq,
        Expr::MakeId(X86_FlOf, &m_CpuInfo),
        Expr::MakeBitVector(1, 0x1),
        Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::ProgramPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          rInsn.GetOperand(0)), nullptr)
      );
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instruction
 * mnemonic: jno
 * operand: ['Jb']
 * test_flags: ['of']
 * semantic: if __expr and of.id == int1(0): program.id = op0.val;

 * operation_type: ['jmp', 'cond']
 * opcode: 71
**/
bool X86Architecture::Table_1_71(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Jno);
    rInsn.SubType() |= Instruction::JumpType | Instruction::ConditionalType;
    if (Operand__Jb(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    {
      Expression::LSPType AllExpr;
      rInsn.SetTestedFlags(X86_FlOf);
      /* semantic: if __expr and of.id == int1(0): program.id = op0.val */
      AllExpr.push_back(Expr::MakeIfElseCond(
        ConditionExpression::CondEq,
        Expr::MakeId(X86_FlOf, &m_CpuInfo),
        Expr::MakeBitVector(1, 0x0),
        Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::ProgramPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          rInsn.GetOperand(0)), nullptr)
      );
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instruction
 * mnemonic: jb
 * operand: ['Jb']
 * test_flags: ['cf']
 * semantic: if __expr and cf.id == int1(1): program.id = op0.val;

 * operation_type: ['jmp', 'cond']
 * opcode: 72
**/
bool X86Architecture::Table_1_72(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Jb);
    rInsn.SubType() |= Instruction::JumpType | Instruction::ConditionalType;
    if (Operand__Jb(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    {
      Expression::LSPType AllExpr;
      rInsn.SetTestedFlags(X86_FlCf);
      /* semantic: if __expr and cf.id == int1(1): program.id = op0.val */
      AllExpr.push_back(Expr::MakeIfElseCond(
        ConditionExpression::CondEq,
        Expr::MakeId(X86_FlCf, &m_CpuInfo),
        Expr::MakeBitVector(1, 0x1),
        Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::ProgramPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          rInsn.GetOperand(0)), nullptr)
      );
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instruction
 * mnemonic: jnb
 * operand: ['Jb']
 * test_flags: ['cf']
 * semantic: if __expr and cf.id == int1(0): program.id = op0.val;

 * operation_type: ['jmp', 'cond']
 * opcode: 73
**/
bool X86Architecture::Table_1_73(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Jnb);
    rInsn.SubType() |= Instruction::JumpType | Instruction::ConditionalType;
    if (Operand__Jb(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    {
      Expression::LSPType AllExpr;
      rInsn.SetTestedFlags(X86_FlCf);
      /* semantic: if __expr and cf.id == int1(0): program.id = op0.val */
      AllExpr.push_back(Expr::MakeIfElseCond(
        ConditionExpression::CondEq,
        Expr::MakeId(X86_FlCf, &m_CpuInfo),
        Expr::MakeBitVector(1, 0x0),
        Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::ProgramPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          rInsn.GetOperand(0)), nullptr)
      );
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instruction
 * mnemonic: jz
 * operand: ['Jb']
 * test_flags: ['zf']
 * semantic: if __expr and zf.id == int1(1): program.id = op0.val;

 * operation_type: ['jmp', 'cond']
 * opcode: 74
**/
bool X86Architecture::Table_1_74(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Jz);
    rInsn.SubType() |= Instruction::JumpType | Instruction::ConditionalType;
    if (Operand__Jb(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    {
      Expression::LSPType AllExpr;
      rInsn.SetTestedFlags(X86_FlZf);
      /* semantic: if __expr and zf.id == int1(1): program.id = op0.val */
      AllExpr.push_back(Expr::MakeIfElseCond(
        ConditionExpression::CondEq,
        Expr::MakeId(X86_FlZf, &m_CpuInfo),
        Expr::MakeBitVector(1, 0x1),
        Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::ProgramPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          rInsn.GetOperand(0)), nullptr)
      );
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instruction
 * mnemonic: jnz
 * operand: ['Jb']
 * test_flags: ['zf']
 * semantic: if __expr and zf.id == int1(0): program.id = op0.val;

 * operation_type: ['jmp', 'cond']
 * opcode: 75
**/
bool X86Architecture::Table_1_75(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Jnz);
    rInsn.SubType() |= Instruction::JumpType | Instruction::ConditionalType;
    if (Operand__Jb(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    {
      Expression::LSPType AllExpr;
      rInsn.SetTestedFlags(X86_FlZf);
      /* semantic: if __expr and zf.id == int1(0): program.id = op0.val */
      AllExpr.push_back(Expr::MakeIfElseCond(
        ConditionExpression::CondEq,
        Expr::MakeId(X86_FlZf, &m_CpuInfo),
        Expr::MakeBitVector(1, 0x0),
        Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::ProgramPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          rInsn.GetOperand(0)), nullptr)
      );
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instruction
 * mnemonic: jbe
 * operand: ['Jb']
 * test_flags: ['cf', 'zf']
 * semantic: if __expr and (cf.id | zf.id) != int1(0): program.id = op0.val;

 * operation_type: ['jmp', 'cond']
 * opcode: 76
**/
bool X86Architecture::Table_1_76(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Jbe);
    rInsn.SubType() |= Instruction::JumpType | Instruction::ConditionalType;
    if (Operand__Jb(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    {
      Expression::LSPType AllExpr;
      rInsn.SetTestedFlags(X86_FlCf | X86_FlZf);
      /* semantic: if __expr and (cf.id | zf.id) != int1(0): program.id = op0.val */
      AllExpr.push_back(Expr::MakeIfElseCond(
        ConditionExpression::CondNe,
        Expr::MakeBinOp(
          OperationExpression::OpOr,
          Expr::MakeId(X86_FlCf, &m_CpuInfo),
          Expr::MakeId(X86_FlZf, &m_CpuInfo)),
        Expr::MakeBitVector(1, 0x0),
        Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::ProgramPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          rInsn.GetOperand(0)), nullptr)
      );
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instruction
 * mnemonic: jnbe
 * operand: ['Jb']
 * test_flags: ['cf', 'zf']
 * semantic: if __expr and (cf.id | zf.id) == int1(0): program.id = op0.val;

 * operation_type: ['jmp', 'cond']
 * opcode: 77
**/
bool X86Architecture::Table_1_77(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Jnbe);
    rInsn.SubType() |= Instruction::JumpType | Instruction::ConditionalType;
    if (Operand__Jb(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    {
      Expression::LSPType AllExpr;
      rInsn.SetTestedFlags(X86_FlCf | X86_FlZf);
      /* semantic: if __expr and (cf.id | zf.id) == int1(0): program.id = op0.val */
      AllExpr.push_back(Expr::MakeIfElseCond(
        ConditionExpression::CondEq,
        Expr::MakeBinOp(
          OperationExpression::OpOr,
          Expr::MakeId(X86_FlCf, &m_CpuInfo),
          Expr::MakeId(X86_FlZf, &m_CpuInfo)),
        Expr::MakeBitVector(1, 0x0),
        Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::ProgramPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          rInsn.GetOperand(0)), nullptr)
      );
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instruction
 * mnemonic: js
 * operand: ['Jb']
 * test_flags: ['sf']
 * semantic: if __expr and sf.id == int1(1): program.id = op0.val;

 * operation_type: ['jmp', 'cond']
 * opcode: 78
**/
bool X86Architecture::Table_1_78(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Js);
    rInsn.SubType() |= Instruction::JumpType | Instruction::ConditionalType;
    if (Operand__Jb(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    {
      Expression::LSPType AllExpr;
      rInsn.SetTestedFlags(X86_FlSf);
      /* semantic: if __expr and sf.id == int1(1): program.id = op0.val */
      AllExpr.push_back(Expr::MakeIfElseCond(
        ConditionExpression::CondEq,
        Expr::MakeId(X86_FlSf, &m_CpuInfo),
        Expr::MakeBitVector(1, 0x1),
        Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::ProgramPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          rInsn.GetOperand(0)), nullptr)
      );
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instruction
 * mnemonic: jns
 * operand: ['Jb']
 * test_flags: ['sf']
 * semantic: if __expr and sf.id == int1(0): program.id = op0.val;

 * operation_type: ['jmp', 'cond']
 * opcode: 79
**/
bool X86Architecture::Table_1_79(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Jns);
    rInsn.SubType() |= Instruction::JumpType | Instruction::ConditionalType;
    if (Operand__Jb(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    {
      Expression::LSPType AllExpr;
      rInsn.SetTestedFlags(X86_FlSf);
      /* semantic: if __expr and sf.id == int1(0): program.id = op0.val */
      AllExpr.push_back(Expr::MakeIfElseCond(
        ConditionExpression::CondEq,
        Expr::MakeId(X86_FlSf, &m_CpuInfo),
        Expr::MakeBitVector(1, 0x0),
        Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::ProgramPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          rInsn.GetOperand(0)), nullptr)
      );
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instruction
 * mnemonic: jp
 * operand: ['Jb']
 * test_flags: ['pf']
 * semantic: if __expr and pf.id == int1(1): program.id = op0.val;

 * operation_type: ['jmp', 'cond']
 * opcode: 7a
**/
bool X86Architecture::Table_1_7a(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Jp);
    rInsn.SubType() |= Instruction::JumpType | Instruction::ConditionalType;
    if (Operand__Jb(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    {
      Expression::LSPType AllExpr;
      rInsn.SetTestedFlags(X86_FlPf);
      /* semantic: if __expr and pf.id == int1(1): program.id = op0.val */
      AllExpr.push_back(Expr::MakeIfElseCond(
        ConditionExpression::CondEq,
        Expr::MakeId(X86_FlPf, &m_CpuInfo),
        Expr::MakeBitVector(1, 0x1),
        Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::ProgramPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          rInsn.GetOperand(0)), nullptr)
      );
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instruction
 * mnemonic: jnp
 * operand: ['Jb']
 * test_flags: ['pf']
 * semantic: if __expr and pf.id == int1(0): program.id = op0.val;

 * operation_type: ['jmp', 'cond']
 * opcode: 7b
**/
bool X86Architecture::Table_1_7b(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Jnp);
    rInsn.SubType() |= Instruction::JumpType | Instruction::ConditionalType;
    if (Operand__Jb(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    {
      Expression::LSPType AllExpr;
      rInsn.SetTestedFlags(X86_FlPf);
      /* semantic: if __expr and pf.id == int1(0): program.id = op0.val */
      AllExpr.push_back(Expr::MakeIfElseCond(
        ConditionExpression::CondEq,
        Expr::MakeId(X86_FlPf, &m_CpuInfo),
        Expr::MakeBitVector(1, 0x0),
        Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::ProgramPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          rInsn.GetOperand(0)), nullptr)
      );
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instruction
 * mnemonic: jl
 * operand: ['Jb']
 * test_flags: ['of', 'sf']
 * semantic: if __expr and (sf.id ^ of.id) != int1(0): program.id = op0.val;

 * operation_type: ['jmp', 'cond']
 * opcode: 7c
**/
bool X86Architecture::Table_1_7c(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Jl);
    rInsn.SubType() |= Instruction::JumpType | Instruction::ConditionalType;
    if (Operand__Jb(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    {
      Expression::LSPType AllExpr;
      rInsn.SetTestedFlags(X86_FlOf | X86_FlSf);
      /* semantic: if __expr and (sf.id ^ of.id) != int1(0): program.id = op0.val */
      AllExpr.push_back(Expr::MakeIfElseCond(
        ConditionExpression::CondNe,
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeId(X86_FlSf, &m_CpuInfo),
          Expr::MakeId(X86_FlOf, &m_CpuInfo)),
        Expr::MakeBitVector(1, 0x0),
        Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::ProgramPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          rInsn.GetOperand(0)), nullptr)
      );
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instruction
 * mnemonic: jnl
 * operand: ['Jb']
 * test_flags: ['of', 'sf']
 * semantic: if __expr and (sf.id ^ of.id) == int1(0): program.id = op0.val;

 * operation_type: ['jmp', 'cond']
 * opcode: 7d
**/
bool X86Architecture::Table_1_7d(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Jnl);
    rInsn.SubType() |= Instruction::JumpType | Instruction::ConditionalType;
    if (Operand__Jb(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    {
      Expression::LSPType AllExpr;
      rInsn.SetTestedFlags(X86_FlOf | X86_FlSf);
      /* semantic: if __expr and (sf.id ^ of.id) == int1(0): program.id = op0.val */
      AllExpr.push_back(Expr::MakeIfElseCond(
        ConditionExpression::CondEq,
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeId(X86_FlSf, &m_CpuInfo),
          Expr::MakeId(X86_FlOf, &m_CpuInfo)),
        Expr::MakeBitVector(1, 0x0),
        Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::ProgramPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          rInsn.GetOperand(0)), nullptr)
      );
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instruction
 * mnemonic: jle
 * operand: ['Jb']
 * test_flags: ['of', 'sf', 'zf']
 * semantic: if __expr and ((sf.id ^ of.id) | zf.id) != int1(0): program.id = op0.val;

 * operation_type: ['jmp', 'cond']
 * opcode: 7e
**/
bool X86Architecture::Table_1_7e(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Jle);
    rInsn.SubType() |= Instruction::JumpType | Instruction::ConditionalType;
    if (Operand__Jb(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    {
      Expression::LSPType AllExpr;
      rInsn.SetTestedFlags(X86_FlOf | X86_FlSf | X86_FlZf);
      /* semantic: if __expr and ((sf.id ^ of.id) | zf.id) != int1(0): program.id = op0.val */
      AllExpr.push_back(Expr::MakeIfElseCond(
        ConditionExpression::CondNe,
        Expr::MakeBinOp(
          OperationExpression::OpOr,
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeId(X86_FlSf, &m_CpuInfo),
            Expr::MakeId(X86_FlOf, &m_CpuInfo)),
          Expr::MakeId(X86_FlZf, &m_CpuInfo)),
        Expr::MakeBitVector(1, 0x0),
        Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::ProgramPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          rInsn.GetOperand(0)), nullptr)
      );
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instruction
 * mnemonic: jnle
 * operand: ['Jb']
 * test_flags: ['of', 'sf', 'zf']
 * semantic: if __expr and ((sf.id ^ of.id) | zf.id) == int1(0): program.id = op0.val;

 * operation_type: ['jmp', 'cond']
 * opcode: 7f
**/
bool X86Architecture::Table_1_7f(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Jnle);
    rInsn.SubType() |= Instruction::JumpType | Instruction::ConditionalType;
    if (Operand__Jb(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    {
      Expression::LSPType AllExpr;
      rInsn.SetTestedFlags(X86_FlOf | X86_FlSf | X86_FlZf);
      /* semantic: if __expr and ((sf.id ^ of.id) | zf.id) == int1(0): program.id = op0.val */
      AllExpr.push_back(Expr::MakeIfElseCond(
        ConditionExpression::CondEq,
        Expr::MakeBinOp(
          OperationExpression::OpOr,
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeId(X86_FlSf, &m_CpuInfo),
            Expr::MakeId(X86_FlOf, &m_CpuInfo)),
          Expr::MakeId(X86_FlZf, &m_CpuInfo)),
        Expr::MakeBitVector(1, 0x0),
        Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::ProgramPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          rInsn.GetOperand(0)), nullptr)
      );
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** group:
 * mnemonic: add
 * opcode: 00
 * update_flags: ['cf', 'pf', 'af', 'zf', 'sf', 'of']
 * semantic: alloc_var('res', op0.bit);
res.val = op0.val + op1.val;
call('overflow_flag_add');
call('carry_flag_add');
call('sign_flag');
call('zero_flag');
call('parity_flag');
call('adjust_flag');
op0.val = res.val;
free_var('res');

 *
 * mnemonic: or
 * clear_flags: ['af', 'of', 'cf']
 * update_flags: ['cf', 'pf', 'af', 'zf', 'sf', 'of']
 * opcode: 01
 * semantic: alloc_var('res', op0.bit);
res = op0.val | op1.val;
of.id = int1(0)
cf.id = int1(0)
call('sign_flag')
call('zero_flag')
call('parity_flag')
op0.val = res;
free_var('res');

 *
 * mnemonic: adc
 * opcode: 02
 * test_flags: ['cf']
 * update_flags: ['cf', 'pf', 'af', 'zf', 'sf', 'of']
 * semantic: alloc_var('res', op0.bit);
res.val = op0.val + op1.val + bit_cast(cf.id, int(op0.bit, op0.bit));
call('overflow_flag_add');
call('carry_flag_add');
call('sign_flag');
call('zero_flag');
call('parity_flag');
call('adjust_flag');
op0.val = res.val;
free_var('res');

 *
 * mnemonic: sbb
 * opcode: 03
 * test_flags: ['cf']
 * update_flags: ['cf', 'pf', 'af', 'zf', 'sf', 'of']
 * semantic: alloc_var('res', op0.bit);
res = op0.val - op1.val - bit_cast(cf.id, int(op0.bit, op0.bit));
call('overflow_flag_sub');
call('carry_flag_sub');
call('sign_flag');
call('zero_flag');
call('parity_flag');
call('adjust_flag');
op0.val = res.val;
free_var('res');

 *
 * mnemonic: and
 * clear_flags: ['af', 'of', 'cf']
 * update_flags: ['cf', 'pf', 'af', 'zf', 'sf', 'of']
 * opcode: 04
 * semantic: alloc_var('res', op0.bit);
res = op0.val & op1.val;
of.id = int1(0)
cf.id = int1(0)
call('sign_flag')
call('zero_flag')
call('parity_flag')
op0.val = res;
free_var('res');

 *
 * mnemonic: sub
 * opcode: 05
 * update_flags: ['cf', 'pf', 'af', 'zf', 'sf', 'of']
 * semantic: alloc_var('res', op0.bit);
res = op0.val - op1.val;
call('overflow_flag_sub');
call('carry_flag_sub');
call('sign_flag');
call('zero_flag');
call('parity_flag');
call('adjust_flag');
op0.val = res;
free_var('res');

 *
 * mnemonic: xor
 * clear_flags: ['af', 'of', 'cf']
 * update_flags: ['cf', 'pf', 'af', 'zf', 'sf', 'of']
 * opcode: 06
 * semantic: alloc_var('res', op0.bit);
res = op0.val ^ op1.val;
of.id = int1(0)
cf.id = int1(0)
call('sign_flag')
call('zero_flag')
call('parity_flag')
op0.val = res;
free_var('res');

 *
 * mnemonic: cmp
 * opcode: 07
 * update_flags: ['cf', 'pf', 'af', 'zf', 'sf', 'of']
 * semantic: alloc_var('res', op0.bit);
res = op0.val - op1.val;
call('overflow_flag_sub');
call('carry_flag_sub');
call('sign_flag');
call('zero_flag');
call('parity_flag');
call('adjust_flag');
free_var('res');

 *
**/
bool X86Architecture::Table_1_80(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    u8 ModRmByte;
    if (!rBinStrm.Read(Offset, ModRmByte))
      return false;

    x86::ModRM ModRm(ModRmByte);
    switch (ModRm.Reg())
    {
    case 0x0:
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Add);
      if (Operand__Eb_Ib(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        rInsn.SetUpdatedFlags(X86_FlCf | X86_FlPf | X86_FlAf | X86_FlZf | X86_FlSf | X86_FlOf);
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: res.val = op0.val + op1.val */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpAdd,
            rInsn.GetOperand(0),
            rInsn.GetOperand(1))));
        /* semantic: call('overflow_flag_add') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlOf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                Expr::MakeVar("res", VariableExpression::Use)),
              Expr::MakeUnOp(
                OperationExpression::OpNot,
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  rInsn.GetOperand(0),
                  rInsn.GetOperand(1)))),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        /* semantic: call('carry_flag_add') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlCf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(
                OperationExpression::OpAnd,
                rInsn.GetOperand(0),
                rInsn.GetOperand(1)),
              Expr::MakeBinOp(
                OperationExpression::OpAnd,
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  Expr::MakeBinOp(
                    OperationExpression::OpXor,
                    rInsn.GetOperand(0),
                    rInsn.GetOperand(1)),
                  Expr::MakeVar("res", VariableExpression::Use)),
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  rInsn.GetOperand(0),
                  rInsn.GetOperand(1)))),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        /* semantic: call('sign_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlSf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        /* semantic: call('zero_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlZf, &m_CpuInfo),
          Expr::MakeTernaryCond(ConditionExpression::CondEq,
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))));
        /* semantic: call('parity_flag') */
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBitVector(1, 0x1)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlPf, &m_CpuInfo),
          Expr::MakeVar("pf_tmp", VariableExpression::Use)));
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
        /* semantic: call('adjust_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlAf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                rInsn.GetOperand(1)),
              Expr::MakeVar("res", VariableExpression::Use)),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))));
        /* semantic: op0.val = res.val */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("res", VariableExpression::Use)));
        /* semantic: free_var('res') */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x1:
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Or);
      if (Operand__Eb_Ib(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        rInsn.SetUpdatedFlags(X86_FlCf | X86_FlPf | X86_FlAf | X86_FlZf | X86_FlSf | X86_FlOf);
        rInsn.SetClearedFlags(X86_FlAf | X86_FlOf | X86_FlCf);
        AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlAf, &m_CpuInfo), Expr::MakeBoolean(false)));
        AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlOf, &m_CpuInfo), Expr::MakeBoolean(false)));
        AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlCf, &m_CpuInfo), Expr::MakeBoolean(false)));
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: res = op0.val | op1.val */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpOr,
            rInsn.GetOperand(0),
            rInsn.GetOperand(1))));
        /* semantic: of.id = int1(0)
        cf.id = int1(0)
        call('sign_flag')
        call('zero_flag')
        call('parity_flag')
        op0.val = res */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlOf, &m_CpuInfo),
          Expr::MakeBitVector(1, 0x0)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlCf, &m_CpuInfo),
          Expr::MakeBitVector(1, 0x0)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlSf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlZf, &m_CpuInfo),
          Expr::MakeTernaryCond(ConditionExpression::CondEq,
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))));
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBitVector(1, 0x1)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlPf, &m_CpuInfo),
          Expr::MakeVar("pf_tmp", VariableExpression::Use)));
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("res", VariableExpression::Use)));
        /* semantic: free_var('res') */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x2:
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Adc);
      if (Operand__Eb_Ib(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        rInsn.SetTestedFlags(X86_FlCf);
        rInsn.SetUpdatedFlags(X86_FlCf | X86_FlPf | X86_FlAf | X86_FlZf | X86_FlSf | X86_FlOf);
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: res.val = op0.val + op1.val + bit_cast(cf.id, int(op0.bit, op0.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpAdd,
            Expr::MakeBinOp(
              OperationExpression::OpAdd,
              rInsn.GetOperand(0),
              rInsn.GetOperand(1)),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeId(X86_FlCf, &m_CpuInfo), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize())))));
        /* semantic: call('overflow_flag_add') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlOf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                Expr::MakeVar("res", VariableExpression::Use)),
              Expr::MakeUnOp(
                OperationExpression::OpNot,
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  rInsn.GetOperand(0),
                  rInsn.GetOperand(1)))),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        /* semantic: call('carry_flag_add') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlCf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(
                OperationExpression::OpAnd,
                rInsn.GetOperand(0),
                rInsn.GetOperand(1)),
              Expr::MakeBinOp(
                OperationExpression::OpAnd,
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  Expr::MakeBinOp(
                    OperationExpression::OpXor,
                    rInsn.GetOperand(0),
                    rInsn.GetOperand(1)),
                  Expr::MakeVar("res", VariableExpression::Use)),
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  rInsn.GetOperand(0),
                  rInsn.GetOperand(1)))),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        /* semantic: call('sign_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlSf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        /* semantic: call('zero_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlZf, &m_CpuInfo),
          Expr::MakeTernaryCond(ConditionExpression::CondEq,
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))));
        /* semantic: call('parity_flag') */
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBitVector(1, 0x1)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlPf, &m_CpuInfo),
          Expr::MakeVar("pf_tmp", VariableExpression::Use)));
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
        /* semantic: call('adjust_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlAf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                rInsn.GetOperand(1)),
              Expr::MakeVar("res", VariableExpression::Use)),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))));
        /* semantic: op0.val = res.val */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("res", VariableExpression::Use)));
        /* semantic: free_var('res') */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x3:
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Sbb);
      if (Operand__Eb_Ib(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        rInsn.SetTestedFlags(X86_FlCf);
        rInsn.SetUpdatedFlags(X86_FlCf | X86_FlPf | X86_FlAf | X86_FlZf | X86_FlSf | X86_FlOf);
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: res = op0.val - op1.val - bit_cast(cf.id, int(op0.bit, op0.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              rInsn.GetOperand(0),
              rInsn.GetOperand(1)),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeId(X86_FlCf, &m_CpuInfo), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize())))));
        /* semantic: call('overflow_flag_sub') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlOf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                Expr::MakeVar("res", VariableExpression::Use)),
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                rInsn.GetOperand(1))),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        /* semantic: call('carry_flag_sub') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlCf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  rInsn.GetOperand(0),
                  rInsn.GetOperand(1)),
                Expr::MakeVar("res", VariableExpression::Use)),
              Expr::MakeBinOp(
                OperationExpression::OpAnd,
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  rInsn.GetOperand(0),
                  Expr::MakeVar("res", VariableExpression::Use)),
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  rInsn.GetOperand(0),
                  rInsn.GetOperand(1)))),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        /* semantic: call('sign_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlSf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        /* semantic: call('zero_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlZf, &m_CpuInfo),
          Expr::MakeTernaryCond(ConditionExpression::CondEq,
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))));
        /* semantic: call('parity_flag') */
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBitVector(1, 0x1)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlPf, &m_CpuInfo),
          Expr::MakeVar("pf_tmp", VariableExpression::Use)));
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
        /* semantic: call('adjust_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlAf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                rInsn.GetOperand(1)),
              Expr::MakeVar("res", VariableExpression::Use)),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))));
        /* semantic: op0.val = res.val */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("res", VariableExpression::Use)));
        /* semantic: free_var('res') */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x4:
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_And);
      if (Operand__Eb_Ib(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        rInsn.SetUpdatedFlags(X86_FlCf | X86_FlPf | X86_FlAf | X86_FlZf | X86_FlSf | X86_FlOf);
        rInsn.SetClearedFlags(X86_FlAf | X86_FlOf | X86_FlCf);
        AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlAf, &m_CpuInfo), Expr::MakeBoolean(false)));
        AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlOf, &m_CpuInfo), Expr::MakeBoolean(false)));
        AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlCf, &m_CpuInfo), Expr::MakeBoolean(false)));
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: res = op0.val & op1.val */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpAnd,
            rInsn.GetOperand(0),
            rInsn.GetOperand(1))));
        /* semantic: of.id = int1(0)
        cf.id = int1(0)
        call('sign_flag')
        call('zero_flag')
        call('parity_flag')
        op0.val = res */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlOf, &m_CpuInfo),
          Expr::MakeBitVector(1, 0x0)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlCf, &m_CpuInfo),
          Expr::MakeBitVector(1, 0x0)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlSf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlZf, &m_CpuInfo),
          Expr::MakeTernaryCond(ConditionExpression::CondEq,
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))));
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBitVector(1, 0x1)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlPf, &m_CpuInfo),
          Expr::MakeVar("pf_tmp", VariableExpression::Use)));
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("res", VariableExpression::Use)));
        /* semantic: free_var('res') */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x5:
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Sub);
      if (Operand__Eb_Ib(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        rInsn.SetUpdatedFlags(X86_FlCf | X86_FlPf | X86_FlAf | X86_FlZf | X86_FlSf | X86_FlOf);
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: res = op0.val - op1.val */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            rInsn.GetOperand(0),
            rInsn.GetOperand(1))));
        /* semantic: call('overflow_flag_sub') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlOf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                Expr::MakeVar("res", VariableExpression::Use)),
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                rInsn.GetOperand(1))),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        /* semantic: call('carry_flag_sub') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlCf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  rInsn.GetOperand(0),
                  rInsn.GetOperand(1)),
                Expr::MakeVar("res", VariableExpression::Use)),
              Expr::MakeBinOp(
                OperationExpression::OpAnd,
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  rInsn.GetOperand(0),
                  Expr::MakeVar("res", VariableExpression::Use)),
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  rInsn.GetOperand(0),
                  rInsn.GetOperand(1)))),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        /* semantic: call('sign_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlSf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        /* semantic: call('zero_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlZf, &m_CpuInfo),
          Expr::MakeTernaryCond(ConditionExpression::CondEq,
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))));
        /* semantic: call('parity_flag') */
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBitVector(1, 0x1)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlPf, &m_CpuInfo),
          Expr::MakeVar("pf_tmp", VariableExpression::Use)));
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
        /* semantic: call('adjust_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlAf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                rInsn.GetOperand(1)),
              Expr::MakeVar("res", VariableExpression::Use)),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))));
        /* semantic: op0.val = res */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("res", VariableExpression::Use)));
        /* semantic: free_var('res') */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x6:
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Xor);
      if (Operand__Eb_Ib(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        rInsn.SetUpdatedFlags(X86_FlCf | X86_FlPf | X86_FlAf | X86_FlZf | X86_FlSf | X86_FlOf);
        rInsn.SetClearedFlags(X86_FlAf | X86_FlOf | X86_FlCf);
        AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlAf, &m_CpuInfo), Expr::MakeBoolean(false)));
        AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlOf, &m_CpuInfo), Expr::MakeBoolean(false)));
        AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlCf, &m_CpuInfo), Expr::MakeBoolean(false)));
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: res = op0.val ^ op1.val */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            rInsn.GetOperand(0),
            rInsn.GetOperand(1))));
        /* semantic: of.id = int1(0)
        cf.id = int1(0)
        call('sign_flag')
        call('zero_flag')
        call('parity_flag')
        op0.val = res */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlOf, &m_CpuInfo),
          Expr::MakeBitVector(1, 0x0)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlCf, &m_CpuInfo),
          Expr::MakeBitVector(1, 0x0)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlSf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlZf, &m_CpuInfo),
          Expr::MakeTernaryCond(ConditionExpression::CondEq,
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))));
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBitVector(1, 0x1)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlPf, &m_CpuInfo),
          Expr::MakeVar("pf_tmp", VariableExpression::Use)));
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("res", VariableExpression::Use)));
        /* semantic: free_var('res') */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x7:
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Cmp);
      if (Operand__Eb_Ib(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        rInsn.SetUpdatedFlags(X86_FlCf | X86_FlPf | X86_FlAf | X86_FlZf | X86_FlSf | X86_FlOf);
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: res = op0.val - op1.val */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            rInsn.GetOperand(0),
            rInsn.GetOperand(1))));
        /* semantic: call('overflow_flag_sub') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlOf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                Expr::MakeVar("res", VariableExpression::Use)),
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                rInsn.GetOperand(1))),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        /* semantic: call('carry_flag_sub') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlCf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  rInsn.GetOperand(0),
                  rInsn.GetOperand(1)),
                Expr::MakeVar("res", VariableExpression::Use)),
              Expr::MakeBinOp(
                OperationExpression::OpAnd,
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  rInsn.GetOperand(0),
                  Expr::MakeVar("res", VariableExpression::Use)),
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  rInsn.GetOperand(0),
                  rInsn.GetOperand(1)))),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        /* semantic: call('sign_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlSf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        /* semantic: call('zero_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlZf, &m_CpuInfo),
          Expr::MakeTernaryCond(ConditionExpression::CondEq,
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))));
        /* semantic: call('parity_flag') */
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBitVector(1, 0x1)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlPf, &m_CpuInfo),
          Expr::MakeVar("pf_tmp", VariableExpression::Use)));
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
        /* semantic: call('adjust_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlAf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                rInsn.GetOperand(1)),
              Expr::MakeVar("res", VariableExpression::Use)),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))));
        /* semantic: free_var('res') */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    default:
      return false;
    }
}

/** group:
 * mnemonic: add
 * opcode: 00
 * operand: ['Eb', 'Ib']
 * update_flags: ['cf', 'pf', 'af', 'zf', 'sf', 'of']
 * semantic: alloc_var('res', op0.bit);
res.val = op0.val + op1.val;
call('overflow_flag_add');
call('carry_flag_add');
call('sign_flag');
call('zero_flag');
call('parity_flag');
call('adjust_flag');
op0.val = res.val;
free_var('res');

 *
 * mnemonic: or
 * semantic: alloc_var('res', op0.bit);
res = op0.val | op1.val;
of.id = int1(0)
cf.id = int1(0)
call('sign_flag')
call('zero_flag')
call('parity_flag')
op0.val = res;
free_var('res');

 * update_flags: ['cf', 'pf', 'af', 'zf', 'sf', 'of']
 * clear_flags: ['af', 'of', 'cf']
 * opcode: 01
 * operand: ['Eb', 'Ib']
 *
 * mnemonic: adc
 * semantic: alloc_var('res', op0.bit);
res.val = op0.val + op1.val + bit_cast(cf.id, int(op0.bit, op0.bit));
call('overflow_flag_add');
call('carry_flag_add');
call('sign_flag');
call('zero_flag');
call('parity_flag');
call('adjust_flag');
op0.val = res.val;
free_var('res');

 * update_flags: ['cf', 'pf', 'af', 'zf', 'sf', 'of']
 * test_flags: ['cf']
 * opcode: 02
 * operand: ['Eb', 'Ib']
 *
 * mnemonic: sbb
 * semantic: alloc_var('res', op0.bit);
res = op0.val - op1.val - bit_cast(cf.id, int(op0.bit, op0.bit));
call('overflow_flag_sub');
call('carry_flag_sub');
call('sign_flag');
call('zero_flag');
call('parity_flag');
call('adjust_flag');
op0.val = res.val;
free_var('res');

 * update_flags: ['cf', 'pf', 'af', 'zf', 'sf', 'of']
 * test_flags: ['cf']
 * opcode: 03
 * operand: ['Eb', 'Ib']
 *
 * mnemonic: and
 * semantic: alloc_var('res', op0.bit);
res = op0.val & op1.val;
of.id = int1(0)
cf.id = int1(0)
call('sign_flag')
call('zero_flag')
call('parity_flag')
op0.val = res;
free_var('res');

 * update_flags: ['cf', 'pf', 'af', 'zf', 'sf', 'of']
 * clear_flags: ['af', 'of', 'cf']
 * opcode: 04
 * operand: ['Eb', 'Ib']
 *
 * mnemonic: sub
 * opcode: 05
 * operand: ['Eb', 'Ib']
 * update_flags: ['cf', 'pf', 'af', 'zf', 'sf', 'of']
 * semantic: alloc_var('res', op0.bit);
res = op0.val - op1.val;
call('overflow_flag_sub');
call('carry_flag_sub');
call('sign_flag');
call('zero_flag');
call('parity_flag');
call('adjust_flag');
op0.val = res;
free_var('res');

 *
 * mnemonic: xor
 * semantic: alloc_var('res', op0.bit);
res = op0.val ^ op1.val;
of.id = int1(0)
cf.id = int1(0)
call('sign_flag')
call('zero_flag')
call('parity_flag')
op0.val = res;
free_var('res');

 * update_flags: ['cf', 'pf', 'af', 'zf', 'sf', 'of']
 * clear_flags: ['af', 'of', 'cf']
 * opcode: 06
 * operand: ['Eb', 'Ib']
 *
 * mnemonic: cmp
 * opcode: 07
 * operand: ['Eb', 'Ib']
 * update_flags: ['cf', 'pf', 'af', 'zf', 'sf', 'of']
 * semantic: alloc_var('res', op0.bit);
res = op0.val - op1.val;
call('overflow_flag_sub');
call('carry_flag_sub');
call('sign_flag');
call('zero_flag');
call('parity_flag');
call('adjust_flag');
free_var('res');

 *
**/
bool X86Architecture::Table_1_81(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    u8 ModRmByte;
    if (!rBinStrm.Read(Offset, ModRmByte))
      return false;

    x86::ModRM ModRm(ModRmByte);
    switch (ModRm.Reg())
    {
    case 0x0:
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Add);
      if (Operand__Ev_Iz(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        rInsn.SetUpdatedFlags(X86_FlCf | X86_FlPf | X86_FlAf | X86_FlZf | X86_FlSf | X86_FlOf);
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: res.val = op0.val + op1.val */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpAdd,
            rInsn.GetOperand(0),
            rInsn.GetOperand(1))));
        /* semantic: call('overflow_flag_add') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlOf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                Expr::MakeVar("res", VariableExpression::Use)),
              Expr::MakeUnOp(
                OperationExpression::OpNot,
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  rInsn.GetOperand(0),
                  rInsn.GetOperand(1)))),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        /* semantic: call('carry_flag_add') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlCf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(
                OperationExpression::OpAnd,
                rInsn.GetOperand(0),
                rInsn.GetOperand(1)),
              Expr::MakeBinOp(
                OperationExpression::OpAnd,
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  Expr::MakeBinOp(
                    OperationExpression::OpXor,
                    rInsn.GetOperand(0),
                    rInsn.GetOperand(1)),
                  Expr::MakeVar("res", VariableExpression::Use)),
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  rInsn.GetOperand(0),
                  rInsn.GetOperand(1)))),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        /* semantic: call('sign_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlSf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        /* semantic: call('zero_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlZf, &m_CpuInfo),
          Expr::MakeTernaryCond(ConditionExpression::CondEq,
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))));
        /* semantic: call('parity_flag') */
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBitVector(1, 0x1)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlPf, &m_CpuInfo),
          Expr::MakeVar("pf_tmp", VariableExpression::Use)));
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
        /* semantic: call('adjust_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlAf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                rInsn.GetOperand(1)),
              Expr::MakeVar("res", VariableExpression::Use)),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))));
        /* semantic: op0.val = res.val */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("res", VariableExpression::Use)));
        /* semantic: free_var('res') */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x1:
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Or);
      if (Operand__Ev_Iz(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        rInsn.SetUpdatedFlags(X86_FlCf | X86_FlPf | X86_FlAf | X86_FlZf | X86_FlSf | X86_FlOf);
        rInsn.SetClearedFlags(X86_FlAf | X86_FlOf | X86_FlCf);
        AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlAf, &m_CpuInfo), Expr::MakeBoolean(false)));
        AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlOf, &m_CpuInfo), Expr::MakeBoolean(false)));
        AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlCf, &m_CpuInfo), Expr::MakeBoolean(false)));
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: res = op0.val | op1.val */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpOr,
            rInsn.GetOperand(0),
            rInsn.GetOperand(1))));
        /* semantic: of.id = int1(0)
        cf.id = int1(0)
        call('sign_flag')
        call('zero_flag')
        call('parity_flag')
        op0.val = res */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlOf, &m_CpuInfo),
          Expr::MakeBitVector(1, 0x0)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlCf, &m_CpuInfo),
          Expr::MakeBitVector(1, 0x0)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlSf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlZf, &m_CpuInfo),
          Expr::MakeTernaryCond(ConditionExpression::CondEq,
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))));
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBitVector(1, 0x1)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlPf, &m_CpuInfo),
          Expr::MakeVar("pf_tmp", VariableExpression::Use)));
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("res", VariableExpression::Use)));
        /* semantic: free_var('res') */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x2:
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Adc);
      if (Operand__Ev_Iz(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        rInsn.SetTestedFlags(X86_FlCf);
        rInsn.SetUpdatedFlags(X86_FlCf | X86_FlPf | X86_FlAf | X86_FlZf | X86_FlSf | X86_FlOf);
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: res.val = op0.val + op1.val + bit_cast(cf.id, int(op0.bit, op0.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpAdd,
            Expr::MakeBinOp(
              OperationExpression::OpAdd,
              rInsn.GetOperand(0),
              rInsn.GetOperand(1)),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeId(X86_FlCf, &m_CpuInfo), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize())))));
        /* semantic: call('overflow_flag_add') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlOf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                Expr::MakeVar("res", VariableExpression::Use)),
              Expr::MakeUnOp(
                OperationExpression::OpNot,
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  rInsn.GetOperand(0),
                  rInsn.GetOperand(1)))),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        /* semantic: call('carry_flag_add') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlCf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(
                OperationExpression::OpAnd,
                rInsn.GetOperand(0),
                rInsn.GetOperand(1)),
              Expr::MakeBinOp(
                OperationExpression::OpAnd,
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  Expr::MakeBinOp(
                    OperationExpression::OpXor,
                    rInsn.GetOperand(0),
                    rInsn.GetOperand(1)),
                  Expr::MakeVar("res", VariableExpression::Use)),
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  rInsn.GetOperand(0),
                  rInsn.GetOperand(1)))),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        /* semantic: call('sign_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlSf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        /* semantic: call('zero_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlZf, &m_CpuInfo),
          Expr::MakeTernaryCond(ConditionExpression::CondEq,
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))));
        /* semantic: call('parity_flag') */
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBitVector(1, 0x1)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlPf, &m_CpuInfo),
          Expr::MakeVar("pf_tmp", VariableExpression::Use)));
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
        /* semantic: call('adjust_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlAf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                rInsn.GetOperand(1)),
              Expr::MakeVar("res", VariableExpression::Use)),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))));
        /* semantic: op0.val = res.val */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("res", VariableExpression::Use)));
        /* semantic: free_var('res') */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x3:
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Sbb);
      if (Operand__Ev_Iz(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        rInsn.SetTestedFlags(X86_FlCf);
        rInsn.SetUpdatedFlags(X86_FlCf | X86_FlPf | X86_FlAf | X86_FlZf | X86_FlSf | X86_FlOf);
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: res = op0.val - op1.val - bit_cast(cf.id, int(op0.bit, op0.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              rInsn.GetOperand(0),
              rInsn.GetOperand(1)),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeId(X86_FlCf, &m_CpuInfo), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize())))));
        /* semantic: call('overflow_flag_sub') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlOf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                Expr::MakeVar("res", VariableExpression::Use)),
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                rInsn.GetOperand(1))),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        /* semantic: call('carry_flag_sub') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlCf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  rInsn.GetOperand(0),
                  rInsn.GetOperand(1)),
                Expr::MakeVar("res", VariableExpression::Use)),
              Expr::MakeBinOp(
                OperationExpression::OpAnd,
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  rInsn.GetOperand(0),
                  Expr::MakeVar("res", VariableExpression::Use)),
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  rInsn.GetOperand(0),
                  rInsn.GetOperand(1)))),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        /* semantic: call('sign_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlSf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        /* semantic: call('zero_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlZf, &m_CpuInfo),
          Expr::MakeTernaryCond(ConditionExpression::CondEq,
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))));
        /* semantic: call('parity_flag') */
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBitVector(1, 0x1)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlPf, &m_CpuInfo),
          Expr::MakeVar("pf_tmp", VariableExpression::Use)));
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
        /* semantic: call('adjust_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlAf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                rInsn.GetOperand(1)),
              Expr::MakeVar("res", VariableExpression::Use)),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))));
        /* semantic: op0.val = res.val */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("res", VariableExpression::Use)));
        /* semantic: free_var('res') */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x4:
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_And);
      if (Operand__Ev_Iz(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        rInsn.SetUpdatedFlags(X86_FlCf | X86_FlPf | X86_FlAf | X86_FlZf | X86_FlSf | X86_FlOf);
        rInsn.SetClearedFlags(X86_FlAf | X86_FlOf | X86_FlCf);
        AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlAf, &m_CpuInfo), Expr::MakeBoolean(false)));
        AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlOf, &m_CpuInfo), Expr::MakeBoolean(false)));
        AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlCf, &m_CpuInfo), Expr::MakeBoolean(false)));
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: res = op0.val & op1.val */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpAnd,
            rInsn.GetOperand(0),
            rInsn.GetOperand(1))));
        /* semantic: of.id = int1(0)
        cf.id = int1(0)
        call('sign_flag')
        call('zero_flag')
        call('parity_flag')
        op0.val = res */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlOf, &m_CpuInfo),
          Expr::MakeBitVector(1, 0x0)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlCf, &m_CpuInfo),
          Expr::MakeBitVector(1, 0x0)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlSf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlZf, &m_CpuInfo),
          Expr::MakeTernaryCond(ConditionExpression::CondEq,
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))));
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBitVector(1, 0x1)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlPf, &m_CpuInfo),
          Expr::MakeVar("pf_tmp", VariableExpression::Use)));
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("res", VariableExpression::Use)));
        /* semantic: free_var('res') */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x5:
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Sub);
      if (Operand__Ev_Iz(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        rInsn.SetUpdatedFlags(X86_FlCf | X86_FlPf | X86_FlAf | X86_FlZf | X86_FlSf | X86_FlOf);
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: res = op0.val - op1.val */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            rInsn.GetOperand(0),
            rInsn.GetOperand(1))));
        /* semantic: call('overflow_flag_sub') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlOf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                Expr::MakeVar("res", VariableExpression::Use)),
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                rInsn.GetOperand(1))),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        /* semantic: call('carry_flag_sub') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlCf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  rInsn.GetOperand(0),
                  rInsn.GetOperand(1)),
                Expr::MakeVar("res", VariableExpression::Use)),
              Expr::MakeBinOp(
                OperationExpression::OpAnd,
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  rInsn.GetOperand(0),
                  Expr::MakeVar("res", VariableExpression::Use)),
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  rInsn.GetOperand(0),
                  rInsn.GetOperand(1)))),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        /* semantic: call('sign_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlSf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        /* semantic: call('zero_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlZf, &m_CpuInfo),
          Expr::MakeTernaryCond(ConditionExpression::CondEq,
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))));
        /* semantic: call('parity_flag') */
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBitVector(1, 0x1)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlPf, &m_CpuInfo),
          Expr::MakeVar("pf_tmp", VariableExpression::Use)));
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
        /* semantic: call('adjust_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlAf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                rInsn.GetOperand(1)),
              Expr::MakeVar("res", VariableExpression::Use)),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))));
        /* semantic: op0.val = res */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("res", VariableExpression::Use)));
        /* semantic: free_var('res') */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x6:
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Xor);
      if (Operand__Ev_Iz(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        rInsn.SetUpdatedFlags(X86_FlCf | X86_FlPf | X86_FlAf | X86_FlZf | X86_FlSf | X86_FlOf);
        rInsn.SetClearedFlags(X86_FlAf | X86_FlOf | X86_FlCf);
        AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlAf, &m_CpuInfo), Expr::MakeBoolean(false)));
        AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlOf, &m_CpuInfo), Expr::MakeBoolean(false)));
        AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlCf, &m_CpuInfo), Expr::MakeBoolean(false)));
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: res = op0.val ^ op1.val */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            rInsn.GetOperand(0),
            rInsn.GetOperand(1))));
        /* semantic: of.id = int1(0)
        cf.id = int1(0)
        call('sign_flag')
        call('zero_flag')
        call('parity_flag')
        op0.val = res */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlOf, &m_CpuInfo),
          Expr::MakeBitVector(1, 0x0)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlCf, &m_CpuInfo),
          Expr::MakeBitVector(1, 0x0)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlSf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlZf, &m_CpuInfo),
          Expr::MakeTernaryCond(ConditionExpression::CondEq,
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))));
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBitVector(1, 0x1)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlPf, &m_CpuInfo),
          Expr::MakeVar("pf_tmp", VariableExpression::Use)));
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("res", VariableExpression::Use)));
        /* semantic: free_var('res') */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x7:
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Cmp);
      if (Operand__Ev_Iz(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        rInsn.SetUpdatedFlags(X86_FlCf | X86_FlPf | X86_FlAf | X86_FlZf | X86_FlSf | X86_FlOf);
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: res = op0.val - op1.val */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            rInsn.GetOperand(0),
            rInsn.GetOperand(1))));
        /* semantic: call('overflow_flag_sub') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlOf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                Expr::MakeVar("res", VariableExpression::Use)),
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                rInsn.GetOperand(1))),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        /* semantic: call('carry_flag_sub') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlCf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  rInsn.GetOperand(0),
                  rInsn.GetOperand(1)),
                Expr::MakeVar("res", VariableExpression::Use)),
              Expr::MakeBinOp(
                OperationExpression::OpAnd,
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  rInsn.GetOperand(0),
                  Expr::MakeVar("res", VariableExpression::Use)),
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  rInsn.GetOperand(0),
                  rInsn.GetOperand(1)))),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        /* semantic: call('sign_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlSf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        /* semantic: call('zero_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlZf, &m_CpuInfo),
          Expr::MakeTernaryCond(ConditionExpression::CondEq,
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))));
        /* semantic: call('parity_flag') */
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBitVector(1, 0x1)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlPf, &m_CpuInfo),
          Expr::MakeVar("pf_tmp", VariableExpression::Use)));
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
        /* semantic: call('adjust_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlAf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                rInsn.GetOperand(1)),
              Expr::MakeVar("res", VariableExpression::Use)),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))));
        /* semantic: free_var('res') */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    default:
      return false;
    }
}

/** group:
 * mnemonic: add
 * opcode: 00
 * operand: ['Ev', 'Iz']
 * update_flags: ['cf', 'pf', 'af', 'zf', 'sf', 'of']
 * semantic: alloc_var('res', op0.bit);
res.val = op0.val + op1.val;
call('overflow_flag_add');
call('carry_flag_add');
call('sign_flag');
call('zero_flag');
call('parity_flag');
call('adjust_flag');
op0.val = res.val;
free_var('res');

 *
 * mnemonic: or
 * semantic: alloc_var('res', op0.bit);
res = op0.val | op1.val;
of.id = int1(0)
cf.id = int1(0)
call('sign_flag')
call('zero_flag')
call('parity_flag')
op0.val = res;
free_var('res');

 * update_flags: ['cf', 'pf', 'af', 'zf', 'sf', 'of']
 * clear_flags: ['af', 'of', 'cf']
 * opcode: 01
 * operand: ['Ev', 'Iz']
 *
 * mnemonic: adc
 * semantic: alloc_var('res', op0.bit);
res.val = op0.val + op1.val + bit_cast(cf.id, int(op0.bit, op0.bit));
call('overflow_flag_add');
call('carry_flag_add');
call('sign_flag');
call('zero_flag');
call('parity_flag');
call('adjust_flag');
op0.val = res.val;
free_var('res');

 * update_flags: ['cf', 'pf', 'af', 'zf', 'sf', 'of']
 * test_flags: ['cf']
 * opcode: 02
 * operand: ['Ev', 'Iz']
 *
 * mnemonic: sbb
 * semantic: alloc_var('res', op0.bit);
res = op0.val - op1.val - bit_cast(cf.id, int(op0.bit, op0.bit));
call('overflow_flag_sub');
call('carry_flag_sub');
call('sign_flag');
call('zero_flag');
call('parity_flag');
call('adjust_flag');
op0.val = res.val;
free_var('res');

 * update_flags: ['cf', 'pf', 'af', 'zf', 'sf', 'of']
 * test_flags: ['cf']
 * opcode: 03
 * operand: ['Ev', 'Iz']
 *
 * mnemonic: and
 * semantic: alloc_var('res', op0.bit);
res = op0.val & op1.val;
of.id = int1(0)
cf.id = int1(0)
call('sign_flag')
call('zero_flag')
call('parity_flag')
op0.val = res;
free_var('res');

 * update_flags: ['cf', 'pf', 'af', 'zf', 'sf', 'of']
 * clear_flags: ['af', 'of', 'cf']
 * opcode: 04
 * operand: ['Ev', 'Iz']
 *
 * mnemonic: sub
 * opcode: 05
 * operand: ['Ev', 'Iz']
 * update_flags: ['cf', 'pf', 'af', 'zf', 'sf', 'of']
 * semantic: alloc_var('res', op0.bit);
res = op0.val - op1.val;
call('overflow_flag_sub');
call('carry_flag_sub');
call('sign_flag');
call('zero_flag');
call('parity_flag');
call('adjust_flag');
op0.val = res;
free_var('res');

 *
 * mnemonic: xor
 * semantic: alloc_var('res', op0.bit);
res = op0.val ^ op1.val;
of.id = int1(0)
cf.id = int1(0)
call('sign_flag')
call('zero_flag')
call('parity_flag')
op0.val = res;
free_var('res');

 * update_flags: ['cf', 'pf', 'af', 'zf', 'sf', 'of']
 * clear_flags: ['af', 'of', 'cf']
 * opcode: 06
 * operand: ['Ev', 'Iz']
 *
 * mnemonic: cmp
 * opcode: 07
 * operand: ['Ev', 'Iz']
 * update_flags: ['cf', 'pf', 'af', 'zf', 'sf', 'of']
 * semantic: alloc_var('res', op0.bit);
res = op0.val - op1.val;
call('overflow_flag_sub');
call('carry_flag_sub');
call('sign_flag');
call('zero_flag');
call('parity_flag');
call('adjust_flag');
free_var('res');

 *
**/
bool X86Architecture::Table_1_82(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    u8 ModRmByte;
    if (!rBinStrm.Read(Offset, ModRmByte))
      return false;

    x86::ModRM ModRm(ModRmByte);
    switch (ModRm.Reg())
    {
    case 0x0:
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Add);
      if (Operand__Eb_Ib(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        rInsn.SetUpdatedFlags(X86_FlCf | X86_FlPf | X86_FlAf | X86_FlZf | X86_FlSf | X86_FlOf);
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: res.val = op0.val + op1.val */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpAdd,
            rInsn.GetOperand(0),
            rInsn.GetOperand(1))));
        /* semantic: call('overflow_flag_add') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlOf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                Expr::MakeVar("res", VariableExpression::Use)),
              Expr::MakeUnOp(
                OperationExpression::OpNot,
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  rInsn.GetOperand(0),
                  rInsn.GetOperand(1)))),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        /* semantic: call('carry_flag_add') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlCf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(
                OperationExpression::OpAnd,
                rInsn.GetOperand(0),
                rInsn.GetOperand(1)),
              Expr::MakeBinOp(
                OperationExpression::OpAnd,
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  Expr::MakeBinOp(
                    OperationExpression::OpXor,
                    rInsn.GetOperand(0),
                    rInsn.GetOperand(1)),
                  Expr::MakeVar("res", VariableExpression::Use)),
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  rInsn.GetOperand(0),
                  rInsn.GetOperand(1)))),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        /* semantic: call('sign_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlSf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        /* semantic: call('zero_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlZf, &m_CpuInfo),
          Expr::MakeTernaryCond(ConditionExpression::CondEq,
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))));
        /* semantic: call('parity_flag') */
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBitVector(1, 0x1)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlPf, &m_CpuInfo),
          Expr::MakeVar("pf_tmp", VariableExpression::Use)));
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
        /* semantic: call('adjust_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlAf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                rInsn.GetOperand(1)),
              Expr::MakeVar("res", VariableExpression::Use)),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))));
        /* semantic: op0.val = res.val */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("res", VariableExpression::Use)));
        /* semantic: free_var('res') */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x1:
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Or);
      if (Operand__Eb_Ib(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        rInsn.SetUpdatedFlags(X86_FlCf | X86_FlPf | X86_FlAf | X86_FlZf | X86_FlSf | X86_FlOf);
        rInsn.SetClearedFlags(X86_FlAf | X86_FlOf | X86_FlCf);
        AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlAf, &m_CpuInfo), Expr::MakeBoolean(false)));
        AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlOf, &m_CpuInfo), Expr::MakeBoolean(false)));
        AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlCf, &m_CpuInfo), Expr::MakeBoolean(false)));
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: res = op0.val | op1.val */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpOr,
            rInsn.GetOperand(0),
            rInsn.GetOperand(1))));
        /* semantic: of.id = int1(0)
        cf.id = int1(0)
        call('sign_flag')
        call('zero_flag')
        call('parity_flag')
        op0.val = res */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlOf, &m_CpuInfo),
          Expr::MakeBitVector(1, 0x0)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlCf, &m_CpuInfo),
          Expr::MakeBitVector(1, 0x0)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlSf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlZf, &m_CpuInfo),
          Expr::MakeTernaryCond(ConditionExpression::CondEq,
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))));
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBitVector(1, 0x1)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlPf, &m_CpuInfo),
          Expr::MakeVar("pf_tmp", VariableExpression::Use)));
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("res", VariableExpression::Use)));
        /* semantic: free_var('res') */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x2:
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Adc);
      if (Operand__Eb_Ib(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        rInsn.SetTestedFlags(X86_FlCf);
        rInsn.SetUpdatedFlags(X86_FlCf | X86_FlPf | X86_FlAf | X86_FlZf | X86_FlSf | X86_FlOf);
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: res.val = op0.val + op1.val + bit_cast(cf.id, int(op0.bit, op0.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpAdd,
            Expr::MakeBinOp(
              OperationExpression::OpAdd,
              rInsn.GetOperand(0),
              rInsn.GetOperand(1)),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeId(X86_FlCf, &m_CpuInfo), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize())))));
        /* semantic: call('overflow_flag_add') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlOf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                Expr::MakeVar("res", VariableExpression::Use)),
              Expr::MakeUnOp(
                OperationExpression::OpNot,
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  rInsn.GetOperand(0),
                  rInsn.GetOperand(1)))),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        /* semantic: call('carry_flag_add') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlCf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(
                OperationExpression::OpAnd,
                rInsn.GetOperand(0),
                rInsn.GetOperand(1)),
              Expr::MakeBinOp(
                OperationExpression::OpAnd,
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  Expr::MakeBinOp(
                    OperationExpression::OpXor,
                    rInsn.GetOperand(0),
                    rInsn.GetOperand(1)),
                  Expr::MakeVar("res", VariableExpression::Use)),
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  rInsn.GetOperand(0),
                  rInsn.GetOperand(1)))),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        /* semantic: call('sign_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlSf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        /* semantic: call('zero_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlZf, &m_CpuInfo),
          Expr::MakeTernaryCond(ConditionExpression::CondEq,
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))));
        /* semantic: call('parity_flag') */
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBitVector(1, 0x1)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlPf, &m_CpuInfo),
          Expr::MakeVar("pf_tmp", VariableExpression::Use)));
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
        /* semantic: call('adjust_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlAf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                rInsn.GetOperand(1)),
              Expr::MakeVar("res", VariableExpression::Use)),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))));
        /* semantic: op0.val = res.val */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("res", VariableExpression::Use)));
        /* semantic: free_var('res') */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x3:
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Sbb);
      if (Operand__Eb_Ib(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        rInsn.SetTestedFlags(X86_FlCf);
        rInsn.SetUpdatedFlags(X86_FlCf | X86_FlPf | X86_FlAf | X86_FlZf | X86_FlSf | X86_FlOf);
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: res = op0.val - op1.val - bit_cast(cf.id, int(op0.bit, op0.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              rInsn.GetOperand(0),
              rInsn.GetOperand(1)),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeId(X86_FlCf, &m_CpuInfo), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize())))));
        /* semantic: call('overflow_flag_sub') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlOf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                Expr::MakeVar("res", VariableExpression::Use)),
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                rInsn.GetOperand(1))),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        /* semantic: call('carry_flag_sub') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlCf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  rInsn.GetOperand(0),
                  rInsn.GetOperand(1)),
                Expr::MakeVar("res", VariableExpression::Use)),
              Expr::MakeBinOp(
                OperationExpression::OpAnd,
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  rInsn.GetOperand(0),
                  Expr::MakeVar("res", VariableExpression::Use)),
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  rInsn.GetOperand(0),
                  rInsn.GetOperand(1)))),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        /* semantic: call('sign_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlSf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        /* semantic: call('zero_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlZf, &m_CpuInfo),
          Expr::MakeTernaryCond(ConditionExpression::CondEq,
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))));
        /* semantic: call('parity_flag') */
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBitVector(1, 0x1)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlPf, &m_CpuInfo),
          Expr::MakeVar("pf_tmp", VariableExpression::Use)));
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
        /* semantic: call('adjust_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlAf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                rInsn.GetOperand(1)),
              Expr::MakeVar("res", VariableExpression::Use)),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))));
        /* semantic: op0.val = res.val */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("res", VariableExpression::Use)));
        /* semantic: free_var('res') */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x4:
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_And);
      if (Operand__Eb_Ib(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        rInsn.SetUpdatedFlags(X86_FlCf | X86_FlPf | X86_FlAf | X86_FlZf | X86_FlSf | X86_FlOf);
        rInsn.SetClearedFlags(X86_FlAf | X86_FlOf | X86_FlCf);
        AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlAf, &m_CpuInfo), Expr::MakeBoolean(false)));
        AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlOf, &m_CpuInfo), Expr::MakeBoolean(false)));
        AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlCf, &m_CpuInfo), Expr::MakeBoolean(false)));
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: res = op0.val & op1.val */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpAnd,
            rInsn.GetOperand(0),
            rInsn.GetOperand(1))));
        /* semantic: of.id = int1(0)
        cf.id = int1(0)
        call('sign_flag')
        call('zero_flag')
        call('parity_flag')
        op0.val = res */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlOf, &m_CpuInfo),
          Expr::MakeBitVector(1, 0x0)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlCf, &m_CpuInfo),
          Expr::MakeBitVector(1, 0x0)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlSf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlZf, &m_CpuInfo),
          Expr::MakeTernaryCond(ConditionExpression::CondEq,
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))));
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBitVector(1, 0x1)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlPf, &m_CpuInfo),
          Expr::MakeVar("pf_tmp", VariableExpression::Use)));
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("res", VariableExpression::Use)));
        /* semantic: free_var('res') */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x5:
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Sub);
      if (Operand__Eb_Ib(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        rInsn.SetUpdatedFlags(X86_FlCf | X86_FlPf | X86_FlAf | X86_FlZf | X86_FlSf | X86_FlOf);
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: res = op0.val - op1.val */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            rInsn.GetOperand(0),
            rInsn.GetOperand(1))));
        /* semantic: call('overflow_flag_sub') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlOf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                Expr::MakeVar("res", VariableExpression::Use)),
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                rInsn.GetOperand(1))),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        /* semantic: call('carry_flag_sub') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlCf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  rInsn.GetOperand(0),
                  rInsn.GetOperand(1)),
                Expr::MakeVar("res", VariableExpression::Use)),
              Expr::MakeBinOp(
                OperationExpression::OpAnd,
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  rInsn.GetOperand(0),
                  Expr::MakeVar("res", VariableExpression::Use)),
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  rInsn.GetOperand(0),
                  rInsn.GetOperand(1)))),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        /* semantic: call('sign_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlSf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        /* semantic: call('zero_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlZf, &m_CpuInfo),
          Expr::MakeTernaryCond(ConditionExpression::CondEq,
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))));
        /* semantic: call('parity_flag') */
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBitVector(1, 0x1)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlPf, &m_CpuInfo),
          Expr::MakeVar("pf_tmp", VariableExpression::Use)));
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
        /* semantic: call('adjust_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlAf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                rInsn.GetOperand(1)),
              Expr::MakeVar("res", VariableExpression::Use)),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))));
        /* semantic: op0.val = res */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("res", VariableExpression::Use)));
        /* semantic: free_var('res') */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x6:
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Xor);
      if (Operand__Eb_Ib(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        rInsn.SetUpdatedFlags(X86_FlCf | X86_FlPf | X86_FlAf | X86_FlZf | X86_FlSf | X86_FlOf);
        rInsn.SetClearedFlags(X86_FlAf | X86_FlOf | X86_FlCf);
        AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlAf, &m_CpuInfo), Expr::MakeBoolean(false)));
        AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlOf, &m_CpuInfo), Expr::MakeBoolean(false)));
        AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlCf, &m_CpuInfo), Expr::MakeBoolean(false)));
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: res = op0.val ^ op1.val */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            rInsn.GetOperand(0),
            rInsn.GetOperand(1))));
        /* semantic: of.id = int1(0)
        cf.id = int1(0)
        call('sign_flag')
        call('zero_flag')
        call('parity_flag')
        op0.val = res */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlOf, &m_CpuInfo),
          Expr::MakeBitVector(1, 0x0)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlCf, &m_CpuInfo),
          Expr::MakeBitVector(1, 0x0)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlSf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlZf, &m_CpuInfo),
          Expr::MakeTernaryCond(ConditionExpression::CondEq,
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))));
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBitVector(1, 0x1)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlPf, &m_CpuInfo),
          Expr::MakeVar("pf_tmp", VariableExpression::Use)));
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("res", VariableExpression::Use)));
        /* semantic: free_var('res') */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x7:
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Cmp);
      if (Operand__Eb_Ib(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        rInsn.SetUpdatedFlags(X86_FlCf | X86_FlPf | X86_FlAf | X86_FlZf | X86_FlSf | X86_FlOf);
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: res = op0.val - op1.val */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            rInsn.GetOperand(0),
            rInsn.GetOperand(1))));
        /* semantic: call('overflow_flag_sub') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlOf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                Expr::MakeVar("res", VariableExpression::Use)),
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                rInsn.GetOperand(1))),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        /* semantic: call('carry_flag_sub') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlCf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  rInsn.GetOperand(0),
                  rInsn.GetOperand(1)),
                Expr::MakeVar("res", VariableExpression::Use)),
              Expr::MakeBinOp(
                OperationExpression::OpAnd,
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  rInsn.GetOperand(0),
                  Expr::MakeVar("res", VariableExpression::Use)),
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  rInsn.GetOperand(0),
                  rInsn.GetOperand(1)))),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        /* semantic: call('sign_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlSf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        /* semantic: call('zero_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlZf, &m_CpuInfo),
          Expr::MakeTernaryCond(ConditionExpression::CondEq,
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))));
        /* semantic: call('parity_flag') */
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBitVector(1, 0x1)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlPf, &m_CpuInfo),
          Expr::MakeVar("pf_tmp", VariableExpression::Use)));
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
        /* semantic: call('adjust_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlAf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                rInsn.GetOperand(1)),
              Expr::MakeVar("res", VariableExpression::Use)),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))));
        /* semantic: free_var('res') */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    default:
      return false;
    }
}

/** group:
 * mnemonic: add
 * opcode: 00
 * operand: ['Eb', 'Ib']
 * update_flags: ['cf', 'pf', 'af', 'zf', 'sf', 'of']
 * semantic: alloc_var('res', op0.bit);
res.val = op0.val + op1.val;
call('overflow_flag_add');
call('carry_flag_add');
call('sign_flag');
call('zero_flag');
call('parity_flag');
call('adjust_flag');
op0.val = res.val;
free_var('res');

 *
 * mnemonic: or
 * semantic: alloc_var('res', op0.bit);
res = op0.val | op1.val;
of.id = int1(0)
cf.id = int1(0)
call('sign_flag')
call('zero_flag')
call('parity_flag')
op0.val = res;
free_var('res');

 * update_flags: ['cf', 'pf', 'af', 'zf', 'sf', 'of']
 * clear_flags: ['af', 'of', 'cf']
 * opcode: 01
 * operand: ['Eb', 'Ib']
 *
 * mnemonic: adc
 * semantic: alloc_var('res', op0.bit);
res.val = op0.val + op1.val + bit_cast(cf.id, int(op0.bit, op0.bit));
call('overflow_flag_add');
call('carry_flag_add');
call('sign_flag');
call('zero_flag');
call('parity_flag');
call('adjust_flag');
op0.val = res.val;
free_var('res');

 * update_flags: ['cf', 'pf', 'af', 'zf', 'sf', 'of']
 * test_flags: ['cf']
 * opcode: 02
 * operand: ['Eb', 'Ib']
 *
 * mnemonic: sbb
 * semantic: alloc_var('res', op0.bit);
res = op0.val - op1.val - bit_cast(cf.id, int(op0.bit, op0.bit));
call('overflow_flag_sub');
call('carry_flag_sub');
call('sign_flag');
call('zero_flag');
call('parity_flag');
call('adjust_flag');
op0.val = res.val;
free_var('res');

 * update_flags: ['cf', 'pf', 'af', 'zf', 'sf', 'of']
 * test_flags: ['cf']
 * opcode: 03
 * operand: ['Eb', 'Ib']
 *
 * mnemonic: and
 * semantic: alloc_var('res', op0.bit);
res = op0.val & op1.val;
of.id = int1(0)
cf.id = int1(0)
call('sign_flag')
call('zero_flag')
call('parity_flag')
op0.val = res;
free_var('res');

 * update_flags: ['cf', 'pf', 'af', 'zf', 'sf', 'of']
 * clear_flags: ['af', 'of', 'cf']
 * opcode: 04
 * operand: ['Eb', 'Ib']
 *
 * mnemonic: sub
 * opcode: 05
 * operand: ['Eb', 'Ib']
 * update_flags: ['cf', 'pf', 'af', 'zf', 'sf', 'of']
 * semantic: alloc_var('res', op0.bit);
res = op0.val - op1.val;
call('overflow_flag_sub');
call('carry_flag_sub');
call('sign_flag');
call('zero_flag');
call('parity_flag');
call('adjust_flag');
op0.val = res;
free_var('res');

 *
 * mnemonic: xor
 * semantic: alloc_var('res', op0.bit);
res = op0.val ^ op1.val;
of.id = int1(0)
cf.id = int1(0)
call('sign_flag')
call('zero_flag')
call('parity_flag')
op0.val = res;
free_var('res');

 * update_flags: ['cf', 'pf', 'af', 'zf', 'sf', 'of']
 * clear_flags: ['af', 'of', 'cf']
 * opcode: 06
 * operand: ['Eb', 'Ib']
 *
 * mnemonic: cmp
 * opcode: 07
 * operand: ['Eb', 'Ib']
 * update_flags: ['cf', 'pf', 'af', 'zf', 'sf', 'of']
 * semantic: alloc_var('res', op0.bit);
res = op0.val - op1.val;
call('overflow_flag_sub');
call('carry_flag_sub');
call('sign_flag');
call('zero_flag');
call('parity_flag');
call('adjust_flag');
free_var('res');

 *
**/
bool X86Architecture::Table_1_83(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    u8 ModRmByte;
    if (!rBinStrm.Read(Offset, ModRmByte))
      return false;

    x86::ModRM ModRm(ModRmByte);
    switch (ModRm.Reg())
    {
    case 0x0:
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Add);
      if (Operand__Ev_Ibs(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        rInsn.SetUpdatedFlags(X86_FlCf | X86_FlPf | X86_FlAf | X86_FlZf | X86_FlSf | X86_FlOf);
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: res.val = op0.val + op1.val */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpAdd,
            rInsn.GetOperand(0),
            rInsn.GetOperand(1))));
        /* semantic: call('overflow_flag_add') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlOf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                Expr::MakeVar("res", VariableExpression::Use)),
              Expr::MakeUnOp(
                OperationExpression::OpNot,
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  rInsn.GetOperand(0),
                  rInsn.GetOperand(1)))),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        /* semantic: call('carry_flag_add') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlCf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(
                OperationExpression::OpAnd,
                rInsn.GetOperand(0),
                rInsn.GetOperand(1)),
              Expr::MakeBinOp(
                OperationExpression::OpAnd,
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  Expr::MakeBinOp(
                    OperationExpression::OpXor,
                    rInsn.GetOperand(0),
                    rInsn.GetOperand(1)),
                  Expr::MakeVar("res", VariableExpression::Use)),
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  rInsn.GetOperand(0),
                  rInsn.GetOperand(1)))),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        /* semantic: call('sign_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlSf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        /* semantic: call('zero_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlZf, &m_CpuInfo),
          Expr::MakeTernaryCond(ConditionExpression::CondEq,
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))));
        /* semantic: call('parity_flag') */
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBitVector(1, 0x1)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlPf, &m_CpuInfo),
          Expr::MakeVar("pf_tmp", VariableExpression::Use)));
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
        /* semantic: call('adjust_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlAf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                rInsn.GetOperand(1)),
              Expr::MakeVar("res", VariableExpression::Use)),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))));
        /* semantic: op0.val = res.val */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("res", VariableExpression::Use)));
        /* semantic: free_var('res') */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x1:
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Or);
      if (Operand__Ev_Ibs(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        rInsn.SetUpdatedFlags(X86_FlCf | X86_FlPf | X86_FlAf | X86_FlZf | X86_FlSf | X86_FlOf);
        rInsn.SetClearedFlags(X86_FlAf | X86_FlOf | X86_FlCf);
        AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlAf, &m_CpuInfo), Expr::MakeBoolean(false)));
        AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlOf, &m_CpuInfo), Expr::MakeBoolean(false)));
        AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlCf, &m_CpuInfo), Expr::MakeBoolean(false)));
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: res = op0.val | op1.val */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpOr,
            rInsn.GetOperand(0),
            rInsn.GetOperand(1))));
        /* semantic: of.id = int1(0)
        cf.id = int1(0)
        call('sign_flag')
        call('zero_flag')
        call('parity_flag')
        op0.val = res */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlOf, &m_CpuInfo),
          Expr::MakeBitVector(1, 0x0)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlCf, &m_CpuInfo),
          Expr::MakeBitVector(1, 0x0)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlSf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlZf, &m_CpuInfo),
          Expr::MakeTernaryCond(ConditionExpression::CondEq,
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))));
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBitVector(1, 0x1)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlPf, &m_CpuInfo),
          Expr::MakeVar("pf_tmp", VariableExpression::Use)));
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("res", VariableExpression::Use)));
        /* semantic: free_var('res') */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x2:
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Adc);
      if (Operand__Ev_Ibs(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        rInsn.SetTestedFlags(X86_FlCf);
        rInsn.SetUpdatedFlags(X86_FlCf | X86_FlPf | X86_FlAf | X86_FlZf | X86_FlSf | X86_FlOf);
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: res.val = op0.val + op1.val + bit_cast(cf.id, int(op0.bit, op0.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpAdd,
            Expr::MakeBinOp(
              OperationExpression::OpAdd,
              rInsn.GetOperand(0),
              rInsn.GetOperand(1)),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeId(X86_FlCf, &m_CpuInfo), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize())))));
        /* semantic: call('overflow_flag_add') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlOf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                Expr::MakeVar("res", VariableExpression::Use)),
              Expr::MakeUnOp(
                OperationExpression::OpNot,
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  rInsn.GetOperand(0),
                  rInsn.GetOperand(1)))),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        /* semantic: call('carry_flag_add') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlCf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(
                OperationExpression::OpAnd,
                rInsn.GetOperand(0),
                rInsn.GetOperand(1)),
              Expr::MakeBinOp(
                OperationExpression::OpAnd,
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  Expr::MakeBinOp(
                    OperationExpression::OpXor,
                    rInsn.GetOperand(0),
                    rInsn.GetOperand(1)),
                  Expr::MakeVar("res", VariableExpression::Use)),
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  rInsn.GetOperand(0),
                  rInsn.GetOperand(1)))),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        /* semantic: call('sign_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlSf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        /* semantic: call('zero_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlZf, &m_CpuInfo),
          Expr::MakeTernaryCond(ConditionExpression::CondEq,
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))));
        /* semantic: call('parity_flag') */
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBitVector(1, 0x1)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlPf, &m_CpuInfo),
          Expr::MakeVar("pf_tmp", VariableExpression::Use)));
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
        /* semantic: call('adjust_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlAf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                rInsn.GetOperand(1)),
              Expr::MakeVar("res", VariableExpression::Use)),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))));
        /* semantic: op0.val = res.val */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("res", VariableExpression::Use)));
        /* semantic: free_var('res') */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x3:
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Sbb);
      if (Operand__Ev_Ibs(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        rInsn.SetTestedFlags(X86_FlCf);
        rInsn.SetUpdatedFlags(X86_FlCf | X86_FlPf | X86_FlAf | X86_FlZf | X86_FlSf | X86_FlOf);
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: res = op0.val - op1.val - bit_cast(cf.id, int(op0.bit, op0.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              rInsn.GetOperand(0),
              rInsn.GetOperand(1)),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeId(X86_FlCf, &m_CpuInfo), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize())))));
        /* semantic: call('overflow_flag_sub') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlOf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                Expr::MakeVar("res", VariableExpression::Use)),
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                rInsn.GetOperand(1))),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        /* semantic: call('carry_flag_sub') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlCf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  rInsn.GetOperand(0),
                  rInsn.GetOperand(1)),
                Expr::MakeVar("res", VariableExpression::Use)),
              Expr::MakeBinOp(
                OperationExpression::OpAnd,
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  rInsn.GetOperand(0),
                  Expr::MakeVar("res", VariableExpression::Use)),
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  rInsn.GetOperand(0),
                  rInsn.GetOperand(1)))),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        /* semantic: call('sign_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlSf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        /* semantic: call('zero_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlZf, &m_CpuInfo),
          Expr::MakeTernaryCond(ConditionExpression::CondEq,
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))));
        /* semantic: call('parity_flag') */
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBitVector(1, 0x1)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlPf, &m_CpuInfo),
          Expr::MakeVar("pf_tmp", VariableExpression::Use)));
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
        /* semantic: call('adjust_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlAf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                rInsn.GetOperand(1)),
              Expr::MakeVar("res", VariableExpression::Use)),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))));
        /* semantic: op0.val = res.val */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("res", VariableExpression::Use)));
        /* semantic: free_var('res') */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x4:
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_And);
      if (Operand__Ev_Ibs(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        rInsn.SetUpdatedFlags(X86_FlCf | X86_FlPf | X86_FlAf | X86_FlZf | X86_FlSf | X86_FlOf);
        rInsn.SetClearedFlags(X86_FlAf | X86_FlOf | X86_FlCf);
        AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlAf, &m_CpuInfo), Expr::MakeBoolean(false)));
        AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlOf, &m_CpuInfo), Expr::MakeBoolean(false)));
        AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlCf, &m_CpuInfo), Expr::MakeBoolean(false)));
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: res = op0.val & op1.val */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpAnd,
            rInsn.GetOperand(0),
            rInsn.GetOperand(1))));
        /* semantic: of.id = int1(0)
        cf.id = int1(0)
        call('sign_flag')
        call('zero_flag')
        call('parity_flag')
        op0.val = res */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlOf, &m_CpuInfo),
          Expr::MakeBitVector(1, 0x0)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlCf, &m_CpuInfo),
          Expr::MakeBitVector(1, 0x0)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlSf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlZf, &m_CpuInfo),
          Expr::MakeTernaryCond(ConditionExpression::CondEq,
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))));
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBitVector(1, 0x1)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlPf, &m_CpuInfo),
          Expr::MakeVar("pf_tmp", VariableExpression::Use)));
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("res", VariableExpression::Use)));
        /* semantic: free_var('res') */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x5:
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Sub);
      if (Operand__Ev_Ibs(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        rInsn.SetUpdatedFlags(X86_FlCf | X86_FlPf | X86_FlAf | X86_FlZf | X86_FlSf | X86_FlOf);
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: res = op0.val - op1.val */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            rInsn.GetOperand(0),
            rInsn.GetOperand(1))));
        /* semantic: call('overflow_flag_sub') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlOf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                Expr::MakeVar("res", VariableExpression::Use)),
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                rInsn.GetOperand(1))),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        /* semantic: call('carry_flag_sub') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlCf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  rInsn.GetOperand(0),
                  rInsn.GetOperand(1)),
                Expr::MakeVar("res", VariableExpression::Use)),
              Expr::MakeBinOp(
                OperationExpression::OpAnd,
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  rInsn.GetOperand(0),
                  Expr::MakeVar("res", VariableExpression::Use)),
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  rInsn.GetOperand(0),
                  rInsn.GetOperand(1)))),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        /* semantic: call('sign_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlSf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        /* semantic: call('zero_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlZf, &m_CpuInfo),
          Expr::MakeTernaryCond(ConditionExpression::CondEq,
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))));
        /* semantic: call('parity_flag') */
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBitVector(1, 0x1)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlPf, &m_CpuInfo),
          Expr::MakeVar("pf_tmp", VariableExpression::Use)));
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
        /* semantic: call('adjust_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlAf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                rInsn.GetOperand(1)),
              Expr::MakeVar("res", VariableExpression::Use)),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))));
        /* semantic: op0.val = res */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("res", VariableExpression::Use)));
        /* semantic: free_var('res') */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x6:
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Xor);
      if (Operand__Ev_Ibs(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        rInsn.SetUpdatedFlags(X86_FlCf | X86_FlPf | X86_FlAf | X86_FlZf | X86_FlSf | X86_FlOf);
        rInsn.SetClearedFlags(X86_FlAf | X86_FlOf | X86_FlCf);
        AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlAf, &m_CpuInfo), Expr::MakeBoolean(false)));
        AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlOf, &m_CpuInfo), Expr::MakeBoolean(false)));
        AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlCf, &m_CpuInfo), Expr::MakeBoolean(false)));
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: res = op0.val ^ op1.val */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            rInsn.GetOperand(0),
            rInsn.GetOperand(1))));
        /* semantic: of.id = int1(0)
        cf.id = int1(0)
        call('sign_flag')
        call('zero_flag')
        call('parity_flag')
        op0.val = res */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlOf, &m_CpuInfo),
          Expr::MakeBitVector(1, 0x0)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlCf, &m_CpuInfo),
          Expr::MakeBitVector(1, 0x0)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlSf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlZf, &m_CpuInfo),
          Expr::MakeTernaryCond(ConditionExpression::CondEq,
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))));
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBitVector(1, 0x1)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlPf, &m_CpuInfo),
          Expr::MakeVar("pf_tmp", VariableExpression::Use)));
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("res", VariableExpression::Use)));
        /* semantic: free_var('res') */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x7:
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Cmp);
      if (Operand__Ev_Ibs(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        rInsn.SetUpdatedFlags(X86_FlCf | X86_FlPf | X86_FlAf | X86_FlZf | X86_FlSf | X86_FlOf);
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: res = op0.val - op1.val */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            rInsn.GetOperand(0),
            rInsn.GetOperand(1))));
        /* semantic: call('overflow_flag_sub') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlOf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                Expr::MakeVar("res", VariableExpression::Use)),
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                rInsn.GetOperand(1))),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        /* semantic: call('carry_flag_sub') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlCf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  rInsn.GetOperand(0),
                  rInsn.GetOperand(1)),
                Expr::MakeVar("res", VariableExpression::Use)),
              Expr::MakeBinOp(
                OperationExpression::OpAnd,
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  rInsn.GetOperand(0),
                  Expr::MakeVar("res", VariableExpression::Use)),
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  rInsn.GetOperand(0),
                  rInsn.GetOperand(1)))),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        /* semantic: call('sign_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlSf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        /* semantic: call('zero_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlZf, &m_CpuInfo),
          Expr::MakeTernaryCond(ConditionExpression::CondEq,
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))));
        /* semantic: call('parity_flag') */
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBitVector(1, 0x1)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlPf, &m_CpuInfo),
          Expr::MakeVar("pf_tmp", VariableExpression::Use)));
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
        /* semantic: call('adjust_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlAf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                rInsn.GetOperand(1)),
              Expr::MakeVar("res", VariableExpression::Use)),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))));
        /* semantic: free_var('res') */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    default:
      return false;
    }
}

/** instruction
 * mnemonic: test
 * clear_flags: ['af']
 * semantic: alloc_var('res', op0.bit);
res = op0.val & op1.val;
of.id = int1(0)
cf.id = int1(0)
call('sign_flag')
call('zero_flag')
call('parity_flag')
free_var('res');

 * operand: ['Eb', 'Gb']
 * opcode: 84
 * update_flags: ['of', 'sf', 'zf', 'pf', 'cf']
**/
bool X86Architecture::Table_1_84(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Test);
    if (Operand__Eb_Gb(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    {
      Expression::LSPType AllExpr;
      rInsn.SetUpdatedFlags(X86_FlOf | X86_FlSf | X86_FlZf | X86_FlPf | X86_FlCf);
      rInsn.SetClearedFlags(X86_FlAf);
      AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlAf, &m_CpuInfo), Expr::MakeBoolean(false)));
      /* semantic: alloc_var('res', op0.bit) */
      AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
      /* semantic: res = op0.val & op1.val */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("res", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpAnd,
          rInsn.GetOperand(0),
          rInsn.GetOperand(1))));
      /* semantic: of.id = int1(0)
      cf.id = int1(0)
      call('sign_flag')
      call('zero_flag')
      call('parity_flag')
      free_var('res') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlOf, &m_CpuInfo),
        Expr::MakeBitVector(1, 0x0)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlCf, &m_CpuInfo),
        Expr::MakeBitVector(1, 0x0)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlSf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlZf, &m_CpuInfo),
        Expr::MakeTernaryCond(ConditionExpression::CondEq,
        Expr::MakeVar("res", VariableExpression::Use),
        Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
        Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))));
      AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBitVector(1, 0x1)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlPf, &m_CpuInfo),
        Expr::MakeVar("pf_tmp", VariableExpression::Use)));
      AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
      AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instruction
 * mnemonic: test
 * clear_flags: ['af']
 * semantic: alloc_var('res', op0.bit);
res = op0.val & op1.val;
of.id = int1(0)
cf.id = int1(0)
call('sign_flag')
call('zero_flag')
call('parity_flag')
free_var('res');

 * operand: ['Ev', 'Gv']
 * opcode: 85
 * update_flags: ['of', 'sf', 'zf', 'pf', 'cf']
**/
bool X86Architecture::Table_1_85(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Test);
    if (Operand__Ev_Gv(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    {
      Expression::LSPType AllExpr;
      rInsn.SetUpdatedFlags(X86_FlOf | X86_FlSf | X86_FlZf | X86_FlPf | X86_FlCf);
      rInsn.SetClearedFlags(X86_FlAf);
      AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlAf, &m_CpuInfo), Expr::MakeBoolean(false)));
      /* semantic: alloc_var('res', op0.bit) */
      AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
      /* semantic: res = op0.val & op1.val */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("res", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpAnd,
          rInsn.GetOperand(0),
          rInsn.GetOperand(1))));
      /* semantic: of.id = int1(0)
      cf.id = int1(0)
      call('sign_flag')
      call('zero_flag')
      call('parity_flag')
      free_var('res') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlOf, &m_CpuInfo),
        Expr::MakeBitVector(1, 0x0)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlCf, &m_CpuInfo),
        Expr::MakeBitVector(1, 0x0)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlSf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlZf, &m_CpuInfo),
        Expr::MakeTernaryCond(ConditionExpression::CondEq,
        Expr::MakeVar("res", VariableExpression::Use),
        Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
        Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))));
      AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBitVector(1, 0x1)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlPf, &m_CpuInfo),
        Expr::MakeVar("pf_tmp", VariableExpression::Use)));
      AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
      AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instruction
 * mnemonic: xchg
 * operand: ['Eb', 'Gb']
 * opcode: 86
 * semantic: alloc_var('tmp_val', op0.bit);
tmp_val = op0.val;
op0.val = op1.val;
op1.val = tmp_val;
free_var('tmp_val');

**/
bool X86Architecture::Table_1_86(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Xchg);
    if (Operand__Eb_Gb(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    {
      Expression::LSPType AllExpr;
      /* semantic: alloc_var('tmp_val', op0.bit) */
      AllExpr.push_back(Expr::MakeVar("tmp_val", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
      /* semantic: tmp_val = op0.val */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("tmp_val", VariableExpression::Use),
        rInsn.GetOperand(0)));
      /* semantic: op0.val = op1.val */
      AllExpr.push_back(Expr::MakeAssign(
        rInsn.GetOperand(0),
        rInsn.GetOperand(1)));
      /* semantic: op1.val = tmp_val */
      AllExpr.push_back(Expr::MakeAssign(
        rInsn.GetOperand(1),
        Expr::MakeVar("tmp_val", VariableExpression::Use)));
      /* semantic: free_var('tmp_val') */
      AllExpr.push_back(Expr::MakeVar("tmp_val", VariableExpression::Free));
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instruction
 * mnemonic: xchg
 * operand: ['Ev', 'Gv']
 * opcode: 87
 * semantic: alloc_var('tmp_val', op0.bit);
tmp_val = op0.val;
op0.val = op1.val;
op1.val = tmp_val;
free_var('tmp_val');

**/
bool X86Architecture::Table_1_87(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Xchg);
    if (Operand__Ev_Gv(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    {
      Expression::LSPType AllExpr;
      /* semantic: alloc_var('tmp_val', op0.bit) */
      AllExpr.push_back(Expr::MakeVar("tmp_val", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
      /* semantic: tmp_val = op0.val */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("tmp_val", VariableExpression::Use),
        rInsn.GetOperand(0)));
      /* semantic: op0.val = op1.val */
      AllExpr.push_back(Expr::MakeAssign(
        rInsn.GetOperand(0),
        rInsn.GetOperand(1)));
      /* semantic: op1.val = tmp_val */
      AllExpr.push_back(Expr::MakeAssign(
        rInsn.GetOperand(1),
        Expr::MakeVar("tmp_val", VariableExpression::Use)));
      /* semantic: free_var('tmp_val') */
      AllExpr.push_back(Expr::MakeVar("tmp_val", VariableExpression::Free));
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instruction
 * mnemonic: mov
 * operand: ['Eb', 'Gb']
 * opcode: 88
 * semantic: op0.val = op1.val;

**/
bool X86Architecture::Table_1_88(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Mov);
    if (Operand__Eb_Gb(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    {
      Expression::LSPType AllExpr;
      /* semantic: op0.val = op1.val */
      AllExpr.push_back(Expr::MakeAssign(
        rInsn.GetOperand(0),
        rInsn.GetOperand(1)));
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instruction
 * mnemonic: mov
 * operand: ['Ev', 'Gv']
 * opcode: 89
 * semantic: op0.val = op1.val;

**/
bool X86Architecture::Table_1_89(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Mov);
    if (Operand__Ev_Gv(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    {
      Expression::LSPType AllExpr;
      /* semantic: op0.val = op1.val */
      AllExpr.push_back(Expr::MakeAssign(
        rInsn.GetOperand(0),
        rInsn.GetOperand(1)));
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instruction
 * mnemonic: mov
 * operand: ['Gb', 'Eb']
 * opcode: 8a
 * semantic: op0.val = op1.val;

**/
bool X86Architecture::Table_1_8a(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Mov);
    if (Operand__Gb_Eb(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    {
      Expression::LSPType AllExpr;
      /* semantic: op0.val = op1.val */
      AllExpr.push_back(Expr::MakeAssign(
        rInsn.GetOperand(0),
        rInsn.GetOperand(1)));
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instruction
 * mnemonic: mov
 * operand: ['Gv', 'Ev']
 * opcode: 8b
 * semantic: op0.val = op1.val;

**/
bool X86Architecture::Table_1_8b(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Mov);
    if (Operand__Gv_Ev(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    {
      Expression::LSPType AllExpr;
      /* semantic: op0.val = op1.val */
      AllExpr.push_back(Expr::MakeAssign(
        rInsn.GetOperand(0),
        rInsn.GetOperand(1)));
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instruction
 * mnemonic: mov
 * operand: ['Ew', 'Sw']
 * opcode: 8c
 * semantic: op0.val = op1.val;

**/
bool X86Architecture::Table_1_8c(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Mov);
    if (Operand__Ew_Sw(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    {
      Expression::LSPType AllExpr;
      /* semantic: op0.val = op1.val */
      AllExpr.push_back(Expr::MakeAssign(
        rInsn.GetOperand(0),
        rInsn.GetOperand(1)));
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instruction
 * mnemonic: lea
 * operand: ['Gv', 'M']
 * opcode: 8d
 * semantic: ['op0.val = op1.addr']
**/
bool X86Architecture::Table_1_8d(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Lea);
    if (Operand__Gv_M(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    {
      Expression::LSPType AllExpr;
      /* semantic: op0.val = op1.addr */
      AllExpr.push_back(Expr::MakeAssign(
        rInsn.GetOperand(0),
        rInsn.GetOperand(1)->ToAddress()));
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instruction
 * mnemonic: mov
 * operand: ['Sw', 'Ew']
 * opcode: 8e
 * semantic: op0.val = op1.val;

**/
bool X86Architecture::Table_1_8e(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Mov);
    if (Operand__Sw_Ew(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    {
      Expression::LSPType AllExpr;
      /* semantic: op0.val = op1.val */
      AllExpr.push_back(Expr::MakeAssign(
        rInsn.GetOperand(0),
        rInsn.GetOperand(1)));
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** group:
 * mnemonic: pop
 * operand: ['Ev']
 * opcode: 00
 * semantic: alloc_var('popped_value', stack.bit);
popped_value = stack.mem;
stack.id += stack.size;
op0.val = popped_value;
free_var('popped_value');

 * constraint: d64
 *
 * mnemonic: Xop
 * opcode: 01
 * constraint: pfx1
 *
 * opcode: 02
 * invalid
 *
 * opcode: 03
 * invalid
 *
 * opcode: 04
 * invalid
 *
 * opcode: 05
 * invalid
 *
 * opcode: 06
 * invalid
 *
**/
bool X86Architecture::Table_1_8f(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    u8 ModRmByte;
    if (!rBinStrm.Read(Offset, ModRmByte))
      return false;

    x86::ModRM ModRm(ModRmByte);
    switch (ModRm.Reg())
    {
    case 0x0:
      if (!(rInsn.Prefix() & X86_Prefix_OpSize))
      {
        rInsn.Prefix() |= X86_Prefix_REX_w; /* d64/df64 constraint */
      }
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pop);
      if (Operand__Ev(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('popped_value', stack.bit) */
        AllExpr.push_back(Expr::MakeVar("popped_value", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()))));
        /* semantic: popped_value = stack.mem */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("popped_value", VariableExpression::Use),
          Expr::MakeMem(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), nullptr, Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo))));
        /* semantic: stack.id += stack.size */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeBinOp(
            OperationExpression::OpAdd,
            Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
            Expr::MakeBitVector(
              m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())),
              m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())) / 8)))
        );
        /* semantic: op0.val = popped_value */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("popped_value", VariableExpression::Use)));
        /* semantic: free_var('popped_value') */
        AllExpr.push_back(Expr::MakeVar("popped_value", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x1:
      rInsn.Length()++;
      rInsn.Prefix() |= X86_Prefix_Xop;
      return Disassemble(rBinStrm, Offset, rInsn, Mode);
    case 0x2:
      return false;
    case 0x3:
      return false;
    case 0x4:
      return false;
    case 0x5:
      return false;
    case 0x6:
      return false;
    default:
      return false;
    }
}

/** instructions
 * opcode: 90
 *
 * mnemonic: nop
 * semantic: program.id = program.id;

 *
 * mnemonic: xchg
 * operand: ['r8', 'rAX']
 * semantic: alloc_var('tmp_val', op0.bit);
tmp_val = op0.val;
op0.val = op1.val;
op1.val = tmp_val;
free_var('tmp_val');

 * attr: ['rexb']
 *
**/
bool X86Architecture::Table_1_90(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if ((rInsn.GetPrefix() & X86_Prefix_REX_b) == X86_Prefix_REX_b)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Xchg);
      if (Operand__r8_rAX(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('tmp_val', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("tmp_val", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: tmp_val = op0.val */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("tmp_val", VariableExpression::Use),
          rInsn.GetOperand(0)));
        /* semantic: op0.val = op1.val */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          rInsn.GetOperand(1)));
        /* semantic: op1.val = tmp_val */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(1),
          Expr::MakeVar("tmp_val", VariableExpression::Use)));
        /* semantic: free_var('tmp_val') */
        AllExpr.push_back(Expr::MakeVar("tmp_val", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    else
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Nop);
      {
        Expression::LSPType AllExpr;
        /* semantic: program.id = program.id */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::ProgramPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::ProgramPointerRegister, rInsn.GetMode()), &m_CpuInfo)));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
}

/** instructions
 * opcode: 91
 *
 * mnemonic: xchg
 * operand: ['rCX', 'rAX']
 * semantic: alloc_var('tmp_val', op0.bit);
tmp_val = op0.val;
op0.val = op1.val;
op1.val = tmp_val;
free_var('tmp_val');

 *
 * mnemonic: xchg
 * operand: ['r9', 'rAX']
 * semantic: alloc_var('tmp_val', op0.bit);
tmp_val = op0.val;
op0.val = op1.val;
op1.val = tmp_val;
free_var('tmp_val');

 * attr: ['rexb']
 *
**/
bool X86Architecture::Table_1_91(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if ((rInsn.GetPrefix() & X86_Prefix_REX_b) == X86_Prefix_REX_b)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Xchg);
      if (Operand__r9_rAX(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('tmp_val', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("tmp_val", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: tmp_val = op0.val */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("tmp_val", VariableExpression::Use),
          rInsn.GetOperand(0)));
        /* semantic: op0.val = op1.val */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          rInsn.GetOperand(1)));
        /* semantic: op1.val = tmp_val */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(1),
          Expr::MakeVar("tmp_val", VariableExpression::Use)));
        /* semantic: free_var('tmp_val') */
        AllExpr.push_back(Expr::MakeVar("tmp_val", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    else
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Xchg);
      if (Operand__rCX_rAX(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('tmp_val', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("tmp_val", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: tmp_val = op0.val */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("tmp_val", VariableExpression::Use),
          rInsn.GetOperand(0)));
        /* semantic: op0.val = op1.val */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          rInsn.GetOperand(1)));
        /* semantic: op1.val = tmp_val */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(1),
          Expr::MakeVar("tmp_val", VariableExpression::Use)));
        /* semantic: free_var('tmp_val') */
        AllExpr.push_back(Expr::MakeVar("tmp_val", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
}

/** instructions
 * opcode: 92
 *
 * mnemonic: xchg
 * operand: ['rDX', 'rAX']
 * semantic: alloc_var('tmp_val', op0.bit);
tmp_val = op0.val;
op0.val = op1.val;
op1.val = tmp_val;
free_var('tmp_val');

 *
 * mnemonic: xchg
 * operand: ['r10', 'rAX']
 * semantic: alloc_var('tmp_val', op0.bit);
tmp_val = op0.val;
op0.val = op1.val;
op1.val = tmp_val;
free_var('tmp_val');

 * attr: ['rexb']
 *
**/
bool X86Architecture::Table_1_92(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if ((rInsn.GetPrefix() & X86_Prefix_REX_b) == X86_Prefix_REX_b)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Xchg);
      if (Operand__r10_rAX(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('tmp_val', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("tmp_val", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: tmp_val = op0.val */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("tmp_val", VariableExpression::Use),
          rInsn.GetOperand(0)));
        /* semantic: op0.val = op1.val */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          rInsn.GetOperand(1)));
        /* semantic: op1.val = tmp_val */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(1),
          Expr::MakeVar("tmp_val", VariableExpression::Use)));
        /* semantic: free_var('tmp_val') */
        AllExpr.push_back(Expr::MakeVar("tmp_val", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    else
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Xchg);
      if (Operand__rDX_rAX(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('tmp_val', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("tmp_val", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: tmp_val = op0.val */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("tmp_val", VariableExpression::Use),
          rInsn.GetOperand(0)));
        /* semantic: op0.val = op1.val */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          rInsn.GetOperand(1)));
        /* semantic: op1.val = tmp_val */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(1),
          Expr::MakeVar("tmp_val", VariableExpression::Use)));
        /* semantic: free_var('tmp_val') */
        AllExpr.push_back(Expr::MakeVar("tmp_val", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
}

/** instructions
 * opcode: 93
 *
 * mnemonic: xchg
 * operand: ['rBX', 'rAX']
 * semantic: alloc_var('tmp_val', op0.bit);
tmp_val = op0.val;
op0.val = op1.val;
op1.val = tmp_val;
free_var('tmp_val');

 *
 * mnemonic: xchg
 * operand: ['r11', 'rAX']
 * semantic: alloc_var('tmp_val', op0.bit);
tmp_val = op0.val;
op0.val = op1.val;
op1.val = tmp_val;
free_var('tmp_val');

 * attr: ['rexb']
 *
**/
bool X86Architecture::Table_1_93(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if ((rInsn.GetPrefix() & X86_Prefix_REX_b) == X86_Prefix_REX_b)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Xchg);
      if (Operand__r11_rAX(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('tmp_val', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("tmp_val", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: tmp_val = op0.val */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("tmp_val", VariableExpression::Use),
          rInsn.GetOperand(0)));
        /* semantic: op0.val = op1.val */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          rInsn.GetOperand(1)));
        /* semantic: op1.val = tmp_val */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(1),
          Expr::MakeVar("tmp_val", VariableExpression::Use)));
        /* semantic: free_var('tmp_val') */
        AllExpr.push_back(Expr::MakeVar("tmp_val", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    else
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Xchg);
      if (Operand__rBX_rAX(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('tmp_val', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("tmp_val", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: tmp_val = op0.val */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("tmp_val", VariableExpression::Use),
          rInsn.GetOperand(0)));
        /* semantic: op0.val = op1.val */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          rInsn.GetOperand(1)));
        /* semantic: op1.val = tmp_val */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(1),
          Expr::MakeVar("tmp_val", VariableExpression::Use)));
        /* semantic: free_var('tmp_val') */
        AllExpr.push_back(Expr::MakeVar("tmp_val", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
}

/** instructions
 * opcode: 94
 *
 * mnemonic: xchg
 * operand: ['rSP', 'rAX']
 * semantic: alloc_var('tmp_val', op0.bit);
tmp_val = op0.val;
op0.val = op1.val;
op1.val = tmp_val;
free_var('tmp_val');

 *
 * mnemonic: xchg
 * operand: ['r12', 'rAX']
 * semantic: alloc_var('tmp_val', op0.bit);
tmp_val = op0.val;
op0.val = op1.val;
op1.val = tmp_val;
free_var('tmp_val');

 * attr: ['rexb']
 *
**/
bool X86Architecture::Table_1_94(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if ((rInsn.GetPrefix() & X86_Prefix_REX_b) == X86_Prefix_REX_b)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Xchg);
      if (Operand__r12_rAX(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('tmp_val', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("tmp_val", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: tmp_val = op0.val */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("tmp_val", VariableExpression::Use),
          rInsn.GetOperand(0)));
        /* semantic: op0.val = op1.val */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          rInsn.GetOperand(1)));
        /* semantic: op1.val = tmp_val */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(1),
          Expr::MakeVar("tmp_val", VariableExpression::Use)));
        /* semantic: free_var('tmp_val') */
        AllExpr.push_back(Expr::MakeVar("tmp_val", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    else
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Xchg);
      if (Operand__rSP_rAX(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('tmp_val', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("tmp_val", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: tmp_val = op0.val */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("tmp_val", VariableExpression::Use),
          rInsn.GetOperand(0)));
        /* semantic: op0.val = op1.val */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          rInsn.GetOperand(1)));
        /* semantic: op1.val = tmp_val */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(1),
          Expr::MakeVar("tmp_val", VariableExpression::Use)));
        /* semantic: free_var('tmp_val') */
        AllExpr.push_back(Expr::MakeVar("tmp_val", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
}

/** instructions
 * opcode: 95
 *
 * mnemonic: xchg
 * operand: ['rBP', 'rAX']
 * semantic: alloc_var('tmp_val', op0.bit);
tmp_val = op0.val;
op0.val = op1.val;
op1.val = tmp_val;
free_var('tmp_val');

 *
 * mnemonic: xchg
 * operand: ['r13', 'rAX']
 * semantic: alloc_var('tmp_val', op0.bit);
tmp_val = op0.val;
op0.val = op1.val;
op1.val = tmp_val;
free_var('tmp_val');

 * attr: ['rexb']
 *
**/
bool X86Architecture::Table_1_95(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if ((rInsn.GetPrefix() & X86_Prefix_REX_b) == X86_Prefix_REX_b)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Xchg);
      if (Operand__r13_rAX(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('tmp_val', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("tmp_val", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: tmp_val = op0.val */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("tmp_val", VariableExpression::Use),
          rInsn.GetOperand(0)));
        /* semantic: op0.val = op1.val */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          rInsn.GetOperand(1)));
        /* semantic: op1.val = tmp_val */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(1),
          Expr::MakeVar("tmp_val", VariableExpression::Use)));
        /* semantic: free_var('tmp_val') */
        AllExpr.push_back(Expr::MakeVar("tmp_val", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    else
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Xchg);
      if (Operand__rBP_rAX(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('tmp_val', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("tmp_val", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: tmp_val = op0.val */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("tmp_val", VariableExpression::Use),
          rInsn.GetOperand(0)));
        /* semantic: op0.val = op1.val */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          rInsn.GetOperand(1)));
        /* semantic: op1.val = tmp_val */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(1),
          Expr::MakeVar("tmp_val", VariableExpression::Use)));
        /* semantic: free_var('tmp_val') */
        AllExpr.push_back(Expr::MakeVar("tmp_val", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
}

/** instructions
 * opcode: 96
 *
 * mnemonic: xchg
 * operand: ['rSI', 'rAX']
 * semantic: alloc_var('tmp_val', op0.bit);
tmp_val = op0.val;
op0.val = op1.val;
op1.val = tmp_val;
free_var('tmp_val');

 *
 * mnemonic: xchg
 * operand: ['r14', 'rAX']
 * semantic: alloc_var('tmp_val', op0.bit);
tmp_val = op0.val;
op0.val = op1.val;
op1.val = tmp_val;
free_var('tmp_val');

 * attr: ['rexb']
 *
**/
bool X86Architecture::Table_1_96(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if ((rInsn.GetPrefix() & X86_Prefix_REX_b) == X86_Prefix_REX_b)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Xchg);
      if (Operand__r14_rAX(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('tmp_val', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("tmp_val", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: tmp_val = op0.val */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("tmp_val", VariableExpression::Use),
          rInsn.GetOperand(0)));
        /* semantic: op0.val = op1.val */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          rInsn.GetOperand(1)));
        /* semantic: op1.val = tmp_val */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(1),
          Expr::MakeVar("tmp_val", VariableExpression::Use)));
        /* semantic: free_var('tmp_val') */
        AllExpr.push_back(Expr::MakeVar("tmp_val", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    else
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Xchg);
      if (Operand__rSI_rAX(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('tmp_val', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("tmp_val", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: tmp_val = op0.val */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("tmp_val", VariableExpression::Use),
          rInsn.GetOperand(0)));
        /* semantic: op0.val = op1.val */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          rInsn.GetOperand(1)));
        /* semantic: op1.val = tmp_val */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(1),
          Expr::MakeVar("tmp_val", VariableExpression::Use)));
        /* semantic: free_var('tmp_val') */
        AllExpr.push_back(Expr::MakeVar("tmp_val", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
}

/** instructions
 * opcode: 97
 *
 * mnemonic: xchg
 * operand: ['rDI', 'rAX']
 * semantic: alloc_var('tmp_val', op0.bit);
tmp_val = op0.val;
op0.val = op1.val;
op1.val = tmp_val;
free_var('tmp_val');

 *
 * mnemonic: xchg
 * operand: ['r15', 'rAX']
 * semantic: alloc_var('tmp_val', op0.bit);
tmp_val = op0.val;
op0.val = op1.val;
op1.val = tmp_val;
free_var('tmp_val');

 * attr: ['rexb']
 *
**/
bool X86Architecture::Table_1_97(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if ((rInsn.GetPrefix() & X86_Prefix_REX_b) == X86_Prefix_REX_b)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Xchg);
      if (Operand__r15_rAX(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('tmp_val', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("tmp_val", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: tmp_val = op0.val */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("tmp_val", VariableExpression::Use),
          rInsn.GetOperand(0)));
        /* semantic: op0.val = op1.val */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          rInsn.GetOperand(1)));
        /* semantic: op1.val = tmp_val */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(1),
          Expr::MakeVar("tmp_val", VariableExpression::Use)));
        /* semantic: free_var('tmp_val') */
        AllExpr.push_back(Expr::MakeVar("tmp_val", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    else
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Xchg);
      if (Operand__rDI_rAX(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('tmp_val', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("tmp_val", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: tmp_val = op0.val */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("tmp_val", VariableExpression::Use),
          rInsn.GetOperand(0)));
        /* semantic: op0.val = op1.val */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          rInsn.GetOperand(1)));
        /* semantic: op1.val = tmp_val */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(1),
          Expr::MakeVar("tmp_val", VariableExpression::Use)));
        /* semantic: free_var('tmp_val') */
        AllExpr.push_back(Expr::MakeVar("tmp_val", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
}

/** instructions
 * opcode: 98
 *
 * mnemonic: cwde
 * semantic: eax.id = sign_extend(ax.id, int(eax.bit, eax.bit));

 * cpu_model: >= X86_Arch_80386
 *
 * mnemonic: cbw
 * semantic: ax.id = sign_extend(al.id, int(ax.bit, ax.bit));

 * cpu_model: >= X86_Arch_8088
 * attr: ['op_size']
 *
 * mnemonic: cdqe
 * semantic: rax.id = sign_extend(eax.id, int(rax.bit, rax.bit));

 * attr: ['rexw']
 *
**/
bool X86Architecture::Table_1_98(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if ((rInsn.GetPrefix() & X86_Prefix_REX_w) == X86_Prefix_REX_w)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Cdqe);
      {
        Expression::LSPType AllExpr;
        /* semantic: rax.id = sign_extend(eax.id, int(rax.bit, rax.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_Reg_Rax, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpSext, Expr::MakeId(X86_Reg_Eax, &m_CpuInfo), Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(X86_Reg_Rax), m_CpuInfo.GetSizeOfRegisterInBit(X86_Reg_Rax)))));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_8088 && (rInsn.GetPrefix() & X86_Prefix_OpSize))
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Cbw);
      {
        Expression::LSPType AllExpr;
        /* semantic: ax.id = sign_extend(al.id, int(ax.bit, ax.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_Reg_Ax, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpSext, Expr::MakeId(X86_Reg_Al, &m_CpuInfo), Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(X86_Reg_Ax), m_CpuInfo.GetSizeOfRegisterInBit(X86_Reg_Ax)))));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_80386)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Cwde);
      {
        Expression::LSPType AllExpr;
        /* semantic: eax.id = sign_extend(ax.id, int(eax.bit, eax.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_Reg_Eax, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpSext, Expr::MakeId(X86_Reg_Ax, &m_CpuInfo), Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(X86_Reg_Eax), m_CpuInfo.GetSizeOfRegisterInBit(X86_Reg_Eax)))));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    return false;
}

/** instructions
 * opcode: 99
 *
 * mnemonic: cdq
 * semantic: ['if __expr and (eax.id & int32(0x80000000)) == int32(0x80000000): edx.id = int32(0xffffffff)\nelse: edx.id = int32(0)']
 * cpu_model: >= X86_Arch_80386
 *
 * mnemonic: cwd
 * semantic: ['if __expr and (ax.id & int16(0x8000)) == int16(0x8000): dx.id = int16(0xffff)\nelse: dx.id = int16(0)']
 * cpu_model: >= X86_Arch_8088
 * attr: ['op_size']
 *
 * mnemonic: cqo
 * semantic: ['if __expr and (rax.id & int64(0x8000000000000000)) == int64(0x8000000000000000): rdx.id = int64(0xffffffffffffffff)\nelse: rdx.id = int64(0)']
 * attr: ['rexw']
 *
**/
bool X86Architecture::Table_1_99(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if ((rInsn.GetPrefix() & X86_Prefix_REX_w) == X86_Prefix_REX_w)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Cqo);
      {
        Expression::LSPType AllExpr;
        /* semantic: if __expr and (rax.id & int64(0x8000000000000000)) == int64(0x8000000000000000): rdx.id = int64(0xffffffffffffffff)
        else: rdx.id = int64(0) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeBinOp(
            OperationExpression::OpAnd,
            Expr::MakeId(X86_Reg_Rax, &m_CpuInfo),
            Expr::MakeBitVector(64, 0x8000000000000000)),
          Expr::MakeBitVector(64, 0x8000000000000000),
          Expr::MakeAssign(
            Expr::MakeId(X86_Reg_Rdx, &m_CpuInfo),
            Expr::MakeBitVector(64, 0xffffffffffffffff)),
          Expr::MakeAssign(
            Expr::MakeId(X86_Reg_Rdx, &m_CpuInfo),
            Expr::MakeBitVector(64, 0x0))));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_8088 && (rInsn.GetPrefix() & X86_Prefix_OpSize))
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Cwd);
      {
        Expression::LSPType AllExpr;
        /* semantic: if __expr and (ax.id & int16(0x8000)) == int16(0x8000): dx.id = int16(0xffff)
        else: dx.id = int16(0) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeBinOp(
            OperationExpression::OpAnd,
            Expr::MakeId(X86_Reg_Ax, &m_CpuInfo),
            Expr::MakeBitVector(16, 0x8000)),
          Expr::MakeBitVector(16, 0x8000),
          Expr::MakeAssign(
            Expr::MakeId(X86_Reg_Dx, &m_CpuInfo),
            Expr::MakeBitVector(16, 0xffff)),
          Expr::MakeAssign(
            Expr::MakeId(X86_Reg_Dx, &m_CpuInfo),
            Expr::MakeBitVector(16, 0x0))));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_80386)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Cdq);
      {
        Expression::LSPType AllExpr;
        /* semantic: if __expr and (eax.id & int32(0x80000000)) == int32(0x80000000): edx.id = int32(0xffffffff)
        else: edx.id = int32(0) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeBinOp(
            OperationExpression::OpAnd,
            Expr::MakeId(X86_Reg_Eax, &m_CpuInfo),
            Expr::MakeBitVector(32, 0x80000000)),
          Expr::MakeBitVector(32, 0x80000000),
          Expr::MakeAssign(
            Expr::MakeId(X86_Reg_Edx, &m_CpuInfo),
            Expr::MakeBitVector(32, 0xffffffff)),
          Expr::MakeAssign(
            Expr::MakeId(X86_Reg_Edx, &m_CpuInfo),
            Expr::MakeBitVector(32, 0x0))));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    return false;
}

/** instruction
 * mnemonic: call
 * operand: ['Ap']
 * opcode: 9a
 * operation_type: ['call']
 * attr: ['nm64']
**/
bool X86Architecture::Table_1_9a(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (Mode != X86_Bit_64)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Call);
      rInsn.SubType() |= Instruction::CallType;
      if (Operand__Ap(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else
      return false;
}

/** instruction
 * mnemonic: fwait
 * opcode: 9b
**/
bool X86Architecture::Table_1_9b(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fwait);
    return true;
}

/** instruction
 * mnemonic: pushf
 * opcode: 9c
 * semantic: stack.id -= stack.size;
stack.mem =\
  (  bit_cast(cf.id, int(stack.bit, stack.bit))
  | (int64(1)                                   << int(stack.bit, 1))
  | (bit_cast(pf.id, int(stack.bit, stack.bit)) << int(stack.bit, 2))
  | (bit_cast(af.id, int(stack.bit, stack.bit)) << int(stack.bit, 4))
  | (bit_cast(zf.id, int(stack.bit, stack.bit)) << int(stack.bit, 6))
  | (bit_cast(sf.id, int(stack.bit, stack.bit)) << int(stack.bit, 7))
  | (bit_cast(tf.id, int(stack.bit, stack.bit)) << int(stack.bit, 8))
  | (int64(1)                                   << int(stack.bit, 9))
  | (bit_cast(df.id, int(stack.bit, stack.bit)) << int(stack.bit, 10))
  | (bit_cast(of.id, int(stack.bit, stack.bit)) << int(stack.bit, 11)));

 * constraint: d64
**/
bool X86Architecture::Table_1_9c(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (!(rInsn.Prefix() & X86_Prefix_OpSize))
    {
      rInsn.Prefix() |= X86_Prefix_REX_w; /* d64/df64 constraint */
    }
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Pushf);
    {
      Expression::LSPType AllExpr;
      /* semantic: stack.id -= stack.size */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
        Expr::MakeBinOp(
          OperationExpression::OpSub,
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeBitVector(
            m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())),
            m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())) / 8)))
      );
      /* semantic: stack.mem =\
        (  bit_cast(cf.id, int(stack.bit, stack.bit))
        | (int64(1)                                   << int(stack.bit, 1))
        | (bit_cast(pf.id, int(stack.bit, stack.bit)) << int(stack.bit, 2))
        | (bit_cast(af.id, int(stack.bit, stack.bit)) << int(stack.bit, 4))
        | (bit_cast(zf.id, int(stack.bit, stack.bit)) << int(stack.bit, 6))
        | (bit_cast(sf.id, int(stack.bit, stack.bit)) << int(stack.bit, 7))
        | (bit_cast(tf.id, int(stack.bit, stack.bit)) << int(stack.bit, 8))
        | (int64(1)                                   << int(stack.bit, 9))
        | (bit_cast(df.id, int(stack.bit, stack.bit)) << int(stack.bit, 10))
        | (bit_cast(of.id, int(stack.bit, stack.bit)) << int(stack.bit, 11))) */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeMem(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), nullptr, Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo)),
        Expr::MakeBinOp(
          OperationExpression::OpOr,
          Expr::MakeBinOp(
            OperationExpression::OpOr,
            Expr::MakeBinOp(
              OperationExpression::OpOr,
              Expr::MakeBinOp(
                OperationExpression::OpOr,
                Expr::MakeBinOp(
                  OperationExpression::OpOr,
                  Expr::MakeBinOp(
                    OperationExpression::OpOr,
                    Expr::MakeBinOp(
                      OperationExpression::OpOr,
                      Expr::MakeBinOp(
                        OperationExpression::OpOr,
                        Expr::MakeBinOp(
                          OperationExpression::OpOr,
                          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeId(X86_FlCf, &m_CpuInfo), Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())))),
                          Expr::MakeBinOp(
                            OperationExpression::OpLls,
                            Expr::MakeBitVector(64, 0x1),
                            Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), 0x1))),
                        Expr::MakeBinOp(
                          OperationExpression::OpLls,
                          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeId(X86_FlPf, &m_CpuInfo), Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())))),
                          Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), 0x2))),
                      Expr::MakeBinOp(
                        OperationExpression::OpLls,
                        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeId(X86_FlAf, &m_CpuInfo), Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())))),
                        Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), 0x4))),
                    Expr::MakeBinOp(
                      OperationExpression::OpLls,
                      Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeId(X86_FlZf, &m_CpuInfo), Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())))),
                      Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), 0x6))),
                  Expr::MakeBinOp(
                    OperationExpression::OpLls,
                    Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeId(X86_FlSf, &m_CpuInfo), Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())))),
                    Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), 0x7))),
                Expr::MakeBinOp(
                  OperationExpression::OpLls,
                  Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeId(X86_FlTf, &m_CpuInfo), Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())))),
                  Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), 0x8))),
              Expr::MakeBinOp(
                OperationExpression::OpLls,
                Expr::MakeBitVector(64, 0x1),
                Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), 0x9))),
            Expr::MakeBinOp(
              OperationExpression::OpLls,
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeId(X86_FlDf, &m_CpuInfo), Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())))),
              Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), 0xa))),
          Expr::MakeBinOp(
            OperationExpression::OpLls,
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeId(X86_FlOf, &m_CpuInfo), Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())))),
            Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), 0xb)))));
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instruction
 * mnemonic: popf
 * opcode: 9d
 * semantic: alloc_var('flags', stack.bit);
flags = stack.mem;
stack.id += stack.size;
cf.id = bit_cast(flags, int1(1));
pf.id = bit_cast((flags >> int(stack.bit,  2)), int1(1));
af.id = bit_cast((flags >> int(stack.bit,  4)), int1(1));
zf.id = bit_cast((flags >> int(stack.bit,  6)), int1(1));
sf.id = bit_cast((flags >> int(stack.bit,  7)), int1(1));
tf.id = bit_cast((flags >> int(stack.bit,  8)), int1(1));
df.id = bit_cast((flags >> int(stack.bit, 10)), int1(1));
of.id = bit_cast((flags >> int(stack.bit, 11)), int1(1));
free_var('flags');

 * constraint: d64
**/
bool X86Architecture::Table_1_9d(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (!(rInsn.Prefix() & X86_Prefix_OpSize))
    {
      rInsn.Prefix() |= X86_Prefix_REX_w; /* d64/df64 constraint */
    }
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Popf);
    {
      Expression::LSPType AllExpr;
      /* semantic: alloc_var('flags', stack.bit) */
      AllExpr.push_back(Expr::MakeVar("flags", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()))));
      /* semantic: flags = stack.mem */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("flags", VariableExpression::Use),
        Expr::MakeMem(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), nullptr, Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo))));
      /* semantic: stack.id += stack.size */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
        Expr::MakeBinOp(
          OperationExpression::OpAdd,
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeBitVector(
            m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())),
            m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())) / 8)))
      );
      /* semantic: cf.id = bit_cast(flags, int1(1)) */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlCf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeVar("flags", VariableExpression::Use), Expr::MakeBitVector(1, 0x1))));
      /* semantic: pf.id = bit_cast((flags >> int(stack.bit,  2)), int1(1)) */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlPf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeVar("flags", VariableExpression::Use),
          Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), 0x2)), Expr::MakeBitVector(1, 0x1))));
      /* semantic: af.id = bit_cast((flags >> int(stack.bit,  4)), int1(1)) */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlAf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeVar("flags", VariableExpression::Use),
          Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), 0x4)), Expr::MakeBitVector(1, 0x1))));
      /* semantic: zf.id = bit_cast((flags >> int(stack.bit,  6)), int1(1)) */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlZf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeVar("flags", VariableExpression::Use),
          Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), 0x6)), Expr::MakeBitVector(1, 0x1))));
      /* semantic: sf.id = bit_cast((flags >> int(stack.bit,  7)), int1(1)) */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlSf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeVar("flags", VariableExpression::Use),
          Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), 0x7)), Expr::MakeBitVector(1, 0x1))));
      /* semantic: tf.id = bit_cast((flags >> int(stack.bit,  8)), int1(1)) */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlTf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeVar("flags", VariableExpression::Use),
          Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), 0x8)), Expr::MakeBitVector(1, 0x1))));
      /* semantic: df.id = bit_cast((flags >> int(stack.bit, 10)), int1(1)) */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlDf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeVar("flags", VariableExpression::Use),
          Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), 0xa)), Expr::MakeBitVector(1, 0x1))));
      /* semantic: of.id = bit_cast((flags >> int(stack.bit, 11)), int1(1)) */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlOf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeVar("flags", VariableExpression::Use),
          Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), 0xb)), Expr::MakeBitVector(1, 0x1))));
      /* semantic: free_var('flags') */
      AllExpr.push_back(Expr::MakeVar("flags", VariableExpression::Free));
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instruction
 * mnemonic: sahf
 * update_flags: ['sf', 'zf', 'af', 'pf', 'cf']
 * opcode: 9e
**/
bool X86Architecture::Table_1_9e(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Sahf);
    {
      Expression::LSPType AllExpr;
      rInsn.SetUpdatedFlags(X86_FlSf | X86_FlZf | X86_FlAf | X86_FlPf | X86_FlCf);
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instruction
 * mnemonic: lahf
 * opcode: 9f
 * test_flags: ['sf', 'zf', 'af', 'pf', 'cf']
 * semantic: ah.id =\
    (  bit_cast(cf.id, int8(ah.bit))
    | (int64(1)                      << int(ah.bit, 1))
    | (bit_cast(pf.id, int8(ah.bit)) << int(ah.bit, 2))
    | (int64(0)                      << int(ah.bit, 3))
    | (bit_cast(af.id, int8(ah.bit)) << int(ah.bit, 4))
    | (int64(0)                      << int(ah.bit, 5))
    | (bit_cast(zf.id, int8(ah.bit)) << int(ah.bit, 6))
    | (bit_cast(sf.id, int8(ah.bit)) << int(ah.bit, 7)));

**/
bool X86Architecture::Table_1_9f(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Lahf);
    {
      Expression::LSPType AllExpr;
      rInsn.SetTestedFlags(X86_FlSf | X86_FlZf | X86_FlAf | X86_FlPf | X86_FlCf);
      /* semantic: ah.id =\
          (  bit_cast(cf.id, int8(ah.bit))
          | (int64(1)                      << int(ah.bit, 1))
          | (bit_cast(pf.id, int8(ah.bit)) << int(ah.bit, 2))
          | (int64(0)                      << int(ah.bit, 3))
          | (bit_cast(af.id, int8(ah.bit)) << int(ah.bit, 4))
          | (int64(0)                      << int(ah.bit, 5))
          | (bit_cast(zf.id, int8(ah.bit)) << int(ah.bit, 6))
          | (bit_cast(sf.id, int8(ah.bit)) << int(ah.bit, 7))) */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_Reg_Ah, &m_CpuInfo),
        Expr::MakeBinOp(
          OperationExpression::OpOr,
          Expr::MakeBinOp(
            OperationExpression::OpOr,
            Expr::MakeBinOp(
              OperationExpression::OpOr,
              Expr::MakeBinOp(
                OperationExpression::OpOr,
                Expr::MakeBinOp(
                  OperationExpression::OpOr,
                  Expr::MakeBinOp(
                    OperationExpression::OpOr,
                    Expr::MakeBinOp(
                      OperationExpression::OpOr,
                      Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeId(X86_FlCf, &m_CpuInfo), Expr::MakeBitVector(8, m_CpuInfo.GetSizeOfRegisterInBit(X86_Reg_Ah))),
                      Expr::MakeBinOp(
                        OperationExpression::OpLls,
                        Expr::MakeBitVector(64, 0x1),
                        Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(X86_Reg_Ah), 0x1))),
                    Expr::MakeBinOp(
                      OperationExpression::OpLls,
                      Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeId(X86_FlPf, &m_CpuInfo), Expr::MakeBitVector(8, m_CpuInfo.GetSizeOfRegisterInBit(X86_Reg_Ah))),
                      Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(X86_Reg_Ah), 0x2))),
                  Expr::MakeBinOp(
                    OperationExpression::OpLls,
                    Expr::MakeBitVector(64, 0x0),
                    Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(X86_Reg_Ah), 0x3))),
                Expr::MakeBinOp(
                  OperationExpression::OpLls,
                  Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeId(X86_FlAf, &m_CpuInfo), Expr::MakeBitVector(8, m_CpuInfo.GetSizeOfRegisterInBit(X86_Reg_Ah))),
                  Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(X86_Reg_Ah), 0x4))),
              Expr::MakeBinOp(
                OperationExpression::OpLls,
                Expr::MakeBitVector(64, 0x0),
                Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(X86_Reg_Ah), 0x5))),
            Expr::MakeBinOp(
              OperationExpression::OpLls,
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeId(X86_FlZf, &m_CpuInfo), Expr::MakeBitVector(8, m_CpuInfo.GetSizeOfRegisterInBit(X86_Reg_Ah))),
              Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(X86_Reg_Ah), 0x6))),
          Expr::MakeBinOp(
            OperationExpression::OpLls,
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeId(X86_FlSf, &m_CpuInfo), Expr::MakeBitVector(8, m_CpuInfo.GetSizeOfRegisterInBit(X86_Reg_Ah))),
            Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(X86_Reg_Ah), 0x7)))));
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instruction
 * mnemonic: mov
 * operand: ['AL', 'Ob']
 * opcode: a0
 * semantic: op0.val = op1.val;

**/
bool X86Architecture::Table_1_a0(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Mov);
    if (Operand__AL_Ob(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    {
      Expression::LSPType AllExpr;
      /* semantic: op0.val = op1.val */
      AllExpr.push_back(Expr::MakeAssign(
        rInsn.GetOperand(0),
        rInsn.GetOperand(1)));
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instruction
 * mnemonic: mov
 * operand: ['rAX', 'Ov']
 * opcode: a1
 * semantic: op0.val = op1.val;

**/
bool X86Architecture::Table_1_a1(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Mov);
    if (Operand__rAX_Ov(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    {
      Expression::LSPType AllExpr;
      /* semantic: op0.val = op1.val */
      AllExpr.push_back(Expr::MakeAssign(
        rInsn.GetOperand(0),
        rInsn.GetOperand(1)));
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instruction
 * mnemonic: mov
 * operand: ['Ob', 'AL']
 * opcode: a2
 * semantic: op0.val = op1.val;

**/
bool X86Architecture::Table_1_a2(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Mov);
    if (Operand__Ob_AL(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    {
      Expression::LSPType AllExpr;
      /* semantic: op0.val = op1.val */
      AllExpr.push_back(Expr::MakeAssign(
        rInsn.GetOperand(0),
        rInsn.GetOperand(1)));
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instruction
 * mnemonic: mov
 * operand: ['Ov', 'rAX']
 * opcode: a3
 * semantic: op0.val = op1.val;

**/
bool X86Architecture::Table_1_a3(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Mov);
    if (Operand__Ov_rAX(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    {
      Expression::LSPType AllExpr;
      /* semantic: op0.val = op1.val */
      AllExpr.push_back(Expr::MakeAssign(
        rInsn.GetOperand(0),
        rInsn.GetOperand(1)));
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instruction
 * mnemonic: movs
 * operand: ['Xb', 'Yb']
 * test_flags: ['df']
 * opcode: a4
 * semantic: if __code and instruction_has_prefix(rep):
  while cnt.id != int(cnt.bit, 0):
    call('move_string')
    cnt.id -= int(cnt.bit, 1);
if __code and instruction_has_no_prefix(rep):
  call('move_string');

**/
bool X86Architecture::Table_1_a4(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Movs);
    if (Operand__Xb_Yb(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    {
      Expression::LSPType AllExpr;
      rInsn.SetTestedFlags(X86_FlDf);
      /* semantic: if __code and instruction_has_prefix(rep):
        while cnt.id != int(cnt.bit, 0):
          call('move_string')
          cnt.id -= int(cnt.bit, 1) */
      if (rInsn.GetPrefix() & (X86_Prefix_Rep))
      {
        /* block glb expressions */
        AllExpr.push_back(Expr::MakeWhileCond(
          ConditionExpression::CondNe,
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::CounterRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::CounterRegister, rInsn.GetMode())), 0x0),
          Expr::MakeBind({
          Expr::MakeAssign(
            rInsn.GetOperand(1),
            rInsn.GetOperand(0)),
          Expr::MakeIfElseCond(
            ConditionExpression::CondEq,
            Expr::MakeId(X86_FlDf, &m_CpuInfo),
            Expr::MakeBitVector(1, 0x1),
            Expr::MakeBind({
            Expr::MakeAssign(
              expr_cast<MemoryExpression>(rInsn.GetOperand(0))->GetOffsetExpression(),
              Expr::MakeBinOp(
                OperationExpression::OpSub,
                expr_cast<MemoryExpression>(rInsn.GetOperand(0))->GetOffsetExpression(),
                Expr::MakeBitVector(expr_cast<MemoryExpression>(rInsn.GetOperand(0))->GetOffsetExpression()->GetBitSize(), rInsn.GetOperand(0)->GetBitSize() / 8)))
            ,
            Expr::MakeAssign(
              expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression(),
              Expr::MakeBinOp(
                OperationExpression::OpSub,
                expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression(),
                Expr::MakeBitVector(expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression()->GetBitSize(), rInsn.GetOperand(1)->GetBitSize() / 8)))
            })
          ,
            Expr::MakeBind({
            Expr::MakeAssign(
              expr_cast<MemoryExpression>(rInsn.GetOperand(0))->GetOffsetExpression(),
              Expr::MakeBinOp(
                OperationExpression::OpAdd,
                expr_cast<MemoryExpression>(rInsn.GetOperand(0))->GetOffsetExpression(),
                Expr::MakeBitVector(expr_cast<MemoryExpression>(rInsn.GetOperand(0))->GetOffsetExpression()->GetBitSize(), rInsn.GetOperand(0)->GetBitSize() / 8)))
            ,
            Expr::MakeAssign(
              expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression(),
              Expr::MakeBinOp(
                OperationExpression::OpAdd,
                expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression(),
                Expr::MakeBitVector(expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression()->GetBitSize(), rInsn.GetOperand(1)->GetBitSize() / 8)))
            })
          ),
          Expr::MakeAssign(
            Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::CounterRegister, rInsn.GetMode()), &m_CpuInfo),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::CounterRegister, rInsn.GetMode()), &m_CpuInfo),
              Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::CounterRegister, rInsn.GetMode())), 0x1)))
          })
        ));
      }
      /* semantic: if __code and instruction_has_no_prefix(rep):
        call('move_string') */
      if (!(rInsn.GetPrefix() & (X86_Prefix_Rep)))
      {
        /* block glb expressions */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(1),
          rInsn.GetOperand(0)));
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeId(X86_FlDf, &m_CpuInfo),
          Expr::MakeBitVector(1, 0x1),
          Expr::MakeBind({
          Expr::MakeAssign(
            expr_cast<MemoryExpression>(rInsn.GetOperand(0))->GetOffsetExpression(),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              expr_cast<MemoryExpression>(rInsn.GetOperand(0))->GetOffsetExpression(),
              Expr::MakeBitVector(expr_cast<MemoryExpression>(rInsn.GetOperand(0))->GetOffsetExpression()->GetBitSize(), rInsn.GetOperand(0)->GetBitSize() / 8)))
          ,
          Expr::MakeAssign(
            expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression(),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression(),
              Expr::MakeBitVector(expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression()->GetBitSize(), rInsn.GetOperand(1)->GetBitSize() / 8)))
          })
        ,
          Expr::MakeBind({
          Expr::MakeAssign(
            expr_cast<MemoryExpression>(rInsn.GetOperand(0))->GetOffsetExpression(),
            Expr::MakeBinOp(
              OperationExpression::OpAdd,
              expr_cast<MemoryExpression>(rInsn.GetOperand(0))->GetOffsetExpression(),
              Expr::MakeBitVector(expr_cast<MemoryExpression>(rInsn.GetOperand(0))->GetOffsetExpression()->GetBitSize(), rInsn.GetOperand(0)->GetBitSize() / 8)))
          ,
          Expr::MakeAssign(
            expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression(),
            Expr::MakeBinOp(
              OperationExpression::OpAdd,
              expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression(),
              Expr::MakeBitVector(expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression()->GetBitSize(), rInsn.GetOperand(1)->GetBitSize() / 8)))
          })
        ));
      }
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instruction
 * mnemonic: movs
 * operand: ['Xv', 'Yv']
 * test_flags: ['df']
 * opcode: a5
 * semantic: if __code and instruction_has_prefix(rep):
  while cnt.id != int(cnt.bit, 0):
    call('move_string')
    cnt.id -= int(cnt.bit, 1);
if __code and instruction_has_no_prefix(rep):
  call('move_string');

**/
bool X86Architecture::Table_1_a5(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Movs);
    if (Operand__Xv_Yv(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    {
      Expression::LSPType AllExpr;
      rInsn.SetTestedFlags(X86_FlDf);
      /* semantic: if __code and instruction_has_prefix(rep):
        while cnt.id != int(cnt.bit, 0):
          call('move_string')
          cnt.id -= int(cnt.bit, 1) */
      if (rInsn.GetPrefix() & (X86_Prefix_Rep))
      {
        /* block glb expressions */
        AllExpr.push_back(Expr::MakeWhileCond(
          ConditionExpression::CondNe,
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::CounterRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::CounterRegister, rInsn.GetMode())), 0x0),
          Expr::MakeBind({
          Expr::MakeAssign(
            rInsn.GetOperand(1),
            rInsn.GetOperand(0)),
          Expr::MakeIfElseCond(
            ConditionExpression::CondEq,
            Expr::MakeId(X86_FlDf, &m_CpuInfo),
            Expr::MakeBitVector(1, 0x1),
            Expr::MakeBind({
            Expr::MakeAssign(
              expr_cast<MemoryExpression>(rInsn.GetOperand(0))->GetOffsetExpression(),
              Expr::MakeBinOp(
                OperationExpression::OpSub,
                expr_cast<MemoryExpression>(rInsn.GetOperand(0))->GetOffsetExpression(),
                Expr::MakeBitVector(expr_cast<MemoryExpression>(rInsn.GetOperand(0))->GetOffsetExpression()->GetBitSize(), rInsn.GetOperand(0)->GetBitSize() / 8)))
            ,
            Expr::MakeAssign(
              expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression(),
              Expr::MakeBinOp(
                OperationExpression::OpSub,
                expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression(),
                Expr::MakeBitVector(expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression()->GetBitSize(), rInsn.GetOperand(1)->GetBitSize() / 8)))
            })
          ,
            Expr::MakeBind({
            Expr::MakeAssign(
              expr_cast<MemoryExpression>(rInsn.GetOperand(0))->GetOffsetExpression(),
              Expr::MakeBinOp(
                OperationExpression::OpAdd,
                expr_cast<MemoryExpression>(rInsn.GetOperand(0))->GetOffsetExpression(),
                Expr::MakeBitVector(expr_cast<MemoryExpression>(rInsn.GetOperand(0))->GetOffsetExpression()->GetBitSize(), rInsn.GetOperand(0)->GetBitSize() / 8)))
            ,
            Expr::MakeAssign(
              expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression(),
              Expr::MakeBinOp(
                OperationExpression::OpAdd,
                expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression(),
                Expr::MakeBitVector(expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression()->GetBitSize(), rInsn.GetOperand(1)->GetBitSize() / 8)))
            })
          ),
          Expr::MakeAssign(
            Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::CounterRegister, rInsn.GetMode()), &m_CpuInfo),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::CounterRegister, rInsn.GetMode()), &m_CpuInfo),
              Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::CounterRegister, rInsn.GetMode())), 0x1)))
          })
        ));
      }
      /* semantic: if __code and instruction_has_no_prefix(rep):
        call('move_string') */
      if (!(rInsn.GetPrefix() & (X86_Prefix_Rep)))
      {
        /* block glb expressions */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(1),
          rInsn.GetOperand(0)));
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeId(X86_FlDf, &m_CpuInfo),
          Expr::MakeBitVector(1, 0x1),
          Expr::MakeBind({
          Expr::MakeAssign(
            expr_cast<MemoryExpression>(rInsn.GetOperand(0))->GetOffsetExpression(),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              expr_cast<MemoryExpression>(rInsn.GetOperand(0))->GetOffsetExpression(),
              Expr::MakeBitVector(expr_cast<MemoryExpression>(rInsn.GetOperand(0))->GetOffsetExpression()->GetBitSize(), rInsn.GetOperand(0)->GetBitSize() / 8)))
          ,
          Expr::MakeAssign(
            expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression(),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression(),
              Expr::MakeBitVector(expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression()->GetBitSize(), rInsn.GetOperand(1)->GetBitSize() / 8)))
          })
        ,
          Expr::MakeBind({
          Expr::MakeAssign(
            expr_cast<MemoryExpression>(rInsn.GetOperand(0))->GetOffsetExpression(),
            Expr::MakeBinOp(
              OperationExpression::OpAdd,
              expr_cast<MemoryExpression>(rInsn.GetOperand(0))->GetOffsetExpression(),
              Expr::MakeBitVector(expr_cast<MemoryExpression>(rInsn.GetOperand(0))->GetOffsetExpression()->GetBitSize(), rInsn.GetOperand(0)->GetBitSize() / 8)))
          ,
          Expr::MakeAssign(
            expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression(),
            Expr::MakeBinOp(
              OperationExpression::OpAdd,
              expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression(),
              Expr::MakeBitVector(expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression()->GetBitSize(), rInsn.GetOperand(1)->GetBitSize() / 8)))
          })
        ));
      }
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instruction
 * mnemonic: cmps
 * test_flags: ['df']
 * semantic: alloc_var('loop', 1);
loop = int1(1);
if __code and instruction_has_prefix(repz):
  if __expr and cnt.id == int(cnt.bit, 0): loop = int1(0)
  while loop == int1(1):
    call('compare_string')
    cnt.id -= int(cnt.bit, 1)
    if __expr and cnt.id == int(cnt.bit, 0): loop = int1(0)
    if __expr and zf.id == int1(0): loop = int1(0);
if __code and instruction_has_prefix(repnz):
  if __expr and cnt.id == int(cnt.bit, 0): loop = int1(0)
  while loop == int1(1):
    call('compare_string')
    cnt.id -= int(cnt.bit, 1)
    if __expr and cnt.id == int(cnt.bit, 0): loop = int1(0)
    if __expr and zf.id == int1(1): loop = int1(0);
if __code and instruction_has_no_prefix(repz, repnz):
  call('compare_string');
free_var('loop');

 * operand: ['Xb', 'Yb']
 * opcode: a6
 * update_flags: ['of', 'sf', 'zf', 'af', 'pf', 'cf']
**/
bool X86Architecture::Table_1_a6(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Cmps);
    if (Operand__Xb_Yb(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    {
      Expression::LSPType AllExpr;
      rInsn.SetTestedFlags(X86_FlDf);
      rInsn.SetUpdatedFlags(X86_FlOf | X86_FlSf | X86_FlZf | X86_FlAf | X86_FlPf | X86_FlCf);
      /* semantic: alloc_var('loop', 1) */
      AllExpr.push_back(Expr::MakeVar("loop", VariableExpression::Alloc, 0x1));
      /* semantic: loop = int1(1) */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("loop", VariableExpression::Use),
        Expr::MakeBitVector(1, 0x1)));
      /* semantic: if __code and instruction_has_prefix(repz):
        if __expr and cnt.id == int(cnt.bit, 0): loop = int1(0)
        while loop == int1(1):
          call('compare_string')
          cnt.id -= int(cnt.bit, 1)
          if __expr and cnt.id == int(cnt.bit, 0): loop = int1(0)
          if __expr and zf.id == int1(0): loop = int1(0) */
      if (rInsn.GetPrefix() & (X86_Prefix_Rep))
      {
        /* block glb expressions */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::CounterRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::CounterRegister, rInsn.GetMode())), 0x0),
          Expr::MakeAssign(
            Expr::MakeVar("loop", VariableExpression::Use),
            Expr::MakeBitVector(1, 0x0)), nullptr)
        );
        AllExpr.push_back(Expr::MakeWhileCond(
          ConditionExpression::CondEq,
          Expr::MakeVar("loop", VariableExpression::Use),
          Expr::MakeBitVector(1, 0x1),
          Expr::MakeBind({
          Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()),
          Expr::MakeAssign(
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              rInsn.GetOperand(0),
              rInsn.GetOperand(1))),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlOf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeBinOp(
                OperationExpression::OpAnd,
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  rInsn.GetOperand(0),
                  Expr::MakeVar("res", VariableExpression::Use)),
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  rInsn.GetOperand(0),
                  rInsn.GetOperand(1))),
              Expr::MakeBinOp(
                OperationExpression::OpSub,
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlCf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  Expr::MakeBinOp(
                    OperationExpression::OpXor,
                    rInsn.GetOperand(0),
                    rInsn.GetOperand(1)),
                  Expr::MakeVar("res", VariableExpression::Use)),
                Expr::MakeBinOp(
                  OperationExpression::OpAnd,
                  Expr::MakeBinOp(
                    OperationExpression::OpXor,
                    rInsn.GetOperand(0),
                    Expr::MakeVar("res", VariableExpression::Use)),
                  Expr::MakeBinOp(
                    OperationExpression::OpXor,
                    rInsn.GetOperand(0),
                    rInsn.GetOperand(1)))),
              Expr::MakeBinOp(
                OperationExpression::OpSub,
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlSf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBinOp(
                OperationExpression::OpSub,
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlZf, &m_CpuInfo),
            Expr::MakeTernaryCond(ConditionExpression::CondEq,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
            Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))),
          Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)),
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBitVector(1, 0x1)),
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeId(X86_FlPf, &m_CpuInfo),
            Expr::MakeVar("pf_tmp", VariableExpression::Use)),
          Expr::MakeVar("pf_tmp", VariableExpression::Free),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlAf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  rInsn.GetOperand(0),
                  rInsn.GetOperand(1)),
                Expr::MakeVar("res", VariableExpression::Use)),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))),
          Expr::MakeIfElseCond(
            ConditionExpression::CondEq,
            Expr::MakeId(X86_FlDf, &m_CpuInfo),
            Expr::MakeBitVector(1, 0x1),
            Expr::MakeBind({
            Expr::MakeAssign(
              expr_cast<MemoryExpression>(rInsn.GetOperand(0))->GetOffsetExpression(),
              Expr::MakeBinOp(
                OperationExpression::OpSub,
                expr_cast<MemoryExpression>(rInsn.GetOperand(0))->GetOffsetExpression(),
                Expr::MakeBitVector(expr_cast<MemoryExpression>(rInsn.GetOperand(0))->GetOffsetExpression()->GetBitSize(), rInsn.GetOperand(0)->GetBitSize() / 8)))
            ,
            Expr::MakeAssign(
              expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression(),
              Expr::MakeBinOp(
                OperationExpression::OpSub,
                expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression(),
                Expr::MakeBitVector(expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression()->GetBitSize(), rInsn.GetOperand(1)->GetBitSize() / 8)))
            })
          ,
            Expr::MakeBind({
            Expr::MakeAssign(
              expr_cast<MemoryExpression>(rInsn.GetOperand(0))->GetOffsetExpression(),
              Expr::MakeBinOp(
                OperationExpression::OpAdd,
                expr_cast<MemoryExpression>(rInsn.GetOperand(0))->GetOffsetExpression(),
                Expr::MakeBitVector(expr_cast<MemoryExpression>(rInsn.GetOperand(0))->GetOffsetExpression()->GetBitSize(), rInsn.GetOperand(0)->GetBitSize() / 8)))
            ,
            Expr::MakeAssign(
              expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression(),
              Expr::MakeBinOp(
                OperationExpression::OpAdd,
                expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression(),
                Expr::MakeBitVector(expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression()->GetBitSize(), rInsn.GetOperand(1)->GetBitSize() / 8)))
            })
          ),
          Expr::MakeVar("res", VariableExpression::Free),
          Expr::MakeAssign(
            Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::CounterRegister, rInsn.GetMode()), &m_CpuInfo),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::CounterRegister, rInsn.GetMode()), &m_CpuInfo),
              Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::CounterRegister, rInsn.GetMode())), 0x1)))
          ,
          Expr::MakeIfElseCond(
            ConditionExpression::CondEq,
            Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::CounterRegister, rInsn.GetMode()), &m_CpuInfo),
            Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::CounterRegister, rInsn.GetMode())), 0x0),
            Expr::MakeAssign(
              Expr::MakeVar("loop", VariableExpression::Use),
              Expr::MakeBitVector(1, 0x0)), nullptr)
          ,
          Expr::MakeIfElseCond(
            ConditionExpression::CondEq,
            Expr::MakeId(X86_FlZf, &m_CpuInfo),
            Expr::MakeBitVector(1, 0x0),
            Expr::MakeAssign(
              Expr::MakeVar("loop", VariableExpression::Use),
              Expr::MakeBitVector(1, 0x0)), nullptr)
          })
        ));
      }
      /* semantic: if __code and instruction_has_prefix(repnz):
        if __expr and cnt.id == int(cnt.bit, 0): loop = int1(0)
        while loop == int1(1):
          call('compare_string')
          cnt.id -= int(cnt.bit, 1)
          if __expr and cnt.id == int(cnt.bit, 0): loop = int1(0)
          if __expr and zf.id == int1(1): loop = int1(0) */
      if (rInsn.GetPrefix() & (X86_Prefix_RepNz))
      {
        /* block glb expressions */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::CounterRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::CounterRegister, rInsn.GetMode())), 0x0),
          Expr::MakeAssign(
            Expr::MakeVar("loop", VariableExpression::Use),
            Expr::MakeBitVector(1, 0x0)), nullptr)
        );
        AllExpr.push_back(Expr::MakeWhileCond(
          ConditionExpression::CondEq,
          Expr::MakeVar("loop", VariableExpression::Use),
          Expr::MakeBitVector(1, 0x1),
          Expr::MakeBind({
          Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()),
          Expr::MakeAssign(
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              rInsn.GetOperand(0),
              rInsn.GetOperand(1))),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlOf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeBinOp(
                OperationExpression::OpAnd,
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  rInsn.GetOperand(0),
                  Expr::MakeVar("res", VariableExpression::Use)),
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  rInsn.GetOperand(0),
                  rInsn.GetOperand(1))),
              Expr::MakeBinOp(
                OperationExpression::OpSub,
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlCf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  Expr::MakeBinOp(
                    OperationExpression::OpXor,
                    rInsn.GetOperand(0),
                    rInsn.GetOperand(1)),
                  Expr::MakeVar("res", VariableExpression::Use)),
                Expr::MakeBinOp(
                  OperationExpression::OpAnd,
                  Expr::MakeBinOp(
                    OperationExpression::OpXor,
                    rInsn.GetOperand(0),
                    Expr::MakeVar("res", VariableExpression::Use)),
                  Expr::MakeBinOp(
                    OperationExpression::OpXor,
                    rInsn.GetOperand(0),
                    rInsn.GetOperand(1)))),
              Expr::MakeBinOp(
                OperationExpression::OpSub,
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlSf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBinOp(
                OperationExpression::OpSub,
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlZf, &m_CpuInfo),
            Expr::MakeTernaryCond(ConditionExpression::CondEq,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
            Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))),
          Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)),
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBitVector(1, 0x1)),
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeId(X86_FlPf, &m_CpuInfo),
            Expr::MakeVar("pf_tmp", VariableExpression::Use)),
          Expr::MakeVar("pf_tmp", VariableExpression::Free),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlAf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  rInsn.GetOperand(0),
                  rInsn.GetOperand(1)),
                Expr::MakeVar("res", VariableExpression::Use)),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))),
          Expr::MakeIfElseCond(
            ConditionExpression::CondEq,
            Expr::MakeId(X86_FlDf, &m_CpuInfo),
            Expr::MakeBitVector(1, 0x1),
            Expr::MakeBind({
            Expr::MakeAssign(
              expr_cast<MemoryExpression>(rInsn.GetOperand(0))->GetOffsetExpression(),
              Expr::MakeBinOp(
                OperationExpression::OpSub,
                expr_cast<MemoryExpression>(rInsn.GetOperand(0))->GetOffsetExpression(),
                Expr::MakeBitVector(expr_cast<MemoryExpression>(rInsn.GetOperand(0))->GetOffsetExpression()->GetBitSize(), rInsn.GetOperand(0)->GetBitSize() / 8)))
            ,
            Expr::MakeAssign(
              expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression(),
              Expr::MakeBinOp(
                OperationExpression::OpSub,
                expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression(),
                Expr::MakeBitVector(expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression()->GetBitSize(), rInsn.GetOperand(1)->GetBitSize() / 8)))
            })
          ,
            Expr::MakeBind({
            Expr::MakeAssign(
              expr_cast<MemoryExpression>(rInsn.GetOperand(0))->GetOffsetExpression(),
              Expr::MakeBinOp(
                OperationExpression::OpAdd,
                expr_cast<MemoryExpression>(rInsn.GetOperand(0))->GetOffsetExpression(),
                Expr::MakeBitVector(expr_cast<MemoryExpression>(rInsn.GetOperand(0))->GetOffsetExpression()->GetBitSize(), rInsn.GetOperand(0)->GetBitSize() / 8)))
            ,
            Expr::MakeAssign(
              expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression(),
              Expr::MakeBinOp(
                OperationExpression::OpAdd,
                expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression(),
                Expr::MakeBitVector(expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression()->GetBitSize(), rInsn.GetOperand(1)->GetBitSize() / 8)))
            })
          ),
          Expr::MakeVar("res", VariableExpression::Free),
          Expr::MakeAssign(
            Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::CounterRegister, rInsn.GetMode()), &m_CpuInfo),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::CounterRegister, rInsn.GetMode()), &m_CpuInfo),
              Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::CounterRegister, rInsn.GetMode())), 0x1)))
          ,
          Expr::MakeIfElseCond(
            ConditionExpression::CondEq,
            Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::CounterRegister, rInsn.GetMode()), &m_CpuInfo),
            Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::CounterRegister, rInsn.GetMode())), 0x0),
            Expr::MakeAssign(
              Expr::MakeVar("loop", VariableExpression::Use),
              Expr::MakeBitVector(1, 0x0)), nullptr)
          ,
          Expr::MakeIfElseCond(
            ConditionExpression::CondEq,
            Expr::MakeId(X86_FlZf, &m_CpuInfo),
            Expr::MakeBitVector(1, 0x1),
            Expr::MakeAssign(
              Expr::MakeVar("loop", VariableExpression::Use),
              Expr::MakeBitVector(1, 0x0)), nullptr)
          })
        ));
      }
      /* semantic: if __code and instruction_has_no_prefix(repz, repnz):
        call('compare_string') */
      if (!(rInsn.GetPrefix() & (X86_Prefix_Rep | X86_Prefix_RepNz)))
      {
        /* block glb expressions */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            rInsn.GetOperand(0),
            rInsn.GetOperand(1))));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlOf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                Expr::MakeVar("res", VariableExpression::Use)),
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                rInsn.GetOperand(1))),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlCf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  rInsn.GetOperand(0),
                  rInsn.GetOperand(1)),
                Expr::MakeVar("res", VariableExpression::Use)),
              Expr::MakeBinOp(
                OperationExpression::OpAnd,
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  rInsn.GetOperand(0),
                  Expr::MakeVar("res", VariableExpression::Use)),
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  rInsn.GetOperand(0),
                  rInsn.GetOperand(1)))),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlSf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlZf, &m_CpuInfo),
          Expr::MakeTernaryCond(ConditionExpression::CondEq,
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))));
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBitVector(1, 0x1)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlPf, &m_CpuInfo),
          Expr::MakeVar("pf_tmp", VariableExpression::Use)));
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlAf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                rInsn.GetOperand(1)),
              Expr::MakeVar("res", VariableExpression::Use)),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))));
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeId(X86_FlDf, &m_CpuInfo),
          Expr::MakeBitVector(1, 0x1),
          Expr::MakeBind({
          Expr::MakeAssign(
            expr_cast<MemoryExpression>(rInsn.GetOperand(0))->GetOffsetExpression(),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              expr_cast<MemoryExpression>(rInsn.GetOperand(0))->GetOffsetExpression(),
              Expr::MakeBitVector(expr_cast<MemoryExpression>(rInsn.GetOperand(0))->GetOffsetExpression()->GetBitSize(), rInsn.GetOperand(0)->GetBitSize() / 8)))
          ,
          Expr::MakeAssign(
            expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression(),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression(),
              Expr::MakeBitVector(expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression()->GetBitSize(), rInsn.GetOperand(1)->GetBitSize() / 8)))
          })
        ,
          Expr::MakeBind({
          Expr::MakeAssign(
            expr_cast<MemoryExpression>(rInsn.GetOperand(0))->GetOffsetExpression(),
            Expr::MakeBinOp(
              OperationExpression::OpAdd,
              expr_cast<MemoryExpression>(rInsn.GetOperand(0))->GetOffsetExpression(),
              Expr::MakeBitVector(expr_cast<MemoryExpression>(rInsn.GetOperand(0))->GetOffsetExpression()->GetBitSize(), rInsn.GetOperand(0)->GetBitSize() / 8)))
          ,
          Expr::MakeAssign(
            expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression(),
            Expr::MakeBinOp(
              OperationExpression::OpAdd,
              expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression(),
              Expr::MakeBitVector(expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression()->GetBitSize(), rInsn.GetOperand(1)->GetBitSize() / 8)))
          })
        ));
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
      }
      /* semantic: free_var('loop') */
      AllExpr.push_back(Expr::MakeVar("loop", VariableExpression::Free));
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instruction
 * mnemonic: cmps
 * test_flags: ['df']
 * semantic: alloc_var('loop', 1);
loop = int1(1);
if __code and instruction_has_prefix(repz):
  if __expr and cnt.id == int(cnt.bit, 0): loop = int1(0)
  while loop == int1(1):
    call('compare_string')
    cnt.id -= int(cnt.bit, 1)
    if __expr and cnt.id == int(cnt.bit, 0): loop = int1(0)
    if __expr and zf.id == int1(0): loop = int1(0);
if __code and instruction_has_prefix(repnz):
  if __expr and cnt.id == int(cnt.bit, 0): loop = int1(0)
  while loop == int1(1):
    call('compare_string')
    cnt.id -= int(cnt.bit, 1)
    if __expr and cnt.id == int(cnt.bit, 0): loop = int1(0)
    if __expr and zf.id == int1(1): loop = int1(0);
if __code and instruction_has_no_prefix(repz, repnz):
  call('compare_string');
free_var('loop');

 * operand: ['Xv', 'Yv']
 * opcode: a7
 * update_flags: ['of', 'sf', 'zf', 'af', 'pf', 'cf']
**/
bool X86Architecture::Table_1_a7(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Cmps);
    if (Operand__Xv_Yv(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    {
      Expression::LSPType AllExpr;
      rInsn.SetTestedFlags(X86_FlDf);
      rInsn.SetUpdatedFlags(X86_FlOf | X86_FlSf | X86_FlZf | X86_FlAf | X86_FlPf | X86_FlCf);
      /* semantic: alloc_var('loop', 1) */
      AllExpr.push_back(Expr::MakeVar("loop", VariableExpression::Alloc, 0x1));
      /* semantic: loop = int1(1) */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("loop", VariableExpression::Use),
        Expr::MakeBitVector(1, 0x1)));
      /* semantic: if __code and instruction_has_prefix(repz):
        if __expr and cnt.id == int(cnt.bit, 0): loop = int1(0)
        while loop == int1(1):
          call('compare_string')
          cnt.id -= int(cnt.bit, 1)
          if __expr and cnt.id == int(cnt.bit, 0): loop = int1(0)
          if __expr and zf.id == int1(0): loop = int1(0) */
      if (rInsn.GetPrefix() & (X86_Prefix_Rep))
      {
        /* block glb expressions */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::CounterRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::CounterRegister, rInsn.GetMode())), 0x0),
          Expr::MakeAssign(
            Expr::MakeVar("loop", VariableExpression::Use),
            Expr::MakeBitVector(1, 0x0)), nullptr)
        );
        AllExpr.push_back(Expr::MakeWhileCond(
          ConditionExpression::CondEq,
          Expr::MakeVar("loop", VariableExpression::Use),
          Expr::MakeBitVector(1, 0x1),
          Expr::MakeBind({
          Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()),
          Expr::MakeAssign(
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              rInsn.GetOperand(0),
              rInsn.GetOperand(1))),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlOf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeBinOp(
                OperationExpression::OpAnd,
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  rInsn.GetOperand(0),
                  Expr::MakeVar("res", VariableExpression::Use)),
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  rInsn.GetOperand(0),
                  rInsn.GetOperand(1))),
              Expr::MakeBinOp(
                OperationExpression::OpSub,
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlCf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  Expr::MakeBinOp(
                    OperationExpression::OpXor,
                    rInsn.GetOperand(0),
                    rInsn.GetOperand(1)),
                  Expr::MakeVar("res", VariableExpression::Use)),
                Expr::MakeBinOp(
                  OperationExpression::OpAnd,
                  Expr::MakeBinOp(
                    OperationExpression::OpXor,
                    rInsn.GetOperand(0),
                    Expr::MakeVar("res", VariableExpression::Use)),
                  Expr::MakeBinOp(
                    OperationExpression::OpXor,
                    rInsn.GetOperand(0),
                    rInsn.GetOperand(1)))),
              Expr::MakeBinOp(
                OperationExpression::OpSub,
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlSf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBinOp(
                OperationExpression::OpSub,
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlZf, &m_CpuInfo),
            Expr::MakeTernaryCond(ConditionExpression::CondEq,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
            Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))),
          Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)),
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBitVector(1, 0x1)),
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeId(X86_FlPf, &m_CpuInfo),
            Expr::MakeVar("pf_tmp", VariableExpression::Use)),
          Expr::MakeVar("pf_tmp", VariableExpression::Free),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlAf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  rInsn.GetOperand(0),
                  rInsn.GetOperand(1)),
                Expr::MakeVar("res", VariableExpression::Use)),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))),
          Expr::MakeIfElseCond(
            ConditionExpression::CondEq,
            Expr::MakeId(X86_FlDf, &m_CpuInfo),
            Expr::MakeBitVector(1, 0x1),
            Expr::MakeBind({
            Expr::MakeAssign(
              expr_cast<MemoryExpression>(rInsn.GetOperand(0))->GetOffsetExpression(),
              Expr::MakeBinOp(
                OperationExpression::OpSub,
                expr_cast<MemoryExpression>(rInsn.GetOperand(0))->GetOffsetExpression(),
                Expr::MakeBitVector(expr_cast<MemoryExpression>(rInsn.GetOperand(0))->GetOffsetExpression()->GetBitSize(), rInsn.GetOperand(0)->GetBitSize() / 8)))
            ,
            Expr::MakeAssign(
              expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression(),
              Expr::MakeBinOp(
                OperationExpression::OpSub,
                expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression(),
                Expr::MakeBitVector(expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression()->GetBitSize(), rInsn.GetOperand(1)->GetBitSize() / 8)))
            })
          ,
            Expr::MakeBind({
            Expr::MakeAssign(
              expr_cast<MemoryExpression>(rInsn.GetOperand(0))->GetOffsetExpression(),
              Expr::MakeBinOp(
                OperationExpression::OpAdd,
                expr_cast<MemoryExpression>(rInsn.GetOperand(0))->GetOffsetExpression(),
                Expr::MakeBitVector(expr_cast<MemoryExpression>(rInsn.GetOperand(0))->GetOffsetExpression()->GetBitSize(), rInsn.GetOperand(0)->GetBitSize() / 8)))
            ,
            Expr::MakeAssign(
              expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression(),
              Expr::MakeBinOp(
                OperationExpression::OpAdd,
                expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression(),
                Expr::MakeBitVector(expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression()->GetBitSize(), rInsn.GetOperand(1)->GetBitSize() / 8)))
            })
          ),
          Expr::MakeVar("res", VariableExpression::Free),
          Expr::MakeAssign(
            Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::CounterRegister, rInsn.GetMode()), &m_CpuInfo),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::CounterRegister, rInsn.GetMode()), &m_CpuInfo),
              Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::CounterRegister, rInsn.GetMode())), 0x1)))
          ,
          Expr::MakeIfElseCond(
            ConditionExpression::CondEq,
            Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::CounterRegister, rInsn.GetMode()), &m_CpuInfo),
            Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::CounterRegister, rInsn.GetMode())), 0x0),
            Expr::MakeAssign(
              Expr::MakeVar("loop", VariableExpression::Use),
              Expr::MakeBitVector(1, 0x0)), nullptr)
          ,
          Expr::MakeIfElseCond(
            ConditionExpression::CondEq,
            Expr::MakeId(X86_FlZf, &m_CpuInfo),
            Expr::MakeBitVector(1, 0x0),
            Expr::MakeAssign(
              Expr::MakeVar("loop", VariableExpression::Use),
              Expr::MakeBitVector(1, 0x0)), nullptr)
          })
        ));
      }
      /* semantic: if __code and instruction_has_prefix(repnz):
        if __expr and cnt.id == int(cnt.bit, 0): loop = int1(0)
        while loop == int1(1):
          call('compare_string')
          cnt.id -= int(cnt.bit, 1)
          if __expr and cnt.id == int(cnt.bit, 0): loop = int1(0)
          if __expr and zf.id == int1(1): loop = int1(0) */
      if (rInsn.GetPrefix() & (X86_Prefix_RepNz))
      {
        /* block glb expressions */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::CounterRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::CounterRegister, rInsn.GetMode())), 0x0),
          Expr::MakeAssign(
            Expr::MakeVar("loop", VariableExpression::Use),
            Expr::MakeBitVector(1, 0x0)), nullptr)
        );
        AllExpr.push_back(Expr::MakeWhileCond(
          ConditionExpression::CondEq,
          Expr::MakeVar("loop", VariableExpression::Use),
          Expr::MakeBitVector(1, 0x1),
          Expr::MakeBind({
          Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()),
          Expr::MakeAssign(
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              rInsn.GetOperand(0),
              rInsn.GetOperand(1))),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlOf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeBinOp(
                OperationExpression::OpAnd,
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  rInsn.GetOperand(0),
                  Expr::MakeVar("res", VariableExpression::Use)),
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  rInsn.GetOperand(0),
                  rInsn.GetOperand(1))),
              Expr::MakeBinOp(
                OperationExpression::OpSub,
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlCf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  Expr::MakeBinOp(
                    OperationExpression::OpXor,
                    rInsn.GetOperand(0),
                    rInsn.GetOperand(1)),
                  Expr::MakeVar("res", VariableExpression::Use)),
                Expr::MakeBinOp(
                  OperationExpression::OpAnd,
                  Expr::MakeBinOp(
                    OperationExpression::OpXor,
                    rInsn.GetOperand(0),
                    Expr::MakeVar("res", VariableExpression::Use)),
                  Expr::MakeBinOp(
                    OperationExpression::OpXor,
                    rInsn.GetOperand(0),
                    rInsn.GetOperand(1)))),
              Expr::MakeBinOp(
                OperationExpression::OpSub,
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlSf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBinOp(
                OperationExpression::OpSub,
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlZf, &m_CpuInfo),
            Expr::MakeTernaryCond(ConditionExpression::CondEq,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
            Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))),
          Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)),
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBitVector(1, 0x1)),
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeId(X86_FlPf, &m_CpuInfo),
            Expr::MakeVar("pf_tmp", VariableExpression::Use)),
          Expr::MakeVar("pf_tmp", VariableExpression::Free),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlAf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  rInsn.GetOperand(0),
                  rInsn.GetOperand(1)),
                Expr::MakeVar("res", VariableExpression::Use)),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))),
          Expr::MakeIfElseCond(
            ConditionExpression::CondEq,
            Expr::MakeId(X86_FlDf, &m_CpuInfo),
            Expr::MakeBitVector(1, 0x1),
            Expr::MakeBind({
            Expr::MakeAssign(
              expr_cast<MemoryExpression>(rInsn.GetOperand(0))->GetOffsetExpression(),
              Expr::MakeBinOp(
                OperationExpression::OpSub,
                expr_cast<MemoryExpression>(rInsn.GetOperand(0))->GetOffsetExpression(),
                Expr::MakeBitVector(expr_cast<MemoryExpression>(rInsn.GetOperand(0))->GetOffsetExpression()->GetBitSize(), rInsn.GetOperand(0)->GetBitSize() / 8)))
            ,
            Expr::MakeAssign(
              expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression(),
              Expr::MakeBinOp(
                OperationExpression::OpSub,
                expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression(),
                Expr::MakeBitVector(expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression()->GetBitSize(), rInsn.GetOperand(1)->GetBitSize() / 8)))
            })
          ,
            Expr::MakeBind({
            Expr::MakeAssign(
              expr_cast<MemoryExpression>(rInsn.GetOperand(0))->GetOffsetExpression(),
              Expr::MakeBinOp(
                OperationExpression::OpAdd,
                expr_cast<MemoryExpression>(rInsn.GetOperand(0))->GetOffsetExpression(),
                Expr::MakeBitVector(expr_cast<MemoryExpression>(rInsn.GetOperand(0))->GetOffsetExpression()->GetBitSize(), rInsn.GetOperand(0)->GetBitSize() / 8)))
            ,
            Expr::MakeAssign(
              expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression(),
              Expr::MakeBinOp(
                OperationExpression::OpAdd,
                expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression(),
                Expr::MakeBitVector(expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression()->GetBitSize(), rInsn.GetOperand(1)->GetBitSize() / 8)))
            })
          ),
          Expr::MakeVar("res", VariableExpression::Free),
          Expr::MakeAssign(
            Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::CounterRegister, rInsn.GetMode()), &m_CpuInfo),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::CounterRegister, rInsn.GetMode()), &m_CpuInfo),
              Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::CounterRegister, rInsn.GetMode())), 0x1)))
          ,
          Expr::MakeIfElseCond(
            ConditionExpression::CondEq,
            Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::CounterRegister, rInsn.GetMode()), &m_CpuInfo),
            Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::CounterRegister, rInsn.GetMode())), 0x0),
            Expr::MakeAssign(
              Expr::MakeVar("loop", VariableExpression::Use),
              Expr::MakeBitVector(1, 0x0)), nullptr)
          ,
          Expr::MakeIfElseCond(
            ConditionExpression::CondEq,
            Expr::MakeId(X86_FlZf, &m_CpuInfo),
            Expr::MakeBitVector(1, 0x1),
            Expr::MakeAssign(
              Expr::MakeVar("loop", VariableExpression::Use),
              Expr::MakeBitVector(1, 0x0)), nullptr)
          })
        ));
      }
      /* semantic: if __code and instruction_has_no_prefix(repz, repnz):
        call('compare_string') */
      if (!(rInsn.GetPrefix() & (X86_Prefix_Rep | X86_Prefix_RepNz)))
      {
        /* block glb expressions */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            rInsn.GetOperand(0),
            rInsn.GetOperand(1))));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlOf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                Expr::MakeVar("res", VariableExpression::Use)),
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                rInsn.GetOperand(1))),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlCf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  rInsn.GetOperand(0),
                  rInsn.GetOperand(1)),
                Expr::MakeVar("res", VariableExpression::Use)),
              Expr::MakeBinOp(
                OperationExpression::OpAnd,
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  rInsn.GetOperand(0),
                  Expr::MakeVar("res", VariableExpression::Use)),
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  rInsn.GetOperand(0),
                  rInsn.GetOperand(1)))),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlSf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlZf, &m_CpuInfo),
          Expr::MakeTernaryCond(ConditionExpression::CondEq,
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))));
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBitVector(1, 0x1)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlPf, &m_CpuInfo),
          Expr::MakeVar("pf_tmp", VariableExpression::Use)));
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlAf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                rInsn.GetOperand(1)),
              Expr::MakeVar("res", VariableExpression::Use)),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))));
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeId(X86_FlDf, &m_CpuInfo),
          Expr::MakeBitVector(1, 0x1),
          Expr::MakeBind({
          Expr::MakeAssign(
            expr_cast<MemoryExpression>(rInsn.GetOperand(0))->GetOffsetExpression(),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              expr_cast<MemoryExpression>(rInsn.GetOperand(0))->GetOffsetExpression(),
              Expr::MakeBitVector(expr_cast<MemoryExpression>(rInsn.GetOperand(0))->GetOffsetExpression()->GetBitSize(), rInsn.GetOperand(0)->GetBitSize() / 8)))
          ,
          Expr::MakeAssign(
            expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression(),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression(),
              Expr::MakeBitVector(expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression()->GetBitSize(), rInsn.GetOperand(1)->GetBitSize() / 8)))
          })
        ,
          Expr::MakeBind({
          Expr::MakeAssign(
            expr_cast<MemoryExpression>(rInsn.GetOperand(0))->GetOffsetExpression(),
            Expr::MakeBinOp(
              OperationExpression::OpAdd,
              expr_cast<MemoryExpression>(rInsn.GetOperand(0))->GetOffsetExpression(),
              Expr::MakeBitVector(expr_cast<MemoryExpression>(rInsn.GetOperand(0))->GetOffsetExpression()->GetBitSize(), rInsn.GetOperand(0)->GetBitSize() / 8)))
          ,
          Expr::MakeAssign(
            expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression(),
            Expr::MakeBinOp(
              OperationExpression::OpAdd,
              expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression(),
              Expr::MakeBitVector(expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression()->GetBitSize(), rInsn.GetOperand(1)->GetBitSize() / 8)))
          })
        ));
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
      }
      /* semantic: free_var('loop') */
      AllExpr.push_back(Expr::MakeVar("loop", VariableExpression::Free));
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instruction
 * mnemonic: test
 * clear_flags: ['af']
 * semantic: alloc_var('res', op0.bit);
res = op0.val & op1.val;
of.id = int1(0)
cf.id = int1(0)
call('sign_flag')
call('zero_flag')
call('parity_flag')
free_var('res');

 * operand: ['AL', 'Ib']
 * opcode: a8
 * update_flags: ['of', 'sf', 'zf', 'pf', 'cf']
**/
bool X86Architecture::Table_1_a8(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Test);
    if (Operand__AL_Ib(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    {
      Expression::LSPType AllExpr;
      rInsn.SetUpdatedFlags(X86_FlOf | X86_FlSf | X86_FlZf | X86_FlPf | X86_FlCf);
      rInsn.SetClearedFlags(X86_FlAf);
      AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlAf, &m_CpuInfo), Expr::MakeBoolean(false)));
      /* semantic: alloc_var('res', op0.bit) */
      AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
      /* semantic: res = op0.val & op1.val */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("res", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpAnd,
          rInsn.GetOperand(0),
          rInsn.GetOperand(1))));
      /* semantic: of.id = int1(0)
      cf.id = int1(0)
      call('sign_flag')
      call('zero_flag')
      call('parity_flag')
      free_var('res') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlOf, &m_CpuInfo),
        Expr::MakeBitVector(1, 0x0)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlCf, &m_CpuInfo),
        Expr::MakeBitVector(1, 0x0)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlSf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlZf, &m_CpuInfo),
        Expr::MakeTernaryCond(ConditionExpression::CondEq,
        Expr::MakeVar("res", VariableExpression::Use),
        Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
        Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))));
      AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBitVector(1, 0x1)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlPf, &m_CpuInfo),
        Expr::MakeVar("pf_tmp", VariableExpression::Use)));
      AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
      AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instruction
 * mnemonic: test
 * clear_flags: ['af']
 * semantic: alloc_var('res', op0.bit);
res = op0.val & op1.val;
of.id = int1(0)
cf.id = int1(0)
call('sign_flag')
call('zero_flag')
call('parity_flag')
free_var('res');

 * operand: ['rAX', 'Iz']
 * opcode: a9
 * update_flags: ['of', 'sf', 'zf', 'pf', 'cf']
**/
bool X86Architecture::Table_1_a9(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Test);
    if (Operand__rAX_Iz(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    {
      Expression::LSPType AllExpr;
      rInsn.SetUpdatedFlags(X86_FlOf | X86_FlSf | X86_FlZf | X86_FlPf | X86_FlCf);
      rInsn.SetClearedFlags(X86_FlAf);
      AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlAf, &m_CpuInfo), Expr::MakeBoolean(false)));
      /* semantic: alloc_var('res', op0.bit) */
      AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
      /* semantic: res = op0.val & op1.val */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("res", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpAnd,
          rInsn.GetOperand(0),
          rInsn.GetOperand(1))));
      /* semantic: of.id = int1(0)
      cf.id = int1(0)
      call('sign_flag')
      call('zero_flag')
      call('parity_flag')
      free_var('res') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlOf, &m_CpuInfo),
        Expr::MakeBitVector(1, 0x0)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlCf, &m_CpuInfo),
        Expr::MakeBitVector(1, 0x0)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlSf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlZf, &m_CpuInfo),
        Expr::MakeTernaryCond(ConditionExpression::CondEq,
        Expr::MakeVar("res", VariableExpression::Use),
        Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
        Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))));
      AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBitVector(1, 0x1)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlPf, &m_CpuInfo),
        Expr::MakeVar("pf_tmp", VariableExpression::Use)));
      AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
      AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instruction
 * mnemonic: stos
 * operand: ['AL', 'Yb']
 * test_flags: ['df']
 * opcode: aa
 * semantic: if __code and instruction_has_prefix(rep):
  while cnt.id != int(cnt.bit, 0):
    call('store_string')
    cnt.id -= int(cnt.bit, 1);
if __code and instruction_has_no_prefix(rep):
  call('store_string');

**/
bool X86Architecture::Table_1_aa(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Stos);
    if (Operand__AL_Yb(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    {
      Expression::LSPType AllExpr;
      rInsn.SetTestedFlags(X86_FlDf);
      /* semantic: if __code and instruction_has_prefix(rep):
        while cnt.id != int(cnt.bit, 0):
          call('store_string')
          cnt.id -= int(cnt.bit, 1) */
      if (rInsn.GetPrefix() & (X86_Prefix_Rep))
      {
        /* block glb expressions */
        AllExpr.push_back(Expr::MakeWhileCond(
          ConditionExpression::CondNe,
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::CounterRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::CounterRegister, rInsn.GetMode())), 0x0),
          Expr::MakeBind({
          Expr::MakeAssign(
            rInsn.GetOperand(1),
            rInsn.GetOperand(0)),
          Expr::MakeIfElseCond(
            ConditionExpression::CondEq,
            Expr::MakeId(X86_FlDf, &m_CpuInfo),
            Expr::MakeBitVector(1, 0x1),
            Expr::MakeAssign(
              expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression(),
              Expr::MakeBinOp(
                OperationExpression::OpSub,
                expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression(),
                Expr::MakeBitVector(expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression()->GetBitSize(), rInsn.GetOperand(1)->GetBitSize() / 8)))
          ,
            Expr::MakeAssign(
              expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression(),
              Expr::MakeBinOp(
                OperationExpression::OpAdd,
                expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression(),
                Expr::MakeBitVector(expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression()->GetBitSize(), rInsn.GetOperand(1)->GetBitSize() / 8)))
          ),
          Expr::MakeAssign(
            Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::CounterRegister, rInsn.GetMode()), &m_CpuInfo),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::CounterRegister, rInsn.GetMode()), &m_CpuInfo),
              Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::CounterRegister, rInsn.GetMode())), 0x1)))
          })
        ));
      }
      /* semantic: if __code and instruction_has_no_prefix(rep):
        call('store_string') */
      if (!(rInsn.GetPrefix() & (X86_Prefix_Rep)))
      {
        /* block glb expressions */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(1),
          rInsn.GetOperand(0)));
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeId(X86_FlDf, &m_CpuInfo),
          Expr::MakeBitVector(1, 0x1),
          Expr::MakeAssign(
            expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression(),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression(),
              Expr::MakeBitVector(expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression()->GetBitSize(), rInsn.GetOperand(1)->GetBitSize() / 8)))
        ,
          Expr::MakeAssign(
            expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression(),
            Expr::MakeBinOp(
              OperationExpression::OpAdd,
              expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression(),
              Expr::MakeBitVector(expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression()->GetBitSize(), rInsn.GetOperand(1)->GetBitSize() / 8)))
        ));
      }
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instruction
 * mnemonic: stos
 * operand: ['rAX', 'Yv']
 * test_flags: ['df']
 * opcode: ab
 * semantic: if __code and instruction_has_prefix(rep):
  while cnt.id != int(cnt.bit, 0):
    call('store_string')
    cnt.id -= int(cnt.bit, 1);
if __code and instruction_has_no_prefix(rep):
  call('store_string');

**/
bool X86Architecture::Table_1_ab(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Stos);
    if (Operand__rAX_Yv(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    {
      Expression::LSPType AllExpr;
      rInsn.SetTestedFlags(X86_FlDf);
      /* semantic: if __code and instruction_has_prefix(rep):
        while cnt.id != int(cnt.bit, 0):
          call('store_string')
          cnt.id -= int(cnt.bit, 1) */
      if (rInsn.GetPrefix() & (X86_Prefix_Rep))
      {
        /* block glb expressions */
        AllExpr.push_back(Expr::MakeWhileCond(
          ConditionExpression::CondNe,
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::CounterRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::CounterRegister, rInsn.GetMode())), 0x0),
          Expr::MakeBind({
          Expr::MakeAssign(
            rInsn.GetOperand(1),
            rInsn.GetOperand(0)),
          Expr::MakeIfElseCond(
            ConditionExpression::CondEq,
            Expr::MakeId(X86_FlDf, &m_CpuInfo),
            Expr::MakeBitVector(1, 0x1),
            Expr::MakeAssign(
              expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression(),
              Expr::MakeBinOp(
                OperationExpression::OpSub,
                expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression(),
                Expr::MakeBitVector(expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression()->GetBitSize(), rInsn.GetOperand(1)->GetBitSize() / 8)))
          ,
            Expr::MakeAssign(
              expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression(),
              Expr::MakeBinOp(
                OperationExpression::OpAdd,
                expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression(),
                Expr::MakeBitVector(expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression()->GetBitSize(), rInsn.GetOperand(1)->GetBitSize() / 8)))
          ),
          Expr::MakeAssign(
            Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::CounterRegister, rInsn.GetMode()), &m_CpuInfo),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::CounterRegister, rInsn.GetMode()), &m_CpuInfo),
              Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::CounterRegister, rInsn.GetMode())), 0x1)))
          })
        ));
      }
      /* semantic: if __code and instruction_has_no_prefix(rep):
        call('store_string') */
      if (!(rInsn.GetPrefix() & (X86_Prefix_Rep)))
      {
        /* block glb expressions */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(1),
          rInsn.GetOperand(0)));
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeId(X86_FlDf, &m_CpuInfo),
          Expr::MakeBitVector(1, 0x1),
          Expr::MakeAssign(
            expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression(),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression(),
              Expr::MakeBitVector(expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression()->GetBitSize(), rInsn.GetOperand(1)->GetBitSize() / 8)))
        ,
          Expr::MakeAssign(
            expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression(),
            Expr::MakeBinOp(
              OperationExpression::OpAdd,
              expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression(),
              Expr::MakeBitVector(expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression()->GetBitSize(), rInsn.GetOperand(1)->GetBitSize() / 8)))
        ));
      }
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instruction
 * mnemonic: lods
 * operand: ['AL', 'Xb']
 * test_flags: ['df']
 * opcode: ac
 * semantic: if __code and instruction_has_prefix(rep):
  while cnt.id != int(cnt.bit, 0):
    call('load_string')
    cnt.id -= int(cnt.bit, 1);
if __code and instruction_has_no_prefix(rep):
  call('load_string')

**/
bool X86Architecture::Table_1_ac(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Lods);
    if (Operand__AL_Xb(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    {
      Expression::LSPType AllExpr;
      rInsn.SetTestedFlags(X86_FlDf);
      /* semantic: if __code and instruction_has_prefix(rep):
        while cnt.id != int(cnt.bit, 0):
          call('load_string')
          cnt.id -= int(cnt.bit, 1) */
      if (rInsn.GetPrefix() & (X86_Prefix_Rep))
      {
        /* block glb expressions */
        AllExpr.push_back(Expr::MakeWhileCond(
          ConditionExpression::CondNe,
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::CounterRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::CounterRegister, rInsn.GetMode())), 0x0),
          Expr::MakeBind({
          Expr::MakeAssign(
            rInsn.GetOperand(1),
            rInsn.GetOperand(0)),
          Expr::MakeIfElseCond(
            ConditionExpression::CondEq,
            Expr::MakeId(X86_FlDf, &m_CpuInfo),
            Expr::MakeBitVector(1, 0x1),
            Expr::MakeAssign(
              expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression(),
              Expr::MakeBinOp(
                OperationExpression::OpSub,
                expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression(),
                Expr::MakeBitVector(expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression()->GetBitSize(), rInsn.GetOperand(1)->GetBitSize() / 8)))
          ,
            Expr::MakeAssign(
              expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression(),
              Expr::MakeBinOp(
                OperationExpression::OpAdd,
                expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression(),
                Expr::MakeBitVector(expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression()->GetBitSize(), rInsn.GetOperand(1)->GetBitSize() / 8)))
          ),
          Expr::MakeAssign(
            Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::CounterRegister, rInsn.GetMode()), &m_CpuInfo),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::CounterRegister, rInsn.GetMode()), &m_CpuInfo),
              Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::CounterRegister, rInsn.GetMode())), 0x1)))
          })
        ));
      }
      /* semantic: if __code and instruction_has_no_prefix(rep):
        call('load_string')
       */
      if (!(rInsn.GetPrefix() & (X86_Prefix_Rep)))
      {
        /* block glb expressions */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(1),
          rInsn.GetOperand(0)));
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeId(X86_FlDf, &m_CpuInfo),
          Expr::MakeBitVector(1, 0x1),
          Expr::MakeAssign(
            expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression(),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression(),
              Expr::MakeBitVector(expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression()->GetBitSize(), rInsn.GetOperand(1)->GetBitSize() / 8)))
        ,
          Expr::MakeAssign(
            expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression(),
            Expr::MakeBinOp(
              OperationExpression::OpAdd,
              expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression(),
              Expr::MakeBitVector(expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression()->GetBitSize(), rInsn.GetOperand(1)->GetBitSize() / 8)))
        ));
      }
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instruction
 * mnemonic: lods
 * operand: ['rAX', 'Xv']
 * test_flags: ['df']
 * opcode: ad
 * semantic: if __code and instruction_has_prefix(rep):
  while cnt.id != int(cnt.bit, 0):
    call('load_string')
    cnt.id -= int(cnt.bit, 1);
if __code and instruction_has_no_prefix(rep):
  call('load_string')

**/
bool X86Architecture::Table_1_ad(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Lods);
    if (Operand__rAX_Xv(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    {
      Expression::LSPType AllExpr;
      rInsn.SetTestedFlags(X86_FlDf);
      /* semantic: if __code and instruction_has_prefix(rep):
        while cnt.id != int(cnt.bit, 0):
          call('load_string')
          cnt.id -= int(cnt.bit, 1) */
      if (rInsn.GetPrefix() & (X86_Prefix_Rep))
      {
        /* block glb expressions */
        AllExpr.push_back(Expr::MakeWhileCond(
          ConditionExpression::CondNe,
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::CounterRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::CounterRegister, rInsn.GetMode())), 0x0),
          Expr::MakeBind({
          Expr::MakeAssign(
            rInsn.GetOperand(1),
            rInsn.GetOperand(0)),
          Expr::MakeIfElseCond(
            ConditionExpression::CondEq,
            Expr::MakeId(X86_FlDf, &m_CpuInfo),
            Expr::MakeBitVector(1, 0x1),
            Expr::MakeAssign(
              expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression(),
              Expr::MakeBinOp(
                OperationExpression::OpSub,
                expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression(),
                Expr::MakeBitVector(expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression()->GetBitSize(), rInsn.GetOperand(1)->GetBitSize() / 8)))
          ,
            Expr::MakeAssign(
              expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression(),
              Expr::MakeBinOp(
                OperationExpression::OpAdd,
                expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression(),
                Expr::MakeBitVector(expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression()->GetBitSize(), rInsn.GetOperand(1)->GetBitSize() / 8)))
          ),
          Expr::MakeAssign(
            Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::CounterRegister, rInsn.GetMode()), &m_CpuInfo),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::CounterRegister, rInsn.GetMode()), &m_CpuInfo),
              Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::CounterRegister, rInsn.GetMode())), 0x1)))
          })
        ));
      }
      /* semantic: if __code and instruction_has_no_prefix(rep):
        call('load_string')
       */
      if (!(rInsn.GetPrefix() & (X86_Prefix_Rep)))
      {
        /* block glb expressions */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(1),
          rInsn.GetOperand(0)));
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeId(X86_FlDf, &m_CpuInfo),
          Expr::MakeBitVector(1, 0x1),
          Expr::MakeAssign(
            expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression(),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression(),
              Expr::MakeBitVector(expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression()->GetBitSize(), rInsn.GetOperand(1)->GetBitSize() / 8)))
        ,
          Expr::MakeAssign(
            expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression(),
            Expr::MakeBinOp(
              OperationExpression::OpAdd,
              expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression(),
              Expr::MakeBitVector(expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression()->GetBitSize(), rInsn.GetOperand(1)->GetBitSize() / 8)))
        ));
      }
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instruction
 * mnemonic: scas
 * test_flags: ['df']
 * semantic: alloc_var('loop', 1);
loop = int1(1);
if __code and instruction_has_prefix(repz):
  if __expr and cnt.id == int(cnt.bit, 0): loop = int1(0)
  while loop == int1(1):
    call('scan_string')
    cnt.id -= int(cnt.bit, 1)
    if __expr and cnt.id == int(cnt.bit, 0): loop = int1(0)
    if __expr and zf.id == int1(0): loop = int1(0);
if __code and instruction_has_prefix(repnz):
  if __expr and cnt.id == int(cnt.bit, 0): loop = int1(0)
  while loop == int1(1):
    call('scan_string')
    cnt.id -= int(cnt.bit, 1)
    if __expr and cnt.id == int(cnt.bit, 0): loop = int1(0)
    if __expr and zf.id == int1(1): loop = int1(0);
if __code and instruction_has_no_prefix(repz, repnz):
  call('scan_string');
free_var('loop');

 * operand: ['AL', 'Yb']
 * opcode: ae
 * update_flags: ['of', 'sf', 'zf', 'af', 'pf', 'cf']
**/
bool X86Architecture::Table_1_ae(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Scas);
    if (Operand__AL_Yb(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    {
      Expression::LSPType AllExpr;
      rInsn.SetTestedFlags(X86_FlDf);
      rInsn.SetUpdatedFlags(X86_FlOf | X86_FlSf | X86_FlZf | X86_FlAf | X86_FlPf | X86_FlCf);
      /* semantic: alloc_var('loop', 1) */
      AllExpr.push_back(Expr::MakeVar("loop", VariableExpression::Alloc, 0x1));
      /* semantic: loop = int1(1) */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("loop", VariableExpression::Use),
        Expr::MakeBitVector(1, 0x1)));
      /* semantic: if __code and instruction_has_prefix(repz):
        if __expr and cnt.id == int(cnt.bit, 0): loop = int1(0)
        while loop == int1(1):
          call('scan_string')
          cnt.id -= int(cnt.bit, 1)
          if __expr and cnt.id == int(cnt.bit, 0): loop = int1(0)
          if __expr and zf.id == int1(0): loop = int1(0) */
      if (rInsn.GetPrefix() & (X86_Prefix_Rep))
      {
        /* block glb expressions */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::CounterRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::CounterRegister, rInsn.GetMode())), 0x0),
          Expr::MakeAssign(
            Expr::MakeVar("loop", VariableExpression::Use),
            Expr::MakeBitVector(1, 0x0)), nullptr)
        );
        AllExpr.push_back(Expr::MakeWhileCond(
          ConditionExpression::CondEq,
          Expr::MakeVar("loop", VariableExpression::Use),
          Expr::MakeBitVector(1, 0x1),
          Expr::MakeBind({
          Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()),
          Expr::MakeAssign(
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              rInsn.GetOperand(0),
              rInsn.GetOperand(1))),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlOf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeBinOp(
                OperationExpression::OpAnd,
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  rInsn.GetOperand(0),
                  Expr::MakeVar("res", VariableExpression::Use)),
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  rInsn.GetOperand(0),
                  rInsn.GetOperand(1))),
              Expr::MakeBinOp(
                OperationExpression::OpSub,
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlCf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  Expr::MakeBinOp(
                    OperationExpression::OpXor,
                    rInsn.GetOperand(0),
                    rInsn.GetOperand(1)),
                  Expr::MakeVar("res", VariableExpression::Use)),
                Expr::MakeBinOp(
                  OperationExpression::OpAnd,
                  Expr::MakeBinOp(
                    OperationExpression::OpXor,
                    rInsn.GetOperand(0),
                    Expr::MakeVar("res", VariableExpression::Use)),
                  Expr::MakeBinOp(
                    OperationExpression::OpXor,
                    rInsn.GetOperand(0),
                    rInsn.GetOperand(1)))),
              Expr::MakeBinOp(
                OperationExpression::OpSub,
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlSf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBinOp(
                OperationExpression::OpSub,
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlZf, &m_CpuInfo),
            Expr::MakeTernaryCond(ConditionExpression::CondEq,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
            Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))),
          Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)),
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBitVector(1, 0x1)),
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeId(X86_FlPf, &m_CpuInfo),
            Expr::MakeVar("pf_tmp", VariableExpression::Use)),
          Expr::MakeVar("pf_tmp", VariableExpression::Free),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlAf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  rInsn.GetOperand(0),
                  rInsn.GetOperand(1)),
                Expr::MakeVar("res", VariableExpression::Use)),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))),
          Expr::MakeIfElseCond(
            ConditionExpression::CondEq,
            Expr::MakeId(X86_FlDf, &m_CpuInfo),
            Expr::MakeBitVector(1, 0x1),
            Expr::MakeAssign(
              expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression(),
              Expr::MakeBinOp(
                OperationExpression::OpSub,
                expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression(),
                Expr::MakeBitVector(expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression()->GetBitSize(), rInsn.GetOperand(1)->GetBitSize() / 8)))
          ,
            Expr::MakeAssign(
              expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression(),
              Expr::MakeBinOp(
                OperationExpression::OpAdd,
                expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression(),
                Expr::MakeBitVector(expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression()->GetBitSize(), rInsn.GetOperand(1)->GetBitSize() / 8)))
          ),
          Expr::MakeVar("res", VariableExpression::Free),
          Expr::MakeAssign(
            Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::CounterRegister, rInsn.GetMode()), &m_CpuInfo),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::CounterRegister, rInsn.GetMode()), &m_CpuInfo),
              Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::CounterRegister, rInsn.GetMode())), 0x1)))
          ,
          Expr::MakeIfElseCond(
            ConditionExpression::CondEq,
            Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::CounterRegister, rInsn.GetMode()), &m_CpuInfo),
            Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::CounterRegister, rInsn.GetMode())), 0x0),
            Expr::MakeAssign(
              Expr::MakeVar("loop", VariableExpression::Use),
              Expr::MakeBitVector(1, 0x0)), nullptr)
          ,
          Expr::MakeIfElseCond(
            ConditionExpression::CondEq,
            Expr::MakeId(X86_FlZf, &m_CpuInfo),
            Expr::MakeBitVector(1, 0x0),
            Expr::MakeAssign(
              Expr::MakeVar("loop", VariableExpression::Use),
              Expr::MakeBitVector(1, 0x0)), nullptr)
          })
        ));
      }
      /* semantic: if __code and instruction_has_prefix(repnz):
        if __expr and cnt.id == int(cnt.bit, 0): loop = int1(0)
        while loop == int1(1):
          call('scan_string')
          cnt.id -= int(cnt.bit, 1)
          if __expr and cnt.id == int(cnt.bit, 0): loop = int1(0)
          if __expr and zf.id == int1(1): loop = int1(0) */
      if (rInsn.GetPrefix() & (X86_Prefix_RepNz))
      {
        /* block glb expressions */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::CounterRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::CounterRegister, rInsn.GetMode())), 0x0),
          Expr::MakeAssign(
            Expr::MakeVar("loop", VariableExpression::Use),
            Expr::MakeBitVector(1, 0x0)), nullptr)
        );
        AllExpr.push_back(Expr::MakeWhileCond(
          ConditionExpression::CondEq,
          Expr::MakeVar("loop", VariableExpression::Use),
          Expr::MakeBitVector(1, 0x1),
          Expr::MakeBind({
          Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()),
          Expr::MakeAssign(
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              rInsn.GetOperand(0),
              rInsn.GetOperand(1))),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlOf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeBinOp(
                OperationExpression::OpAnd,
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  rInsn.GetOperand(0),
                  Expr::MakeVar("res", VariableExpression::Use)),
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  rInsn.GetOperand(0),
                  rInsn.GetOperand(1))),
              Expr::MakeBinOp(
                OperationExpression::OpSub,
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlCf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  Expr::MakeBinOp(
                    OperationExpression::OpXor,
                    rInsn.GetOperand(0),
                    rInsn.GetOperand(1)),
                  Expr::MakeVar("res", VariableExpression::Use)),
                Expr::MakeBinOp(
                  OperationExpression::OpAnd,
                  Expr::MakeBinOp(
                    OperationExpression::OpXor,
                    rInsn.GetOperand(0),
                    Expr::MakeVar("res", VariableExpression::Use)),
                  Expr::MakeBinOp(
                    OperationExpression::OpXor,
                    rInsn.GetOperand(0),
                    rInsn.GetOperand(1)))),
              Expr::MakeBinOp(
                OperationExpression::OpSub,
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlSf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBinOp(
                OperationExpression::OpSub,
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlZf, &m_CpuInfo),
            Expr::MakeTernaryCond(ConditionExpression::CondEq,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
            Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))),
          Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)),
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBitVector(1, 0x1)),
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeId(X86_FlPf, &m_CpuInfo),
            Expr::MakeVar("pf_tmp", VariableExpression::Use)),
          Expr::MakeVar("pf_tmp", VariableExpression::Free),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlAf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  rInsn.GetOperand(0),
                  rInsn.GetOperand(1)),
                Expr::MakeVar("res", VariableExpression::Use)),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))),
          Expr::MakeIfElseCond(
            ConditionExpression::CondEq,
            Expr::MakeId(X86_FlDf, &m_CpuInfo),
            Expr::MakeBitVector(1, 0x1),
            Expr::MakeAssign(
              expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression(),
              Expr::MakeBinOp(
                OperationExpression::OpSub,
                expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression(),
                Expr::MakeBitVector(expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression()->GetBitSize(), rInsn.GetOperand(1)->GetBitSize() / 8)))
          ,
            Expr::MakeAssign(
              expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression(),
              Expr::MakeBinOp(
                OperationExpression::OpAdd,
                expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression(),
                Expr::MakeBitVector(expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression()->GetBitSize(), rInsn.GetOperand(1)->GetBitSize() / 8)))
          ),
          Expr::MakeVar("res", VariableExpression::Free),
          Expr::MakeAssign(
            Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::CounterRegister, rInsn.GetMode()), &m_CpuInfo),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::CounterRegister, rInsn.GetMode()), &m_CpuInfo),
              Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::CounterRegister, rInsn.GetMode())), 0x1)))
          ,
          Expr::MakeIfElseCond(
            ConditionExpression::CondEq,
            Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::CounterRegister, rInsn.GetMode()), &m_CpuInfo),
            Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::CounterRegister, rInsn.GetMode())), 0x0),
            Expr::MakeAssign(
              Expr::MakeVar("loop", VariableExpression::Use),
              Expr::MakeBitVector(1, 0x0)), nullptr)
          ,
          Expr::MakeIfElseCond(
            ConditionExpression::CondEq,
            Expr::MakeId(X86_FlZf, &m_CpuInfo),
            Expr::MakeBitVector(1, 0x1),
            Expr::MakeAssign(
              Expr::MakeVar("loop", VariableExpression::Use),
              Expr::MakeBitVector(1, 0x0)), nullptr)
          })
        ));
      }
      /* semantic: if __code and instruction_has_no_prefix(repz, repnz):
        call('scan_string') */
      if (!(rInsn.GetPrefix() & (X86_Prefix_Rep | X86_Prefix_RepNz)))
      {
        /* block glb expressions */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            rInsn.GetOperand(0),
            rInsn.GetOperand(1))));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlOf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                Expr::MakeVar("res", VariableExpression::Use)),
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                rInsn.GetOperand(1))),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlCf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  rInsn.GetOperand(0),
                  rInsn.GetOperand(1)),
                Expr::MakeVar("res", VariableExpression::Use)),
              Expr::MakeBinOp(
                OperationExpression::OpAnd,
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  rInsn.GetOperand(0),
                  Expr::MakeVar("res", VariableExpression::Use)),
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  rInsn.GetOperand(0),
                  rInsn.GetOperand(1)))),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlSf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlZf, &m_CpuInfo),
          Expr::MakeTernaryCond(ConditionExpression::CondEq,
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))));
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBitVector(1, 0x1)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlPf, &m_CpuInfo),
          Expr::MakeVar("pf_tmp", VariableExpression::Use)));
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlAf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                rInsn.GetOperand(1)),
              Expr::MakeVar("res", VariableExpression::Use)),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))));
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeId(X86_FlDf, &m_CpuInfo),
          Expr::MakeBitVector(1, 0x1),
          Expr::MakeAssign(
            expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression(),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression(),
              Expr::MakeBitVector(expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression()->GetBitSize(), rInsn.GetOperand(1)->GetBitSize() / 8)))
        ,
          Expr::MakeAssign(
            expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression(),
            Expr::MakeBinOp(
              OperationExpression::OpAdd,
              expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression(),
              Expr::MakeBitVector(expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression()->GetBitSize(), rInsn.GetOperand(1)->GetBitSize() / 8)))
        ));
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
      }
      /* semantic: free_var('loop') */
      AllExpr.push_back(Expr::MakeVar("loop", VariableExpression::Free));
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instruction
 * mnemonic: scas
 * test_flags: ['df']
 * semantic: alloc_var('loop', 1);
loop = int1(1);
if __code and instruction_has_prefix(repz):
  if __expr and cnt.id == int(cnt.bit, 0): loop = int1(0)
  while loop == int1(1):
    call('scan_string')
    cnt.id -= int(cnt.bit, 1)
    if __expr and cnt.id == int(cnt.bit, 0): loop = int1(0)
    if __expr and zf.id == int1(0): loop = int1(0);
if __code and instruction_has_prefix(repnz):
  if __expr and cnt.id == int(cnt.bit, 0): loop = int1(0)
  while loop == int1(1):
    call('scan_string')
    cnt.id -= int(cnt.bit, 1)
    if __expr and cnt.id == int(cnt.bit, 0): loop = int1(0)
    if __expr and zf.id == int1(1): loop = int1(0);
if __code and instruction_has_no_prefix(repz, repnz):
  call('scan_string');
free_var('loop');

 * operand: ['rAX', 'Yv']
 * opcode: af
 * update_flags: ['of', 'sf', 'zf', 'af', 'pf', 'cf']
**/
bool X86Architecture::Table_1_af(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Scas);
    if (Operand__rAX_Yv(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    {
      Expression::LSPType AllExpr;
      rInsn.SetTestedFlags(X86_FlDf);
      rInsn.SetUpdatedFlags(X86_FlOf | X86_FlSf | X86_FlZf | X86_FlAf | X86_FlPf | X86_FlCf);
      /* semantic: alloc_var('loop', 1) */
      AllExpr.push_back(Expr::MakeVar("loop", VariableExpression::Alloc, 0x1));
      /* semantic: loop = int1(1) */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("loop", VariableExpression::Use),
        Expr::MakeBitVector(1, 0x1)));
      /* semantic: if __code and instruction_has_prefix(repz):
        if __expr and cnt.id == int(cnt.bit, 0): loop = int1(0)
        while loop == int1(1):
          call('scan_string')
          cnt.id -= int(cnt.bit, 1)
          if __expr and cnt.id == int(cnt.bit, 0): loop = int1(0)
          if __expr and zf.id == int1(0): loop = int1(0) */
      if (rInsn.GetPrefix() & (X86_Prefix_Rep))
      {
        /* block glb expressions */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::CounterRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::CounterRegister, rInsn.GetMode())), 0x0),
          Expr::MakeAssign(
            Expr::MakeVar("loop", VariableExpression::Use),
            Expr::MakeBitVector(1, 0x0)), nullptr)
        );
        AllExpr.push_back(Expr::MakeWhileCond(
          ConditionExpression::CondEq,
          Expr::MakeVar("loop", VariableExpression::Use),
          Expr::MakeBitVector(1, 0x1),
          Expr::MakeBind({
          Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()),
          Expr::MakeAssign(
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              rInsn.GetOperand(0),
              rInsn.GetOperand(1))),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlOf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeBinOp(
                OperationExpression::OpAnd,
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  rInsn.GetOperand(0),
                  Expr::MakeVar("res", VariableExpression::Use)),
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  rInsn.GetOperand(0),
                  rInsn.GetOperand(1))),
              Expr::MakeBinOp(
                OperationExpression::OpSub,
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlCf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  Expr::MakeBinOp(
                    OperationExpression::OpXor,
                    rInsn.GetOperand(0),
                    rInsn.GetOperand(1)),
                  Expr::MakeVar("res", VariableExpression::Use)),
                Expr::MakeBinOp(
                  OperationExpression::OpAnd,
                  Expr::MakeBinOp(
                    OperationExpression::OpXor,
                    rInsn.GetOperand(0),
                    Expr::MakeVar("res", VariableExpression::Use)),
                  Expr::MakeBinOp(
                    OperationExpression::OpXor,
                    rInsn.GetOperand(0),
                    rInsn.GetOperand(1)))),
              Expr::MakeBinOp(
                OperationExpression::OpSub,
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlSf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBinOp(
                OperationExpression::OpSub,
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlZf, &m_CpuInfo),
            Expr::MakeTernaryCond(ConditionExpression::CondEq,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
            Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))),
          Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)),
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBitVector(1, 0x1)),
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeId(X86_FlPf, &m_CpuInfo),
            Expr::MakeVar("pf_tmp", VariableExpression::Use)),
          Expr::MakeVar("pf_tmp", VariableExpression::Free),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlAf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  rInsn.GetOperand(0),
                  rInsn.GetOperand(1)),
                Expr::MakeVar("res", VariableExpression::Use)),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))),
          Expr::MakeIfElseCond(
            ConditionExpression::CondEq,
            Expr::MakeId(X86_FlDf, &m_CpuInfo),
            Expr::MakeBitVector(1, 0x1),
            Expr::MakeAssign(
              expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression(),
              Expr::MakeBinOp(
                OperationExpression::OpSub,
                expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression(),
                Expr::MakeBitVector(expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression()->GetBitSize(), rInsn.GetOperand(1)->GetBitSize() / 8)))
          ,
            Expr::MakeAssign(
              expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression(),
              Expr::MakeBinOp(
                OperationExpression::OpAdd,
                expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression(),
                Expr::MakeBitVector(expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression()->GetBitSize(), rInsn.GetOperand(1)->GetBitSize() / 8)))
          ),
          Expr::MakeVar("res", VariableExpression::Free),
          Expr::MakeAssign(
            Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::CounterRegister, rInsn.GetMode()), &m_CpuInfo),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::CounterRegister, rInsn.GetMode()), &m_CpuInfo),
              Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::CounterRegister, rInsn.GetMode())), 0x1)))
          ,
          Expr::MakeIfElseCond(
            ConditionExpression::CondEq,
            Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::CounterRegister, rInsn.GetMode()), &m_CpuInfo),
            Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::CounterRegister, rInsn.GetMode())), 0x0),
            Expr::MakeAssign(
              Expr::MakeVar("loop", VariableExpression::Use),
              Expr::MakeBitVector(1, 0x0)), nullptr)
          ,
          Expr::MakeIfElseCond(
            ConditionExpression::CondEq,
            Expr::MakeId(X86_FlZf, &m_CpuInfo),
            Expr::MakeBitVector(1, 0x0),
            Expr::MakeAssign(
              Expr::MakeVar("loop", VariableExpression::Use),
              Expr::MakeBitVector(1, 0x0)), nullptr)
          })
        ));
      }
      /* semantic: if __code and instruction_has_prefix(repnz):
        if __expr and cnt.id == int(cnt.bit, 0): loop = int1(0)
        while loop == int1(1):
          call('scan_string')
          cnt.id -= int(cnt.bit, 1)
          if __expr and cnt.id == int(cnt.bit, 0): loop = int1(0)
          if __expr and zf.id == int1(1): loop = int1(0) */
      if (rInsn.GetPrefix() & (X86_Prefix_RepNz))
      {
        /* block glb expressions */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::CounterRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::CounterRegister, rInsn.GetMode())), 0x0),
          Expr::MakeAssign(
            Expr::MakeVar("loop", VariableExpression::Use),
            Expr::MakeBitVector(1, 0x0)), nullptr)
        );
        AllExpr.push_back(Expr::MakeWhileCond(
          ConditionExpression::CondEq,
          Expr::MakeVar("loop", VariableExpression::Use),
          Expr::MakeBitVector(1, 0x1),
          Expr::MakeBind({
          Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()),
          Expr::MakeAssign(
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              rInsn.GetOperand(0),
              rInsn.GetOperand(1))),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlOf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeBinOp(
                OperationExpression::OpAnd,
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  rInsn.GetOperand(0),
                  Expr::MakeVar("res", VariableExpression::Use)),
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  rInsn.GetOperand(0),
                  rInsn.GetOperand(1))),
              Expr::MakeBinOp(
                OperationExpression::OpSub,
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlCf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  Expr::MakeBinOp(
                    OperationExpression::OpXor,
                    rInsn.GetOperand(0),
                    rInsn.GetOperand(1)),
                  Expr::MakeVar("res", VariableExpression::Use)),
                Expr::MakeBinOp(
                  OperationExpression::OpAnd,
                  Expr::MakeBinOp(
                    OperationExpression::OpXor,
                    rInsn.GetOperand(0),
                    Expr::MakeVar("res", VariableExpression::Use)),
                  Expr::MakeBinOp(
                    OperationExpression::OpXor,
                    rInsn.GetOperand(0),
                    rInsn.GetOperand(1)))),
              Expr::MakeBinOp(
                OperationExpression::OpSub,
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlSf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBinOp(
                OperationExpression::OpSub,
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlZf, &m_CpuInfo),
            Expr::MakeTernaryCond(ConditionExpression::CondEq,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
            Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))),
          Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)),
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBitVector(1, 0x1)),
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeId(X86_FlPf, &m_CpuInfo),
            Expr::MakeVar("pf_tmp", VariableExpression::Use)),
          Expr::MakeVar("pf_tmp", VariableExpression::Free),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlAf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  rInsn.GetOperand(0),
                  rInsn.GetOperand(1)),
                Expr::MakeVar("res", VariableExpression::Use)),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))),
          Expr::MakeIfElseCond(
            ConditionExpression::CondEq,
            Expr::MakeId(X86_FlDf, &m_CpuInfo),
            Expr::MakeBitVector(1, 0x1),
            Expr::MakeAssign(
              expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression(),
              Expr::MakeBinOp(
                OperationExpression::OpSub,
                expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression(),
                Expr::MakeBitVector(expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression()->GetBitSize(), rInsn.GetOperand(1)->GetBitSize() / 8)))
          ,
            Expr::MakeAssign(
              expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression(),
              Expr::MakeBinOp(
                OperationExpression::OpAdd,
                expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression(),
                Expr::MakeBitVector(expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression()->GetBitSize(), rInsn.GetOperand(1)->GetBitSize() / 8)))
          ),
          Expr::MakeVar("res", VariableExpression::Free),
          Expr::MakeAssign(
            Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::CounterRegister, rInsn.GetMode()), &m_CpuInfo),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::CounterRegister, rInsn.GetMode()), &m_CpuInfo),
              Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::CounterRegister, rInsn.GetMode())), 0x1)))
          ,
          Expr::MakeIfElseCond(
            ConditionExpression::CondEq,
            Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::CounterRegister, rInsn.GetMode()), &m_CpuInfo),
            Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::CounterRegister, rInsn.GetMode())), 0x0),
            Expr::MakeAssign(
              Expr::MakeVar("loop", VariableExpression::Use),
              Expr::MakeBitVector(1, 0x0)), nullptr)
          ,
          Expr::MakeIfElseCond(
            ConditionExpression::CondEq,
            Expr::MakeId(X86_FlZf, &m_CpuInfo),
            Expr::MakeBitVector(1, 0x1),
            Expr::MakeAssign(
              Expr::MakeVar("loop", VariableExpression::Use),
              Expr::MakeBitVector(1, 0x0)), nullptr)
          })
        ));
      }
      /* semantic: if __code and instruction_has_no_prefix(repz, repnz):
        call('scan_string') */
      if (!(rInsn.GetPrefix() & (X86_Prefix_Rep | X86_Prefix_RepNz)))
      {
        /* block glb expressions */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            rInsn.GetOperand(0),
            rInsn.GetOperand(1))));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlOf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                Expr::MakeVar("res", VariableExpression::Use)),
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                rInsn.GetOperand(1))),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlCf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  rInsn.GetOperand(0),
                  rInsn.GetOperand(1)),
                Expr::MakeVar("res", VariableExpression::Use)),
              Expr::MakeBinOp(
                OperationExpression::OpAnd,
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  rInsn.GetOperand(0),
                  Expr::MakeVar("res", VariableExpression::Use)),
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  rInsn.GetOperand(0),
                  rInsn.GetOperand(1)))),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlSf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlZf, &m_CpuInfo),
          Expr::MakeTernaryCond(ConditionExpression::CondEq,
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))));
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBitVector(1, 0x1)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlPf, &m_CpuInfo),
          Expr::MakeVar("pf_tmp", VariableExpression::Use)));
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlAf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                rInsn.GetOperand(1)),
              Expr::MakeVar("res", VariableExpression::Use)),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))));
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeId(X86_FlDf, &m_CpuInfo),
          Expr::MakeBitVector(1, 0x1),
          Expr::MakeAssign(
            expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression(),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression(),
              Expr::MakeBitVector(expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression()->GetBitSize(), rInsn.GetOperand(1)->GetBitSize() / 8)))
        ,
          Expr::MakeAssign(
            expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression(),
            Expr::MakeBinOp(
              OperationExpression::OpAdd,
              expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression(),
              Expr::MakeBitVector(expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression()->GetBitSize(), rInsn.GetOperand(1)->GetBitSize() / 8)))
        ));
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
      }
      /* semantic: free_var('loop') */
      AllExpr.push_back(Expr::MakeVar("loop", VariableExpression::Free));
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instructions
 * opcode: b0
 *
 * mnemonic: mov
 * operand: ['AL', 'Ib']
 * semantic: op0.val = op1.val;

 *
 * mnemonic: mov
 * operand: ['r8b', 'Ib']
 * semantic: op0.val = op1.val;

 * attr: ['rexb']
 *
**/
bool X86Architecture::Table_1_b0(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if ((rInsn.GetPrefix() & X86_Prefix_REX_b) == X86_Prefix_REX_b)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Mov);
      if (Operand__r8b_Ib(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: op0.val = op1.val */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          rInsn.GetOperand(1)));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    else
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Mov);
      if (Operand__AL_Ib(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: op0.val = op1.val */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          rInsn.GetOperand(1)));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
}

/** instructions
 * opcode: b1
 *
 * mnemonic: mov
 * operand: ['CL', 'Ib']
 * semantic: op0.val = op1.val;

 *
 * mnemonic: mov
 * operand: ['r9b', 'Ib']
 * semantic: op0.val = op1.val;

 * attr: ['rexb']
 *
**/
bool X86Architecture::Table_1_b1(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if ((rInsn.GetPrefix() & X86_Prefix_REX_b) == X86_Prefix_REX_b)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Mov);
      if (Operand__r9b_Ib(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: op0.val = op1.val */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          rInsn.GetOperand(1)));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    else
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Mov);
      if (Operand__CL_Ib(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: op0.val = op1.val */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          rInsn.GetOperand(1)));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
}

/** instructions
 * opcode: b2
 *
 * mnemonic: mov
 * operand: ['DL', 'Ib']
 * semantic: op0.val = op1.val;

 *
 * mnemonic: mov
 * operand: ['r10b', 'Ib']
 * semantic: op0.val = op1.val;

 * attr: ['rexb']
 *
**/
bool X86Architecture::Table_1_b2(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if ((rInsn.GetPrefix() & X86_Prefix_REX_b) == X86_Prefix_REX_b)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Mov);
      if (Operand__r10b_Ib(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: op0.val = op1.val */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          rInsn.GetOperand(1)));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    else
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Mov);
      if (Operand__DL_Ib(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: op0.val = op1.val */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          rInsn.GetOperand(1)));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
}

/** instructions
 * opcode: b3
 *
 * mnemonic: mov
 * operand: ['BL', 'Ib']
 * semantic: op0.val = op1.val;

 *
 * mnemonic: mov
 * operand: ['r11b', 'Ib']
 * semantic: op0.val = op1.val;

 * attr: ['rexb']
 *
**/
bool X86Architecture::Table_1_b3(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if ((rInsn.GetPrefix() & X86_Prefix_REX_b) == X86_Prefix_REX_b)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Mov);
      if (Operand__r11b_Ib(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: op0.val = op1.val */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          rInsn.GetOperand(1)));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    else
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Mov);
      if (Operand__BL_Ib(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: op0.val = op1.val */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          rInsn.GetOperand(1)));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
}

/** instructions
 * opcode: b4
 *
 * mnemonic: mov
 * operand: ['AH', 'Ib']
 * semantic: op0.val = op1.val;

 *
 * mnemonic: mov
 * operand: ['r12b', 'Ib']
 * semantic: op0.val = op1.val;

 * attr: ['rexb']
 *
**/
bool X86Architecture::Table_1_b4(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if ((rInsn.GetPrefix() & X86_Prefix_REX_b) == X86_Prefix_REX_b)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Mov);
      if (Operand__r12b_Ib(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: op0.val = op1.val */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          rInsn.GetOperand(1)));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    else
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Mov);
      if (Operand__AH_Ib(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: op0.val = op1.val */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          rInsn.GetOperand(1)));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
}

/** instructions
 * opcode: b5
 *
 * mnemonic: mov
 * operand: ['CH', 'Ib']
 * semantic: op0.val = op1.val;

 *
 * mnemonic: mov
 * operand: ['r13b', 'Ib']
 * semantic: op0.val = op1.val;

 * attr: ['rexb']
 *
**/
bool X86Architecture::Table_1_b5(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if ((rInsn.GetPrefix() & X86_Prefix_REX_b) == X86_Prefix_REX_b)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Mov);
      if (Operand__r13b_Ib(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: op0.val = op1.val */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          rInsn.GetOperand(1)));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    else
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Mov);
      if (Operand__CH_Ib(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: op0.val = op1.val */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          rInsn.GetOperand(1)));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
}

/** instructions
 * opcode: b6
 *
 * mnemonic: mov
 * operand: ['DH', 'Ib']
 * semantic: op0.val = op1.val;

 *
 * mnemonic: mov
 * operand: ['r14b', 'Ib']
 * semantic: op0.val = op1.val;

 * attr: ['rexb']
 *
**/
bool X86Architecture::Table_1_b6(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if ((rInsn.GetPrefix() & X86_Prefix_REX_b) == X86_Prefix_REX_b)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Mov);
      if (Operand__r14b_Ib(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: op0.val = op1.val */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          rInsn.GetOperand(1)));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    else
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Mov);
      if (Operand__DH_Ib(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: op0.val = op1.val */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          rInsn.GetOperand(1)));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
}

/** instructions
 * opcode: b7
 *
 * mnemonic: mov
 * operand: ['BH', 'Ib']
 * semantic: op0.val = op1.val;

 *
 * mnemonic: mov
 * operand: ['r15b', 'Ib']
 * semantic: op0.val = op1.val;

 * attr: ['rexb']
 *
**/
bool X86Architecture::Table_1_b7(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if ((rInsn.GetPrefix() & X86_Prefix_REX_b) == X86_Prefix_REX_b)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Mov);
      if (Operand__r15b_Ib(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: op0.val = op1.val */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          rInsn.GetOperand(1)));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    else
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Mov);
      if (Operand__BH_Ib(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: op0.val = op1.val */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          rInsn.GetOperand(1)));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
}

/** instructions
 * opcode: b8
 *
 * mnemonic: mov
 * operand: ['rAX', 'Iv']
 * semantic: op0.val = op1.val;

 *
 * mnemonic: mov
 * operand: ['r8', 'Iv']
 * semantic: op0.val = op1.val;

 * attr: ['rexb']
 *
**/
bool X86Architecture::Table_1_b8(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if ((rInsn.GetPrefix() & X86_Prefix_REX_b) == X86_Prefix_REX_b)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Mov);
      if (Operand__r8_Iv(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: op0.val = op1.val */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          rInsn.GetOperand(1)));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    else
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Mov);
      if (Operand__rAX_Iv(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: op0.val = op1.val */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          rInsn.GetOperand(1)));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
}

/** instructions
 * opcode: b9
 *
 * mnemonic: mov
 * operand: ['rCX', 'Iv']
 * semantic: op0.val = op1.val;

 *
 * mnemonic: mov
 * operand: ['r9', 'Iv']
 * semantic: op0.val = op1.val;

 * attr: ['rexb']
 *
**/
bool X86Architecture::Table_1_b9(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if ((rInsn.GetPrefix() & X86_Prefix_REX_b) == X86_Prefix_REX_b)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Mov);
      if (Operand__r9_Iv(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: op0.val = op1.val */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          rInsn.GetOperand(1)));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    else
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Mov);
      if (Operand__rCX_Iv(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: op0.val = op1.val */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          rInsn.GetOperand(1)));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
}

/** instructions
 * opcode: ba
 *
 * mnemonic: mov
 * operand: ['rDX', 'Iv']
 * semantic: op0.val = op1.val;

 *
 * mnemonic: mov
 * operand: ['r10', 'Iv']
 * semantic: op0.val = op1.val;

 * attr: ['rexb']
 *
**/
bool X86Architecture::Table_1_ba(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if ((rInsn.GetPrefix() & X86_Prefix_REX_b) == X86_Prefix_REX_b)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Mov);
      if (Operand__r10_Iv(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: op0.val = op1.val */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          rInsn.GetOperand(1)));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    else
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Mov);
      if (Operand__rDX_Iv(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: op0.val = op1.val */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          rInsn.GetOperand(1)));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
}

/** instructions
 * opcode: bb
 *
 * mnemonic: mov
 * operand: ['rBX', 'Iv']
 * semantic: op0.val = op1.val;

 *
 * mnemonic: mov
 * operand: ['r11', 'Iv']
 * semantic: op0.val = op1.val;

 * attr: ['rexb']
 *
**/
bool X86Architecture::Table_1_bb(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if ((rInsn.GetPrefix() & X86_Prefix_REX_b) == X86_Prefix_REX_b)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Mov);
      if (Operand__r11_Iv(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: op0.val = op1.val */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          rInsn.GetOperand(1)));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    else
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Mov);
      if (Operand__rBX_Iv(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: op0.val = op1.val */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          rInsn.GetOperand(1)));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
}

/** instructions
 * opcode: bc
 *
 * mnemonic: mov
 * operand: ['rSP', 'Iv']
 * semantic: op0.val = op1.val;

 *
 * mnemonic: mov
 * operand: ['r12', 'Iv']
 * semantic: op0.val = op1.val;

 * attr: ['rexb']
 *
**/
bool X86Architecture::Table_1_bc(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if ((rInsn.GetPrefix() & X86_Prefix_REX_b) == X86_Prefix_REX_b)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Mov);
      if (Operand__r12_Iv(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: op0.val = op1.val */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          rInsn.GetOperand(1)));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    else
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Mov);
      if (Operand__rSP_Iv(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: op0.val = op1.val */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          rInsn.GetOperand(1)));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
}

/** instructions
 * opcode: bd
 *
 * mnemonic: mov
 * operand: ['rBP', 'Iv']
 * semantic: op0.val = op1.val;

 *
 * mnemonic: mov
 * operand: ['r13', 'Iv']
 * semantic: op0.val = op1.val;

 * attr: ['rexb']
 *
**/
bool X86Architecture::Table_1_bd(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if ((rInsn.GetPrefix() & X86_Prefix_REX_b) == X86_Prefix_REX_b)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Mov);
      if (Operand__r13_Iv(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: op0.val = op1.val */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          rInsn.GetOperand(1)));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    else
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Mov);
      if (Operand__rBP_Iv(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: op0.val = op1.val */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          rInsn.GetOperand(1)));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
}

/** instructions
 * opcode: be
 *
 * mnemonic: mov
 * operand: ['rSI', 'Iv']
 * semantic: op0.val = op1.val;

 *
 * mnemonic: mov
 * operand: ['r14', 'Iv']
 * semantic: op0.val = op1.val;

 * attr: ['rexb']
 *
**/
bool X86Architecture::Table_1_be(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if ((rInsn.GetPrefix() & X86_Prefix_REX_b) == X86_Prefix_REX_b)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Mov);
      if (Operand__r14_Iv(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: op0.val = op1.val */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          rInsn.GetOperand(1)));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    else
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Mov);
      if (Operand__rSI_Iv(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: op0.val = op1.val */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          rInsn.GetOperand(1)));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
}

/** instructions
 * opcode: bf
 *
 * mnemonic: mov
 * operand: ['rDI', 'Iv']
 * semantic: op0.val = op1.val;

 *
 * mnemonic: mov
 * operand: ['r15', 'Iv']
 * semantic: op0.val = op1.val;

 * attr: ['rexb']
 *
**/
bool X86Architecture::Table_1_bf(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if ((rInsn.GetPrefix() & X86_Prefix_REX_b) == X86_Prefix_REX_b)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Mov);
      if (Operand__r15_Iv(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: op0.val = op1.val */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          rInsn.GetOperand(1)));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    else
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Mov);
      if (Operand__rDI_Iv(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: op0.val = op1.val */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          rInsn.GetOperand(1)));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
}

/** group:
 * mnemonic: rol
 * opcode: 00
 * semantic: alloc_var('res', op0.bit);
alloc_var('count', op0.bit);
count = bit_cast(op1.val, int(op0.bit, op0.bit));
call('count_mask');
res = rol(op0.val, count);
if __expr and count != int(op0.bit, 0):
  cf.id = bit_cast(res, int_type1);
if __expr and count == int(op0.bit, 1):
  of.id = bit_cast(bit_cast(cf.id, int_type(op0.bit)) ^ (res >> (int(op0.bit,op0.bit) - int(op0.bit, 1))), int_type1);
op0.val = res;
free_var('count');
free_var('res');

 *
 * mnemonic: ror
 * opcode: 01
 * semantic: alloc_var('res', op0.bit);
alloc_var('count', op0.bit);
count = bit_cast(op1.val, int_type(op0.bit));
call('count_mask');
res = ror(op0.val, count);
if __expr and count != int(op0.bit, 0):
  cf.id = bit_cast(res >> (int(op0.bit, op0.bit) - int(op0.bit, 1)), int_type1);
if __expr and count == int(op0.bit, 1):
  of.id = bit_cast((res >> (int(op0.bit, op0.bit) - int(op0.bit, 1))) ^ (res >> (int(op0.bit, op0.bit) - int(op0.bit, 2))), int_type1);
op0.val = res;
free_var('count');
free_var('res');

 *
 * mnemonic: rcl
 * opcode: 02
 * semantic: alloc_var('res', op0.bit);
alloc_var('count', op0.bit);
count = bit_cast(op1.val, int_type(op0.bit));
call('count_mask');
alloc_var('rol_val', concat(op0.bit, ignore(' + 1')));
rol_val = bit_cast(op0.val, int_type(concat(op0.bit, ignore(' + 1'))));
rol_val |= (bit_cast(cf.id, int_type(concat(op0.bit, ignore(' + 1')))) << int(concat(op0.bit, ignore(' + 1')), op0.bit));
rol_val = rol(rol_val, bit_cast(count, int_type(concat(op0.bit, ignore(' + 1')))));
res = bit_cast(rol_val, int_type(op0.bit));
if __expr and count != int(op0.bit, 0):
  cf.id = bit_cast(rol_val >> int(concat(op0.bit, ignore(' + 1')), op0.bit), int_type1);
if __expr and count == int(op0.bit, 1):
  of.id = bit_cast(cf.id ^ bit_cast(res >> (int(op0.bit, op0.bit) - int(op0.bit, 1)), int_type1), int_type1);
op0.val = res;
free_var('rol_val');
free_var('count');
free_var('res');

 *
 * mnemonic: rcr
 * opcode: 03
 * semantic: alloc_var('res', op0.bit);
alloc_var('count', op0.bit);
count = bit_cast(op1.val, int(op0.bit, op0.bit));
call('count_mask');
alloc_var('ror_val', concat(op0.bit, ignore(' + 1')));
ror_val = bit_cast(op0.val, int_type(concat(op0.bit, ignore(' + 1'))));
ror_val |= (bit_cast(cf.id, int_type(concat(op0.bit, ignore(' + 1')))) << int(concat(op0.bit, ignore(' + 1')), op0.bit));
ror_val = ror(ror_val, bit_cast(count, int_type(concat(op0.bit, ignore(' + 1')))));
res = bit_cast(ror_val, int_type(op0.bit));
if __expr and count != int(op0.bit, 0):
  cf.id = bit_cast(ror_val >> int(concat(op0.bit, ignore(' + 1')), op0.bit), int_type1);
if __expr and count == int(op0.bit, 1):
  of.id = bit_cast((res >> (int(op0.bit, op0.bit) - int(op0.bit, 1))) ^ (res >> (int(op0.bit, op0.bit) - int(op0.bit, 2))), int_type1);
op0.val = res;
free_var('ror_val');
free_var('count');
free_var('res');

 *
 * mnemonic: shl
 * opcode: 04
 * semantic: alloc_var('res', op0.bit);
alloc_var('count', op0.bit);
count = bit_cast(op1.val, int(op0.bit, op0.bit));
call('count_mask');
res = op0.val << count;
if __expr and count != int(op0.bit, 0):
  cf.id = bit_cast(op0.val >> (int(op0.bit, op0.bit) - count), int1(1))
  call('sign_flag')
  call('zero_flag')
  call('parity_flag');
if __expr and count == int(op0.bit, 1):
  of.id = bit_cast((op0.val >> (int(op0.bit, op0.bit) - int(op0.bit, 1))) ^ (op0.val >> (int(op0.bit, op0.bit) - int(op0.bit, 2))), int1(1));
op0.val = res;
free_var('count');
free_var('res');

 *
 * mnemonic: shr
 * opcode: 05
 * semantic: alloc_var('res', op0.bit);
alloc_var('count', op0.bit);
count = bit_cast(op1.val, int(op0.bit, op0.bit));
call('count_mask');
res = op0.val >> count;
if __expr and count != int(op0.bit, 0):
  cf.id = bit_cast(op0.val >> (count - int(op0.bit, 1)), int1(1))
  call('sign_flag')
  call('zero_flag')
  call('parity_flag');
if __expr and count == int(op0.bit, 1):
  of.id = bit_cast((op0.val >> (int(op0.bit, op0.bit) - int(op0.bit, 1))), int1(1));
op0.val = res;
free_var('count');
free_var('res');

 *
 * mnemonic: sal
 * opcode: 06
 * semantic: alloc_var('res', op0.bit);
alloc_var('count', op0.bit);
count = bit_cast(op1.val, int(op0.bit, op0.bit));
call('count_mask');
res = op0.val << count;
if __expr and count != int(op0.bit, 0):
  cf.id = bit_cast(op0.val >> (int(op0.bit, op0.bit) - count), int1(1))
  call('sign_flag')
  call('zero_flag')
  call('parity_flag');
if __expr and count == int(op0.bit, 1):
  of.id = bit_cast((op0.val >> (int(op0.bit, op0.bit) - int(op0.bit, 1))) ^ (op0.val >> (int(op0.bit, op0.bit) - int(op0.bit, 2))), int1(1));
op0.val = res;
free_var('count');
free_var('res');

 *
 * mnemonic: sar
 * opcode: 07
 * semantic: alloc_var('res', op0.bit);
alloc_var('count', op0.bit);
count = bit_cast(op1.val, int(op0.bit, op0.bit));
call('count_mask');
res = ars(op0.val, count);
if __expr and count != int(op0.bit, 0):
  if __expr and count > int(op0.bit, op0.bit): cf.id = bit_cast(op0.val >> (int(op0.bit, op0.bit) - int(op0.bit, 1)), int1(1))
  else: cf.id = bit_cast(op0.val >> (count - int(op0.bit, 1)), int1(1))
  call('sign_flag')
  call('zero_flag')
  call('parity_flag');
if __expr and count == int(op0.bit, 1):
  of.id = int1(0);
op0.val = res;
free_var('count');
free_var('res');

 *
**/
bool X86Architecture::Table_1_c0(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    u8 ModRmByte;
    if (!rBinStrm.Read(Offset, ModRmByte))
      return false;

    x86::ModRM ModRm(ModRmByte);
    switch (ModRm.Reg())
    {
    case 0x0:
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Rol);
      if (Operand__Eb_Ib(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: alloc_var('count', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("count", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: count = bit_cast(op1.val, int(op0.bit, op0.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, rInsn.GetOperand(1), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()))));
        /* semantic: call('count_mask') */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x40),
          Expr::MakeAssign(
            Expr::MakeVar("count", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeVar("count", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3f))),
          Expr::MakeAssign(
            Expr::MakeVar("count", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeVar("count", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1f)))));
        /* semantic: res = rol(op0.val, count) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpRol, rInsn.GetOperand(0), Expr::MakeVar("count", VariableExpression::Use))));
        /* semantic: if __expr and count != int(op0.bit, 0):
          cf.id = bit_cast(res, int_type1) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondNe,
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlCf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeVar("res", VariableExpression::Use), Expr::MakeBitVector(1, 1))), nullptr)
        );
        /* semantic: if __expr and count == int(op0.bit, 1):
          of.id = bit_cast(bit_cast(cf.id, int_type(op0.bit)) ^ (res >> (int(op0.bit,op0.bit) - int(op0.bit, 1))), int_type1) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlOf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeId(X86_FlCf, &m_CpuInfo), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize())),
              Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBinOp(
                  OperationExpression::OpSub,
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)))), Expr::MakeBitVector(1, 1))), nullptr)
        );
        /* semantic: op0.val = res */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("res", VariableExpression::Use)));
        /* semantic: free_var('count') */
        AllExpr.push_back(Expr::MakeVar("count", VariableExpression::Free));
        /* semantic: free_var('res') */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x1:
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Ror);
      if (Operand__Eb_Ib(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: alloc_var('count', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("count", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: count = bit_cast(op1.val, int_type(op0.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, rInsn.GetOperand(1), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()))));
        /* semantic: call('count_mask') */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x40),
          Expr::MakeAssign(
            Expr::MakeVar("count", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeVar("count", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3f))),
          Expr::MakeAssign(
            Expr::MakeVar("count", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeVar("count", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1f)))));
        /* semantic: res = ror(op0.val, count) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpRor, rInsn.GetOperand(0), Expr::MakeVar("count", VariableExpression::Use))));
        /* semantic: if __expr and count != int(op0.bit, 0):
          cf.id = bit_cast(res >> (int(op0.bit, op0.bit) - int(op0.bit, 1)), int_type1) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondNe,
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlCf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBinOp(
                OperationExpression::OpSub,
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 1))), nullptr)
        );
        /* semantic: if __expr and count == int(op0.bit, 1):
          of.id = bit_cast((res >> (int(op0.bit, op0.bit) - int(op0.bit, 1))) ^ (res >> (int(op0.bit, op0.bit) - int(op0.bit, 2))), int_type1) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlOf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBinOp(
                  OperationExpression::OpSub,
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))),
              Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBinOp(
                  OperationExpression::OpSub,
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)))), Expr::MakeBitVector(1, 1))), nullptr)
        );
        /* semantic: op0.val = res */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("res", VariableExpression::Use)));
        /* semantic: free_var('count') */
        AllExpr.push_back(Expr::MakeVar("count", VariableExpression::Free));
        /* semantic: free_var('res') */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x2:
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Rcl);
      if (Operand__Eb_Ib(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: alloc_var('count', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("count", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: count = bit_cast(op1.val, int_type(op0.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, rInsn.GetOperand(1), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()))));
        /* semantic: call('count_mask') */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x40),
          Expr::MakeAssign(
            Expr::MakeVar("count", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeVar("count", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3f))),
          Expr::MakeAssign(
            Expr::MakeVar("count", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeVar("count", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1f)))));
        /* semantic: alloc_var('rol_val', concat(op0.bit, ignore(' + 1'))) */
        AllExpr.push_back(Expr::MakeVar("rol_val", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize() + 1));
        /* semantic: rol_val = bit_cast(op0.val, int_type(concat(op0.bit, ignore(' + 1')))) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("rol_val", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, rInsn.GetOperand(0), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize() + 1, rInsn.GetOperand(0)->GetBitSize() + 1))));
        /* semantic: rol_val |= (bit_cast(cf.id, int_type(concat(op0.bit, ignore(' + 1')))) << int(concat(op0.bit, ignore(' + 1')), op0.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("rol_val", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpOr,
            Expr::MakeVar("rol_val", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpLls,
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeId(X86_FlCf, &m_CpuInfo), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize() + 1, rInsn.GetOperand(0)->GetBitSize() + 1)),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize() + 1, rInsn.GetOperand(0)->GetBitSize()))))
        );
        /* semantic: rol_val = rol(rol_val, bit_cast(count, int_type(concat(op0.bit, ignore(' + 1'))))) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("rol_val", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpRol, Expr::MakeVar("rol_val", VariableExpression::Use), Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeVar("count", VariableExpression::Use), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize() + 1, rInsn.GetOperand(0)->GetBitSize() + 1)))));
        /* semantic: res = bit_cast(rol_val, int_type(op0.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeVar("rol_val", VariableExpression::Use), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()))));
        /* semantic: if __expr and count != int(op0.bit, 0):
          cf.id = bit_cast(rol_val >> int(concat(op0.bit, ignore(' + 1')), op0.bit), int_type1) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondNe,
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlCf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("rol_val", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize() + 1, rInsn.GetOperand(0)->GetBitSize())), Expr::MakeBitVector(1, 1))), nullptr)
        );
        /* semantic: if __expr and count == int(op0.bit, 1):
          of.id = bit_cast(cf.id ^ bit_cast(res >> (int(op0.bit, op0.bit) - int(op0.bit, 1)), int_type1), int_type1) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlOf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeId(X86_FlCf, &m_CpuInfo),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBinOp(
                  OperationExpression::OpSub,
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 1))), Expr::MakeBitVector(1, 1))), nullptr)
        );
        /* semantic: op0.val = res */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("res", VariableExpression::Use)));
        /* semantic: free_var('rol_val') */
        AllExpr.push_back(Expr::MakeVar("rol_val", VariableExpression::Free));
        /* semantic: free_var('count') */
        AllExpr.push_back(Expr::MakeVar("count", VariableExpression::Free));
        /* semantic: free_var('res') */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x3:
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Rcr);
      if (Operand__Eb_Ib(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: alloc_var('count', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("count", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: count = bit_cast(op1.val, int(op0.bit, op0.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, rInsn.GetOperand(1), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()))));
        /* semantic: call('count_mask') */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x40),
          Expr::MakeAssign(
            Expr::MakeVar("count", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeVar("count", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3f))),
          Expr::MakeAssign(
            Expr::MakeVar("count", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeVar("count", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1f)))));
        /* semantic: alloc_var('ror_val', concat(op0.bit, ignore(' + 1'))) */
        AllExpr.push_back(Expr::MakeVar("ror_val", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize() + 1));
        /* semantic: ror_val = bit_cast(op0.val, int_type(concat(op0.bit, ignore(' + 1')))) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("ror_val", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, rInsn.GetOperand(0), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize() + 1, rInsn.GetOperand(0)->GetBitSize() + 1))));
        /* semantic: ror_val |= (bit_cast(cf.id, int_type(concat(op0.bit, ignore(' + 1')))) << int(concat(op0.bit, ignore(' + 1')), op0.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("ror_val", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpOr,
            Expr::MakeVar("ror_val", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpLls,
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeId(X86_FlCf, &m_CpuInfo), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize() + 1, rInsn.GetOperand(0)->GetBitSize() + 1)),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize() + 1, rInsn.GetOperand(0)->GetBitSize()))))
        );
        /* semantic: ror_val = ror(ror_val, bit_cast(count, int_type(concat(op0.bit, ignore(' + 1'))))) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("ror_val", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpRor, Expr::MakeVar("ror_val", VariableExpression::Use), Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeVar("count", VariableExpression::Use), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize() + 1, rInsn.GetOperand(0)->GetBitSize() + 1)))));
        /* semantic: res = bit_cast(ror_val, int_type(op0.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeVar("ror_val", VariableExpression::Use), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()))));
        /* semantic: if __expr and count != int(op0.bit, 0):
          cf.id = bit_cast(ror_val >> int(concat(op0.bit, ignore(' + 1')), op0.bit), int_type1) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondNe,
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlCf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("ror_val", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize() + 1, rInsn.GetOperand(0)->GetBitSize())), Expr::MakeBitVector(1, 1))), nullptr)
        );
        /* semantic: if __expr and count == int(op0.bit, 1):
          of.id = bit_cast((res >> (int(op0.bit, op0.bit) - int(op0.bit, 1))) ^ (res >> (int(op0.bit, op0.bit) - int(op0.bit, 2))), int_type1) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlOf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBinOp(
                  OperationExpression::OpSub,
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))),
              Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBinOp(
                  OperationExpression::OpSub,
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)))), Expr::MakeBitVector(1, 1))), nullptr)
        );
        /* semantic: op0.val = res */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("res", VariableExpression::Use)));
        /* semantic: free_var('ror_val') */
        AllExpr.push_back(Expr::MakeVar("ror_val", VariableExpression::Free));
        /* semantic: free_var('count') */
        AllExpr.push_back(Expr::MakeVar("count", VariableExpression::Free));
        /* semantic: free_var('res') */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x4:
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Shl);
      if (Operand__Eb_Ib(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: alloc_var('count', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("count", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: count = bit_cast(op1.val, int(op0.bit, op0.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, rInsn.GetOperand(1), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()))));
        /* semantic: call('count_mask') */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x40),
          Expr::MakeAssign(
            Expr::MakeVar("count", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeVar("count", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3f))),
          Expr::MakeAssign(
            Expr::MakeVar("count", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeVar("count", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1f)))));
        /* semantic: res = op0.val << count */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpLls,
            rInsn.GetOperand(0),
            Expr::MakeVar("count", VariableExpression::Use))));
        /* semantic: if __expr and count != int(op0.bit, 0):
          cf.id = bit_cast(op0.val >> (int(op0.bit, op0.bit) - count), int1(1))
          call('sign_flag')
          call('zero_flag')
          call('parity_flag') */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondNe,
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeBind({
          Expr::MakeAssign(
            Expr::MakeId(X86_FlCf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              rInsn.GetOperand(0),
              Expr::MakeBinOp(
                OperationExpression::OpSub,
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                Expr::MakeVar("count", VariableExpression::Use))), Expr::MakeBitVector(1, 0x1))),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlSf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBinOp(
                OperationExpression::OpSub,
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlZf, &m_CpuInfo),
            Expr::MakeTernaryCond(ConditionExpression::CondEq,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
            Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))),
          Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)),
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBitVector(1, 0x1)),
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeId(X86_FlPf, &m_CpuInfo),
            Expr::MakeVar("pf_tmp", VariableExpression::Use)),
          Expr::MakeVar("pf_tmp", VariableExpression::Free)})
        , nullptr)
        );
        /* semantic: if __expr and count == int(op0.bit, 1):
          of.id = bit_cast((op0.val >> (int(op0.bit, op0.bit) - int(op0.bit, 1))) ^ (op0.val >> (int(op0.bit, op0.bit) - int(op0.bit, 2))), int1(1)) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlOf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(
                OperationExpression::OpLrs,
                rInsn.GetOperand(0),
                Expr::MakeBinOp(
                  OperationExpression::OpSub,
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))),
              Expr::MakeBinOp(
                OperationExpression::OpLrs,
                rInsn.GetOperand(0),
                Expr::MakeBinOp(
                  OperationExpression::OpSub,
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)))), Expr::MakeBitVector(1, 0x1))), nullptr)
        );
        /* semantic: op0.val = res */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("res", VariableExpression::Use)));
        /* semantic: free_var('count') */
        AllExpr.push_back(Expr::MakeVar("count", VariableExpression::Free));
        /* semantic: free_var('res') */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x5:
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Shr);
      if (Operand__Eb_Ib(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: alloc_var('count', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("count", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: count = bit_cast(op1.val, int(op0.bit, op0.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, rInsn.GetOperand(1), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()))));
        /* semantic: call('count_mask') */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x40),
          Expr::MakeAssign(
            Expr::MakeVar("count", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeVar("count", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3f))),
          Expr::MakeAssign(
            Expr::MakeVar("count", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeVar("count", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1f)))));
        /* semantic: res = op0.val >> count */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpLrs,
            rInsn.GetOperand(0),
            Expr::MakeVar("count", VariableExpression::Use))));
        /* semantic: if __expr and count != int(op0.bit, 0):
          cf.id = bit_cast(op0.val >> (count - int(op0.bit, 1)), int1(1))
          call('sign_flag')
          call('zero_flag')
          call('parity_flag') */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondNe,
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeBind({
          Expr::MakeAssign(
            Expr::MakeId(X86_FlCf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              rInsn.GetOperand(0),
              Expr::MakeBinOp(
                OperationExpression::OpSub,
                Expr::MakeVar("count", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlSf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBinOp(
                OperationExpression::OpSub,
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlZf, &m_CpuInfo),
            Expr::MakeTernaryCond(ConditionExpression::CondEq,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
            Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))),
          Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)),
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBitVector(1, 0x1)),
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeId(X86_FlPf, &m_CpuInfo),
            Expr::MakeVar("pf_tmp", VariableExpression::Use)),
          Expr::MakeVar("pf_tmp", VariableExpression::Free)})
        , nullptr)
        );
        /* semantic: if __expr and count == int(op0.bit, 1):
          of.id = bit_cast((op0.val >> (int(op0.bit, op0.bit) - int(op0.bit, 1))), int1(1)) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlOf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              rInsn.GetOperand(0),
              Expr::MakeBinOp(
                OperationExpression::OpSub,
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))), nullptr)
        );
        /* semantic: op0.val = res */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("res", VariableExpression::Use)));
        /* semantic: free_var('count') */
        AllExpr.push_back(Expr::MakeVar("count", VariableExpression::Free));
        /* semantic: free_var('res') */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x6:
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Sal);
      if (Operand__Eb_Ib(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: alloc_var('count', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("count", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: count = bit_cast(op1.val, int(op0.bit, op0.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, rInsn.GetOperand(1), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()))));
        /* semantic: call('count_mask') */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x40),
          Expr::MakeAssign(
            Expr::MakeVar("count", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeVar("count", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3f))),
          Expr::MakeAssign(
            Expr::MakeVar("count", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeVar("count", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1f)))));
        /* semantic: res = op0.val << count */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpLls,
            rInsn.GetOperand(0),
            Expr::MakeVar("count", VariableExpression::Use))));
        /* semantic: if __expr and count != int(op0.bit, 0):
          cf.id = bit_cast(op0.val >> (int(op0.bit, op0.bit) - count), int1(1))
          call('sign_flag')
          call('zero_flag')
          call('parity_flag') */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondNe,
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeBind({
          Expr::MakeAssign(
            Expr::MakeId(X86_FlCf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              rInsn.GetOperand(0),
              Expr::MakeBinOp(
                OperationExpression::OpSub,
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                Expr::MakeVar("count", VariableExpression::Use))), Expr::MakeBitVector(1, 0x1))),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlSf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBinOp(
                OperationExpression::OpSub,
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlZf, &m_CpuInfo),
            Expr::MakeTernaryCond(ConditionExpression::CondEq,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
            Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))),
          Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)),
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBitVector(1, 0x1)),
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeId(X86_FlPf, &m_CpuInfo),
            Expr::MakeVar("pf_tmp", VariableExpression::Use)),
          Expr::MakeVar("pf_tmp", VariableExpression::Free)})
        , nullptr)
        );
        /* semantic: if __expr and count == int(op0.bit, 1):
          of.id = bit_cast((op0.val >> (int(op0.bit, op0.bit) - int(op0.bit, 1))) ^ (op0.val >> (int(op0.bit, op0.bit) - int(op0.bit, 2))), int1(1)) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlOf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(
                OperationExpression::OpLrs,
                rInsn.GetOperand(0),
                Expr::MakeBinOp(
                  OperationExpression::OpSub,
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))),
              Expr::MakeBinOp(
                OperationExpression::OpLrs,
                rInsn.GetOperand(0),
                Expr::MakeBinOp(
                  OperationExpression::OpSub,
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)))), Expr::MakeBitVector(1, 0x1))), nullptr)
        );
        /* semantic: op0.val = res */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("res", VariableExpression::Use)));
        /* semantic: free_var('count') */
        AllExpr.push_back(Expr::MakeVar("count", VariableExpression::Free));
        /* semantic: free_var('res') */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x7:
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Sar);
      if (Operand__Eb_Ib(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: alloc_var('count', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("count", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: count = bit_cast(op1.val, int(op0.bit, op0.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, rInsn.GetOperand(1), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()))));
        /* semantic: call('count_mask') */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x40),
          Expr::MakeAssign(
            Expr::MakeVar("count", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeVar("count", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3f))),
          Expr::MakeAssign(
            Expr::MakeVar("count", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeVar("count", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1f)))));
        /* semantic: res = ars(op0.val, count) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpArs, rInsn.GetOperand(0), Expr::MakeVar("count", VariableExpression::Use))));
        /* semantic: if __expr and count != int(op0.bit, 0):
          if __expr and count > int(op0.bit, op0.bit): cf.id = bit_cast(op0.val >> (int(op0.bit, op0.bit) - int(op0.bit, 1)), int1(1))
          else: cf.id = bit_cast(op0.val >> (count - int(op0.bit, 1)), int1(1))
          call('sign_flag')
          call('zero_flag')
          call('parity_flag') */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondNe,
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeBind({
          Expr::MakeIfElseCond(
            ConditionExpression::CondUgt,
            Expr::MakeVar("count", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeAssign(
              Expr::MakeId(X86_FlCf, &m_CpuInfo),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                rInsn.GetOperand(0),
                Expr::MakeBinOp(
                  OperationExpression::OpSub,
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))),
            Expr::MakeAssign(
              Expr::MakeId(X86_FlCf, &m_CpuInfo),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                rInsn.GetOperand(0),
                Expr::MakeBinOp(
                  OperationExpression::OpSub,
                  Expr::MakeVar("count", VariableExpression::Use),
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1)))),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlSf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBinOp(
                OperationExpression::OpSub,
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlZf, &m_CpuInfo),
            Expr::MakeTernaryCond(ConditionExpression::CondEq,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
            Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))),
          Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)),
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBitVector(1, 0x1)),
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeId(X86_FlPf, &m_CpuInfo),
            Expr::MakeVar("pf_tmp", VariableExpression::Use)),
          Expr::MakeVar("pf_tmp", VariableExpression::Free)})
        , nullptr)
        );
        /* semantic: if __expr and count == int(op0.bit, 1):
          of.id = int1(0) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlOf, &m_CpuInfo),
            Expr::MakeBitVector(1, 0x0)), nullptr)
        );
        /* semantic: op0.val = res */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("res", VariableExpression::Use)));
        /* semantic: free_var('count') */
        AllExpr.push_back(Expr::MakeVar("count", VariableExpression::Free));
        /* semantic: free_var('res') */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    default:
      return false;
    }
}

/** group:
 * mnemonic: rol
 * opcode: 00
 * operand: ['Eb', 'Ib']
 * semantic: alloc_var('res', op0.bit);
alloc_var('count', op0.bit);
count = bit_cast(op1.val, int(op0.bit, op0.bit));
call('count_mask');
res = rol(op0.val, count);
if __expr and count != int(op0.bit, 0):
  cf.id = bit_cast(res, int_type1);
if __expr and count == int(op0.bit, 1):
  of.id = bit_cast(bit_cast(cf.id, int_type(op0.bit)) ^ (res >> (int(op0.bit,op0.bit) - int(op0.bit, 1))), int_type1);
op0.val = res;
free_var('count');
free_var('res');

 *
 * mnemonic: ror
 * opcode: 01
 * operand: ['Eb', 'Ib']
 * semantic: alloc_var('res', op0.bit);
alloc_var('count', op0.bit);
count = bit_cast(op1.val, int_type(op0.bit));
call('count_mask');
res = ror(op0.val, count);
if __expr and count != int(op0.bit, 0):
  cf.id = bit_cast(res >> (int(op0.bit, op0.bit) - int(op0.bit, 1)), int_type1);
if __expr and count == int(op0.bit, 1):
  of.id = bit_cast((res >> (int(op0.bit, op0.bit) - int(op0.bit, 1))) ^ (res >> (int(op0.bit, op0.bit) - int(op0.bit, 2))), int_type1);
op0.val = res;
free_var('count');
free_var('res');

 *
 * mnemonic: rcl
 * opcode: 02
 * operand: ['Eb', 'Ib']
 * semantic: alloc_var('res', op0.bit);
alloc_var('count', op0.bit);
count = bit_cast(op1.val, int_type(op0.bit));
call('count_mask');
alloc_var('rol_val', concat(op0.bit, ignore(' + 1')));
rol_val = bit_cast(op0.val, int_type(concat(op0.bit, ignore(' + 1'))));
rol_val |= (bit_cast(cf.id, int_type(concat(op0.bit, ignore(' + 1')))) << int(concat(op0.bit, ignore(' + 1')), op0.bit));
rol_val = rol(rol_val, bit_cast(count, int_type(concat(op0.bit, ignore(' + 1')))));
res = bit_cast(rol_val, int_type(op0.bit));
if __expr and count != int(op0.bit, 0):
  cf.id = bit_cast(rol_val >> int(concat(op0.bit, ignore(' + 1')), op0.bit), int_type1);
if __expr and count == int(op0.bit, 1):
  of.id = bit_cast(cf.id ^ bit_cast(res >> (int(op0.bit, op0.bit) - int(op0.bit, 1)), int_type1), int_type1);
op0.val = res;
free_var('rol_val');
free_var('count');
free_var('res');

 *
 * mnemonic: rcr
 * opcode: 03
 * operand: ['Eb', 'Ib']
 * semantic: alloc_var('res', op0.bit);
alloc_var('count', op0.bit);
count = bit_cast(op1.val, int(op0.bit, op0.bit));
call('count_mask');
alloc_var('ror_val', concat(op0.bit, ignore(' + 1')));
ror_val = bit_cast(op0.val, int_type(concat(op0.bit, ignore(' + 1'))));
ror_val |= (bit_cast(cf.id, int_type(concat(op0.bit, ignore(' + 1')))) << int(concat(op0.bit, ignore(' + 1')), op0.bit));
ror_val = ror(ror_val, bit_cast(count, int_type(concat(op0.bit, ignore(' + 1')))));
res = bit_cast(ror_val, int_type(op0.bit));
if __expr and count != int(op0.bit, 0):
  cf.id = bit_cast(ror_val >> int(concat(op0.bit, ignore(' + 1')), op0.bit), int_type1);
if __expr and count == int(op0.bit, 1):
  of.id = bit_cast((res >> (int(op0.bit, op0.bit) - int(op0.bit, 1))) ^ (res >> (int(op0.bit, op0.bit) - int(op0.bit, 2))), int_type1);
op0.val = res;
free_var('ror_val');
free_var('count');
free_var('res');

 *
 * mnemonic: shl
 * opcode: 04
 * operand: ['Eb', 'Ib']
 * semantic: alloc_var('res', op0.bit);
alloc_var('count', op0.bit);
count = bit_cast(op1.val, int(op0.bit, op0.bit));
call('count_mask');
res = op0.val << count;
if __expr and count != int(op0.bit, 0):
  cf.id = bit_cast(op0.val >> (int(op0.bit, op0.bit) - count), int1(1))
  call('sign_flag')
  call('zero_flag')
  call('parity_flag');
if __expr and count == int(op0.bit, 1):
  of.id = bit_cast((op0.val >> (int(op0.bit, op0.bit) - int(op0.bit, 1))) ^ (op0.val >> (int(op0.bit, op0.bit) - int(op0.bit, 2))), int1(1));
op0.val = res;
free_var('count');
free_var('res');

 *
 * mnemonic: shr
 * opcode: 05
 * operand: ['Eb', 'Ib']
 * semantic: alloc_var('res', op0.bit);
alloc_var('count', op0.bit);
count = bit_cast(op1.val, int(op0.bit, op0.bit));
call('count_mask');
res = op0.val >> count;
if __expr and count != int(op0.bit, 0):
  cf.id = bit_cast(op0.val >> (count - int(op0.bit, 1)), int1(1))
  call('sign_flag')
  call('zero_flag')
  call('parity_flag');
if __expr and count == int(op0.bit, 1):
  of.id = bit_cast((op0.val >> (int(op0.bit, op0.bit) - int(op0.bit, 1))), int1(1));
op0.val = res;
free_var('count');
free_var('res');

 *
 * mnemonic: sal
 * opcode: 06
 * operand: ['Eb', 'Ib']
 * semantic: alloc_var('res', op0.bit);
alloc_var('count', op0.bit);
count = bit_cast(op1.val, int(op0.bit, op0.bit));
call('count_mask');
res = op0.val << count;
if __expr and count != int(op0.bit, 0):
  cf.id = bit_cast(op0.val >> (int(op0.bit, op0.bit) - count), int1(1))
  call('sign_flag')
  call('zero_flag')
  call('parity_flag');
if __expr and count == int(op0.bit, 1):
  of.id = bit_cast((op0.val >> (int(op0.bit, op0.bit) - int(op0.bit, 1))) ^ (op0.val >> (int(op0.bit, op0.bit) - int(op0.bit, 2))), int1(1));
op0.val = res;
free_var('count');
free_var('res');

 *
 * mnemonic: sar
 * opcode: 07
 * operand: ['Eb', 'Ib']
 * semantic: alloc_var('res', op0.bit);
alloc_var('count', op0.bit);
count = bit_cast(op1.val, int(op0.bit, op0.bit));
call('count_mask');
res = ars(op0.val, count);
if __expr and count != int(op0.bit, 0):
  if __expr and count > int(op0.bit, op0.bit): cf.id = bit_cast(op0.val >> (int(op0.bit, op0.bit) - int(op0.bit, 1)), int1(1))
  else: cf.id = bit_cast(op0.val >> (count - int(op0.bit, 1)), int1(1))
  call('sign_flag')
  call('zero_flag')
  call('parity_flag');
if __expr and count == int(op0.bit, 1):
  of.id = int1(0);
op0.val = res;
free_var('count');
free_var('res');

 *
**/
bool X86Architecture::Table_1_c1(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    u8 ModRmByte;
    if (!rBinStrm.Read(Offset, ModRmByte))
      return false;

    x86::ModRM ModRm(ModRmByte);
    switch (ModRm.Reg())
    {
    case 0x0:
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Rol);
      if (Operand__Ev_Ib(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: alloc_var('count', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("count", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: count = bit_cast(op1.val, int(op0.bit, op0.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, rInsn.GetOperand(1), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()))));
        /* semantic: call('count_mask') */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x40),
          Expr::MakeAssign(
            Expr::MakeVar("count", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeVar("count", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3f))),
          Expr::MakeAssign(
            Expr::MakeVar("count", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeVar("count", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1f)))));
        /* semantic: res = rol(op0.val, count) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpRol, rInsn.GetOperand(0), Expr::MakeVar("count", VariableExpression::Use))));
        /* semantic: if __expr and count != int(op0.bit, 0):
          cf.id = bit_cast(res, int_type1) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondNe,
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlCf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeVar("res", VariableExpression::Use), Expr::MakeBitVector(1, 1))), nullptr)
        );
        /* semantic: if __expr and count == int(op0.bit, 1):
          of.id = bit_cast(bit_cast(cf.id, int_type(op0.bit)) ^ (res >> (int(op0.bit,op0.bit) - int(op0.bit, 1))), int_type1) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlOf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeId(X86_FlCf, &m_CpuInfo), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize())),
              Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBinOp(
                  OperationExpression::OpSub,
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)))), Expr::MakeBitVector(1, 1))), nullptr)
        );
        /* semantic: op0.val = res */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("res", VariableExpression::Use)));
        /* semantic: free_var('count') */
        AllExpr.push_back(Expr::MakeVar("count", VariableExpression::Free));
        /* semantic: free_var('res') */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x1:
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Ror);
      if (Operand__Ev_Ib(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: alloc_var('count', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("count", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: count = bit_cast(op1.val, int_type(op0.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, rInsn.GetOperand(1), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()))));
        /* semantic: call('count_mask') */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x40),
          Expr::MakeAssign(
            Expr::MakeVar("count", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeVar("count", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3f))),
          Expr::MakeAssign(
            Expr::MakeVar("count", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeVar("count", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1f)))));
        /* semantic: res = ror(op0.val, count) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpRor, rInsn.GetOperand(0), Expr::MakeVar("count", VariableExpression::Use))));
        /* semantic: if __expr and count != int(op0.bit, 0):
          cf.id = bit_cast(res >> (int(op0.bit, op0.bit) - int(op0.bit, 1)), int_type1) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondNe,
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlCf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBinOp(
                OperationExpression::OpSub,
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 1))), nullptr)
        );
        /* semantic: if __expr and count == int(op0.bit, 1):
          of.id = bit_cast((res >> (int(op0.bit, op0.bit) - int(op0.bit, 1))) ^ (res >> (int(op0.bit, op0.bit) - int(op0.bit, 2))), int_type1) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlOf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBinOp(
                  OperationExpression::OpSub,
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))),
              Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBinOp(
                  OperationExpression::OpSub,
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)))), Expr::MakeBitVector(1, 1))), nullptr)
        );
        /* semantic: op0.val = res */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("res", VariableExpression::Use)));
        /* semantic: free_var('count') */
        AllExpr.push_back(Expr::MakeVar("count", VariableExpression::Free));
        /* semantic: free_var('res') */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x2:
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Rcl);
      if (Operand__Ev_Ib(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: alloc_var('count', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("count", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: count = bit_cast(op1.val, int_type(op0.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, rInsn.GetOperand(1), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()))));
        /* semantic: call('count_mask') */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x40),
          Expr::MakeAssign(
            Expr::MakeVar("count", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeVar("count", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3f))),
          Expr::MakeAssign(
            Expr::MakeVar("count", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeVar("count", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1f)))));
        /* semantic: alloc_var('rol_val', concat(op0.bit, ignore(' + 1'))) */
        AllExpr.push_back(Expr::MakeVar("rol_val", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize() + 1));
        /* semantic: rol_val = bit_cast(op0.val, int_type(concat(op0.bit, ignore(' + 1')))) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("rol_val", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, rInsn.GetOperand(0), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize() + 1, rInsn.GetOperand(0)->GetBitSize() + 1))));
        /* semantic: rol_val |= (bit_cast(cf.id, int_type(concat(op0.bit, ignore(' + 1')))) << int(concat(op0.bit, ignore(' + 1')), op0.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("rol_val", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpOr,
            Expr::MakeVar("rol_val", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpLls,
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeId(X86_FlCf, &m_CpuInfo), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize() + 1, rInsn.GetOperand(0)->GetBitSize() + 1)),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize() + 1, rInsn.GetOperand(0)->GetBitSize()))))
        );
        /* semantic: rol_val = rol(rol_val, bit_cast(count, int_type(concat(op0.bit, ignore(' + 1'))))) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("rol_val", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpRol, Expr::MakeVar("rol_val", VariableExpression::Use), Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeVar("count", VariableExpression::Use), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize() + 1, rInsn.GetOperand(0)->GetBitSize() + 1)))));
        /* semantic: res = bit_cast(rol_val, int_type(op0.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeVar("rol_val", VariableExpression::Use), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()))));
        /* semantic: if __expr and count != int(op0.bit, 0):
          cf.id = bit_cast(rol_val >> int(concat(op0.bit, ignore(' + 1')), op0.bit), int_type1) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondNe,
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlCf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("rol_val", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize() + 1, rInsn.GetOperand(0)->GetBitSize())), Expr::MakeBitVector(1, 1))), nullptr)
        );
        /* semantic: if __expr and count == int(op0.bit, 1):
          of.id = bit_cast(cf.id ^ bit_cast(res >> (int(op0.bit, op0.bit) - int(op0.bit, 1)), int_type1), int_type1) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlOf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeId(X86_FlCf, &m_CpuInfo),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBinOp(
                  OperationExpression::OpSub,
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 1))), Expr::MakeBitVector(1, 1))), nullptr)
        );
        /* semantic: op0.val = res */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("res", VariableExpression::Use)));
        /* semantic: free_var('rol_val') */
        AllExpr.push_back(Expr::MakeVar("rol_val", VariableExpression::Free));
        /* semantic: free_var('count') */
        AllExpr.push_back(Expr::MakeVar("count", VariableExpression::Free));
        /* semantic: free_var('res') */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x3:
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Rcr);
      if (Operand__Ev_Ib(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: alloc_var('count', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("count", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: count = bit_cast(op1.val, int(op0.bit, op0.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, rInsn.GetOperand(1), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()))));
        /* semantic: call('count_mask') */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x40),
          Expr::MakeAssign(
            Expr::MakeVar("count", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeVar("count", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3f))),
          Expr::MakeAssign(
            Expr::MakeVar("count", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeVar("count", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1f)))));
        /* semantic: alloc_var('ror_val', concat(op0.bit, ignore(' + 1'))) */
        AllExpr.push_back(Expr::MakeVar("ror_val", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize() + 1));
        /* semantic: ror_val = bit_cast(op0.val, int_type(concat(op0.bit, ignore(' + 1')))) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("ror_val", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, rInsn.GetOperand(0), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize() + 1, rInsn.GetOperand(0)->GetBitSize() + 1))));
        /* semantic: ror_val |= (bit_cast(cf.id, int_type(concat(op0.bit, ignore(' + 1')))) << int(concat(op0.bit, ignore(' + 1')), op0.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("ror_val", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpOr,
            Expr::MakeVar("ror_val", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpLls,
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeId(X86_FlCf, &m_CpuInfo), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize() + 1, rInsn.GetOperand(0)->GetBitSize() + 1)),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize() + 1, rInsn.GetOperand(0)->GetBitSize()))))
        );
        /* semantic: ror_val = ror(ror_val, bit_cast(count, int_type(concat(op0.bit, ignore(' + 1'))))) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("ror_val", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpRor, Expr::MakeVar("ror_val", VariableExpression::Use), Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeVar("count", VariableExpression::Use), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize() + 1, rInsn.GetOperand(0)->GetBitSize() + 1)))));
        /* semantic: res = bit_cast(ror_val, int_type(op0.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeVar("ror_val", VariableExpression::Use), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()))));
        /* semantic: if __expr and count != int(op0.bit, 0):
          cf.id = bit_cast(ror_val >> int(concat(op0.bit, ignore(' + 1')), op0.bit), int_type1) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondNe,
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlCf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("ror_val", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize() + 1, rInsn.GetOperand(0)->GetBitSize())), Expr::MakeBitVector(1, 1))), nullptr)
        );
        /* semantic: if __expr and count == int(op0.bit, 1):
          of.id = bit_cast((res >> (int(op0.bit, op0.bit) - int(op0.bit, 1))) ^ (res >> (int(op0.bit, op0.bit) - int(op0.bit, 2))), int_type1) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlOf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBinOp(
                  OperationExpression::OpSub,
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))),
              Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBinOp(
                  OperationExpression::OpSub,
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)))), Expr::MakeBitVector(1, 1))), nullptr)
        );
        /* semantic: op0.val = res */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("res", VariableExpression::Use)));
        /* semantic: free_var('ror_val') */
        AllExpr.push_back(Expr::MakeVar("ror_val", VariableExpression::Free));
        /* semantic: free_var('count') */
        AllExpr.push_back(Expr::MakeVar("count", VariableExpression::Free));
        /* semantic: free_var('res') */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x4:
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Shl);
      if (Operand__Ev_Ib(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: alloc_var('count', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("count", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: count = bit_cast(op1.val, int(op0.bit, op0.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, rInsn.GetOperand(1), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()))));
        /* semantic: call('count_mask') */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x40),
          Expr::MakeAssign(
            Expr::MakeVar("count", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeVar("count", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3f))),
          Expr::MakeAssign(
            Expr::MakeVar("count", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeVar("count", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1f)))));
        /* semantic: res = op0.val << count */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpLls,
            rInsn.GetOperand(0),
            Expr::MakeVar("count", VariableExpression::Use))));
        /* semantic: if __expr and count != int(op0.bit, 0):
          cf.id = bit_cast(op0.val >> (int(op0.bit, op0.bit) - count), int1(1))
          call('sign_flag')
          call('zero_flag')
          call('parity_flag') */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondNe,
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeBind({
          Expr::MakeAssign(
            Expr::MakeId(X86_FlCf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              rInsn.GetOperand(0),
              Expr::MakeBinOp(
                OperationExpression::OpSub,
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                Expr::MakeVar("count", VariableExpression::Use))), Expr::MakeBitVector(1, 0x1))),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlSf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBinOp(
                OperationExpression::OpSub,
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlZf, &m_CpuInfo),
            Expr::MakeTernaryCond(ConditionExpression::CondEq,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
            Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))),
          Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)),
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBitVector(1, 0x1)),
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeId(X86_FlPf, &m_CpuInfo),
            Expr::MakeVar("pf_tmp", VariableExpression::Use)),
          Expr::MakeVar("pf_tmp", VariableExpression::Free)})
        , nullptr)
        );
        /* semantic: if __expr and count == int(op0.bit, 1):
          of.id = bit_cast((op0.val >> (int(op0.bit, op0.bit) - int(op0.bit, 1))) ^ (op0.val >> (int(op0.bit, op0.bit) - int(op0.bit, 2))), int1(1)) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlOf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(
                OperationExpression::OpLrs,
                rInsn.GetOperand(0),
                Expr::MakeBinOp(
                  OperationExpression::OpSub,
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))),
              Expr::MakeBinOp(
                OperationExpression::OpLrs,
                rInsn.GetOperand(0),
                Expr::MakeBinOp(
                  OperationExpression::OpSub,
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)))), Expr::MakeBitVector(1, 0x1))), nullptr)
        );
        /* semantic: op0.val = res */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("res", VariableExpression::Use)));
        /* semantic: free_var('count') */
        AllExpr.push_back(Expr::MakeVar("count", VariableExpression::Free));
        /* semantic: free_var('res') */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x5:
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Shr);
      if (Operand__Ev_Ib(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: alloc_var('count', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("count", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: count = bit_cast(op1.val, int(op0.bit, op0.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, rInsn.GetOperand(1), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()))));
        /* semantic: call('count_mask') */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x40),
          Expr::MakeAssign(
            Expr::MakeVar("count", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeVar("count", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3f))),
          Expr::MakeAssign(
            Expr::MakeVar("count", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeVar("count", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1f)))));
        /* semantic: res = op0.val >> count */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpLrs,
            rInsn.GetOperand(0),
            Expr::MakeVar("count", VariableExpression::Use))));
        /* semantic: if __expr and count != int(op0.bit, 0):
          cf.id = bit_cast(op0.val >> (count - int(op0.bit, 1)), int1(1))
          call('sign_flag')
          call('zero_flag')
          call('parity_flag') */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondNe,
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeBind({
          Expr::MakeAssign(
            Expr::MakeId(X86_FlCf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              rInsn.GetOperand(0),
              Expr::MakeBinOp(
                OperationExpression::OpSub,
                Expr::MakeVar("count", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlSf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBinOp(
                OperationExpression::OpSub,
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlZf, &m_CpuInfo),
            Expr::MakeTernaryCond(ConditionExpression::CondEq,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
            Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))),
          Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)),
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBitVector(1, 0x1)),
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeId(X86_FlPf, &m_CpuInfo),
            Expr::MakeVar("pf_tmp", VariableExpression::Use)),
          Expr::MakeVar("pf_tmp", VariableExpression::Free)})
        , nullptr)
        );
        /* semantic: if __expr and count == int(op0.bit, 1):
          of.id = bit_cast((op0.val >> (int(op0.bit, op0.bit) - int(op0.bit, 1))), int1(1)) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlOf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              rInsn.GetOperand(0),
              Expr::MakeBinOp(
                OperationExpression::OpSub,
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))), nullptr)
        );
        /* semantic: op0.val = res */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("res", VariableExpression::Use)));
        /* semantic: free_var('count') */
        AllExpr.push_back(Expr::MakeVar("count", VariableExpression::Free));
        /* semantic: free_var('res') */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x6:
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Sal);
      if (Operand__Ev_Ib(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: alloc_var('count', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("count", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: count = bit_cast(op1.val, int(op0.bit, op0.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, rInsn.GetOperand(1), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()))));
        /* semantic: call('count_mask') */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x40),
          Expr::MakeAssign(
            Expr::MakeVar("count", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeVar("count", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3f))),
          Expr::MakeAssign(
            Expr::MakeVar("count", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeVar("count", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1f)))));
        /* semantic: res = op0.val << count */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpLls,
            rInsn.GetOperand(0),
            Expr::MakeVar("count", VariableExpression::Use))));
        /* semantic: if __expr and count != int(op0.bit, 0):
          cf.id = bit_cast(op0.val >> (int(op0.bit, op0.bit) - count), int1(1))
          call('sign_flag')
          call('zero_flag')
          call('parity_flag') */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondNe,
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeBind({
          Expr::MakeAssign(
            Expr::MakeId(X86_FlCf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              rInsn.GetOperand(0),
              Expr::MakeBinOp(
                OperationExpression::OpSub,
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                Expr::MakeVar("count", VariableExpression::Use))), Expr::MakeBitVector(1, 0x1))),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlSf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBinOp(
                OperationExpression::OpSub,
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlZf, &m_CpuInfo),
            Expr::MakeTernaryCond(ConditionExpression::CondEq,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
            Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))),
          Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)),
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBitVector(1, 0x1)),
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeId(X86_FlPf, &m_CpuInfo),
            Expr::MakeVar("pf_tmp", VariableExpression::Use)),
          Expr::MakeVar("pf_tmp", VariableExpression::Free)})
        , nullptr)
        );
        /* semantic: if __expr and count == int(op0.bit, 1):
          of.id = bit_cast((op0.val >> (int(op0.bit, op0.bit) - int(op0.bit, 1))) ^ (op0.val >> (int(op0.bit, op0.bit) - int(op0.bit, 2))), int1(1)) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlOf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(
                OperationExpression::OpLrs,
                rInsn.GetOperand(0),
                Expr::MakeBinOp(
                  OperationExpression::OpSub,
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))),
              Expr::MakeBinOp(
                OperationExpression::OpLrs,
                rInsn.GetOperand(0),
                Expr::MakeBinOp(
                  OperationExpression::OpSub,
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)))), Expr::MakeBitVector(1, 0x1))), nullptr)
        );
        /* semantic: op0.val = res */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("res", VariableExpression::Use)));
        /* semantic: free_var('count') */
        AllExpr.push_back(Expr::MakeVar("count", VariableExpression::Free));
        /* semantic: free_var('res') */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x7:
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Sar);
      if (Operand__Ev_Ib(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: alloc_var('count', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("count", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: count = bit_cast(op1.val, int(op0.bit, op0.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, rInsn.GetOperand(1), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()))));
        /* semantic: call('count_mask') */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x40),
          Expr::MakeAssign(
            Expr::MakeVar("count", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeVar("count", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3f))),
          Expr::MakeAssign(
            Expr::MakeVar("count", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeVar("count", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1f)))));
        /* semantic: res = ars(op0.val, count) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpArs, rInsn.GetOperand(0), Expr::MakeVar("count", VariableExpression::Use))));
        /* semantic: if __expr and count != int(op0.bit, 0):
          if __expr and count > int(op0.bit, op0.bit): cf.id = bit_cast(op0.val >> (int(op0.bit, op0.bit) - int(op0.bit, 1)), int1(1))
          else: cf.id = bit_cast(op0.val >> (count - int(op0.bit, 1)), int1(1))
          call('sign_flag')
          call('zero_flag')
          call('parity_flag') */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondNe,
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeBind({
          Expr::MakeIfElseCond(
            ConditionExpression::CondUgt,
            Expr::MakeVar("count", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeAssign(
              Expr::MakeId(X86_FlCf, &m_CpuInfo),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                rInsn.GetOperand(0),
                Expr::MakeBinOp(
                  OperationExpression::OpSub,
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))),
            Expr::MakeAssign(
              Expr::MakeId(X86_FlCf, &m_CpuInfo),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                rInsn.GetOperand(0),
                Expr::MakeBinOp(
                  OperationExpression::OpSub,
                  Expr::MakeVar("count", VariableExpression::Use),
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1)))),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlSf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBinOp(
                OperationExpression::OpSub,
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlZf, &m_CpuInfo),
            Expr::MakeTernaryCond(ConditionExpression::CondEq,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
            Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))),
          Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)),
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBitVector(1, 0x1)),
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeId(X86_FlPf, &m_CpuInfo),
            Expr::MakeVar("pf_tmp", VariableExpression::Use)),
          Expr::MakeVar("pf_tmp", VariableExpression::Free)})
        , nullptr)
        );
        /* semantic: if __expr and count == int(op0.bit, 1):
          of.id = int1(0) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlOf, &m_CpuInfo),
            Expr::MakeBitVector(1, 0x0)), nullptr)
        );
        /* semantic: op0.val = res */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("res", VariableExpression::Use)));
        /* semantic: free_var('count') */
        AllExpr.push_back(Expr::MakeVar("count", VariableExpression::Free));
        /* semantic: free_var('res') */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    default:
      return false;
    }
}

/** instruction
 * mnemonic: retn
 * operand: ['Iw']
 * opcode: c2
 * operation_type: ['ret']
 * semantic: program.id = stack.mem;
stack.id += stack.size;
stack.id += bit_cast(op0.val, int(stack.bit, stack.bit));

**/
bool X86Architecture::Table_1_c2(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Retn);
    rInsn.SubType() |= Instruction::ReturnType;
    if (Operand__Iw(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    {
      Expression::LSPType AllExpr;
      /* semantic: program.id = stack.mem */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::ProgramPointerRegister, rInsn.GetMode()), &m_CpuInfo),
        Expr::MakeMem(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), nullptr, Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo))));
      /* semantic: stack.id += stack.size */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
        Expr::MakeBinOp(
          OperationExpression::OpAdd,
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeBitVector(
            m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())),
            m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())) / 8)))
      );
      /* semantic: stack.id += bit_cast(op0.val, int(stack.bit, stack.bit)) */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
        Expr::MakeBinOp(
          OperationExpression::OpAdd,
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, rInsn.GetOperand(0), Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()))))))
      );
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instruction
 * mnemonic: ret
 * operation_type: ['ret']
 * opcode: c3
 * semantic: program.id = stack.mem;
stack.id += stack.size;

**/
bool X86Architecture::Table_1_c3(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Ret);
    rInsn.SubType() |= Instruction::ReturnType;
    {
      Expression::LSPType AllExpr;
      /* semantic: program.id = stack.mem */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::ProgramPointerRegister, rInsn.GetMode()), &m_CpuInfo),
        Expr::MakeMem(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), nullptr, Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo))));
      /* semantic: stack.id += stack.size */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
        Expr::MakeBinOp(
          OperationExpression::OpAdd,
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeBitVector(
            m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())),
            m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())) / 8)))
      );
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instructions
 * opcode: c4
 *
 * mnemonic: les
 * operand: ['Gv', 'Mp']
 *
 * mnemonic: VEX3
 * attr: ['m64']
 * constraint: pfx3
 *
**/
bool X86Architecture::Table_1_c4(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (Mode == X86_Bit_64)
    {
      rInsn.Length()++;
      rInsn.Prefix() |= X86_Prefix_VEX3;
      return Disassemble(rBinStrm, Offset, rInsn, Mode);
    }
    else
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Les);
      if (Operand__Gv_Mp(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
}

/** instructions
 * opcode: c5
 *
 * mnemonic: lds
 * operand: ['Gv', 'Mp']
 *
 * mnemonic: VEX2
 * attr: ['m64']
 * constraint: pfx2
 *
**/
bool X86Architecture::Table_1_c5(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (Mode == X86_Bit_64)
    {
      rInsn.Length()++;
      rInsn.Prefix() |= X86_Prefix_VEX2;
      return Disassemble(rBinStrm, Offset, rInsn, Mode);
    }
    else
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Lds);
      if (Operand__Gv_Mp(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
}

/** group:
 * mnemonic: mov
 * opcode: 00
 * semantic: op0.val = op1.val;

 *
 * opcode: 01
 * invalid
 *
 * opcode: 02
 * invalid
 *
 * opcode: 03
 * invalid
 *
 * opcode: 04
 * invalid
 *
 * opcode: 05
 * invalid
 *
 * opcode: 06
 * invalid
 *
 * opcode: 07
 * invalid
 *
**/
bool X86Architecture::Table_1_c6(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    u8 ModRmByte;
    if (!rBinStrm.Read(Offset, ModRmByte))
      return false;

    x86::ModRM ModRm(ModRmByte);
    switch (ModRm.Reg())
    {
    case 0x0:
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Mov);
      if (Operand__Eb_Ib(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: op0.val = op1.val */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          rInsn.GetOperand(1)));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x1:
      return false; /* INVALID */
    case 0x2:
      return false; /* INVALID */
    case 0x3:
      return false; /* INVALID */
    case 0x4:
      return false; /* INVALID */
    case 0x5:
      return false; /* INVALID */
    case 0x6:
      return false; /* INVALID */
    case 0x7:
      return false; /* INVALID */
    default:
      return false;
    }
}

/** group:
 * mnemonic: mov
 * opcode: 00
 * operand: ['Eb', 'Ib']
 * semantic: op0.val = op1.val;

 *
 * operand: ['Eb', 'Ib']
 * opcode: 01
 * invalid
 *
 * operand: ['Eb', 'Ib']
 * opcode: 02
 * invalid
 *
 * operand: ['Eb', 'Ib']
 * opcode: 03
 * invalid
 *
 * operand: ['Eb', 'Ib']
 * opcode: 04
 * invalid
 *
 * operand: ['Eb', 'Ib']
 * opcode: 05
 * invalid
 *
 * operand: ['Eb', 'Ib']
 * opcode: 06
 * invalid
 *
 * operand: ['Eb', 'Ib']
 * opcode: 07
 * invalid
 *
**/
bool X86Architecture::Table_1_c7(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    u8 ModRmByte;
    if (!rBinStrm.Read(Offset, ModRmByte))
      return false;

    x86::ModRM ModRm(ModRmByte);
    switch (ModRm.Reg())
    {
    case 0x0:
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Mov);
      if (Operand__Ev_Iz(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: op0.val = op1.val */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          rInsn.GetOperand(1)));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x1:
      return false; /* INVALID */
    case 0x2:
      return false; /* INVALID */
    case 0x3:
      return false; /* INVALID */
    case 0x4:
      return false; /* INVALID */
    case 0x5:
      return false; /* INVALID */
    case 0x6:
      return false; /* INVALID */
    case 0x7:
      return false; /* INVALID */
    default:
      return false;
    }
}

/** instruction
 * mnemonic: enter
 * operand: ['Iw', 'Ib']
 * opcode: c8
 * cpu_model: >= X86_Arch_80186
 * constraint: d64
**/
bool X86Architecture::Table_1_c8(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_80186)
    {
      if (!(rInsn.Prefix() & X86_Prefix_OpSize))
      {
        rInsn.Prefix() |= X86_Prefix_REX_w; /* d64/df64 constraint */
      }
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Enter);
      if (Operand__Iw_Ib(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else
      return false;
}

/** instruction
 * mnemonic: leave
 * opcode: c9
 * semantic: ['stack.id = frame.id', 'frame.id = stack.mem', 'stack.id += stack.size']
 * cpu_model: >= X86_Arch_80186
 * constraint: d64
**/
bool X86Architecture::Table_1_c9(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_80186)
    {
      if (!(rInsn.Prefix() & X86_Prefix_OpSize))
      {
        rInsn.Prefix() |= X86_Prefix_REX_w; /* d64/df64 constraint */
      }
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Leave);
      {
        Expression::LSPType AllExpr;
        /* semantic: stack.id = frame.id */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackFrameRegister, rInsn.GetMode()), &m_CpuInfo)));
        /* semantic: frame.id = stack.mem */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackFrameRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeMem(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), nullptr, Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo))));
        /* semantic: stack.id += stack.size */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeBinOp(
            OperationExpression::OpAdd,
            Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
            Expr::MakeBitVector(
              m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())),
              m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())) / 8)))
        );
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    else
      return false;
}

/** instruction
 * mnemonic: retf
 * operand: ['Iw']
 * opcode: ca
 * operation_type: ['ret']
**/
bool X86Architecture::Table_1_ca(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Retf);
    rInsn.SubType() |= Instruction::ReturnType;
    if (Operand__Iw(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: retf
 * operation_type: ['ret']
 * opcode: cb
**/
bool X86Architecture::Table_1_cb(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Retf);
    rInsn.SubType() |= Instruction::ReturnType;
    return true;
}

/** instruction
 * mnemonic: int
 * operand: ['3']
 * opcode: cc
**/
bool X86Architecture::Table_1_cc(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Int);
    if (Operand__3(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: int
 * operand: ['Ib']
 * opcode: cd
**/
bool X86Architecture::Table_1_cd(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Int);
    if (Operand__Ib(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: into
 * opcode: ce
 * attr: ['nm64']
**/
bool X86Architecture::Table_1_ce(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (Mode != X86_Bit_64)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Into);
      return true;
    }
    else
      return false;
}

/** instruction
 * mnemonic: iret
 * operation_type: ['ret']
 * opcode: cf
**/
bool X86Architecture::Table_1_cf(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Iret);
    rInsn.SubType() |= Instruction::ReturnType;
    return true;
}

/** group:
 * mnemonic: rol
 * opcode: 00
 * operand: ['Ev', 'Ib']
 * semantic: alloc_var('res', op0.bit);
alloc_var('count', op0.bit);
count = bit_cast(op1.val, int(op0.bit, op0.bit));
call('count_mask');
res = rol(op0.val, count);
if __expr and count != int(op0.bit, 0):
  cf.id = bit_cast(res, int_type1);
if __expr and count == int(op0.bit, 1):
  of.id = bit_cast(bit_cast(cf.id, int_type(op0.bit)) ^ (res >> (int(op0.bit,op0.bit) - int(op0.bit, 1))), int_type1);
op0.val = res;
free_var('count');
free_var('res');

 *
 * mnemonic: ror
 * opcode: 01
 * operand: ['Ev', 'Ib']
 * semantic: alloc_var('res', op0.bit);
alloc_var('count', op0.bit);
count = bit_cast(op1.val, int_type(op0.bit));
call('count_mask');
res = ror(op0.val, count);
if __expr and count != int(op0.bit, 0):
  cf.id = bit_cast(res >> (int(op0.bit, op0.bit) - int(op0.bit, 1)), int_type1);
if __expr and count == int(op0.bit, 1):
  of.id = bit_cast((res >> (int(op0.bit, op0.bit) - int(op0.bit, 1))) ^ (res >> (int(op0.bit, op0.bit) - int(op0.bit, 2))), int_type1);
op0.val = res;
free_var('count');
free_var('res');

 *
 * mnemonic: rcl
 * opcode: 02
 * operand: ['Ev', 'Ib']
 * semantic: alloc_var('res', op0.bit);
alloc_var('count', op0.bit);
count = bit_cast(op1.val, int_type(op0.bit));
call('count_mask');
alloc_var('rol_val', concat(op0.bit, ignore(' + 1')));
rol_val = bit_cast(op0.val, int_type(concat(op0.bit, ignore(' + 1'))));
rol_val |= (bit_cast(cf.id, int_type(concat(op0.bit, ignore(' + 1')))) << int(concat(op0.bit, ignore(' + 1')), op0.bit));
rol_val = rol(rol_val, bit_cast(count, int_type(concat(op0.bit, ignore(' + 1')))));
res = bit_cast(rol_val, int_type(op0.bit));
if __expr and count != int(op0.bit, 0):
  cf.id = bit_cast(rol_val >> int(concat(op0.bit, ignore(' + 1')), op0.bit), int_type1);
if __expr and count == int(op0.bit, 1):
  of.id = bit_cast(cf.id ^ bit_cast(res >> (int(op0.bit, op0.bit) - int(op0.bit, 1)), int_type1), int_type1);
op0.val = res;
free_var('rol_val');
free_var('count');
free_var('res');

 *
 * mnemonic: rcr
 * opcode: 03
 * operand: ['Ev', 'Ib']
 * semantic: alloc_var('res', op0.bit);
alloc_var('count', op0.bit);
count = bit_cast(op1.val, int(op0.bit, op0.bit));
call('count_mask');
alloc_var('ror_val', concat(op0.bit, ignore(' + 1')));
ror_val = bit_cast(op0.val, int_type(concat(op0.bit, ignore(' + 1'))));
ror_val |= (bit_cast(cf.id, int_type(concat(op0.bit, ignore(' + 1')))) << int(concat(op0.bit, ignore(' + 1')), op0.bit));
ror_val = ror(ror_val, bit_cast(count, int_type(concat(op0.bit, ignore(' + 1')))));
res = bit_cast(ror_val, int_type(op0.bit));
if __expr and count != int(op0.bit, 0):
  cf.id = bit_cast(ror_val >> int(concat(op0.bit, ignore(' + 1')), op0.bit), int_type1);
if __expr and count == int(op0.bit, 1):
  of.id = bit_cast((res >> (int(op0.bit, op0.bit) - int(op0.bit, 1))) ^ (res >> (int(op0.bit, op0.bit) - int(op0.bit, 2))), int_type1);
op0.val = res;
free_var('ror_val');
free_var('count');
free_var('res');

 *
 * mnemonic: shl
 * opcode: 04
 * operand: ['Ev', 'Ib']
 * semantic: alloc_var('res', op0.bit);
alloc_var('count', op0.bit);
count = bit_cast(op1.val, int(op0.bit, op0.bit));
call('count_mask');
res = op0.val << count;
if __expr and count != int(op0.bit, 0):
  cf.id = bit_cast(op0.val >> (int(op0.bit, op0.bit) - count), int1(1))
  call('sign_flag')
  call('zero_flag')
  call('parity_flag');
if __expr and count == int(op0.bit, 1):
  of.id = bit_cast((op0.val >> (int(op0.bit, op0.bit) - int(op0.bit, 1))) ^ (op0.val >> (int(op0.bit, op0.bit) - int(op0.bit, 2))), int1(1));
op0.val = res;
free_var('count');
free_var('res');

 *
 * mnemonic: shr
 * opcode: 05
 * operand: ['Ev', 'Ib']
 * semantic: alloc_var('res', op0.bit);
alloc_var('count', op0.bit);
count = bit_cast(op1.val, int(op0.bit, op0.bit));
call('count_mask');
res = op0.val >> count;
if __expr and count != int(op0.bit, 0):
  cf.id = bit_cast(op0.val >> (count - int(op0.bit, 1)), int1(1))
  call('sign_flag')
  call('zero_flag')
  call('parity_flag');
if __expr and count == int(op0.bit, 1):
  of.id = bit_cast((op0.val >> (int(op0.bit, op0.bit) - int(op0.bit, 1))), int1(1));
op0.val = res;
free_var('count');
free_var('res');

 *
 * mnemonic: sal
 * opcode: 06
 * operand: ['Ev', 'Ib']
 * semantic: alloc_var('res', op0.bit);
alloc_var('count', op0.bit);
count = bit_cast(op1.val, int(op0.bit, op0.bit));
call('count_mask');
res = op0.val << count;
if __expr and count != int(op0.bit, 0):
  cf.id = bit_cast(op0.val >> (int(op0.bit, op0.bit) - count), int1(1))
  call('sign_flag')
  call('zero_flag')
  call('parity_flag');
if __expr and count == int(op0.bit, 1):
  of.id = bit_cast((op0.val >> (int(op0.bit, op0.bit) - int(op0.bit, 1))) ^ (op0.val >> (int(op0.bit, op0.bit) - int(op0.bit, 2))), int1(1));
op0.val = res;
free_var('count');
free_var('res');

 *
 * mnemonic: sar
 * opcode: 07
 * operand: ['Ev', 'Ib']
 * semantic: alloc_var('res', op0.bit);
alloc_var('count', op0.bit);
count = bit_cast(op1.val, int(op0.bit, op0.bit));
call('count_mask');
res = ars(op0.val, count);
if __expr and count != int(op0.bit, 0):
  if __expr and count > int(op0.bit, op0.bit): cf.id = bit_cast(op0.val >> (int(op0.bit, op0.bit) - int(op0.bit, 1)), int1(1))
  else: cf.id = bit_cast(op0.val >> (count - int(op0.bit, 1)), int1(1))
  call('sign_flag')
  call('zero_flag')
  call('parity_flag');
if __expr and count == int(op0.bit, 1):
  of.id = int1(0);
op0.val = res;
free_var('count');
free_var('res');

 *
**/
bool X86Architecture::Table_1_d0(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    u8 ModRmByte;
    if (!rBinStrm.Read(Offset, ModRmByte))
      return false;

    x86::ModRM ModRm(ModRmByte);
    switch (ModRm.Reg())
    {
    case 0x0:
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Rol);
      if (Operand__Eb_1(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: alloc_var('count', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("count", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: count = bit_cast(op1.val, int(op0.bit, op0.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, rInsn.GetOperand(1), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()))));
        /* semantic: call('count_mask') */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x40),
          Expr::MakeAssign(
            Expr::MakeVar("count", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeVar("count", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3f))),
          Expr::MakeAssign(
            Expr::MakeVar("count", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeVar("count", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1f)))));
        /* semantic: res = rol(op0.val, count) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpRol, rInsn.GetOperand(0), Expr::MakeVar("count", VariableExpression::Use))));
        /* semantic: if __expr and count != int(op0.bit, 0):
          cf.id = bit_cast(res, int_type1) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondNe,
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlCf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeVar("res", VariableExpression::Use), Expr::MakeBitVector(1, 1))), nullptr)
        );
        /* semantic: if __expr and count == int(op0.bit, 1):
          of.id = bit_cast(bit_cast(cf.id, int_type(op0.bit)) ^ (res >> (int(op0.bit,op0.bit) - int(op0.bit, 1))), int_type1) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlOf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeId(X86_FlCf, &m_CpuInfo), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize())),
              Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBinOp(
                  OperationExpression::OpSub,
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)))), Expr::MakeBitVector(1, 1))), nullptr)
        );
        /* semantic: op0.val = res */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("res", VariableExpression::Use)));
        /* semantic: free_var('count') */
        AllExpr.push_back(Expr::MakeVar("count", VariableExpression::Free));
        /* semantic: free_var('res') */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x1:
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Ror);
      if (Operand__Eb_1(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: alloc_var('count', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("count", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: count = bit_cast(op1.val, int_type(op0.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, rInsn.GetOperand(1), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()))));
        /* semantic: call('count_mask') */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x40),
          Expr::MakeAssign(
            Expr::MakeVar("count", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeVar("count", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3f))),
          Expr::MakeAssign(
            Expr::MakeVar("count", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeVar("count", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1f)))));
        /* semantic: res = ror(op0.val, count) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpRor, rInsn.GetOperand(0), Expr::MakeVar("count", VariableExpression::Use))));
        /* semantic: if __expr and count != int(op0.bit, 0):
          cf.id = bit_cast(res >> (int(op0.bit, op0.bit) - int(op0.bit, 1)), int_type1) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondNe,
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlCf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBinOp(
                OperationExpression::OpSub,
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 1))), nullptr)
        );
        /* semantic: if __expr and count == int(op0.bit, 1):
          of.id = bit_cast((res >> (int(op0.bit, op0.bit) - int(op0.bit, 1))) ^ (res >> (int(op0.bit, op0.bit) - int(op0.bit, 2))), int_type1) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlOf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBinOp(
                  OperationExpression::OpSub,
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))),
              Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBinOp(
                  OperationExpression::OpSub,
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)))), Expr::MakeBitVector(1, 1))), nullptr)
        );
        /* semantic: op0.val = res */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("res", VariableExpression::Use)));
        /* semantic: free_var('count') */
        AllExpr.push_back(Expr::MakeVar("count", VariableExpression::Free));
        /* semantic: free_var('res') */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x2:
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Rcl);
      if (Operand__Eb_1(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: alloc_var('count', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("count", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: count = bit_cast(op1.val, int_type(op0.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, rInsn.GetOperand(1), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()))));
        /* semantic: call('count_mask') */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x40),
          Expr::MakeAssign(
            Expr::MakeVar("count", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeVar("count", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3f))),
          Expr::MakeAssign(
            Expr::MakeVar("count", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeVar("count", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1f)))));
        /* semantic: alloc_var('rol_val', concat(op0.bit, ignore(' + 1'))) */
        AllExpr.push_back(Expr::MakeVar("rol_val", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize() + 1));
        /* semantic: rol_val = bit_cast(op0.val, int_type(concat(op0.bit, ignore(' + 1')))) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("rol_val", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, rInsn.GetOperand(0), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize() + 1, rInsn.GetOperand(0)->GetBitSize() + 1))));
        /* semantic: rol_val |= (bit_cast(cf.id, int_type(concat(op0.bit, ignore(' + 1')))) << int(concat(op0.bit, ignore(' + 1')), op0.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("rol_val", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpOr,
            Expr::MakeVar("rol_val", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpLls,
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeId(X86_FlCf, &m_CpuInfo), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize() + 1, rInsn.GetOperand(0)->GetBitSize() + 1)),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize() + 1, rInsn.GetOperand(0)->GetBitSize()))))
        );
        /* semantic: rol_val = rol(rol_val, bit_cast(count, int_type(concat(op0.bit, ignore(' + 1'))))) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("rol_val", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpRol, Expr::MakeVar("rol_val", VariableExpression::Use), Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeVar("count", VariableExpression::Use), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize() + 1, rInsn.GetOperand(0)->GetBitSize() + 1)))));
        /* semantic: res = bit_cast(rol_val, int_type(op0.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeVar("rol_val", VariableExpression::Use), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()))));
        /* semantic: if __expr and count != int(op0.bit, 0):
          cf.id = bit_cast(rol_val >> int(concat(op0.bit, ignore(' + 1')), op0.bit), int_type1) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondNe,
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlCf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("rol_val", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize() + 1, rInsn.GetOperand(0)->GetBitSize())), Expr::MakeBitVector(1, 1))), nullptr)
        );
        /* semantic: if __expr and count == int(op0.bit, 1):
          of.id = bit_cast(cf.id ^ bit_cast(res >> (int(op0.bit, op0.bit) - int(op0.bit, 1)), int_type1), int_type1) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlOf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeId(X86_FlCf, &m_CpuInfo),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBinOp(
                  OperationExpression::OpSub,
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 1))), Expr::MakeBitVector(1, 1))), nullptr)
        );
        /* semantic: op0.val = res */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("res", VariableExpression::Use)));
        /* semantic: free_var('rol_val') */
        AllExpr.push_back(Expr::MakeVar("rol_val", VariableExpression::Free));
        /* semantic: free_var('count') */
        AllExpr.push_back(Expr::MakeVar("count", VariableExpression::Free));
        /* semantic: free_var('res') */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x3:
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Rcr);
      if (Operand__Eb_1(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: alloc_var('count', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("count", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: count = bit_cast(op1.val, int(op0.bit, op0.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, rInsn.GetOperand(1), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()))));
        /* semantic: call('count_mask') */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x40),
          Expr::MakeAssign(
            Expr::MakeVar("count", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeVar("count", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3f))),
          Expr::MakeAssign(
            Expr::MakeVar("count", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeVar("count", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1f)))));
        /* semantic: alloc_var('ror_val', concat(op0.bit, ignore(' + 1'))) */
        AllExpr.push_back(Expr::MakeVar("ror_val", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize() + 1));
        /* semantic: ror_val = bit_cast(op0.val, int_type(concat(op0.bit, ignore(' + 1')))) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("ror_val", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, rInsn.GetOperand(0), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize() + 1, rInsn.GetOperand(0)->GetBitSize() + 1))));
        /* semantic: ror_val |= (bit_cast(cf.id, int_type(concat(op0.bit, ignore(' + 1')))) << int(concat(op0.bit, ignore(' + 1')), op0.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("ror_val", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpOr,
            Expr::MakeVar("ror_val", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpLls,
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeId(X86_FlCf, &m_CpuInfo), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize() + 1, rInsn.GetOperand(0)->GetBitSize() + 1)),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize() + 1, rInsn.GetOperand(0)->GetBitSize()))))
        );
        /* semantic: ror_val = ror(ror_val, bit_cast(count, int_type(concat(op0.bit, ignore(' + 1'))))) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("ror_val", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpRor, Expr::MakeVar("ror_val", VariableExpression::Use), Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeVar("count", VariableExpression::Use), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize() + 1, rInsn.GetOperand(0)->GetBitSize() + 1)))));
        /* semantic: res = bit_cast(ror_val, int_type(op0.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeVar("ror_val", VariableExpression::Use), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()))));
        /* semantic: if __expr and count != int(op0.bit, 0):
          cf.id = bit_cast(ror_val >> int(concat(op0.bit, ignore(' + 1')), op0.bit), int_type1) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondNe,
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlCf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("ror_val", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize() + 1, rInsn.GetOperand(0)->GetBitSize())), Expr::MakeBitVector(1, 1))), nullptr)
        );
        /* semantic: if __expr and count == int(op0.bit, 1):
          of.id = bit_cast((res >> (int(op0.bit, op0.bit) - int(op0.bit, 1))) ^ (res >> (int(op0.bit, op0.bit) - int(op0.bit, 2))), int_type1) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlOf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBinOp(
                  OperationExpression::OpSub,
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))),
              Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBinOp(
                  OperationExpression::OpSub,
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)))), Expr::MakeBitVector(1, 1))), nullptr)
        );
        /* semantic: op0.val = res */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("res", VariableExpression::Use)));
        /* semantic: free_var('ror_val') */
        AllExpr.push_back(Expr::MakeVar("ror_val", VariableExpression::Free));
        /* semantic: free_var('count') */
        AllExpr.push_back(Expr::MakeVar("count", VariableExpression::Free));
        /* semantic: free_var('res') */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x4:
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Shl);
      if (Operand__Eb_1(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: alloc_var('count', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("count", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: count = bit_cast(op1.val, int(op0.bit, op0.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, rInsn.GetOperand(1), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()))));
        /* semantic: call('count_mask') */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x40),
          Expr::MakeAssign(
            Expr::MakeVar("count", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeVar("count", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3f))),
          Expr::MakeAssign(
            Expr::MakeVar("count", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeVar("count", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1f)))));
        /* semantic: res = op0.val << count */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpLls,
            rInsn.GetOperand(0),
            Expr::MakeVar("count", VariableExpression::Use))));
        /* semantic: if __expr and count != int(op0.bit, 0):
          cf.id = bit_cast(op0.val >> (int(op0.bit, op0.bit) - count), int1(1))
          call('sign_flag')
          call('zero_flag')
          call('parity_flag') */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondNe,
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeBind({
          Expr::MakeAssign(
            Expr::MakeId(X86_FlCf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              rInsn.GetOperand(0),
              Expr::MakeBinOp(
                OperationExpression::OpSub,
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                Expr::MakeVar("count", VariableExpression::Use))), Expr::MakeBitVector(1, 0x1))),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlSf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBinOp(
                OperationExpression::OpSub,
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlZf, &m_CpuInfo),
            Expr::MakeTernaryCond(ConditionExpression::CondEq,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
            Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))),
          Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)),
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBitVector(1, 0x1)),
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeId(X86_FlPf, &m_CpuInfo),
            Expr::MakeVar("pf_tmp", VariableExpression::Use)),
          Expr::MakeVar("pf_tmp", VariableExpression::Free)})
        , nullptr)
        );
        /* semantic: if __expr and count == int(op0.bit, 1):
          of.id = bit_cast((op0.val >> (int(op0.bit, op0.bit) - int(op0.bit, 1))) ^ (op0.val >> (int(op0.bit, op0.bit) - int(op0.bit, 2))), int1(1)) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlOf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(
                OperationExpression::OpLrs,
                rInsn.GetOperand(0),
                Expr::MakeBinOp(
                  OperationExpression::OpSub,
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))),
              Expr::MakeBinOp(
                OperationExpression::OpLrs,
                rInsn.GetOperand(0),
                Expr::MakeBinOp(
                  OperationExpression::OpSub,
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)))), Expr::MakeBitVector(1, 0x1))), nullptr)
        );
        /* semantic: op0.val = res */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("res", VariableExpression::Use)));
        /* semantic: free_var('count') */
        AllExpr.push_back(Expr::MakeVar("count", VariableExpression::Free));
        /* semantic: free_var('res') */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x5:
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Shr);
      if (Operand__Eb_1(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: alloc_var('count', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("count", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: count = bit_cast(op1.val, int(op0.bit, op0.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, rInsn.GetOperand(1), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()))));
        /* semantic: call('count_mask') */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x40),
          Expr::MakeAssign(
            Expr::MakeVar("count", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeVar("count", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3f))),
          Expr::MakeAssign(
            Expr::MakeVar("count", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeVar("count", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1f)))));
        /* semantic: res = op0.val >> count */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpLrs,
            rInsn.GetOperand(0),
            Expr::MakeVar("count", VariableExpression::Use))));
        /* semantic: if __expr and count != int(op0.bit, 0):
          cf.id = bit_cast(op0.val >> (count - int(op0.bit, 1)), int1(1))
          call('sign_flag')
          call('zero_flag')
          call('parity_flag') */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondNe,
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeBind({
          Expr::MakeAssign(
            Expr::MakeId(X86_FlCf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              rInsn.GetOperand(0),
              Expr::MakeBinOp(
                OperationExpression::OpSub,
                Expr::MakeVar("count", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlSf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBinOp(
                OperationExpression::OpSub,
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlZf, &m_CpuInfo),
            Expr::MakeTernaryCond(ConditionExpression::CondEq,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
            Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))),
          Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)),
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBitVector(1, 0x1)),
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeId(X86_FlPf, &m_CpuInfo),
            Expr::MakeVar("pf_tmp", VariableExpression::Use)),
          Expr::MakeVar("pf_tmp", VariableExpression::Free)})
        , nullptr)
        );
        /* semantic: if __expr and count == int(op0.bit, 1):
          of.id = bit_cast((op0.val >> (int(op0.bit, op0.bit) - int(op0.bit, 1))), int1(1)) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlOf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              rInsn.GetOperand(0),
              Expr::MakeBinOp(
                OperationExpression::OpSub,
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))), nullptr)
        );
        /* semantic: op0.val = res */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("res", VariableExpression::Use)));
        /* semantic: free_var('count') */
        AllExpr.push_back(Expr::MakeVar("count", VariableExpression::Free));
        /* semantic: free_var('res') */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x6:
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Sal);
      if (Operand__Eb_1(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: alloc_var('count', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("count", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: count = bit_cast(op1.val, int(op0.bit, op0.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, rInsn.GetOperand(1), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()))));
        /* semantic: call('count_mask') */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x40),
          Expr::MakeAssign(
            Expr::MakeVar("count", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeVar("count", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3f))),
          Expr::MakeAssign(
            Expr::MakeVar("count", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeVar("count", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1f)))));
        /* semantic: res = op0.val << count */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpLls,
            rInsn.GetOperand(0),
            Expr::MakeVar("count", VariableExpression::Use))));
        /* semantic: if __expr and count != int(op0.bit, 0):
          cf.id = bit_cast(op0.val >> (int(op0.bit, op0.bit) - count), int1(1))
          call('sign_flag')
          call('zero_flag')
          call('parity_flag') */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondNe,
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeBind({
          Expr::MakeAssign(
            Expr::MakeId(X86_FlCf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              rInsn.GetOperand(0),
              Expr::MakeBinOp(
                OperationExpression::OpSub,
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                Expr::MakeVar("count", VariableExpression::Use))), Expr::MakeBitVector(1, 0x1))),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlSf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBinOp(
                OperationExpression::OpSub,
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlZf, &m_CpuInfo),
            Expr::MakeTernaryCond(ConditionExpression::CondEq,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
            Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))),
          Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)),
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBitVector(1, 0x1)),
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeId(X86_FlPf, &m_CpuInfo),
            Expr::MakeVar("pf_tmp", VariableExpression::Use)),
          Expr::MakeVar("pf_tmp", VariableExpression::Free)})
        , nullptr)
        );
        /* semantic: if __expr and count == int(op0.bit, 1):
          of.id = bit_cast((op0.val >> (int(op0.bit, op0.bit) - int(op0.bit, 1))) ^ (op0.val >> (int(op0.bit, op0.bit) - int(op0.bit, 2))), int1(1)) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlOf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(
                OperationExpression::OpLrs,
                rInsn.GetOperand(0),
                Expr::MakeBinOp(
                  OperationExpression::OpSub,
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))),
              Expr::MakeBinOp(
                OperationExpression::OpLrs,
                rInsn.GetOperand(0),
                Expr::MakeBinOp(
                  OperationExpression::OpSub,
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)))), Expr::MakeBitVector(1, 0x1))), nullptr)
        );
        /* semantic: op0.val = res */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("res", VariableExpression::Use)));
        /* semantic: free_var('count') */
        AllExpr.push_back(Expr::MakeVar("count", VariableExpression::Free));
        /* semantic: free_var('res') */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x7:
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Sar);
      if (Operand__Eb_1(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: alloc_var('count', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("count", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: count = bit_cast(op1.val, int(op0.bit, op0.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, rInsn.GetOperand(1), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()))));
        /* semantic: call('count_mask') */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x40),
          Expr::MakeAssign(
            Expr::MakeVar("count", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeVar("count", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3f))),
          Expr::MakeAssign(
            Expr::MakeVar("count", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeVar("count", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1f)))));
        /* semantic: res = ars(op0.val, count) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpArs, rInsn.GetOperand(0), Expr::MakeVar("count", VariableExpression::Use))));
        /* semantic: if __expr and count != int(op0.bit, 0):
          if __expr and count > int(op0.bit, op0.bit): cf.id = bit_cast(op0.val >> (int(op0.bit, op0.bit) - int(op0.bit, 1)), int1(1))
          else: cf.id = bit_cast(op0.val >> (count - int(op0.bit, 1)), int1(1))
          call('sign_flag')
          call('zero_flag')
          call('parity_flag') */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondNe,
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeBind({
          Expr::MakeIfElseCond(
            ConditionExpression::CondUgt,
            Expr::MakeVar("count", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeAssign(
              Expr::MakeId(X86_FlCf, &m_CpuInfo),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                rInsn.GetOperand(0),
                Expr::MakeBinOp(
                  OperationExpression::OpSub,
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))),
            Expr::MakeAssign(
              Expr::MakeId(X86_FlCf, &m_CpuInfo),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                rInsn.GetOperand(0),
                Expr::MakeBinOp(
                  OperationExpression::OpSub,
                  Expr::MakeVar("count", VariableExpression::Use),
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1)))),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlSf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBinOp(
                OperationExpression::OpSub,
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlZf, &m_CpuInfo),
            Expr::MakeTernaryCond(ConditionExpression::CondEq,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
            Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))),
          Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)),
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBitVector(1, 0x1)),
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeId(X86_FlPf, &m_CpuInfo),
            Expr::MakeVar("pf_tmp", VariableExpression::Use)),
          Expr::MakeVar("pf_tmp", VariableExpression::Free)})
        , nullptr)
        );
        /* semantic: if __expr and count == int(op0.bit, 1):
          of.id = int1(0) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlOf, &m_CpuInfo),
            Expr::MakeBitVector(1, 0x0)), nullptr)
        );
        /* semantic: op0.val = res */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("res", VariableExpression::Use)));
        /* semantic: free_var('count') */
        AllExpr.push_back(Expr::MakeVar("count", VariableExpression::Free));
        /* semantic: free_var('res') */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    default:
      return false;
    }
}

/** group:
 * mnemonic: rol
 * opcode: 00
 * operand: ['Eb', '1']
 * semantic: alloc_var('res', op0.bit);
alloc_var('count', op0.bit);
count = bit_cast(op1.val, int(op0.bit, op0.bit));
call('count_mask');
res = rol(op0.val, count);
if __expr and count != int(op0.bit, 0):
  cf.id = bit_cast(res, int_type1);
if __expr and count == int(op0.bit, 1):
  of.id = bit_cast(bit_cast(cf.id, int_type(op0.bit)) ^ (res >> (int(op0.bit,op0.bit) - int(op0.bit, 1))), int_type1);
op0.val = res;
free_var('count');
free_var('res');

 *
 * mnemonic: ror
 * opcode: 01
 * operand: ['Eb', '1']
 * semantic: alloc_var('res', op0.bit);
alloc_var('count', op0.bit);
count = bit_cast(op1.val, int_type(op0.bit));
call('count_mask');
res = ror(op0.val, count);
if __expr and count != int(op0.bit, 0):
  cf.id = bit_cast(res >> (int(op0.bit, op0.bit) - int(op0.bit, 1)), int_type1);
if __expr and count == int(op0.bit, 1):
  of.id = bit_cast((res >> (int(op0.bit, op0.bit) - int(op0.bit, 1))) ^ (res >> (int(op0.bit, op0.bit) - int(op0.bit, 2))), int_type1);
op0.val = res;
free_var('count');
free_var('res');

 *
 * mnemonic: rcl
 * opcode: 02
 * operand: ['Eb', '1']
 * semantic: alloc_var('res', op0.bit);
alloc_var('count', op0.bit);
count = bit_cast(op1.val, int_type(op0.bit));
call('count_mask');
alloc_var('rol_val', concat(op0.bit, ignore(' + 1')));
rol_val = bit_cast(op0.val, int_type(concat(op0.bit, ignore(' + 1'))));
rol_val |= (bit_cast(cf.id, int_type(concat(op0.bit, ignore(' + 1')))) << int(concat(op0.bit, ignore(' + 1')), op0.bit));
rol_val = rol(rol_val, bit_cast(count, int_type(concat(op0.bit, ignore(' + 1')))));
res = bit_cast(rol_val, int_type(op0.bit));
if __expr and count != int(op0.bit, 0):
  cf.id = bit_cast(rol_val >> int(concat(op0.bit, ignore(' + 1')), op0.bit), int_type1);
if __expr and count == int(op0.bit, 1):
  of.id = bit_cast(cf.id ^ bit_cast(res >> (int(op0.bit, op0.bit) - int(op0.bit, 1)), int_type1), int_type1);
op0.val = res;
free_var('rol_val');
free_var('count');
free_var('res');

 *
 * mnemonic: rcr
 * opcode: 03
 * operand: ['Eb', '1']
 * semantic: alloc_var('res', op0.bit);
alloc_var('count', op0.bit);
count = bit_cast(op1.val, int(op0.bit, op0.bit));
call('count_mask');
alloc_var('ror_val', concat(op0.bit, ignore(' + 1')));
ror_val = bit_cast(op0.val, int_type(concat(op0.bit, ignore(' + 1'))));
ror_val |= (bit_cast(cf.id, int_type(concat(op0.bit, ignore(' + 1')))) << int(concat(op0.bit, ignore(' + 1')), op0.bit));
ror_val = ror(ror_val, bit_cast(count, int_type(concat(op0.bit, ignore(' + 1')))));
res = bit_cast(ror_val, int_type(op0.bit));
if __expr and count != int(op0.bit, 0):
  cf.id = bit_cast(ror_val >> int(concat(op0.bit, ignore(' + 1')), op0.bit), int_type1);
if __expr and count == int(op0.bit, 1):
  of.id = bit_cast((res >> (int(op0.bit, op0.bit) - int(op0.bit, 1))) ^ (res >> (int(op0.bit, op0.bit) - int(op0.bit, 2))), int_type1);
op0.val = res;
free_var('ror_val');
free_var('count');
free_var('res');

 *
 * mnemonic: shl
 * opcode: 04
 * operand: ['Eb', '1']
 * semantic: alloc_var('res', op0.bit);
alloc_var('count', op0.bit);
count = bit_cast(op1.val, int(op0.bit, op0.bit));
call('count_mask');
res = op0.val << count;
if __expr and count != int(op0.bit, 0):
  cf.id = bit_cast(op0.val >> (int(op0.bit, op0.bit) - count), int1(1))
  call('sign_flag')
  call('zero_flag')
  call('parity_flag');
if __expr and count == int(op0.bit, 1):
  of.id = bit_cast((op0.val >> (int(op0.bit, op0.bit) - int(op0.bit, 1))) ^ (op0.val >> (int(op0.bit, op0.bit) - int(op0.bit, 2))), int1(1));
op0.val = res;
free_var('count');
free_var('res');

 *
 * mnemonic: shr
 * opcode: 05
 * operand: ['Eb', '1']
 * semantic: alloc_var('res', op0.bit);
alloc_var('count', op0.bit);
count = bit_cast(op1.val, int(op0.bit, op0.bit));
call('count_mask');
res = op0.val >> count;
if __expr and count != int(op0.bit, 0):
  cf.id = bit_cast(op0.val >> (count - int(op0.bit, 1)), int1(1))
  call('sign_flag')
  call('zero_flag')
  call('parity_flag');
if __expr and count == int(op0.bit, 1):
  of.id = bit_cast((op0.val >> (int(op0.bit, op0.bit) - int(op0.bit, 1))), int1(1));
op0.val = res;
free_var('count');
free_var('res');

 *
 * mnemonic: sal
 * opcode: 06
 * operand: ['Eb', '1']
 * semantic: alloc_var('res', op0.bit);
alloc_var('count', op0.bit);
count = bit_cast(op1.val, int(op0.bit, op0.bit));
call('count_mask');
res = op0.val << count;
if __expr and count != int(op0.bit, 0):
  cf.id = bit_cast(op0.val >> (int(op0.bit, op0.bit) - count), int1(1))
  call('sign_flag')
  call('zero_flag')
  call('parity_flag');
if __expr and count == int(op0.bit, 1):
  of.id = bit_cast((op0.val >> (int(op0.bit, op0.bit) - int(op0.bit, 1))) ^ (op0.val >> (int(op0.bit, op0.bit) - int(op0.bit, 2))), int1(1));
op0.val = res;
free_var('count');
free_var('res');

 *
 * mnemonic: sar
 * opcode: 07
 * operand: ['Eb', '1']
 * semantic: alloc_var('res', op0.bit);
alloc_var('count', op0.bit);
count = bit_cast(op1.val, int(op0.bit, op0.bit));
call('count_mask');
res = ars(op0.val, count);
if __expr and count != int(op0.bit, 0):
  if __expr and count > int(op0.bit, op0.bit): cf.id = bit_cast(op0.val >> (int(op0.bit, op0.bit) - int(op0.bit, 1)), int1(1))
  else: cf.id = bit_cast(op0.val >> (count - int(op0.bit, 1)), int1(1))
  call('sign_flag')
  call('zero_flag')
  call('parity_flag');
if __expr and count == int(op0.bit, 1):
  of.id = int1(0);
op0.val = res;
free_var('count');
free_var('res');

 *
**/
bool X86Architecture::Table_1_d1(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    u8 ModRmByte;
    if (!rBinStrm.Read(Offset, ModRmByte))
      return false;

    x86::ModRM ModRm(ModRmByte);
    switch (ModRm.Reg())
    {
    case 0x0:
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Rol);
      if (Operand__Ev_1(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: alloc_var('count', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("count", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: count = bit_cast(op1.val, int(op0.bit, op0.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, rInsn.GetOperand(1), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()))));
        /* semantic: call('count_mask') */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x40),
          Expr::MakeAssign(
            Expr::MakeVar("count", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeVar("count", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3f))),
          Expr::MakeAssign(
            Expr::MakeVar("count", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeVar("count", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1f)))));
        /* semantic: res = rol(op0.val, count) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpRol, rInsn.GetOperand(0), Expr::MakeVar("count", VariableExpression::Use))));
        /* semantic: if __expr and count != int(op0.bit, 0):
          cf.id = bit_cast(res, int_type1) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondNe,
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlCf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeVar("res", VariableExpression::Use), Expr::MakeBitVector(1, 1))), nullptr)
        );
        /* semantic: if __expr and count == int(op0.bit, 1):
          of.id = bit_cast(bit_cast(cf.id, int_type(op0.bit)) ^ (res >> (int(op0.bit,op0.bit) - int(op0.bit, 1))), int_type1) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlOf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeId(X86_FlCf, &m_CpuInfo), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize())),
              Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBinOp(
                  OperationExpression::OpSub,
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)))), Expr::MakeBitVector(1, 1))), nullptr)
        );
        /* semantic: op0.val = res */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("res", VariableExpression::Use)));
        /* semantic: free_var('count') */
        AllExpr.push_back(Expr::MakeVar("count", VariableExpression::Free));
        /* semantic: free_var('res') */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x1:
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Ror);
      if (Operand__Ev_1(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: alloc_var('count', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("count", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: count = bit_cast(op1.val, int_type(op0.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, rInsn.GetOperand(1), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()))));
        /* semantic: call('count_mask') */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x40),
          Expr::MakeAssign(
            Expr::MakeVar("count", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeVar("count", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3f))),
          Expr::MakeAssign(
            Expr::MakeVar("count", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeVar("count", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1f)))));
        /* semantic: res = ror(op0.val, count) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpRor, rInsn.GetOperand(0), Expr::MakeVar("count", VariableExpression::Use))));
        /* semantic: if __expr and count != int(op0.bit, 0):
          cf.id = bit_cast(res >> (int(op0.bit, op0.bit) - int(op0.bit, 1)), int_type1) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondNe,
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlCf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBinOp(
                OperationExpression::OpSub,
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 1))), nullptr)
        );
        /* semantic: if __expr and count == int(op0.bit, 1):
          of.id = bit_cast((res >> (int(op0.bit, op0.bit) - int(op0.bit, 1))) ^ (res >> (int(op0.bit, op0.bit) - int(op0.bit, 2))), int_type1) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlOf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBinOp(
                  OperationExpression::OpSub,
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))),
              Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBinOp(
                  OperationExpression::OpSub,
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)))), Expr::MakeBitVector(1, 1))), nullptr)
        );
        /* semantic: op0.val = res */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("res", VariableExpression::Use)));
        /* semantic: free_var('count') */
        AllExpr.push_back(Expr::MakeVar("count", VariableExpression::Free));
        /* semantic: free_var('res') */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x2:
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Rcl);
      if (Operand__Ev_1(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: alloc_var('count', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("count", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: count = bit_cast(op1.val, int_type(op0.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, rInsn.GetOperand(1), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()))));
        /* semantic: call('count_mask') */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x40),
          Expr::MakeAssign(
            Expr::MakeVar("count", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeVar("count", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3f))),
          Expr::MakeAssign(
            Expr::MakeVar("count", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeVar("count", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1f)))));
        /* semantic: alloc_var('rol_val', concat(op0.bit, ignore(' + 1'))) */
        AllExpr.push_back(Expr::MakeVar("rol_val", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize() + 1));
        /* semantic: rol_val = bit_cast(op0.val, int_type(concat(op0.bit, ignore(' + 1')))) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("rol_val", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, rInsn.GetOperand(0), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize() + 1, rInsn.GetOperand(0)->GetBitSize() + 1))));
        /* semantic: rol_val |= (bit_cast(cf.id, int_type(concat(op0.bit, ignore(' + 1')))) << int(concat(op0.bit, ignore(' + 1')), op0.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("rol_val", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpOr,
            Expr::MakeVar("rol_val", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpLls,
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeId(X86_FlCf, &m_CpuInfo), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize() + 1, rInsn.GetOperand(0)->GetBitSize() + 1)),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize() + 1, rInsn.GetOperand(0)->GetBitSize()))))
        );
        /* semantic: rol_val = rol(rol_val, bit_cast(count, int_type(concat(op0.bit, ignore(' + 1'))))) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("rol_val", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpRol, Expr::MakeVar("rol_val", VariableExpression::Use), Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeVar("count", VariableExpression::Use), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize() + 1, rInsn.GetOperand(0)->GetBitSize() + 1)))));
        /* semantic: res = bit_cast(rol_val, int_type(op0.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeVar("rol_val", VariableExpression::Use), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()))));
        /* semantic: if __expr and count != int(op0.bit, 0):
          cf.id = bit_cast(rol_val >> int(concat(op0.bit, ignore(' + 1')), op0.bit), int_type1) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondNe,
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlCf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("rol_val", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize() + 1, rInsn.GetOperand(0)->GetBitSize())), Expr::MakeBitVector(1, 1))), nullptr)
        );
        /* semantic: if __expr and count == int(op0.bit, 1):
          of.id = bit_cast(cf.id ^ bit_cast(res >> (int(op0.bit, op0.bit) - int(op0.bit, 1)), int_type1), int_type1) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlOf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeId(X86_FlCf, &m_CpuInfo),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBinOp(
                  OperationExpression::OpSub,
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 1))), Expr::MakeBitVector(1, 1))), nullptr)
        );
        /* semantic: op0.val = res */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("res", VariableExpression::Use)));
        /* semantic: free_var('rol_val') */
        AllExpr.push_back(Expr::MakeVar("rol_val", VariableExpression::Free));
        /* semantic: free_var('count') */
        AllExpr.push_back(Expr::MakeVar("count", VariableExpression::Free));
        /* semantic: free_var('res') */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x3:
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Rcr);
      if (Operand__Ev_1(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: alloc_var('count', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("count", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: count = bit_cast(op1.val, int(op0.bit, op0.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, rInsn.GetOperand(1), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()))));
        /* semantic: call('count_mask') */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x40),
          Expr::MakeAssign(
            Expr::MakeVar("count", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeVar("count", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3f))),
          Expr::MakeAssign(
            Expr::MakeVar("count", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeVar("count", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1f)))));
        /* semantic: alloc_var('ror_val', concat(op0.bit, ignore(' + 1'))) */
        AllExpr.push_back(Expr::MakeVar("ror_val", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize() + 1));
        /* semantic: ror_val = bit_cast(op0.val, int_type(concat(op0.bit, ignore(' + 1')))) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("ror_val", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, rInsn.GetOperand(0), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize() + 1, rInsn.GetOperand(0)->GetBitSize() + 1))));
        /* semantic: ror_val |= (bit_cast(cf.id, int_type(concat(op0.bit, ignore(' + 1')))) << int(concat(op0.bit, ignore(' + 1')), op0.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("ror_val", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpOr,
            Expr::MakeVar("ror_val", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpLls,
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeId(X86_FlCf, &m_CpuInfo), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize() + 1, rInsn.GetOperand(0)->GetBitSize() + 1)),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize() + 1, rInsn.GetOperand(0)->GetBitSize()))))
        );
        /* semantic: ror_val = ror(ror_val, bit_cast(count, int_type(concat(op0.bit, ignore(' + 1'))))) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("ror_val", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpRor, Expr::MakeVar("ror_val", VariableExpression::Use), Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeVar("count", VariableExpression::Use), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize() + 1, rInsn.GetOperand(0)->GetBitSize() + 1)))));
        /* semantic: res = bit_cast(ror_val, int_type(op0.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeVar("ror_val", VariableExpression::Use), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()))));
        /* semantic: if __expr and count != int(op0.bit, 0):
          cf.id = bit_cast(ror_val >> int(concat(op0.bit, ignore(' + 1')), op0.bit), int_type1) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondNe,
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlCf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("ror_val", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize() + 1, rInsn.GetOperand(0)->GetBitSize())), Expr::MakeBitVector(1, 1))), nullptr)
        );
        /* semantic: if __expr and count == int(op0.bit, 1):
          of.id = bit_cast((res >> (int(op0.bit, op0.bit) - int(op0.bit, 1))) ^ (res >> (int(op0.bit, op0.bit) - int(op0.bit, 2))), int_type1) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlOf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBinOp(
                  OperationExpression::OpSub,
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))),
              Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBinOp(
                  OperationExpression::OpSub,
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)))), Expr::MakeBitVector(1, 1))), nullptr)
        );
        /* semantic: op0.val = res */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("res", VariableExpression::Use)));
        /* semantic: free_var('ror_val') */
        AllExpr.push_back(Expr::MakeVar("ror_val", VariableExpression::Free));
        /* semantic: free_var('count') */
        AllExpr.push_back(Expr::MakeVar("count", VariableExpression::Free));
        /* semantic: free_var('res') */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x4:
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Shl);
      if (Operand__Ev_1(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: alloc_var('count', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("count", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: count = bit_cast(op1.val, int(op0.bit, op0.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, rInsn.GetOperand(1), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()))));
        /* semantic: call('count_mask') */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x40),
          Expr::MakeAssign(
            Expr::MakeVar("count", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeVar("count", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3f))),
          Expr::MakeAssign(
            Expr::MakeVar("count", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeVar("count", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1f)))));
        /* semantic: res = op0.val << count */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpLls,
            rInsn.GetOperand(0),
            Expr::MakeVar("count", VariableExpression::Use))));
        /* semantic: if __expr and count != int(op0.bit, 0):
          cf.id = bit_cast(op0.val >> (int(op0.bit, op0.bit) - count), int1(1))
          call('sign_flag')
          call('zero_flag')
          call('parity_flag') */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondNe,
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeBind({
          Expr::MakeAssign(
            Expr::MakeId(X86_FlCf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              rInsn.GetOperand(0),
              Expr::MakeBinOp(
                OperationExpression::OpSub,
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                Expr::MakeVar("count", VariableExpression::Use))), Expr::MakeBitVector(1, 0x1))),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlSf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBinOp(
                OperationExpression::OpSub,
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlZf, &m_CpuInfo),
            Expr::MakeTernaryCond(ConditionExpression::CondEq,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
            Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))),
          Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)),
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBitVector(1, 0x1)),
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeId(X86_FlPf, &m_CpuInfo),
            Expr::MakeVar("pf_tmp", VariableExpression::Use)),
          Expr::MakeVar("pf_tmp", VariableExpression::Free)})
        , nullptr)
        );
        /* semantic: if __expr and count == int(op0.bit, 1):
          of.id = bit_cast((op0.val >> (int(op0.bit, op0.bit) - int(op0.bit, 1))) ^ (op0.val >> (int(op0.bit, op0.bit) - int(op0.bit, 2))), int1(1)) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlOf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(
                OperationExpression::OpLrs,
                rInsn.GetOperand(0),
                Expr::MakeBinOp(
                  OperationExpression::OpSub,
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))),
              Expr::MakeBinOp(
                OperationExpression::OpLrs,
                rInsn.GetOperand(0),
                Expr::MakeBinOp(
                  OperationExpression::OpSub,
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)))), Expr::MakeBitVector(1, 0x1))), nullptr)
        );
        /* semantic: op0.val = res */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("res", VariableExpression::Use)));
        /* semantic: free_var('count') */
        AllExpr.push_back(Expr::MakeVar("count", VariableExpression::Free));
        /* semantic: free_var('res') */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x5:
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Shr);
      if (Operand__Ev_1(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: alloc_var('count', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("count", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: count = bit_cast(op1.val, int(op0.bit, op0.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, rInsn.GetOperand(1), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()))));
        /* semantic: call('count_mask') */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x40),
          Expr::MakeAssign(
            Expr::MakeVar("count", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeVar("count", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3f))),
          Expr::MakeAssign(
            Expr::MakeVar("count", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeVar("count", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1f)))));
        /* semantic: res = op0.val >> count */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpLrs,
            rInsn.GetOperand(0),
            Expr::MakeVar("count", VariableExpression::Use))));
        /* semantic: if __expr and count != int(op0.bit, 0):
          cf.id = bit_cast(op0.val >> (count - int(op0.bit, 1)), int1(1))
          call('sign_flag')
          call('zero_flag')
          call('parity_flag') */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondNe,
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeBind({
          Expr::MakeAssign(
            Expr::MakeId(X86_FlCf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              rInsn.GetOperand(0),
              Expr::MakeBinOp(
                OperationExpression::OpSub,
                Expr::MakeVar("count", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlSf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBinOp(
                OperationExpression::OpSub,
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlZf, &m_CpuInfo),
            Expr::MakeTernaryCond(ConditionExpression::CondEq,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
            Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))),
          Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)),
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBitVector(1, 0x1)),
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeId(X86_FlPf, &m_CpuInfo),
            Expr::MakeVar("pf_tmp", VariableExpression::Use)),
          Expr::MakeVar("pf_tmp", VariableExpression::Free)})
        , nullptr)
        );
        /* semantic: if __expr and count == int(op0.bit, 1):
          of.id = bit_cast((op0.val >> (int(op0.bit, op0.bit) - int(op0.bit, 1))), int1(1)) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlOf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              rInsn.GetOperand(0),
              Expr::MakeBinOp(
                OperationExpression::OpSub,
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))), nullptr)
        );
        /* semantic: op0.val = res */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("res", VariableExpression::Use)));
        /* semantic: free_var('count') */
        AllExpr.push_back(Expr::MakeVar("count", VariableExpression::Free));
        /* semantic: free_var('res') */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x6:
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Sal);
      if (Operand__Ev_1(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: alloc_var('count', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("count", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: count = bit_cast(op1.val, int(op0.bit, op0.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, rInsn.GetOperand(1), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()))));
        /* semantic: call('count_mask') */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x40),
          Expr::MakeAssign(
            Expr::MakeVar("count", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeVar("count", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3f))),
          Expr::MakeAssign(
            Expr::MakeVar("count", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeVar("count", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1f)))));
        /* semantic: res = op0.val << count */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpLls,
            rInsn.GetOperand(0),
            Expr::MakeVar("count", VariableExpression::Use))));
        /* semantic: if __expr and count != int(op0.bit, 0):
          cf.id = bit_cast(op0.val >> (int(op0.bit, op0.bit) - count), int1(1))
          call('sign_flag')
          call('zero_flag')
          call('parity_flag') */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondNe,
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeBind({
          Expr::MakeAssign(
            Expr::MakeId(X86_FlCf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              rInsn.GetOperand(0),
              Expr::MakeBinOp(
                OperationExpression::OpSub,
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                Expr::MakeVar("count", VariableExpression::Use))), Expr::MakeBitVector(1, 0x1))),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlSf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBinOp(
                OperationExpression::OpSub,
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlZf, &m_CpuInfo),
            Expr::MakeTernaryCond(ConditionExpression::CondEq,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
            Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))),
          Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)),
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBitVector(1, 0x1)),
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeId(X86_FlPf, &m_CpuInfo),
            Expr::MakeVar("pf_tmp", VariableExpression::Use)),
          Expr::MakeVar("pf_tmp", VariableExpression::Free)})
        , nullptr)
        );
        /* semantic: if __expr and count == int(op0.bit, 1):
          of.id = bit_cast((op0.val >> (int(op0.bit, op0.bit) - int(op0.bit, 1))) ^ (op0.val >> (int(op0.bit, op0.bit) - int(op0.bit, 2))), int1(1)) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlOf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(
                OperationExpression::OpLrs,
                rInsn.GetOperand(0),
                Expr::MakeBinOp(
                  OperationExpression::OpSub,
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))),
              Expr::MakeBinOp(
                OperationExpression::OpLrs,
                rInsn.GetOperand(0),
                Expr::MakeBinOp(
                  OperationExpression::OpSub,
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)))), Expr::MakeBitVector(1, 0x1))), nullptr)
        );
        /* semantic: op0.val = res */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("res", VariableExpression::Use)));
        /* semantic: free_var('count') */
        AllExpr.push_back(Expr::MakeVar("count", VariableExpression::Free));
        /* semantic: free_var('res') */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x7:
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Sar);
      if (Operand__Ev_1(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: alloc_var('count', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("count", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: count = bit_cast(op1.val, int(op0.bit, op0.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, rInsn.GetOperand(1), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()))));
        /* semantic: call('count_mask') */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x40),
          Expr::MakeAssign(
            Expr::MakeVar("count", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeVar("count", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3f))),
          Expr::MakeAssign(
            Expr::MakeVar("count", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeVar("count", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1f)))));
        /* semantic: res = ars(op0.val, count) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpArs, rInsn.GetOperand(0), Expr::MakeVar("count", VariableExpression::Use))));
        /* semantic: if __expr and count != int(op0.bit, 0):
          if __expr and count > int(op0.bit, op0.bit): cf.id = bit_cast(op0.val >> (int(op0.bit, op0.bit) - int(op0.bit, 1)), int1(1))
          else: cf.id = bit_cast(op0.val >> (count - int(op0.bit, 1)), int1(1))
          call('sign_flag')
          call('zero_flag')
          call('parity_flag') */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondNe,
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeBind({
          Expr::MakeIfElseCond(
            ConditionExpression::CondUgt,
            Expr::MakeVar("count", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeAssign(
              Expr::MakeId(X86_FlCf, &m_CpuInfo),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                rInsn.GetOperand(0),
                Expr::MakeBinOp(
                  OperationExpression::OpSub,
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))),
            Expr::MakeAssign(
              Expr::MakeId(X86_FlCf, &m_CpuInfo),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                rInsn.GetOperand(0),
                Expr::MakeBinOp(
                  OperationExpression::OpSub,
                  Expr::MakeVar("count", VariableExpression::Use),
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1)))),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlSf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBinOp(
                OperationExpression::OpSub,
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlZf, &m_CpuInfo),
            Expr::MakeTernaryCond(ConditionExpression::CondEq,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
            Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))),
          Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)),
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBitVector(1, 0x1)),
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeId(X86_FlPf, &m_CpuInfo),
            Expr::MakeVar("pf_tmp", VariableExpression::Use)),
          Expr::MakeVar("pf_tmp", VariableExpression::Free)})
        , nullptr)
        );
        /* semantic: if __expr and count == int(op0.bit, 1):
          of.id = int1(0) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlOf, &m_CpuInfo),
            Expr::MakeBitVector(1, 0x0)), nullptr)
        );
        /* semantic: op0.val = res */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("res", VariableExpression::Use)));
        /* semantic: free_var('count') */
        AllExpr.push_back(Expr::MakeVar("count", VariableExpression::Free));
        /* semantic: free_var('res') */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    default:
      return false;
    }
}

/** group:
 * mnemonic: rol
 * opcode: 00
 * operand: ['Ev', '1']
 * semantic: alloc_var('res', op0.bit);
alloc_var('count', op0.bit);
count = bit_cast(op1.val, int(op0.bit, op0.bit));
call('count_mask');
res = rol(op0.val, count);
if __expr and count != int(op0.bit, 0):
  cf.id = bit_cast(res, int_type1);
if __expr and count == int(op0.bit, 1):
  of.id = bit_cast(bit_cast(cf.id, int_type(op0.bit)) ^ (res >> (int(op0.bit,op0.bit) - int(op0.bit, 1))), int_type1);
op0.val = res;
free_var('count');
free_var('res');

 *
 * mnemonic: ror
 * opcode: 01
 * operand: ['Ev', '1']
 * semantic: alloc_var('res', op0.bit);
alloc_var('count', op0.bit);
count = bit_cast(op1.val, int_type(op0.bit));
call('count_mask');
res = ror(op0.val, count);
if __expr and count != int(op0.bit, 0):
  cf.id = bit_cast(res >> (int(op0.bit, op0.bit) - int(op0.bit, 1)), int_type1);
if __expr and count == int(op0.bit, 1):
  of.id = bit_cast((res >> (int(op0.bit, op0.bit) - int(op0.bit, 1))) ^ (res >> (int(op0.bit, op0.bit) - int(op0.bit, 2))), int_type1);
op0.val = res;
free_var('count');
free_var('res');

 *
 * mnemonic: rcl
 * opcode: 02
 * operand: ['Ev', '1']
 * semantic: alloc_var('res', op0.bit);
alloc_var('count', op0.bit);
count = bit_cast(op1.val, int_type(op0.bit));
call('count_mask');
alloc_var('rol_val', concat(op0.bit, ignore(' + 1')));
rol_val = bit_cast(op0.val, int_type(concat(op0.bit, ignore(' + 1'))));
rol_val |= (bit_cast(cf.id, int_type(concat(op0.bit, ignore(' + 1')))) << int(concat(op0.bit, ignore(' + 1')), op0.bit));
rol_val = rol(rol_val, bit_cast(count, int_type(concat(op0.bit, ignore(' + 1')))));
res = bit_cast(rol_val, int_type(op0.bit));
if __expr and count != int(op0.bit, 0):
  cf.id = bit_cast(rol_val >> int(concat(op0.bit, ignore(' + 1')), op0.bit), int_type1);
if __expr and count == int(op0.bit, 1):
  of.id = bit_cast(cf.id ^ bit_cast(res >> (int(op0.bit, op0.bit) - int(op0.bit, 1)), int_type1), int_type1);
op0.val = res;
free_var('rol_val');
free_var('count');
free_var('res');

 *
 * mnemonic: rcr
 * opcode: 03
 * operand: ['Ev', '1']
 * semantic: alloc_var('res', op0.bit);
alloc_var('count', op0.bit);
count = bit_cast(op1.val, int(op0.bit, op0.bit));
call('count_mask');
alloc_var('ror_val', concat(op0.bit, ignore(' + 1')));
ror_val = bit_cast(op0.val, int_type(concat(op0.bit, ignore(' + 1'))));
ror_val |= (bit_cast(cf.id, int_type(concat(op0.bit, ignore(' + 1')))) << int(concat(op0.bit, ignore(' + 1')), op0.bit));
ror_val = ror(ror_val, bit_cast(count, int_type(concat(op0.bit, ignore(' + 1')))));
res = bit_cast(ror_val, int_type(op0.bit));
if __expr and count != int(op0.bit, 0):
  cf.id = bit_cast(ror_val >> int(concat(op0.bit, ignore(' + 1')), op0.bit), int_type1);
if __expr and count == int(op0.bit, 1):
  of.id = bit_cast((res >> (int(op0.bit, op0.bit) - int(op0.bit, 1))) ^ (res >> (int(op0.bit, op0.bit) - int(op0.bit, 2))), int_type1);
op0.val = res;
free_var('ror_val');
free_var('count');
free_var('res');

 *
 * mnemonic: shl
 * opcode: 04
 * operand: ['Ev', '1']
 * semantic: alloc_var('res', op0.bit);
alloc_var('count', op0.bit);
count = bit_cast(op1.val, int(op0.bit, op0.bit));
call('count_mask');
res = op0.val << count;
if __expr and count != int(op0.bit, 0):
  cf.id = bit_cast(op0.val >> (int(op0.bit, op0.bit) - count), int1(1))
  call('sign_flag')
  call('zero_flag')
  call('parity_flag');
if __expr and count == int(op0.bit, 1):
  of.id = bit_cast((op0.val >> (int(op0.bit, op0.bit) - int(op0.bit, 1))) ^ (op0.val >> (int(op0.bit, op0.bit) - int(op0.bit, 2))), int1(1));
op0.val = res;
free_var('count');
free_var('res');

 *
 * mnemonic: shr
 * opcode: 05
 * operand: ['Ev', '1']
 * semantic: alloc_var('res', op0.bit);
alloc_var('count', op0.bit);
count = bit_cast(op1.val, int(op0.bit, op0.bit));
call('count_mask');
res = op0.val >> count;
if __expr and count != int(op0.bit, 0):
  cf.id = bit_cast(op0.val >> (count - int(op0.bit, 1)), int1(1))
  call('sign_flag')
  call('zero_flag')
  call('parity_flag');
if __expr and count == int(op0.bit, 1):
  of.id = bit_cast((op0.val >> (int(op0.bit, op0.bit) - int(op0.bit, 1))), int1(1));
op0.val = res;
free_var('count');
free_var('res');

 *
 * mnemonic: sal
 * opcode: 06
 * operand: ['Ev', '1']
 * semantic: alloc_var('res', op0.bit);
alloc_var('count', op0.bit);
count = bit_cast(op1.val, int(op0.bit, op0.bit));
call('count_mask');
res = op0.val << count;
if __expr and count != int(op0.bit, 0):
  cf.id = bit_cast(op0.val >> (int(op0.bit, op0.bit) - count), int1(1))
  call('sign_flag')
  call('zero_flag')
  call('parity_flag');
if __expr and count == int(op0.bit, 1):
  of.id = bit_cast((op0.val >> (int(op0.bit, op0.bit) - int(op0.bit, 1))) ^ (op0.val >> (int(op0.bit, op0.bit) - int(op0.bit, 2))), int1(1));
op0.val = res;
free_var('count');
free_var('res');

 *
 * mnemonic: sar
 * opcode: 07
 * operand: ['Ev', '1']
 * semantic: alloc_var('res', op0.bit);
alloc_var('count', op0.bit);
count = bit_cast(op1.val, int(op0.bit, op0.bit));
call('count_mask');
res = ars(op0.val, count);
if __expr and count != int(op0.bit, 0):
  if __expr and count > int(op0.bit, op0.bit): cf.id = bit_cast(op0.val >> (int(op0.bit, op0.bit) - int(op0.bit, 1)), int1(1))
  else: cf.id = bit_cast(op0.val >> (count - int(op0.bit, 1)), int1(1))
  call('sign_flag')
  call('zero_flag')
  call('parity_flag');
if __expr and count == int(op0.bit, 1):
  of.id = int1(0);
op0.val = res;
free_var('count');
free_var('res');

 *
**/
bool X86Architecture::Table_1_d2(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    u8 ModRmByte;
    if (!rBinStrm.Read(Offset, ModRmByte))
      return false;

    x86::ModRM ModRm(ModRmByte);
    switch (ModRm.Reg())
    {
    case 0x0:
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Rol);
      if (Operand__Eb_CL(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: alloc_var('count', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("count", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: count = bit_cast(op1.val, int(op0.bit, op0.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, rInsn.GetOperand(1), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()))));
        /* semantic: call('count_mask') */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x40),
          Expr::MakeAssign(
            Expr::MakeVar("count", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeVar("count", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3f))),
          Expr::MakeAssign(
            Expr::MakeVar("count", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeVar("count", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1f)))));
        /* semantic: res = rol(op0.val, count) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpRol, rInsn.GetOperand(0), Expr::MakeVar("count", VariableExpression::Use))));
        /* semantic: if __expr and count != int(op0.bit, 0):
          cf.id = bit_cast(res, int_type1) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondNe,
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlCf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeVar("res", VariableExpression::Use), Expr::MakeBitVector(1, 1))), nullptr)
        );
        /* semantic: if __expr and count == int(op0.bit, 1):
          of.id = bit_cast(bit_cast(cf.id, int_type(op0.bit)) ^ (res >> (int(op0.bit,op0.bit) - int(op0.bit, 1))), int_type1) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlOf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeId(X86_FlCf, &m_CpuInfo), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize())),
              Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBinOp(
                  OperationExpression::OpSub,
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)))), Expr::MakeBitVector(1, 1))), nullptr)
        );
        /* semantic: op0.val = res */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("res", VariableExpression::Use)));
        /* semantic: free_var('count') */
        AllExpr.push_back(Expr::MakeVar("count", VariableExpression::Free));
        /* semantic: free_var('res') */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x1:
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Ror);
      if (Operand__Eb_CL(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: alloc_var('count', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("count", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: count = bit_cast(op1.val, int_type(op0.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, rInsn.GetOperand(1), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()))));
        /* semantic: call('count_mask') */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x40),
          Expr::MakeAssign(
            Expr::MakeVar("count", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeVar("count", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3f))),
          Expr::MakeAssign(
            Expr::MakeVar("count", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeVar("count", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1f)))));
        /* semantic: res = ror(op0.val, count) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpRor, rInsn.GetOperand(0), Expr::MakeVar("count", VariableExpression::Use))));
        /* semantic: if __expr and count != int(op0.bit, 0):
          cf.id = bit_cast(res >> (int(op0.bit, op0.bit) - int(op0.bit, 1)), int_type1) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondNe,
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlCf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBinOp(
                OperationExpression::OpSub,
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 1))), nullptr)
        );
        /* semantic: if __expr and count == int(op0.bit, 1):
          of.id = bit_cast((res >> (int(op0.bit, op0.bit) - int(op0.bit, 1))) ^ (res >> (int(op0.bit, op0.bit) - int(op0.bit, 2))), int_type1) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlOf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBinOp(
                  OperationExpression::OpSub,
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))),
              Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBinOp(
                  OperationExpression::OpSub,
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)))), Expr::MakeBitVector(1, 1))), nullptr)
        );
        /* semantic: op0.val = res */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("res", VariableExpression::Use)));
        /* semantic: free_var('count') */
        AllExpr.push_back(Expr::MakeVar("count", VariableExpression::Free));
        /* semantic: free_var('res') */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x2:
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Rcl);
      if (Operand__Eb_CL(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: alloc_var('count', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("count", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: count = bit_cast(op1.val, int_type(op0.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, rInsn.GetOperand(1), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()))));
        /* semantic: call('count_mask') */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x40),
          Expr::MakeAssign(
            Expr::MakeVar("count", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeVar("count", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3f))),
          Expr::MakeAssign(
            Expr::MakeVar("count", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeVar("count", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1f)))));
        /* semantic: alloc_var('rol_val', concat(op0.bit, ignore(' + 1'))) */
        AllExpr.push_back(Expr::MakeVar("rol_val", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize() + 1));
        /* semantic: rol_val = bit_cast(op0.val, int_type(concat(op0.bit, ignore(' + 1')))) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("rol_val", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, rInsn.GetOperand(0), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize() + 1, rInsn.GetOperand(0)->GetBitSize() + 1))));
        /* semantic: rol_val |= (bit_cast(cf.id, int_type(concat(op0.bit, ignore(' + 1')))) << int(concat(op0.bit, ignore(' + 1')), op0.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("rol_val", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpOr,
            Expr::MakeVar("rol_val", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpLls,
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeId(X86_FlCf, &m_CpuInfo), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize() + 1, rInsn.GetOperand(0)->GetBitSize() + 1)),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize() + 1, rInsn.GetOperand(0)->GetBitSize()))))
        );
        /* semantic: rol_val = rol(rol_val, bit_cast(count, int_type(concat(op0.bit, ignore(' + 1'))))) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("rol_val", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpRol, Expr::MakeVar("rol_val", VariableExpression::Use), Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeVar("count", VariableExpression::Use), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize() + 1, rInsn.GetOperand(0)->GetBitSize() + 1)))));
        /* semantic: res = bit_cast(rol_val, int_type(op0.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeVar("rol_val", VariableExpression::Use), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()))));
        /* semantic: if __expr and count != int(op0.bit, 0):
          cf.id = bit_cast(rol_val >> int(concat(op0.bit, ignore(' + 1')), op0.bit), int_type1) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondNe,
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlCf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("rol_val", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize() + 1, rInsn.GetOperand(0)->GetBitSize())), Expr::MakeBitVector(1, 1))), nullptr)
        );
        /* semantic: if __expr and count == int(op0.bit, 1):
          of.id = bit_cast(cf.id ^ bit_cast(res >> (int(op0.bit, op0.bit) - int(op0.bit, 1)), int_type1), int_type1) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlOf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeId(X86_FlCf, &m_CpuInfo),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBinOp(
                  OperationExpression::OpSub,
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 1))), Expr::MakeBitVector(1, 1))), nullptr)
        );
        /* semantic: op0.val = res */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("res", VariableExpression::Use)));
        /* semantic: free_var('rol_val') */
        AllExpr.push_back(Expr::MakeVar("rol_val", VariableExpression::Free));
        /* semantic: free_var('count') */
        AllExpr.push_back(Expr::MakeVar("count", VariableExpression::Free));
        /* semantic: free_var('res') */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x3:
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Rcr);
      if (Operand__Eb_CL(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: alloc_var('count', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("count", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: count = bit_cast(op1.val, int(op0.bit, op0.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, rInsn.GetOperand(1), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()))));
        /* semantic: call('count_mask') */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x40),
          Expr::MakeAssign(
            Expr::MakeVar("count", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeVar("count", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3f))),
          Expr::MakeAssign(
            Expr::MakeVar("count", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeVar("count", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1f)))));
        /* semantic: alloc_var('ror_val', concat(op0.bit, ignore(' + 1'))) */
        AllExpr.push_back(Expr::MakeVar("ror_val", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize() + 1));
        /* semantic: ror_val = bit_cast(op0.val, int_type(concat(op0.bit, ignore(' + 1')))) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("ror_val", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, rInsn.GetOperand(0), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize() + 1, rInsn.GetOperand(0)->GetBitSize() + 1))));
        /* semantic: ror_val |= (bit_cast(cf.id, int_type(concat(op0.bit, ignore(' + 1')))) << int(concat(op0.bit, ignore(' + 1')), op0.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("ror_val", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpOr,
            Expr::MakeVar("ror_val", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpLls,
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeId(X86_FlCf, &m_CpuInfo), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize() + 1, rInsn.GetOperand(0)->GetBitSize() + 1)),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize() + 1, rInsn.GetOperand(0)->GetBitSize()))))
        );
        /* semantic: ror_val = ror(ror_val, bit_cast(count, int_type(concat(op0.bit, ignore(' + 1'))))) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("ror_val", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpRor, Expr::MakeVar("ror_val", VariableExpression::Use), Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeVar("count", VariableExpression::Use), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize() + 1, rInsn.GetOperand(0)->GetBitSize() + 1)))));
        /* semantic: res = bit_cast(ror_val, int_type(op0.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeVar("ror_val", VariableExpression::Use), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()))));
        /* semantic: if __expr and count != int(op0.bit, 0):
          cf.id = bit_cast(ror_val >> int(concat(op0.bit, ignore(' + 1')), op0.bit), int_type1) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondNe,
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlCf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("ror_val", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize() + 1, rInsn.GetOperand(0)->GetBitSize())), Expr::MakeBitVector(1, 1))), nullptr)
        );
        /* semantic: if __expr and count == int(op0.bit, 1):
          of.id = bit_cast((res >> (int(op0.bit, op0.bit) - int(op0.bit, 1))) ^ (res >> (int(op0.bit, op0.bit) - int(op0.bit, 2))), int_type1) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlOf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBinOp(
                  OperationExpression::OpSub,
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))),
              Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBinOp(
                  OperationExpression::OpSub,
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)))), Expr::MakeBitVector(1, 1))), nullptr)
        );
        /* semantic: op0.val = res */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("res", VariableExpression::Use)));
        /* semantic: free_var('ror_val') */
        AllExpr.push_back(Expr::MakeVar("ror_val", VariableExpression::Free));
        /* semantic: free_var('count') */
        AllExpr.push_back(Expr::MakeVar("count", VariableExpression::Free));
        /* semantic: free_var('res') */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x4:
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Shl);
      if (Operand__Eb_CL(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: alloc_var('count', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("count", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: count = bit_cast(op1.val, int(op0.bit, op0.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, rInsn.GetOperand(1), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()))));
        /* semantic: call('count_mask') */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x40),
          Expr::MakeAssign(
            Expr::MakeVar("count", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeVar("count", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3f))),
          Expr::MakeAssign(
            Expr::MakeVar("count", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeVar("count", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1f)))));
        /* semantic: res = op0.val << count */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpLls,
            rInsn.GetOperand(0),
            Expr::MakeVar("count", VariableExpression::Use))));
        /* semantic: if __expr and count != int(op0.bit, 0):
          cf.id = bit_cast(op0.val >> (int(op0.bit, op0.bit) - count), int1(1))
          call('sign_flag')
          call('zero_flag')
          call('parity_flag') */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondNe,
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeBind({
          Expr::MakeAssign(
            Expr::MakeId(X86_FlCf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              rInsn.GetOperand(0),
              Expr::MakeBinOp(
                OperationExpression::OpSub,
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                Expr::MakeVar("count", VariableExpression::Use))), Expr::MakeBitVector(1, 0x1))),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlSf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBinOp(
                OperationExpression::OpSub,
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlZf, &m_CpuInfo),
            Expr::MakeTernaryCond(ConditionExpression::CondEq,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
            Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))),
          Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)),
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBitVector(1, 0x1)),
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeId(X86_FlPf, &m_CpuInfo),
            Expr::MakeVar("pf_tmp", VariableExpression::Use)),
          Expr::MakeVar("pf_tmp", VariableExpression::Free)})
        , nullptr)
        );
        /* semantic: if __expr and count == int(op0.bit, 1):
          of.id = bit_cast((op0.val >> (int(op0.bit, op0.bit) - int(op0.bit, 1))) ^ (op0.val >> (int(op0.bit, op0.bit) - int(op0.bit, 2))), int1(1)) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlOf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(
                OperationExpression::OpLrs,
                rInsn.GetOperand(0),
                Expr::MakeBinOp(
                  OperationExpression::OpSub,
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))),
              Expr::MakeBinOp(
                OperationExpression::OpLrs,
                rInsn.GetOperand(0),
                Expr::MakeBinOp(
                  OperationExpression::OpSub,
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)))), Expr::MakeBitVector(1, 0x1))), nullptr)
        );
        /* semantic: op0.val = res */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("res", VariableExpression::Use)));
        /* semantic: free_var('count') */
        AllExpr.push_back(Expr::MakeVar("count", VariableExpression::Free));
        /* semantic: free_var('res') */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x5:
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Shr);
      if (Operand__Eb_CL(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: alloc_var('count', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("count", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: count = bit_cast(op1.val, int(op0.bit, op0.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, rInsn.GetOperand(1), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()))));
        /* semantic: call('count_mask') */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x40),
          Expr::MakeAssign(
            Expr::MakeVar("count", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeVar("count", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3f))),
          Expr::MakeAssign(
            Expr::MakeVar("count", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeVar("count", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1f)))));
        /* semantic: res = op0.val >> count */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpLrs,
            rInsn.GetOperand(0),
            Expr::MakeVar("count", VariableExpression::Use))));
        /* semantic: if __expr and count != int(op0.bit, 0):
          cf.id = bit_cast(op0.val >> (count - int(op0.bit, 1)), int1(1))
          call('sign_flag')
          call('zero_flag')
          call('parity_flag') */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondNe,
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeBind({
          Expr::MakeAssign(
            Expr::MakeId(X86_FlCf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              rInsn.GetOperand(0),
              Expr::MakeBinOp(
                OperationExpression::OpSub,
                Expr::MakeVar("count", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlSf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBinOp(
                OperationExpression::OpSub,
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlZf, &m_CpuInfo),
            Expr::MakeTernaryCond(ConditionExpression::CondEq,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
            Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))),
          Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)),
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBitVector(1, 0x1)),
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeId(X86_FlPf, &m_CpuInfo),
            Expr::MakeVar("pf_tmp", VariableExpression::Use)),
          Expr::MakeVar("pf_tmp", VariableExpression::Free)})
        , nullptr)
        );
        /* semantic: if __expr and count == int(op0.bit, 1):
          of.id = bit_cast((op0.val >> (int(op0.bit, op0.bit) - int(op0.bit, 1))), int1(1)) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlOf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              rInsn.GetOperand(0),
              Expr::MakeBinOp(
                OperationExpression::OpSub,
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))), nullptr)
        );
        /* semantic: op0.val = res */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("res", VariableExpression::Use)));
        /* semantic: free_var('count') */
        AllExpr.push_back(Expr::MakeVar("count", VariableExpression::Free));
        /* semantic: free_var('res') */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x6:
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Sal);
      if (Operand__Eb_CL(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: alloc_var('count', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("count", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: count = bit_cast(op1.val, int(op0.bit, op0.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, rInsn.GetOperand(1), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()))));
        /* semantic: call('count_mask') */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x40),
          Expr::MakeAssign(
            Expr::MakeVar("count", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeVar("count", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3f))),
          Expr::MakeAssign(
            Expr::MakeVar("count", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeVar("count", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1f)))));
        /* semantic: res = op0.val << count */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpLls,
            rInsn.GetOperand(0),
            Expr::MakeVar("count", VariableExpression::Use))));
        /* semantic: if __expr and count != int(op0.bit, 0):
          cf.id = bit_cast(op0.val >> (int(op0.bit, op0.bit) - count), int1(1))
          call('sign_flag')
          call('zero_flag')
          call('parity_flag') */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondNe,
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeBind({
          Expr::MakeAssign(
            Expr::MakeId(X86_FlCf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              rInsn.GetOperand(0),
              Expr::MakeBinOp(
                OperationExpression::OpSub,
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                Expr::MakeVar("count", VariableExpression::Use))), Expr::MakeBitVector(1, 0x1))),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlSf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBinOp(
                OperationExpression::OpSub,
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlZf, &m_CpuInfo),
            Expr::MakeTernaryCond(ConditionExpression::CondEq,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
            Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))),
          Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)),
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBitVector(1, 0x1)),
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeId(X86_FlPf, &m_CpuInfo),
            Expr::MakeVar("pf_tmp", VariableExpression::Use)),
          Expr::MakeVar("pf_tmp", VariableExpression::Free)})
        , nullptr)
        );
        /* semantic: if __expr and count == int(op0.bit, 1):
          of.id = bit_cast((op0.val >> (int(op0.bit, op0.bit) - int(op0.bit, 1))) ^ (op0.val >> (int(op0.bit, op0.bit) - int(op0.bit, 2))), int1(1)) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlOf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(
                OperationExpression::OpLrs,
                rInsn.GetOperand(0),
                Expr::MakeBinOp(
                  OperationExpression::OpSub,
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))),
              Expr::MakeBinOp(
                OperationExpression::OpLrs,
                rInsn.GetOperand(0),
                Expr::MakeBinOp(
                  OperationExpression::OpSub,
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)))), Expr::MakeBitVector(1, 0x1))), nullptr)
        );
        /* semantic: op0.val = res */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("res", VariableExpression::Use)));
        /* semantic: free_var('count') */
        AllExpr.push_back(Expr::MakeVar("count", VariableExpression::Free));
        /* semantic: free_var('res') */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x7:
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Sar);
      if (Operand__Eb_CL(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: alloc_var('count', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("count", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: count = bit_cast(op1.val, int(op0.bit, op0.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, rInsn.GetOperand(1), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()))));
        /* semantic: call('count_mask') */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x40),
          Expr::MakeAssign(
            Expr::MakeVar("count", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeVar("count", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3f))),
          Expr::MakeAssign(
            Expr::MakeVar("count", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeVar("count", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1f)))));
        /* semantic: res = ars(op0.val, count) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpArs, rInsn.GetOperand(0), Expr::MakeVar("count", VariableExpression::Use))));
        /* semantic: if __expr and count != int(op0.bit, 0):
          if __expr and count > int(op0.bit, op0.bit): cf.id = bit_cast(op0.val >> (int(op0.bit, op0.bit) - int(op0.bit, 1)), int1(1))
          else: cf.id = bit_cast(op0.val >> (count - int(op0.bit, 1)), int1(1))
          call('sign_flag')
          call('zero_flag')
          call('parity_flag') */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondNe,
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeBind({
          Expr::MakeIfElseCond(
            ConditionExpression::CondUgt,
            Expr::MakeVar("count", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeAssign(
              Expr::MakeId(X86_FlCf, &m_CpuInfo),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                rInsn.GetOperand(0),
                Expr::MakeBinOp(
                  OperationExpression::OpSub,
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))),
            Expr::MakeAssign(
              Expr::MakeId(X86_FlCf, &m_CpuInfo),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                rInsn.GetOperand(0),
                Expr::MakeBinOp(
                  OperationExpression::OpSub,
                  Expr::MakeVar("count", VariableExpression::Use),
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1)))),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlSf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBinOp(
                OperationExpression::OpSub,
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlZf, &m_CpuInfo),
            Expr::MakeTernaryCond(ConditionExpression::CondEq,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
            Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))),
          Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)),
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBitVector(1, 0x1)),
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeId(X86_FlPf, &m_CpuInfo),
            Expr::MakeVar("pf_tmp", VariableExpression::Use)),
          Expr::MakeVar("pf_tmp", VariableExpression::Free)})
        , nullptr)
        );
        /* semantic: if __expr and count == int(op0.bit, 1):
          of.id = int1(0) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlOf, &m_CpuInfo),
            Expr::MakeBitVector(1, 0x0)), nullptr)
        );
        /* semantic: op0.val = res */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("res", VariableExpression::Use)));
        /* semantic: free_var('count') */
        AllExpr.push_back(Expr::MakeVar("count", VariableExpression::Free));
        /* semantic: free_var('res') */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    default:
      return false;
    }
}

/** group:
 * mnemonic: rol
 * opcode: 00
 * operand: ['Eb', 'CL']
 * semantic: alloc_var('res', op0.bit);
alloc_var('count', op0.bit);
count = bit_cast(op1.val, int(op0.bit, op0.bit));
call('count_mask');
res = rol(op0.val, count);
if __expr and count != int(op0.bit, 0):
  cf.id = bit_cast(res, int_type1);
if __expr and count == int(op0.bit, 1):
  of.id = bit_cast(bit_cast(cf.id, int_type(op0.bit)) ^ (res >> (int(op0.bit,op0.bit) - int(op0.bit, 1))), int_type1);
op0.val = res;
free_var('count');
free_var('res');

 *
 * mnemonic: ror
 * opcode: 01
 * operand: ['Eb', 'CL']
 * semantic: alloc_var('res', op0.bit);
alloc_var('count', op0.bit);
count = bit_cast(op1.val, int_type(op0.bit));
call('count_mask');
res = ror(op0.val, count);
if __expr and count != int(op0.bit, 0):
  cf.id = bit_cast(res >> (int(op0.bit, op0.bit) - int(op0.bit, 1)), int_type1);
if __expr and count == int(op0.bit, 1):
  of.id = bit_cast((res >> (int(op0.bit, op0.bit) - int(op0.bit, 1))) ^ (res >> (int(op0.bit, op0.bit) - int(op0.bit, 2))), int_type1);
op0.val = res;
free_var('count');
free_var('res');

 *
 * mnemonic: rcl
 * opcode: 02
 * operand: ['Eb', 'CL']
 * semantic: alloc_var('res', op0.bit);
alloc_var('count', op0.bit);
count = bit_cast(op1.val, int_type(op0.bit));
call('count_mask');
alloc_var('rol_val', concat(op0.bit, ignore(' + 1')));
rol_val = bit_cast(op0.val, int_type(concat(op0.bit, ignore(' + 1'))));
rol_val |= (bit_cast(cf.id, int_type(concat(op0.bit, ignore(' + 1')))) << int(concat(op0.bit, ignore(' + 1')), op0.bit));
rol_val = rol(rol_val, bit_cast(count, int_type(concat(op0.bit, ignore(' + 1')))));
res = bit_cast(rol_val, int_type(op0.bit));
if __expr and count != int(op0.bit, 0):
  cf.id = bit_cast(rol_val >> int(concat(op0.bit, ignore(' + 1')), op0.bit), int_type1);
if __expr and count == int(op0.bit, 1):
  of.id = bit_cast(cf.id ^ bit_cast(res >> (int(op0.bit, op0.bit) - int(op0.bit, 1)), int_type1), int_type1);
op0.val = res;
free_var('rol_val');
free_var('count');
free_var('res');

 *
 * mnemonic: rcr
 * opcode: 03
 * operand: ['Eb', 'CL']
 * semantic: alloc_var('res', op0.bit);
alloc_var('count', op0.bit);
count = bit_cast(op1.val, int(op0.bit, op0.bit));
call('count_mask');
alloc_var('ror_val', concat(op0.bit, ignore(' + 1')));
ror_val = bit_cast(op0.val, int_type(concat(op0.bit, ignore(' + 1'))));
ror_val |= (bit_cast(cf.id, int_type(concat(op0.bit, ignore(' + 1')))) << int(concat(op0.bit, ignore(' + 1')), op0.bit));
ror_val = ror(ror_val, bit_cast(count, int_type(concat(op0.bit, ignore(' + 1')))));
res = bit_cast(ror_val, int_type(op0.bit));
if __expr and count != int(op0.bit, 0):
  cf.id = bit_cast(ror_val >> int(concat(op0.bit, ignore(' + 1')), op0.bit), int_type1);
if __expr and count == int(op0.bit, 1):
  of.id = bit_cast((res >> (int(op0.bit, op0.bit) - int(op0.bit, 1))) ^ (res >> (int(op0.bit, op0.bit) - int(op0.bit, 2))), int_type1);
op0.val = res;
free_var('ror_val');
free_var('count');
free_var('res');

 *
 * mnemonic: shl
 * opcode: 04
 * operand: ['Eb', 'CL']
 * semantic: alloc_var('res', op0.bit);
alloc_var('count', op0.bit);
count = bit_cast(op1.val, int(op0.bit, op0.bit));
call('count_mask');
res = op0.val << count;
if __expr and count != int(op0.bit, 0):
  cf.id = bit_cast(op0.val >> (int(op0.bit, op0.bit) - count), int1(1))
  call('sign_flag')
  call('zero_flag')
  call('parity_flag');
if __expr and count == int(op0.bit, 1):
  of.id = bit_cast((op0.val >> (int(op0.bit, op0.bit) - int(op0.bit, 1))) ^ (op0.val >> (int(op0.bit, op0.bit) - int(op0.bit, 2))), int1(1));
op0.val = res;
free_var('count');
free_var('res');

 *
 * mnemonic: shr
 * opcode: 05
 * operand: ['Eb', 'CL']
 * semantic: alloc_var('res', op0.bit);
alloc_var('count', op0.bit);
count = bit_cast(op1.val, int(op0.bit, op0.bit));
call('count_mask');
res = op0.val >> count;
if __expr and count != int(op0.bit, 0):
  cf.id = bit_cast(op0.val >> (count - int(op0.bit, 1)), int1(1))
  call('sign_flag')
  call('zero_flag')
  call('parity_flag');
if __expr and count == int(op0.bit, 1):
  of.id = bit_cast((op0.val >> (int(op0.bit, op0.bit) - int(op0.bit, 1))), int1(1));
op0.val = res;
free_var('count');
free_var('res');

 *
 * mnemonic: sal
 * opcode: 06
 * operand: ['Eb', 'CL']
 * semantic: alloc_var('res', op0.bit);
alloc_var('count', op0.bit);
count = bit_cast(op1.val, int(op0.bit, op0.bit));
call('count_mask');
res = op0.val << count;
if __expr and count != int(op0.bit, 0):
  cf.id = bit_cast(op0.val >> (int(op0.bit, op0.bit) - count), int1(1))
  call('sign_flag')
  call('zero_flag')
  call('parity_flag');
if __expr and count == int(op0.bit, 1):
  of.id = bit_cast((op0.val >> (int(op0.bit, op0.bit) - int(op0.bit, 1))) ^ (op0.val >> (int(op0.bit, op0.bit) - int(op0.bit, 2))), int1(1));
op0.val = res;
free_var('count');
free_var('res');

 *
 * mnemonic: sar
 * opcode: 07
 * operand: ['Eb', 'CL']
 * semantic: alloc_var('res', op0.bit);
alloc_var('count', op0.bit);
count = bit_cast(op1.val, int(op0.bit, op0.bit));
call('count_mask');
res = ars(op0.val, count);
if __expr and count != int(op0.bit, 0):
  if __expr and count > int(op0.bit, op0.bit): cf.id = bit_cast(op0.val >> (int(op0.bit, op0.bit) - int(op0.bit, 1)), int1(1))
  else: cf.id = bit_cast(op0.val >> (count - int(op0.bit, 1)), int1(1))
  call('sign_flag')
  call('zero_flag')
  call('parity_flag');
if __expr and count == int(op0.bit, 1):
  of.id = int1(0);
op0.val = res;
free_var('count');
free_var('res');

 *
**/
bool X86Architecture::Table_1_d3(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    u8 ModRmByte;
    if (!rBinStrm.Read(Offset, ModRmByte))
      return false;

    x86::ModRM ModRm(ModRmByte);
    switch (ModRm.Reg())
    {
    case 0x0:
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Rol);
      if (Operand__Ev_CL(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: alloc_var('count', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("count", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: count = bit_cast(op1.val, int(op0.bit, op0.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, rInsn.GetOperand(1), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()))));
        /* semantic: call('count_mask') */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x40),
          Expr::MakeAssign(
            Expr::MakeVar("count", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeVar("count", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3f))),
          Expr::MakeAssign(
            Expr::MakeVar("count", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeVar("count", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1f)))));
        /* semantic: res = rol(op0.val, count) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpRol, rInsn.GetOperand(0), Expr::MakeVar("count", VariableExpression::Use))));
        /* semantic: if __expr and count != int(op0.bit, 0):
          cf.id = bit_cast(res, int_type1) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondNe,
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlCf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeVar("res", VariableExpression::Use), Expr::MakeBitVector(1, 1))), nullptr)
        );
        /* semantic: if __expr and count == int(op0.bit, 1):
          of.id = bit_cast(bit_cast(cf.id, int_type(op0.bit)) ^ (res >> (int(op0.bit,op0.bit) - int(op0.bit, 1))), int_type1) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlOf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeId(X86_FlCf, &m_CpuInfo), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize())),
              Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBinOp(
                  OperationExpression::OpSub,
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)))), Expr::MakeBitVector(1, 1))), nullptr)
        );
        /* semantic: op0.val = res */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("res", VariableExpression::Use)));
        /* semantic: free_var('count') */
        AllExpr.push_back(Expr::MakeVar("count", VariableExpression::Free));
        /* semantic: free_var('res') */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x1:
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Ror);
      if (Operand__Ev_CL(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: alloc_var('count', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("count", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: count = bit_cast(op1.val, int_type(op0.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, rInsn.GetOperand(1), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()))));
        /* semantic: call('count_mask') */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x40),
          Expr::MakeAssign(
            Expr::MakeVar("count", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeVar("count", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3f))),
          Expr::MakeAssign(
            Expr::MakeVar("count", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeVar("count", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1f)))));
        /* semantic: res = ror(op0.val, count) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpRor, rInsn.GetOperand(0), Expr::MakeVar("count", VariableExpression::Use))));
        /* semantic: if __expr and count != int(op0.bit, 0):
          cf.id = bit_cast(res >> (int(op0.bit, op0.bit) - int(op0.bit, 1)), int_type1) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondNe,
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlCf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBinOp(
                OperationExpression::OpSub,
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 1))), nullptr)
        );
        /* semantic: if __expr and count == int(op0.bit, 1):
          of.id = bit_cast((res >> (int(op0.bit, op0.bit) - int(op0.bit, 1))) ^ (res >> (int(op0.bit, op0.bit) - int(op0.bit, 2))), int_type1) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlOf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBinOp(
                  OperationExpression::OpSub,
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))),
              Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBinOp(
                  OperationExpression::OpSub,
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)))), Expr::MakeBitVector(1, 1))), nullptr)
        );
        /* semantic: op0.val = res */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("res", VariableExpression::Use)));
        /* semantic: free_var('count') */
        AllExpr.push_back(Expr::MakeVar("count", VariableExpression::Free));
        /* semantic: free_var('res') */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x2:
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Rcl);
      if (Operand__Ev_CL(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: alloc_var('count', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("count", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: count = bit_cast(op1.val, int_type(op0.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, rInsn.GetOperand(1), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()))));
        /* semantic: call('count_mask') */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x40),
          Expr::MakeAssign(
            Expr::MakeVar("count", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeVar("count", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3f))),
          Expr::MakeAssign(
            Expr::MakeVar("count", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeVar("count", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1f)))));
        /* semantic: alloc_var('rol_val', concat(op0.bit, ignore(' + 1'))) */
        AllExpr.push_back(Expr::MakeVar("rol_val", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize() + 1));
        /* semantic: rol_val = bit_cast(op0.val, int_type(concat(op0.bit, ignore(' + 1')))) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("rol_val", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, rInsn.GetOperand(0), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize() + 1, rInsn.GetOperand(0)->GetBitSize() + 1))));
        /* semantic: rol_val |= (bit_cast(cf.id, int_type(concat(op0.bit, ignore(' + 1')))) << int(concat(op0.bit, ignore(' + 1')), op0.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("rol_val", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpOr,
            Expr::MakeVar("rol_val", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpLls,
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeId(X86_FlCf, &m_CpuInfo), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize() + 1, rInsn.GetOperand(0)->GetBitSize() + 1)),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize() + 1, rInsn.GetOperand(0)->GetBitSize()))))
        );
        /* semantic: rol_val = rol(rol_val, bit_cast(count, int_type(concat(op0.bit, ignore(' + 1'))))) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("rol_val", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpRol, Expr::MakeVar("rol_val", VariableExpression::Use), Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeVar("count", VariableExpression::Use), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize() + 1, rInsn.GetOperand(0)->GetBitSize() + 1)))));
        /* semantic: res = bit_cast(rol_val, int_type(op0.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeVar("rol_val", VariableExpression::Use), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()))));
        /* semantic: if __expr and count != int(op0.bit, 0):
          cf.id = bit_cast(rol_val >> int(concat(op0.bit, ignore(' + 1')), op0.bit), int_type1) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondNe,
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlCf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("rol_val", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize() + 1, rInsn.GetOperand(0)->GetBitSize())), Expr::MakeBitVector(1, 1))), nullptr)
        );
        /* semantic: if __expr and count == int(op0.bit, 1):
          of.id = bit_cast(cf.id ^ bit_cast(res >> (int(op0.bit, op0.bit) - int(op0.bit, 1)), int_type1), int_type1) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlOf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeId(X86_FlCf, &m_CpuInfo),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBinOp(
                  OperationExpression::OpSub,
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 1))), Expr::MakeBitVector(1, 1))), nullptr)
        );
        /* semantic: op0.val = res */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("res", VariableExpression::Use)));
        /* semantic: free_var('rol_val') */
        AllExpr.push_back(Expr::MakeVar("rol_val", VariableExpression::Free));
        /* semantic: free_var('count') */
        AllExpr.push_back(Expr::MakeVar("count", VariableExpression::Free));
        /* semantic: free_var('res') */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x3:
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Rcr);
      if (Operand__Ev_CL(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: alloc_var('count', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("count", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: count = bit_cast(op1.val, int(op0.bit, op0.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, rInsn.GetOperand(1), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()))));
        /* semantic: call('count_mask') */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x40),
          Expr::MakeAssign(
            Expr::MakeVar("count", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeVar("count", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3f))),
          Expr::MakeAssign(
            Expr::MakeVar("count", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeVar("count", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1f)))));
        /* semantic: alloc_var('ror_val', concat(op0.bit, ignore(' + 1'))) */
        AllExpr.push_back(Expr::MakeVar("ror_val", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize() + 1));
        /* semantic: ror_val = bit_cast(op0.val, int_type(concat(op0.bit, ignore(' + 1')))) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("ror_val", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, rInsn.GetOperand(0), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize() + 1, rInsn.GetOperand(0)->GetBitSize() + 1))));
        /* semantic: ror_val |= (bit_cast(cf.id, int_type(concat(op0.bit, ignore(' + 1')))) << int(concat(op0.bit, ignore(' + 1')), op0.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("ror_val", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpOr,
            Expr::MakeVar("ror_val", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpLls,
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeId(X86_FlCf, &m_CpuInfo), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize() + 1, rInsn.GetOperand(0)->GetBitSize() + 1)),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize() + 1, rInsn.GetOperand(0)->GetBitSize()))))
        );
        /* semantic: ror_val = ror(ror_val, bit_cast(count, int_type(concat(op0.bit, ignore(' + 1'))))) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("ror_val", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpRor, Expr::MakeVar("ror_val", VariableExpression::Use), Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeVar("count", VariableExpression::Use), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize() + 1, rInsn.GetOperand(0)->GetBitSize() + 1)))));
        /* semantic: res = bit_cast(ror_val, int_type(op0.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeVar("ror_val", VariableExpression::Use), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()))));
        /* semantic: if __expr and count != int(op0.bit, 0):
          cf.id = bit_cast(ror_val >> int(concat(op0.bit, ignore(' + 1')), op0.bit), int_type1) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondNe,
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlCf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("ror_val", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize() + 1, rInsn.GetOperand(0)->GetBitSize())), Expr::MakeBitVector(1, 1))), nullptr)
        );
        /* semantic: if __expr and count == int(op0.bit, 1):
          of.id = bit_cast((res >> (int(op0.bit, op0.bit) - int(op0.bit, 1))) ^ (res >> (int(op0.bit, op0.bit) - int(op0.bit, 2))), int_type1) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlOf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBinOp(
                  OperationExpression::OpSub,
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))),
              Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBinOp(
                  OperationExpression::OpSub,
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)))), Expr::MakeBitVector(1, 1))), nullptr)
        );
        /* semantic: op0.val = res */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("res", VariableExpression::Use)));
        /* semantic: free_var('ror_val') */
        AllExpr.push_back(Expr::MakeVar("ror_val", VariableExpression::Free));
        /* semantic: free_var('count') */
        AllExpr.push_back(Expr::MakeVar("count", VariableExpression::Free));
        /* semantic: free_var('res') */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x4:
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Shl);
      if (Operand__Ev_CL(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: alloc_var('count', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("count", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: count = bit_cast(op1.val, int(op0.bit, op0.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, rInsn.GetOperand(1), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()))));
        /* semantic: call('count_mask') */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x40),
          Expr::MakeAssign(
            Expr::MakeVar("count", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeVar("count", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3f))),
          Expr::MakeAssign(
            Expr::MakeVar("count", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeVar("count", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1f)))));
        /* semantic: res = op0.val << count */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpLls,
            rInsn.GetOperand(0),
            Expr::MakeVar("count", VariableExpression::Use))));
        /* semantic: if __expr and count != int(op0.bit, 0):
          cf.id = bit_cast(op0.val >> (int(op0.bit, op0.bit) - count), int1(1))
          call('sign_flag')
          call('zero_flag')
          call('parity_flag') */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondNe,
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeBind({
          Expr::MakeAssign(
            Expr::MakeId(X86_FlCf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              rInsn.GetOperand(0),
              Expr::MakeBinOp(
                OperationExpression::OpSub,
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                Expr::MakeVar("count", VariableExpression::Use))), Expr::MakeBitVector(1, 0x1))),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlSf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBinOp(
                OperationExpression::OpSub,
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlZf, &m_CpuInfo),
            Expr::MakeTernaryCond(ConditionExpression::CondEq,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
            Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))),
          Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)),
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBitVector(1, 0x1)),
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeId(X86_FlPf, &m_CpuInfo),
            Expr::MakeVar("pf_tmp", VariableExpression::Use)),
          Expr::MakeVar("pf_tmp", VariableExpression::Free)})
        , nullptr)
        );
        /* semantic: if __expr and count == int(op0.bit, 1):
          of.id = bit_cast((op0.val >> (int(op0.bit, op0.bit) - int(op0.bit, 1))) ^ (op0.val >> (int(op0.bit, op0.bit) - int(op0.bit, 2))), int1(1)) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlOf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(
                OperationExpression::OpLrs,
                rInsn.GetOperand(0),
                Expr::MakeBinOp(
                  OperationExpression::OpSub,
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))),
              Expr::MakeBinOp(
                OperationExpression::OpLrs,
                rInsn.GetOperand(0),
                Expr::MakeBinOp(
                  OperationExpression::OpSub,
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)))), Expr::MakeBitVector(1, 0x1))), nullptr)
        );
        /* semantic: op0.val = res */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("res", VariableExpression::Use)));
        /* semantic: free_var('count') */
        AllExpr.push_back(Expr::MakeVar("count", VariableExpression::Free));
        /* semantic: free_var('res') */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x5:
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Shr);
      if (Operand__Ev_CL(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: alloc_var('count', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("count", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: count = bit_cast(op1.val, int(op0.bit, op0.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, rInsn.GetOperand(1), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()))));
        /* semantic: call('count_mask') */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x40),
          Expr::MakeAssign(
            Expr::MakeVar("count", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeVar("count", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3f))),
          Expr::MakeAssign(
            Expr::MakeVar("count", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeVar("count", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1f)))));
        /* semantic: res = op0.val >> count */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpLrs,
            rInsn.GetOperand(0),
            Expr::MakeVar("count", VariableExpression::Use))));
        /* semantic: if __expr and count != int(op0.bit, 0):
          cf.id = bit_cast(op0.val >> (count - int(op0.bit, 1)), int1(1))
          call('sign_flag')
          call('zero_flag')
          call('parity_flag') */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondNe,
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeBind({
          Expr::MakeAssign(
            Expr::MakeId(X86_FlCf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              rInsn.GetOperand(0),
              Expr::MakeBinOp(
                OperationExpression::OpSub,
                Expr::MakeVar("count", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlSf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBinOp(
                OperationExpression::OpSub,
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlZf, &m_CpuInfo),
            Expr::MakeTernaryCond(ConditionExpression::CondEq,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
            Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))),
          Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)),
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBitVector(1, 0x1)),
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeId(X86_FlPf, &m_CpuInfo),
            Expr::MakeVar("pf_tmp", VariableExpression::Use)),
          Expr::MakeVar("pf_tmp", VariableExpression::Free)})
        , nullptr)
        );
        /* semantic: if __expr and count == int(op0.bit, 1):
          of.id = bit_cast((op0.val >> (int(op0.bit, op0.bit) - int(op0.bit, 1))), int1(1)) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlOf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              rInsn.GetOperand(0),
              Expr::MakeBinOp(
                OperationExpression::OpSub,
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))), nullptr)
        );
        /* semantic: op0.val = res */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("res", VariableExpression::Use)));
        /* semantic: free_var('count') */
        AllExpr.push_back(Expr::MakeVar("count", VariableExpression::Free));
        /* semantic: free_var('res') */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x6:
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Sal);
      if (Operand__Ev_CL(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: alloc_var('count', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("count", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: count = bit_cast(op1.val, int(op0.bit, op0.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, rInsn.GetOperand(1), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()))));
        /* semantic: call('count_mask') */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x40),
          Expr::MakeAssign(
            Expr::MakeVar("count", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeVar("count", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3f))),
          Expr::MakeAssign(
            Expr::MakeVar("count", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeVar("count", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1f)))));
        /* semantic: res = op0.val << count */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpLls,
            rInsn.GetOperand(0),
            Expr::MakeVar("count", VariableExpression::Use))));
        /* semantic: if __expr and count != int(op0.bit, 0):
          cf.id = bit_cast(op0.val >> (int(op0.bit, op0.bit) - count), int1(1))
          call('sign_flag')
          call('zero_flag')
          call('parity_flag') */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondNe,
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeBind({
          Expr::MakeAssign(
            Expr::MakeId(X86_FlCf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              rInsn.GetOperand(0),
              Expr::MakeBinOp(
                OperationExpression::OpSub,
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                Expr::MakeVar("count", VariableExpression::Use))), Expr::MakeBitVector(1, 0x1))),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlSf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBinOp(
                OperationExpression::OpSub,
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlZf, &m_CpuInfo),
            Expr::MakeTernaryCond(ConditionExpression::CondEq,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
            Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))),
          Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)),
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBitVector(1, 0x1)),
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeId(X86_FlPf, &m_CpuInfo),
            Expr::MakeVar("pf_tmp", VariableExpression::Use)),
          Expr::MakeVar("pf_tmp", VariableExpression::Free)})
        , nullptr)
        );
        /* semantic: if __expr and count == int(op0.bit, 1):
          of.id = bit_cast((op0.val >> (int(op0.bit, op0.bit) - int(op0.bit, 1))) ^ (op0.val >> (int(op0.bit, op0.bit) - int(op0.bit, 2))), int1(1)) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlOf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(
                OperationExpression::OpLrs,
                rInsn.GetOperand(0),
                Expr::MakeBinOp(
                  OperationExpression::OpSub,
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))),
              Expr::MakeBinOp(
                OperationExpression::OpLrs,
                rInsn.GetOperand(0),
                Expr::MakeBinOp(
                  OperationExpression::OpSub,
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)))), Expr::MakeBitVector(1, 0x1))), nullptr)
        );
        /* semantic: op0.val = res */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("res", VariableExpression::Use)));
        /* semantic: free_var('count') */
        AllExpr.push_back(Expr::MakeVar("count", VariableExpression::Free));
        /* semantic: free_var('res') */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x7:
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Sar);
      if (Operand__Ev_CL(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: alloc_var('count', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("count", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: count = bit_cast(op1.val, int(op0.bit, op0.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, rInsn.GetOperand(1), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()))));
        /* semantic: call('count_mask') */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x40),
          Expr::MakeAssign(
            Expr::MakeVar("count", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeVar("count", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3f))),
          Expr::MakeAssign(
            Expr::MakeVar("count", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeVar("count", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1f)))));
        /* semantic: res = ars(op0.val, count) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpArs, rInsn.GetOperand(0), Expr::MakeVar("count", VariableExpression::Use))));
        /* semantic: if __expr and count != int(op0.bit, 0):
          if __expr and count > int(op0.bit, op0.bit): cf.id = bit_cast(op0.val >> (int(op0.bit, op0.bit) - int(op0.bit, 1)), int1(1))
          else: cf.id = bit_cast(op0.val >> (count - int(op0.bit, 1)), int1(1))
          call('sign_flag')
          call('zero_flag')
          call('parity_flag') */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondNe,
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeBind({
          Expr::MakeIfElseCond(
            ConditionExpression::CondUgt,
            Expr::MakeVar("count", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeAssign(
              Expr::MakeId(X86_FlCf, &m_CpuInfo),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                rInsn.GetOperand(0),
                Expr::MakeBinOp(
                  OperationExpression::OpSub,
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))),
            Expr::MakeAssign(
              Expr::MakeId(X86_FlCf, &m_CpuInfo),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                rInsn.GetOperand(0),
                Expr::MakeBinOp(
                  OperationExpression::OpSub,
                  Expr::MakeVar("count", VariableExpression::Use),
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1)))),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlSf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBinOp(
                OperationExpression::OpSub,
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlZf, &m_CpuInfo),
            Expr::MakeTernaryCond(ConditionExpression::CondEq,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
            Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))),
          Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)),
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBitVector(1, 0x1)),
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeId(X86_FlPf, &m_CpuInfo),
            Expr::MakeVar("pf_tmp", VariableExpression::Use)),
          Expr::MakeVar("pf_tmp", VariableExpression::Free)})
        , nullptr)
        );
        /* semantic: if __expr and count == int(op0.bit, 1):
          of.id = int1(0) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlOf, &m_CpuInfo),
            Expr::MakeBitVector(1, 0x0)), nullptr)
        );
        /* semantic: op0.val = res */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("res", VariableExpression::Use)));
        /* semantic: free_var('count') */
        AllExpr.push_back(Expr::MakeVar("count", VariableExpression::Free));
        /* semantic: free_var('res') */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    default:
      return false;
    }
}

/** instruction
 * mnemonic: aam
 * clear_flags: ['of', 'af', 'cf']
 * semantic: alloc_var('tmp_al', al.bit);
alloc_var('pf_tmp', pf.bit);
tmp_al = al.id;
ah.id = tmp_al / op0.val;
al.id = tmp_al % op0.val;
# Start updating ZF
if __expr and al.id == int(al.bit, 0): zf.id = int1(1)
else: zf.id = int1(0);
# Start updating SF
sf.id = bit_cast(al.id >> (int(al.bit, al.bit) - int(al.bit, 1)), int1(1));
# Start updating PF
pf_tmp = int1(1);
pf_tmp ^= bit_cast(al.id >> int(al.bit, 0), int1(1));
pf_tmp ^= bit_cast(al.id >> int(al.bit, 1), int1(1));
pf_tmp ^= bit_cast(al.id >> int(al.bit, 2), int1(1));
pf_tmp ^= bit_cast(al.id >> int(al.bit, 3), int1(1));
pf_tmp ^= bit_cast(al.id >> int(al.bit, 4), int1(1));
pf_tmp ^= bit_cast(al.id >> int(al.bit, 5), int1(1));
pf_tmp ^= bit_cast(al.id >> int(al.bit, 6), int1(1));
pf_tmp ^= bit_cast(al.id >> int(al.bit, 7), int1(1));
pf.id = pf_tmp;
free_var('pf_tmp');
free_var('tmp_al');

 * attr: ['nm64']
 * operand: ['Ib']
 * opcode: d4
 * update_flags: ['sf', 'zf', 'pf']
**/
bool X86Architecture::Table_1_d4(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (Mode != X86_Bit_64)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Aam);
      if (Operand__Ib(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        rInsn.SetUpdatedFlags(X86_FlSf | X86_FlZf | X86_FlPf);
        rInsn.SetClearedFlags(X86_FlOf | X86_FlAf | X86_FlCf);
        AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlOf, &m_CpuInfo), Expr::MakeBoolean(false)));
        AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlAf, &m_CpuInfo), Expr::MakeBoolean(false)));
        AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlCf, &m_CpuInfo), Expr::MakeBoolean(false)));
        /* semantic: alloc_var('tmp_al', al.bit) */
        AllExpr.push_back(Expr::MakeVar("tmp_al", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_Reg_Al)));
        /* semantic: alloc_var('pf_tmp', pf.bit) */
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
        /* semantic: tmp_al = al.id */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("tmp_al", VariableExpression::Use),
          Expr::MakeId(X86_Reg_Al, &m_CpuInfo)));
        /* semantic: ah.id = tmp_al / op0.val */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_Reg_Ah, &m_CpuInfo),
          Expr::MakeBinOp(
            OperationExpression::OpUDiv,
            Expr::MakeVar("tmp_al", VariableExpression::Use),
            rInsn.GetOperand(0))));
        /* semantic: al.id = tmp_al % op0.val */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_Reg_Al, &m_CpuInfo),
          Expr::MakeBinOp(
            OperationExpression::OpUMod,
            Expr::MakeVar("tmp_al", VariableExpression::Use),
            rInsn.GetOperand(0))));
        /* semantic: # Start updating ZF
        if __expr and al.id == int(al.bit, 0): zf.id = int1(1)
        else: zf.id = int1(0) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeId(X86_Reg_Al, &m_CpuInfo),
          Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(X86_Reg_Al), 0x0),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlZf, &m_CpuInfo),
            Expr::MakeBitVector(1, 0x1)),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlZf, &m_CpuInfo),
            Expr::MakeBitVector(1, 0x0))));
        /* semantic: # Start updating SF
        sf.id = bit_cast(al.id >> (int(al.bit, al.bit) - int(al.bit, 1)), int1(1)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlSf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeId(X86_Reg_Al, &m_CpuInfo),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(X86_Reg_Al), m_CpuInfo.GetSizeOfRegisterInBit(X86_Reg_Al)),
              Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(X86_Reg_Al), 0x1))), Expr::MakeBitVector(1, 0x1))));
        /* semantic: # Start updating PF
        pf_tmp = int1(1) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBitVector(1, 0x1)));
        /* semantic: pf_tmp ^= bit_cast(al.id >> int(al.bit, 0), int1(1)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeId(X86_Reg_Al, &m_CpuInfo),
              Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(X86_Reg_Al), 0x0)), Expr::MakeBitVector(1, 0x1))))
        );
        /* semantic: pf_tmp ^= bit_cast(al.id >> int(al.bit, 1), int1(1)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeId(X86_Reg_Al, &m_CpuInfo),
              Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(X86_Reg_Al), 0x1)), Expr::MakeBitVector(1, 0x1))))
        );
        /* semantic: pf_tmp ^= bit_cast(al.id >> int(al.bit, 2), int1(1)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeId(X86_Reg_Al, &m_CpuInfo),
              Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(X86_Reg_Al), 0x2)), Expr::MakeBitVector(1, 0x1))))
        );
        /* semantic: pf_tmp ^= bit_cast(al.id >> int(al.bit, 3), int1(1)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeId(X86_Reg_Al, &m_CpuInfo),
              Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(X86_Reg_Al), 0x3)), Expr::MakeBitVector(1, 0x1))))
        );
        /* semantic: pf_tmp ^= bit_cast(al.id >> int(al.bit, 4), int1(1)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeId(X86_Reg_Al, &m_CpuInfo),
              Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(X86_Reg_Al), 0x4)), Expr::MakeBitVector(1, 0x1))))
        );
        /* semantic: pf_tmp ^= bit_cast(al.id >> int(al.bit, 5), int1(1)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeId(X86_Reg_Al, &m_CpuInfo),
              Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(X86_Reg_Al), 0x5)), Expr::MakeBitVector(1, 0x1))))
        );
        /* semantic: pf_tmp ^= bit_cast(al.id >> int(al.bit, 6), int1(1)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeId(X86_Reg_Al, &m_CpuInfo),
              Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(X86_Reg_Al), 0x6)), Expr::MakeBitVector(1, 0x1))))
        );
        /* semantic: pf_tmp ^= bit_cast(al.id >> int(al.bit, 7), int1(1)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeId(X86_Reg_Al, &m_CpuInfo),
              Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(X86_Reg_Al), 0x7)), Expr::MakeBitVector(1, 0x1))))
        );
        /* semantic: pf.id = pf_tmp */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlPf, &m_CpuInfo),
          Expr::MakeVar("pf_tmp", VariableExpression::Use)));
        /* semantic: free_var('pf_tmp') */
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
        /* semantic: free_var('tmp_al') */
        AllExpr.push_back(Expr::MakeVar("tmp_al", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    else
      return false;
}

/** instruction
 * mnemonic: aad
 * clear_flags: ['of', 'af', 'cf']
 * semantic: alloc_var('tmp_al', al.bit);
alloc_var('tmp_ah', ah.bit);
alloc_var('pf_tmp', pf.bit);
tmp_al = al.id;
tmp_ah = ah.id;
al.id = (tmp_al + (tmp_ah * op0.val)) & int(al.bit, 0xff);
ah.id = int(ah.bit, 0);
# Start updating ZF
if __expr and al.id == int(al.bit, 0): zf.id = int1(1)
else: zf.id = int1(0);
# Start updating SF
sf.id = bit_cast(al.id >> (int(al.bit, al.bit) - int(al.bit, 1)), int1(1));
# Start updating PF
pf_tmp = int1(1);
pf_tmp ^= bit_cast(al.id >> int(al.bit, 0), int1(1));
pf_tmp ^= bit_cast(al.id >> int(al.bit, 1), int1(1));
pf_tmp ^= bit_cast(al.id >> int(al.bit, 2), int1(1));
pf_tmp ^= bit_cast(al.id >> int(al.bit, 3), int1(1));
pf_tmp ^= bit_cast(al.id >> int(al.bit, 4), int1(1));
pf_tmp ^= bit_cast(al.id >> int(al.bit, 5), int1(1));
pf_tmp ^= bit_cast(al.id >> int(al.bit, 6), int1(1));
pf_tmp ^= bit_cast(al.id >> int(al.bit, 7), int1(1));
pf.id = pf_tmp;
free_var('pf_tmp');
free_var('tmp_ah');
free_var('tmp_al');

 * attr: ['nm64']
 * operand: ['Ib']
 * opcode: d5
 * update_flags: ['sf', 'zf', 'pf']
**/
bool X86Architecture::Table_1_d5(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (Mode != X86_Bit_64)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Aad);
      if (Operand__Ib(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        rInsn.SetUpdatedFlags(X86_FlSf | X86_FlZf | X86_FlPf);
        rInsn.SetClearedFlags(X86_FlOf | X86_FlAf | X86_FlCf);
        AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlOf, &m_CpuInfo), Expr::MakeBoolean(false)));
        AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlAf, &m_CpuInfo), Expr::MakeBoolean(false)));
        AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlCf, &m_CpuInfo), Expr::MakeBoolean(false)));
        /* semantic: alloc_var('tmp_al', al.bit) */
        AllExpr.push_back(Expr::MakeVar("tmp_al", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_Reg_Al)));
        /* semantic: alloc_var('tmp_ah', ah.bit) */
        AllExpr.push_back(Expr::MakeVar("tmp_ah", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_Reg_Ah)));
        /* semantic: alloc_var('pf_tmp', pf.bit) */
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
        /* semantic: tmp_al = al.id */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("tmp_al", VariableExpression::Use),
          Expr::MakeId(X86_Reg_Al, &m_CpuInfo)));
        /* semantic: tmp_ah = ah.id */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("tmp_ah", VariableExpression::Use),
          Expr::MakeId(X86_Reg_Ah, &m_CpuInfo)));
        /* semantic: al.id = (tmp_al + (tmp_ah * op0.val)) & int(al.bit, 0xff) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_Reg_Al, &m_CpuInfo),
          Expr::MakeBinOp(
            OperationExpression::OpAnd,
            Expr::MakeBinOp(
              OperationExpression::OpAdd,
              Expr::MakeVar("tmp_al", VariableExpression::Use),
              Expr::MakeBinOp(
                OperationExpression::OpMul,
                Expr::MakeVar("tmp_ah", VariableExpression::Use),
                rInsn.GetOperand(0))),
            Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(X86_Reg_Al), 0xff))));
        /* semantic: ah.id = int(ah.bit, 0) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_Reg_Ah, &m_CpuInfo),
          Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(X86_Reg_Ah), 0x0)));
        /* semantic: # Start updating ZF
        if __expr and al.id == int(al.bit, 0): zf.id = int1(1)
        else: zf.id = int1(0) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeId(X86_Reg_Al, &m_CpuInfo),
          Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(X86_Reg_Al), 0x0),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlZf, &m_CpuInfo),
            Expr::MakeBitVector(1, 0x1)),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlZf, &m_CpuInfo),
            Expr::MakeBitVector(1, 0x0))));
        /* semantic: # Start updating SF
        sf.id = bit_cast(al.id >> (int(al.bit, al.bit) - int(al.bit, 1)), int1(1)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlSf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeId(X86_Reg_Al, &m_CpuInfo),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(X86_Reg_Al), m_CpuInfo.GetSizeOfRegisterInBit(X86_Reg_Al)),
              Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(X86_Reg_Al), 0x1))), Expr::MakeBitVector(1, 0x1))));
        /* semantic: # Start updating PF
        pf_tmp = int1(1) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBitVector(1, 0x1)));
        /* semantic: pf_tmp ^= bit_cast(al.id >> int(al.bit, 0), int1(1)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeId(X86_Reg_Al, &m_CpuInfo),
              Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(X86_Reg_Al), 0x0)), Expr::MakeBitVector(1, 0x1))))
        );
        /* semantic: pf_tmp ^= bit_cast(al.id >> int(al.bit, 1), int1(1)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeId(X86_Reg_Al, &m_CpuInfo),
              Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(X86_Reg_Al), 0x1)), Expr::MakeBitVector(1, 0x1))))
        );
        /* semantic: pf_tmp ^= bit_cast(al.id >> int(al.bit, 2), int1(1)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeId(X86_Reg_Al, &m_CpuInfo),
              Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(X86_Reg_Al), 0x2)), Expr::MakeBitVector(1, 0x1))))
        );
        /* semantic: pf_tmp ^= bit_cast(al.id >> int(al.bit, 3), int1(1)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeId(X86_Reg_Al, &m_CpuInfo),
              Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(X86_Reg_Al), 0x3)), Expr::MakeBitVector(1, 0x1))))
        );
        /* semantic: pf_tmp ^= bit_cast(al.id >> int(al.bit, 4), int1(1)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeId(X86_Reg_Al, &m_CpuInfo),
              Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(X86_Reg_Al), 0x4)), Expr::MakeBitVector(1, 0x1))))
        );
        /* semantic: pf_tmp ^= bit_cast(al.id >> int(al.bit, 5), int1(1)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeId(X86_Reg_Al, &m_CpuInfo),
              Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(X86_Reg_Al), 0x5)), Expr::MakeBitVector(1, 0x1))))
        );
        /* semantic: pf_tmp ^= bit_cast(al.id >> int(al.bit, 6), int1(1)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeId(X86_Reg_Al, &m_CpuInfo),
              Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(X86_Reg_Al), 0x6)), Expr::MakeBitVector(1, 0x1))))
        );
        /* semantic: pf_tmp ^= bit_cast(al.id >> int(al.bit, 7), int1(1)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeId(X86_Reg_Al, &m_CpuInfo),
              Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(X86_Reg_Al), 0x7)), Expr::MakeBitVector(1, 0x1))))
        );
        /* semantic: pf.id = pf_tmp */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlPf, &m_CpuInfo),
          Expr::MakeVar("pf_tmp", VariableExpression::Use)));
        /* semantic: free_var('pf_tmp') */
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
        /* semantic: free_var('tmp_ah') */
        AllExpr.push_back(Expr::MakeVar("tmp_ah", VariableExpression::Free));
        /* semantic: free_var('tmp_al') */
        AllExpr.push_back(Expr::MakeVar("tmp_al", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    else
      return false;
}

/** instruction
 * mnemonic: salc
 * test_flags: ['cf']
 * opcode: d6
 * attr: ['nm64']
**/
bool X86Architecture::Table_1_d6(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (Mode != X86_Bit_64)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Salc);
      {
        Expression::LSPType AllExpr;
        rInsn.SetTestedFlags(X86_FlCf);
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    else
      return false;
}

/** instruction
 * mnemonic: xlat
 * opcode: d7
**/
bool X86Architecture::Table_1_d7(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Xlat);
    return true;
}

/** instruction
 * opcode: d8
 * reference: fpu0
**/
bool X86Architecture::Table_1_d8(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    u8 ModRmByte;
    if (!rBinStrm.Read(Offset, ModRmByte))
      return false;

    if (ModRmByte < 0xc0)
    {
      u8 ModRmByte;
      if (!rBinStrm.Read(Offset, ModRmByte))
        return false;

      x86::ModRM ModRm(ModRmByte);
      switch (ModRm.Reg())
      {
      case 0x0:
        rInsn.Length()++;
        rInsn.SetOpcode(X86_Opcode_Fadd);
        if (Operand__m32fp(rBinStrm, Offset, rInsn, Mode) == false)
        {
          return false;
        }
        return true;
      case 0x1:
        rInsn.Length()++;
        rInsn.SetOpcode(X86_Opcode_Fmul);
        if (Operand__m32fp(rBinStrm, Offset, rInsn, Mode) == false)
        {
          return false;
        }
        return true;
      case 0x2:
        rInsn.Length()++;
        rInsn.SetOpcode(X86_Opcode_Fcom);
        if (Operand__m32fp(rBinStrm, Offset, rInsn, Mode) == false)
        {
          return false;
        }
        return true;
      case 0x3:
        rInsn.Length()++;
        rInsn.SetOpcode(X86_Opcode_Fcomp);
        if (Operand__m32fp(rBinStrm, Offset, rInsn, Mode) == false)
        {
          return false;
        }
        return true;
      case 0x4:
        rInsn.Length()++;
        rInsn.SetOpcode(X86_Opcode_Fsub);
        if (Operand__m32fp(rBinStrm, Offset, rInsn, Mode) == false)
        {
          return false;
        }
        return true;
      case 0x5:
        rInsn.Length()++;
        rInsn.SetOpcode(X86_Opcode_Fsubr);
        if (Operand__m32fp(rBinStrm, Offset, rInsn, Mode) == false)
        {
          return false;
        }
        return true;
      case 0x6:
        rInsn.Length()++;
        rInsn.SetOpcode(X86_Opcode_Fdiv);
        if (Operand__m32fp(rBinStrm, Offset, rInsn, Mode) == false)
        {
          return false;
        }
        return true;
      case 0x7:
        rInsn.Length()++;
        rInsn.SetOpcode(X86_Opcode_Fdivr);
        if (Operand__m32fp(rBinStrm, Offset, rInsn, Mode) == false)
        {
          return false;
        }
        return true;
      default:
        return false;
      }
    }
    else
    {
      u8 Opcode;
      if (!rBinStrm.Read(Offset, Opcode))
        return false;

      rInsn.Length()++;
      if (Opcode + 1 > sizeof(m_Table_fp1))
        return false;
      return (this->*m_Table_fp1[Opcode- 0xc0])(rBinStrm, Offset + 1, rInsn, Mode);
    }
}

/** instruction
 * opcode: d9
 * reference: fpu1
**/
bool X86Architecture::Table_1_d9(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    u8 ModRmByte;
    if (!rBinStrm.Read(Offset, ModRmByte))
      return false;

    if (ModRmByte < 0xc0)
    {
      u8 ModRmByte;
      if (!rBinStrm.Read(Offset, ModRmByte))
        return false;

      x86::ModRM ModRm(ModRmByte);
      switch (ModRm.Reg())
      {
      case 0x0:
        rInsn.Length()++;
        rInsn.SetOpcode(X86_Opcode_Fld);
        if (Operand__m32fp(rBinStrm, Offset, rInsn, Mode) == false)
        {
          return false;
        }
        return true;
      case 0x1:
        return false;
      case 0x2:
        rInsn.Length()++;
        rInsn.SetOpcode(X86_Opcode_Fst);
        if (Operand__m32fp(rBinStrm, Offset, rInsn, Mode) == false)
        {
          return false;
        }
        return true;
      case 0x3:
        rInsn.Length()++;
        rInsn.SetOpcode(X86_Opcode_Fstp);
        if (Operand__m32fp(rBinStrm, Offset, rInsn, Mode) == false)
        {
          return false;
        }
        return true;
      case 0x4:
        rInsn.Length()++;
        rInsn.SetOpcode(X86_Opcode_Fldenv);
        if (Operand__M(rBinStrm, Offset, rInsn, Mode) == false)
        {
          return false;
        }
        return true;
      case 0x5:
        rInsn.Length()++;
        rInsn.SetOpcode(X86_Opcode_Fldcw);
        if (Operand__Mw(rBinStrm, Offset, rInsn, Mode) == false)
        {
          return false;
        }
        return true;
      case 0x6:
        rInsn.Length()++;
        rInsn.SetOpcode(X86_Opcode_Fnstenv);
        if (Operand__M(rBinStrm, Offset, rInsn, Mode) == false)
        {
          return false;
        }
        return true;
      case 0x7:
        rInsn.Length()++;
        rInsn.SetOpcode(X86_Opcode_Fnstcw);
        if (Operand__Mw(rBinStrm, Offset, rInsn, Mode) == false)
        {
          return false;
        }
        return true;
      default:
        return false;
      }
    }
    else
    {
      u8 Opcode;
      if (!rBinStrm.Read(Offset, Opcode))
        return false;

      rInsn.Length()++;
      if (Opcode + 1 > sizeof(m_Table_fp2))
        return false;
      return (this->*m_Table_fp2[Opcode- 0xc0])(rBinStrm, Offset + 1, rInsn, Mode);
    }
}

/** instruction
 * opcode: da
 * reference: fpu2
**/
bool X86Architecture::Table_1_da(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    u8 ModRmByte;
    if (!rBinStrm.Read(Offset, ModRmByte))
      return false;

    if (ModRmByte < 0xc0)
    {
      u8 ModRmByte;
      if (!rBinStrm.Read(Offset, ModRmByte))
        return false;

      x86::ModRM ModRm(ModRmByte);
      switch (ModRm.Reg())
      {
      case 0x0:
        rInsn.Length()++;
        rInsn.SetOpcode(X86_Opcode_Fiadd);
        if (Operand__m32int(rBinStrm, Offset, rInsn, Mode) == false)
        {
          return false;
        }
        return true;
      case 0x1:
        rInsn.Length()++;
        rInsn.SetOpcode(X86_Opcode_Fimul);
        if (Operand__m32int(rBinStrm, Offset, rInsn, Mode) == false)
        {
          return false;
        }
        return true;
      case 0x2:
        rInsn.Length()++;
        rInsn.SetOpcode(X86_Opcode_Ficom);
        if (Operand__m32int(rBinStrm, Offset, rInsn, Mode) == false)
        {
          return false;
        }
        return true;
      case 0x3:
        rInsn.Length()++;
        rInsn.SetOpcode(X86_Opcode_Ficomp);
        if (Operand__m32int(rBinStrm, Offset, rInsn, Mode) == false)
        {
          return false;
        }
        return true;
      case 0x4:
        rInsn.Length()++;
        rInsn.SetOpcode(X86_Opcode_Fisub);
        if (Operand__m32int(rBinStrm, Offset, rInsn, Mode) == false)
        {
          return false;
        }
        return true;
      case 0x5:
        rInsn.Length()++;
        rInsn.SetOpcode(X86_Opcode_Fisubr);
        if (Operand__m32int(rBinStrm, Offset, rInsn, Mode) == false)
        {
          return false;
        }
        return true;
      case 0x6:
        rInsn.Length()++;
        rInsn.SetOpcode(X86_Opcode_Fidiv);
        if (Operand__m32int(rBinStrm, Offset, rInsn, Mode) == false)
        {
          return false;
        }
        return true;
      case 0x7:
        rInsn.Length()++;
        rInsn.SetOpcode(X86_Opcode_Fidivr);
        if (Operand__m32int(rBinStrm, Offset, rInsn, Mode) == false)
        {
          return false;
        }
        return true;
      default:
        return false;
      }
    }
    else
    {
      u8 Opcode;
      if (!rBinStrm.Read(Offset, Opcode))
        return false;

      rInsn.Length()++;
      if (Opcode + 1 > sizeof(m_Table_fp3))
        return false;
      return (this->*m_Table_fp3[Opcode- 0xc0])(rBinStrm, Offset + 1, rInsn, Mode);
    }
}

/** instruction
 * opcode: db
 * reference: fpu3
**/
bool X86Architecture::Table_1_db(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    u8 ModRmByte;
    if (!rBinStrm.Read(Offset, ModRmByte))
      return false;

    if (ModRmByte < 0xc0)
    {
      u8 ModRmByte;
      if (!rBinStrm.Read(Offset, ModRmByte))
        return false;

      x86::ModRM ModRm(ModRmByte);
      switch (ModRm.Reg())
      {
      case 0x0:
        rInsn.Length()++;
        rInsn.SetOpcode(X86_Opcode_Fild);
        if (Operand__m32int(rBinStrm, Offset, rInsn, Mode) == false)
        {
          return false;
        }
        return true;
      case 0x1:
        rInsn.Length()++;
        rInsn.SetOpcode(X86_Opcode_Fisttp);
        if (Operand__m32int(rBinStrm, Offset, rInsn, Mode) == false)
        {
          return false;
        }
        return true;
      case 0x2:
        rInsn.Length()++;
        rInsn.SetOpcode(X86_Opcode_Fist);
        if (Operand__m32int(rBinStrm, Offset, rInsn, Mode) == false)
        {
          return false;
        }
        return true;
      case 0x3:
        rInsn.Length()++;
        rInsn.SetOpcode(X86_Opcode_Fistp);
        if (Operand__m32int(rBinStrm, Offset, rInsn, Mode) == false)
        {
          return false;
        }
        return true;
      case 0x4:
        return false;
      case 0x5:
        rInsn.Length()++;
        rInsn.SetOpcode(X86_Opcode_Fld);
        if (Operand__m80fp(rBinStrm, Offset, rInsn, Mode) == false)
        {
          return false;
        }
        return true;
      case 0x6:
        return false;
      case 0x7:
        rInsn.Length()++;
        rInsn.SetOpcode(X86_Opcode_Fstp);
        if (Operand__m80fp(rBinStrm, Offset, rInsn, Mode) == false)
        {
          return false;
        }
        return true;
      default:
        return false;
      }
    }
    else
    {
      u8 Opcode;
      if (!rBinStrm.Read(Offset, Opcode))
        return false;

      rInsn.Length()++;
      if (Opcode + 1 > sizeof(m_Table_fp4))
        return false;
      return (this->*m_Table_fp4[Opcode- 0xc0])(rBinStrm, Offset + 1, rInsn, Mode);
    }
}

/** instruction
 * opcode: dc
 * reference: fpu4
**/
bool X86Architecture::Table_1_dc(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    u8 ModRmByte;
    if (!rBinStrm.Read(Offset, ModRmByte))
      return false;

    if (ModRmByte < 0xc0)
    {
      u8 ModRmByte;
      if (!rBinStrm.Read(Offset, ModRmByte))
        return false;

      x86::ModRM ModRm(ModRmByte);
      switch (ModRm.Reg())
      {
      case 0x0:
        rInsn.Length()++;
        rInsn.SetOpcode(X86_Opcode_Fadd);
        if (Operand__m64fp(rBinStrm, Offset, rInsn, Mode) == false)
        {
          return false;
        }
        return true;
      case 0x1:
        rInsn.Length()++;
        rInsn.SetOpcode(X86_Opcode_Fmul);
        if (Operand__m64fp(rBinStrm, Offset, rInsn, Mode) == false)
        {
          return false;
        }
        return true;
      case 0x2:
        rInsn.Length()++;
        rInsn.SetOpcode(X86_Opcode_Fcom);
        if (Operand__m64fp(rBinStrm, Offset, rInsn, Mode) == false)
        {
          return false;
        }
        return true;
      case 0x3:
        rInsn.Length()++;
        rInsn.SetOpcode(X86_Opcode_Fcomp);
        if (Operand__m64fp(rBinStrm, Offset, rInsn, Mode) == false)
        {
          return false;
        }
        return true;
      case 0x4:
        rInsn.Length()++;
        rInsn.SetOpcode(X86_Opcode_Fsub);
        if (Operand__m64fp(rBinStrm, Offset, rInsn, Mode) == false)
        {
          return false;
        }
        return true;
      case 0x5:
        rInsn.Length()++;
        rInsn.SetOpcode(X86_Opcode_Fsubr);
        if (Operand__m64fp(rBinStrm, Offset, rInsn, Mode) == false)
        {
          return false;
        }
        return true;
      case 0x6:
        rInsn.Length()++;
        rInsn.SetOpcode(X86_Opcode_Fdiv);
        if (Operand__m64fp(rBinStrm, Offset, rInsn, Mode) == false)
        {
          return false;
        }
        return true;
      case 0x7:
        rInsn.Length()++;
        rInsn.SetOpcode(X86_Opcode_Fdivr);
        if (Operand__m64fp(rBinStrm, Offset, rInsn, Mode) == false)
        {
          return false;
        }
        return true;
      default:
        return false;
      }
    }
    else
    {
      u8 Opcode;
      if (!rBinStrm.Read(Offset, Opcode))
        return false;

      rInsn.Length()++;
      if (Opcode + 1 > sizeof(m_Table_fp5))
        return false;
      return (this->*m_Table_fp5[Opcode- 0xc0])(rBinStrm, Offset + 1, rInsn, Mode);
    }
}

/** instruction
 * opcode: dd
 * reference: fpu5
**/
bool X86Architecture::Table_1_dd(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    u8 ModRmByte;
    if (!rBinStrm.Read(Offset, ModRmByte))
      return false;

    if (ModRmByte < 0xc0)
    {
      u8 ModRmByte;
      if (!rBinStrm.Read(Offset, ModRmByte))
        return false;

      x86::ModRM ModRm(ModRmByte);
      switch (ModRm.Reg())
      {
      case 0x0:
        rInsn.Length()++;
        rInsn.SetOpcode(X86_Opcode_Fld);
        if (Operand__m64fp(rBinStrm, Offset, rInsn, Mode) == false)
        {
          return false;
        }
        return true;
      case 0x1:
        rInsn.Length()++;
        rInsn.SetOpcode(X86_Opcode_Fisttp);
        if (Operand__m64int(rBinStrm, Offset, rInsn, Mode) == false)
        {
          return false;
        }
        return true;
      case 0x2:
        rInsn.Length()++;
        rInsn.SetOpcode(X86_Opcode_Fst);
        if (Operand__m64fp(rBinStrm, Offset, rInsn, Mode) == false)
        {
          return false;
        }
        return true;
      case 0x3:
        rInsn.Length()++;
        rInsn.SetOpcode(X86_Opcode_Fstp);
        if (Operand__m64fp(rBinStrm, Offset, rInsn, Mode) == false)
        {
          return false;
        }
        return true;
      case 0x4:
        rInsn.Length()++;
        rInsn.SetOpcode(X86_Opcode_Frstor);
        if (Operand__M(rBinStrm, Offset, rInsn, Mode) == false)
        {
          return false;
        }
        return true;
      case 0x5:
        return false;
      case 0x6:
        rInsn.Length()++;
        rInsn.SetOpcode(X86_Opcode_Fnsave);
        if (Operand__M(rBinStrm, Offset, rInsn, Mode) == false)
        {
          return false;
        }
        return true;
      case 0x7:
        rInsn.Length()++;
        rInsn.SetOpcode(X86_Opcode_Fnstsw);
        if (Operand__Mw(rBinStrm, Offset, rInsn, Mode) == false)
        {
          return false;
        }
        return true;
      default:
        return false;
      }
    }
    else
    {
      u8 Opcode;
      if (!rBinStrm.Read(Offset, Opcode))
        return false;

      rInsn.Length()++;
      if (Opcode + 1 > sizeof(m_Table_fp6))
        return false;
      return (this->*m_Table_fp6[Opcode- 0xc0])(rBinStrm, Offset + 1, rInsn, Mode);
    }
}

/** instruction
 * opcode: de
 * reference: fpu6
**/
bool X86Architecture::Table_1_de(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    u8 ModRmByte;
    if (!rBinStrm.Read(Offset, ModRmByte))
      return false;

    if (ModRmByte < 0xc0)
    {
      u8 ModRmByte;
      if (!rBinStrm.Read(Offset, ModRmByte))
        return false;

      x86::ModRM ModRm(ModRmByte);
      switch (ModRm.Reg())
      {
      case 0x0:
        rInsn.Length()++;
        rInsn.SetOpcode(X86_Opcode_Fiadd);
        if (Operand__m16int(rBinStrm, Offset, rInsn, Mode) == false)
        {
          return false;
        }
        return true;
      case 0x1:
        rInsn.Length()++;
        rInsn.SetOpcode(X86_Opcode_Fimul);
        if (Operand__m16int(rBinStrm, Offset, rInsn, Mode) == false)
        {
          return false;
        }
        return true;
      case 0x2:
        rInsn.Length()++;
        rInsn.SetOpcode(X86_Opcode_Ficom);
        if (Operand__m16int(rBinStrm, Offset, rInsn, Mode) == false)
        {
          return false;
        }
        return true;
      case 0x3:
        rInsn.Length()++;
        rInsn.SetOpcode(X86_Opcode_Ficomp);
        if (Operand__m16int(rBinStrm, Offset, rInsn, Mode) == false)
        {
          return false;
        }
        return true;
      case 0x4:
        rInsn.Length()++;
        rInsn.SetOpcode(X86_Opcode_Fisub);
        if (Operand__m16int(rBinStrm, Offset, rInsn, Mode) == false)
        {
          return false;
        }
        return true;
      case 0x5:
        rInsn.Length()++;
        rInsn.SetOpcode(X86_Opcode_Fisubr);
        if (Operand__m16int(rBinStrm, Offset, rInsn, Mode) == false)
        {
          return false;
        }
        return true;
      case 0x6:
        rInsn.Length()++;
        rInsn.SetOpcode(X86_Opcode_Fidiv);
        if (Operand__m16int(rBinStrm, Offset, rInsn, Mode) == false)
        {
          return false;
        }
        return true;
      case 0x7:
        rInsn.Length()++;
        rInsn.SetOpcode(X86_Opcode_Fidivr);
        if (Operand__m16int(rBinStrm, Offset, rInsn, Mode) == false)
        {
          return false;
        }
        return true;
      default:
        return false;
      }
    }
    else
    {
      u8 Opcode;
      if (!rBinStrm.Read(Offset, Opcode))
        return false;

      rInsn.Length()++;
      if (Opcode + 1 > sizeof(m_Table_fp7))
        return false;
      return (this->*m_Table_fp7[Opcode- 0xc0])(rBinStrm, Offset + 1, rInsn, Mode);
    }
}

/** instruction
 * opcode: df
 * reference: fpu7
**/
bool X86Architecture::Table_1_df(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    u8 ModRmByte;
    if (!rBinStrm.Read(Offset, ModRmByte))
      return false;

    if (ModRmByte < 0xc0)
    {
      u8 ModRmByte;
      if (!rBinStrm.Read(Offset, ModRmByte))
        return false;

      x86::ModRM ModRm(ModRmByte);
      switch (ModRm.Reg())
      {
      case 0x0:
        rInsn.Length()++;
        rInsn.SetOpcode(X86_Opcode_Fild);
        if (Operand__m16int(rBinStrm, Offset, rInsn, Mode) == false)
        {
          return false;
        }
        return true;
      case 0x1:
        rInsn.Length()++;
        rInsn.SetOpcode(X86_Opcode_Fisttp);
        if (Operand__m16int(rBinStrm, Offset, rInsn, Mode) == false)
        {
          return false;
        }
        return true;
      case 0x2:
        rInsn.Length()++;
        rInsn.SetOpcode(X86_Opcode_Fist);
        if (Operand__m16int(rBinStrm, Offset, rInsn, Mode) == false)
        {
          return false;
        }
        return true;
      case 0x3:
        rInsn.Length()++;
        rInsn.SetOpcode(X86_Opcode_Fistp);
        if (Operand__m16int(rBinStrm, Offset, rInsn, Mode) == false)
        {
          return false;
        }
        return true;
      case 0x4:
        rInsn.Length()++;
        rInsn.SetOpcode(X86_Opcode_Fbld);
        if (Operand__m80dec(rBinStrm, Offset, rInsn, Mode) == false)
        {
          return false;
        }
        return true;
      case 0x5:
        rInsn.Length()++;
        rInsn.SetOpcode(X86_Opcode_Fild);
        if (Operand__m64int(rBinStrm, Offset, rInsn, Mode) == false)
        {
          return false;
        }
        return true;
      case 0x6:
        rInsn.Length()++;
        rInsn.SetOpcode(X86_Opcode_Fbstp);
        if (Operand__m80bcd(rBinStrm, Offset, rInsn, Mode) == false)
        {
          return false;
        }
        return true;
      case 0x7:
        rInsn.Length()++;
        rInsn.SetOpcode(X86_Opcode_Fistp);
        if (Operand__m64int(rBinStrm, Offset, rInsn, Mode) == false)
        {
          return false;
        }
        return true;
      default:
        return false;
      }
    }
    else
    {
      u8 Opcode;
      if (!rBinStrm.Read(Offset, Opcode))
        return false;

      rInsn.Length()++;
      if (Opcode + 1 > sizeof(m_Table_fp8))
        return false;
      return (this->*m_Table_fp8[Opcode- 0xc0])(rBinStrm, Offset + 1, rInsn, Mode);
    }
}

/** instruction
 * mnemonic: loopnz
 * operand: ['Jb']
 * test_flags: ['zf']
 * semantic: cnt.id -= int(cnt.bit, 1);
if __expr and (zf.id ^ int(cnt.bit, 1) & cnt.id) != int(cnt.bit, 0):
  program.id = op0.val;

 * operation_type: ['jmp', 'cond']
 * opcode: e0
**/
bool X86Architecture::Table_1_e0(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Loopnz);
    rInsn.SubType() |= Instruction::JumpType | Instruction::ConditionalType;
    if (Operand__Jb(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    {
      Expression::LSPType AllExpr;
      rInsn.SetTestedFlags(X86_FlZf);
      /* semantic: cnt.id -= int(cnt.bit, 1) */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::CounterRegister, rInsn.GetMode()), &m_CpuInfo),
        Expr::MakeBinOp(
          OperationExpression::OpSub,
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::CounterRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::CounterRegister, rInsn.GetMode())), 0x1)))
      );
      /* semantic: if __expr and (zf.id ^ int(cnt.bit, 1) & cnt.id) != int(cnt.bit, 0):
        program.id = op0.val */
      AllExpr.push_back(Expr::MakeIfElseCond(
        ConditionExpression::CondNe,
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeId(X86_FlZf, &m_CpuInfo),
          Expr::MakeBinOp(
            OperationExpression::OpAnd,
            Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::CounterRegister, rInsn.GetMode())), 0x1),
            Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::CounterRegister, rInsn.GetMode()), &m_CpuInfo))),
        Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::CounterRegister, rInsn.GetMode())), 0x0),
        Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::ProgramPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          rInsn.GetOperand(0)), nullptr)
      );
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instruction
 * mnemonic: loopz
 * operand: ['Jb']
 * test_flags: ['zf']
 * semantic: cnt.id -= int(cnt.bit, 1);
if __expr and (cnt.id | zf.id) != int(cnt.bit, 0):
  program.id = op0.val;

 * operation_type: ['jmp', 'cond']
 * opcode: e1
**/
bool X86Architecture::Table_1_e1(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Loopz);
    rInsn.SubType() |= Instruction::JumpType | Instruction::ConditionalType;
    if (Operand__Jb(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    {
      Expression::LSPType AllExpr;
      rInsn.SetTestedFlags(X86_FlZf);
      /* semantic: cnt.id -= int(cnt.bit, 1) */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::CounterRegister, rInsn.GetMode()), &m_CpuInfo),
        Expr::MakeBinOp(
          OperationExpression::OpSub,
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::CounterRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::CounterRegister, rInsn.GetMode())), 0x1)))
      );
      /* semantic: if __expr and (cnt.id | zf.id) != int(cnt.bit, 0):
        program.id = op0.val */
      AllExpr.push_back(Expr::MakeIfElseCond(
        ConditionExpression::CondNe,
        Expr::MakeBinOp(
          OperationExpression::OpOr,
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::CounterRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeId(X86_FlZf, &m_CpuInfo)),
        Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::CounterRegister, rInsn.GetMode())), 0x0),
        Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::ProgramPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          rInsn.GetOperand(0)), nullptr)
      );
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instruction
 * mnemonic: loop
 * operand: ['Jb']
 * opcode: e2
 * operation_type: ['jmp', 'cond']
 * semantic: cnt.id -= int(cnt.bit, 1);
if __expr and cnt.id != int(cnt.bit, 0):
  program.id = op0.val;

**/
bool X86Architecture::Table_1_e2(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Loop);
    rInsn.SubType() |= Instruction::JumpType | Instruction::ConditionalType;
    if (Operand__Jb(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    {
      Expression::LSPType AllExpr;
      /* semantic: cnt.id -= int(cnt.bit, 1) */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::CounterRegister, rInsn.GetMode()), &m_CpuInfo),
        Expr::MakeBinOp(
          OperationExpression::OpSub,
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::CounterRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::CounterRegister, rInsn.GetMode())), 0x1)))
      );
      /* semantic: if __expr and cnt.id != int(cnt.bit, 0):
        program.id = op0.val */
      AllExpr.push_back(Expr::MakeIfElseCond(
        ConditionExpression::CondNe,
        Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::CounterRegister, rInsn.GetMode()), &m_CpuInfo),
        Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::CounterRegister, rInsn.GetMode())), 0x0),
        Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::ProgramPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          rInsn.GetOperand(0)), nullptr)
      );
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instructions
 * opcode: e3
 *
 * mnemonic: jcxz
 * operand: ['Jb']
 * semantic: if __expr and cnt.id == int(cnt.bit, 0):
  program.id = op0.val;

 * operation_type: ['jmp', 'cond']
 *
 * mnemonic: jecxz
 * operand: ['Jb']
 * semantic: if __expr and cnt.id == int(cnt.bit, 0):
  program.id = op0.val;

 * operation_type: ['jmp', 'cond']
 * attr: ['na16']
 *
 * mnemonic: jrcxz
 * operand: ['Jb']
 * semantic: if __expr and cnt.id == int(cnt.bit, 0):
  program.id = op0.val;

 * operation_type: ['jmp', 'cond']
 * attr: ['a64']
 *
**/
bool X86Architecture::Table_1_e3(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (Mode == X86_Bit_64 && !(rInsn.Prefix() & X86_Prefix_AdSize))
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Jrcxz);
      rInsn.SubType() |= Instruction::JumpType | Instruction::ConditionalType;
      if (Operand__Jb(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: if __expr and cnt.id == int(cnt.bit, 0):
          program.id = op0.val */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::CounterRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::CounterRegister, rInsn.GetMode())), 0x0),
          Expr::MakeAssign(
            Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::ProgramPointerRegister, rInsn.GetMode()), &m_CpuInfo),
            rInsn.GetOperand(0)), nullptr)
        );
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    else if ((Mode == X86_Bit_16 && rInsn.Prefix() & X86_Prefix_AdSize) || (Mode != X86_Bit_16 && !(rInsn.Prefix() & X86_Prefix_AdSize)))
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Jecxz);
      rInsn.SubType() |= Instruction::JumpType | Instruction::ConditionalType;
      if (Operand__Jb(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: if __expr and cnt.id == int(cnt.bit, 0):
          program.id = op0.val */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::CounterRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::CounterRegister, rInsn.GetMode())), 0x0),
          Expr::MakeAssign(
            Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::ProgramPointerRegister, rInsn.GetMode()), &m_CpuInfo),
            rInsn.GetOperand(0)), nullptr)
        );
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    else
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Jcxz);
      rInsn.SubType() |= Instruction::JumpType | Instruction::ConditionalType;
      if (Operand__Jb(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: if __expr and cnt.id == int(cnt.bit, 0):
          program.id = op0.val */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::CounterRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::CounterRegister, rInsn.GetMode())), 0x0),
          Expr::MakeAssign(
            Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::ProgramPointerRegister, rInsn.GetMode()), &m_CpuInfo),
            rInsn.GetOperand(0)), nullptr)
        );
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
}

/** instruction
 * mnemonic: in
 * operand: ['AL', 'Ib']
 * opcode: e4
**/
bool X86Architecture::Table_1_e4(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_In);
    if (Operand__AL_Ib(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: in
 * operand: ['eAX', 'Ib']
 * opcode: e5
**/
bool X86Architecture::Table_1_e5(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_In);
    if (Operand__eAX_Ib(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: out
 * operand: ['Ib', 'AL']
 * opcode: e6
**/
bool X86Architecture::Table_1_e6(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Out);
    if (Operand__Ib_AL(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: out
 * operand: ['Ib', 'eAX']
 * opcode: e7
**/
bool X86Architecture::Table_1_e7(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Out);
    if (Operand__Ib_eAX(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: call
 * operand: ['Jz']
 * opcode: e8
 * operation_type: ['call']
 * semantic: stack.id -= stack.size;
stack.mem = program.id;
program.id = op0.val;

**/
bool X86Architecture::Table_1_e8(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Call);
    rInsn.SubType() |= Instruction::CallType;
    if (Operand__Jz(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    {
      Expression::LSPType AllExpr;
      /* semantic: stack.id -= stack.size */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
        Expr::MakeBinOp(
          OperationExpression::OpSub,
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeBitVector(
            m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())),
            m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())) / 8)))
      );
      /* semantic: stack.mem = program.id */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeMem(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), nullptr, Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo)),
        Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::ProgramPointerRegister, rInsn.GetMode()), &m_CpuInfo)));
      /* semantic: program.id = op0.val */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::ProgramPointerRegister, rInsn.GetMode()), &m_CpuInfo),
        rInsn.GetOperand(0)));
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instruction
 * mnemonic: jmp
 * operand: ['Jz']
 * opcode: e9
 * operation_type: ['jmp']
 * semantic: program.id = op0.val;

**/
bool X86Architecture::Table_1_e9(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Jmp);
    rInsn.SubType() |= Instruction::JumpType;
    if (Operand__Jz(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    {
      Expression::LSPType AllExpr;
      /* semantic: program.id = op0.val */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::ProgramPointerRegister, rInsn.GetMode()), &m_CpuInfo),
        rInsn.GetOperand(0)));
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instruction
 * mnemonic: jmp
 * operand: ['Ap']
 * semantic: program.id = op0.val;

 * attr: ['nm64']
 * operation_type: ['jmp']
 * opcode: ea
**/
bool X86Architecture::Table_1_ea(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (Mode != X86_Bit_64)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Jmp);
      rInsn.SubType() |= Instruction::JumpType;
      if (Operand__Ap(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: program.id = op0.val */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::ProgramPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          rInsn.GetOperand(0)));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    else
      return false;
}

/** instruction
 * mnemonic: jmp
 * operand: ['Jb']
 * opcode: eb
 * operation_type: ['jmp']
 * semantic: program.id = op0.val;

**/
bool X86Architecture::Table_1_eb(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Jmp);
    rInsn.SubType() |= Instruction::JumpType;
    if (Operand__Jb(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    {
      Expression::LSPType AllExpr;
      /* semantic: program.id = op0.val */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::ProgramPointerRegister, rInsn.GetMode()), &m_CpuInfo),
        rInsn.GetOperand(0)));
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instruction
 * mnemonic: in
 * operand: ['AL', 'DX']
 * opcode: ec
**/
bool X86Architecture::Table_1_ec(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_In);
    if (Operand__AL_DX(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: in
 * operand: ['eAX', 'DX']
 * opcode: ed
**/
bool X86Architecture::Table_1_ed(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_In);
    if (Operand__eAX_DX(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: out
 * operand: ['DX', 'AL']
 * opcode: ee
**/
bool X86Architecture::Table_1_ee(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Out);
    if (Operand__DX_AL(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: out
 * operand: ['DX', 'eAX']
 * opcode: ef
**/
bool X86Architecture::Table_1_ef(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Out);
    if (Operand__DX_eAX(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: Lock
 * opcode: f0
 * constraint: pfx1
**/
bool X86Architecture::Table_1_f0(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.Prefix() |= X86_Prefix_Lock;
    return Disassemble(rBinStrm, Offset, rInsn, Mode);
}

/** instruction
 * mnemonic: icebp
 * opcode: f1
**/
bool X86Architecture::Table_1_f1(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Icebp);
    return true;
}

/** instruction
 * mnemonic: RepNz
 * test_flags: ['zf']
 * opcode: f2
 * constraint: pfx1
**/
bool X86Architecture::Table_1_f2(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.Prefix() |= X86_Prefix_RepNz;
    return Disassemble(rBinStrm, Offset, rInsn, Mode);
}

/** instruction
 * mnemonic: Rep
 * test_flags: ['zf']
 * opcode: f3
 * constraint: pfx1
**/
bool X86Architecture::Table_1_f3(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.Prefix() |= X86_Prefix_Rep;
    return Disassemble(rBinStrm, Offset, rInsn, Mode);
}

/** instruction
 * mnemonic: hlt
 * operation_type: ['ret']
 * opcode: f4
**/
bool X86Architecture::Table_1_f4(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Hlt);
    rInsn.SubType() |= Instruction::ReturnType;
    return true;
}

/** instruction
 * mnemonic: cmc
 * opcode: f5
 * update_flags: ['cf']
 * semantic: cf.id = cf.id ^ int1(1);

**/
bool X86Architecture::Table_1_f5(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Cmc);
    {
      Expression::LSPType AllExpr;
      rInsn.SetUpdatedFlags(X86_FlCf);
      /* semantic: cf.id = cf.id ^ int1(1) */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlCf, &m_CpuInfo),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeId(X86_FlCf, &m_CpuInfo),
          Expr::MakeBitVector(1, 0x1))));
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** group:
 * mnemonic: test
 * clear_flags: ['af']
 * semantic: alloc_var('res', op0.bit);
res = op0.val & op1.val;
of.id = int1(0)
cf.id = int1(0)
call('sign_flag')
call('zero_flag')
call('parity_flag')
free_var('res');

 * operand: ['Eb', 'Ib']
 * opcode: 00
 * update_flags: ['of', 'sf', 'zf', 'pf', 'cf']
 *
 * mnemonic: test
 * clear_flags: ['af']
 * semantic: alloc_var('res', op0.bit);
res = op0.val & op1.val;
of.id = int1(0)
cf.id = int1(0)
call('sign_flag')
call('zero_flag')
call('parity_flag')
free_var('res');

 * operand: ['Eb', 'Ib']
 * opcode: 01
 * update_flags: ['of', 'sf', 'zf', 'pf', 'cf']
 *
 * mnemonic: not
 * operand: ['Eb']
 * opcode: 02
 * semantic: alloc_var('res', op0.bit);
res = ~op0.val;
op0.val = res;
free_var('res');

 *
 * mnemonic: neg
 * operand: ['Eb']
 * opcode: 03
 * semantic: alloc_var('res', op0.bit);
if __expr and op0.val == int(op0.bit, 0):
  cf.id = int1(0)
else:
  cf.id = int1(1);
res = -op0.val;
of.id = bit_cast((res.val & op0.val) >> (int(op0.bit, op0.bit) - int(op0.bit, 1)), int1(1));
call('sign_flag');
call('zero_flag');
call('parity_flag');
af.id = bit_cast((op0.val ^ res.val) >> (int(op0.bit, 4)), int1(1));
op0.val = res;
free_var('res');

 *
 * mnemonic: mul
 * operand: ['Eb']
 * opcode: 04
 * semantic: alloc_var('upper_res', op0.bit);
alloc_var('mul_res', concat(op0.bit, ignore(' * 2')));
if __code and is_byte_operation:
  ax.id = bit_cast(bit_cast(al.id, int_type16) * bit_cast(op0.val, int_type16), int_type16)
  upper_res = ah.id;
if __code and is_word_operation:
  mul_res = bit_cast(bit_cast(ax.id, int_type32) * bit_cast(op0.val, int_type32), int_type32)
  ax.id = bit_cast(mul_res, int_type16)
  dx.id = bit_cast(mul_res >> int(32, 16), int_type16)
  upper_res = dx.id;
if __code and is_dword_operation:
  mul_res = bit_cast(bit_cast(eax.id, int_type64) * bit_cast(op0.val, int_type64), int_type64)
  eax.id = bit_cast(mul_res, int_type32)
  edx.id = bit_cast(mul_res >> int(64, 32), int_type32)
  upper_res = edx.id;
if __code and is_qword_operation:
  mul_res = bit_cast(bit_cast(rax.id, int_type128) * bit_cast(op0.val, int_type128), int_type128)
  rax.id = bit_cast(mul_res, int_type64)
  rdx.id = bit_cast(mul_res >> int(128, 64), int_type64)
  upper_res = rdx.id;
if __expr and upper_res == int(op0.bit, 0):
  of.id = int1(0)
  cf.id = int1(0)
else:
  of.id = int1(1)
  cf.id = int1(1);
free_var('mul_res');
free_var('upper_res');

 *
 * mnemonic: imul
 * operand: ['Eb']
 * opcode: 05
 * semantic: alloc_var('res', op0.bit);
alloc_var('mul_res', concat(op0.bit, ignore(' * 2')));
alloc_var('extended', concat(op0.bit, ignore(' * 2')));
if __code and is_byte_operation:
  mul_res = sign_extend(al.id, int_type16) * sign_extend(op0.val, int_type16)
  ax.id = bit_cast(mul_res, int_type16)
  sf.id = bit_cast(mul_res >> int(16, 7), int_type1);
if __code and is_word_operation:
  mul_res = sign_extend(ax.id, int_type32) * sign_extend(op0.val, int_type32)
  ax.id = bit_cast(mul_res, int_type16)
  dx.id = bit_cast(mul_res >> int(32, 16), int_type16)
  sf.id = bit_cast(mul_res >> int(32, 15), int_type1);
if __code and is_dword_operation:
  mul_res = sign_extend(eax.id, int_type64) * sign_extend(op0.val, int_type64)
  eax.id = bit_cast(mul_res, int_type32)
  edx.id = bit_cast(mul_res >> int(64, 32), int_type32)
  sf.id = bit_cast(mul_res >> int(64, 32), int_type1);
if __code and is_qword_operation:
  mul_res = sign_extend(rax.id, int_type128) * sign_extend(op0.val, int_type128)
  rax.id = bit_cast(mul_res, int_type64)
  rdx.id = bit_cast(mul_res >> int(128, 64), int_type64)
  sf.id = bit_cast(mul_res >> int(128, 63), int_type1);
res = bit_cast(mul_res, int_type(op0.bit));
extended = sign_extend(res, int_type(concat(op0.bit, ignore(' * 2'))));
if __expr and extended == mul_res:
  of.id = int1(0)
  cf.id = int1(0)
else:
  of.id = int1(1)
  cf.id = int1(1);
free_var('extended');
free_var('mul_res');
free_var('res');

 *
 * mnemonic: div
 * operand: ['Eb']
 * opcode: 06
 * semantic: alloc_var('dividend', concat(op0.bit, ignore(' * 2')));
if __code and is_byte_operation:
  dividend = bit_cast(ax.id, int_type16)
  al.id = bit_cast(dividend / zero_extend(op0.val, int_type16), int_type8)
  ah.id = bit_cast(dividend % zero_extend(op0.val, int_type16), int_type8);
if __code and is_word_operation:
  dividend = bit_cast(dx.id, int_type32) << int(32, 16) | bit_cast(ax.id, int_type32)
  ax.id = bit_cast(dividend / zero_extend(op0.val, int_type32), int_type16)
  dx.id = bit_cast(dividend % zero_extend(op0.val, int_type32), int_type16);
if __code and is_dword_operation:
  dividend = bit_cast(edx.id, int_type64) << int(64, 32) | bit_cast(eax.id, int_type64)
  eax.id = bit_cast(dividend / zero_extend(op0.val, int_type64), int_type32)
  edx.id = bit_cast(dividend % zero_extend(op0.val, int_type64), int_type32);
if __code and is_qword_operation:
  dividend = bit_cast(rdx.id, int_type128) << int(128, 64) | bit_cast(rax.id, int_type128)
  rax.id = bit_cast(dividend / zero_extend(op0.val, int_type128), int_type64)
  rdx.id = bit_cast(dividend % zero_extend(op0.val, int_type128), int_type64);
free_var('dividend');

 *
 * mnemonic: idiv
 * operand: ['Eb']
 * opcode: 07
 * semantic: alloc_var('dividend', concat(op0.bit, ignore(' * 2')));
alloc_var('extended', concat(op0.bit, ignore(' * 2')));
extended = sign_extend(op0.val, int_type(concat(op0.bit, ignore(' * 2'))));
if __code and is_byte_operation:
  dividend = sign_extend(ax.id, int_type16)
  al.id = bit_cast(sdiv(dividend, extended), int_type8)
  ah.id = bit_cast(smod(dividend, extended), int_type8);
if __code and is_word_operation:
  dividend = sign_extend(dx.id, int_type32) << int(32, 16) | sign_extend(ax.id, int_type32)
  ax.id = bit_cast(sdiv(dividend, extended), int_type16)
  dx.id = bit_cast(smod(dividend, extended), int_type16);
if __code and is_dword_operation:
  dividend = sign_extend(edx.id, int_type64) << int(64, 32) | sign_extend(eax.id, int_type64)
  eax.id = bit_cast(sdiv(dividend, extended), int_type32)
  edx.id = bit_cast(smod(dividend, extended), int_type32);
if __code and is_qword_operation:
  dividend = sign_extend(rdx.id, int_type128) << int(128, 64) | sign_extend(rax.id, int_type128)
  rax.id = bit_cast(sdiv(dividend, extended), int_type64)
  rdx.id = bit_cast(smod(dividend, extended), int_type64);
free_var('extended');
free_var('dividend');

 *
**/
bool X86Architecture::Table_1_f6(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    u8 ModRmByte;
    if (!rBinStrm.Read(Offset, ModRmByte))
      return false;

    x86::ModRM ModRm(ModRmByte);
    switch (ModRm.Reg())
    {
    case 0x0:
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Test);
      if (Operand__Eb_Ib(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        rInsn.SetUpdatedFlags(X86_FlOf | X86_FlSf | X86_FlZf | X86_FlPf | X86_FlCf);
        rInsn.SetClearedFlags(X86_FlAf);
        AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlAf, &m_CpuInfo), Expr::MakeBoolean(false)));
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: res = op0.val & op1.val */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpAnd,
            rInsn.GetOperand(0),
            rInsn.GetOperand(1))));
        /* semantic: of.id = int1(0)
        cf.id = int1(0)
        call('sign_flag')
        call('zero_flag')
        call('parity_flag')
        free_var('res') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlOf, &m_CpuInfo),
          Expr::MakeBitVector(1, 0x0)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlCf, &m_CpuInfo),
          Expr::MakeBitVector(1, 0x0)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlSf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlZf, &m_CpuInfo),
          Expr::MakeTernaryCond(ConditionExpression::CondEq,
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))));
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBitVector(1, 0x1)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlPf, &m_CpuInfo),
          Expr::MakeVar("pf_tmp", VariableExpression::Use)));
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x1:
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Test);
      if (Operand__Eb_Ib(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        rInsn.SetUpdatedFlags(X86_FlOf | X86_FlSf | X86_FlZf | X86_FlPf | X86_FlCf);
        rInsn.SetClearedFlags(X86_FlAf);
        AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlAf, &m_CpuInfo), Expr::MakeBoolean(false)));
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: res = op0.val & op1.val */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpAnd,
            rInsn.GetOperand(0),
            rInsn.GetOperand(1))));
        /* semantic: of.id = int1(0)
        cf.id = int1(0)
        call('sign_flag')
        call('zero_flag')
        call('parity_flag')
        free_var('res') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlOf, &m_CpuInfo),
          Expr::MakeBitVector(1, 0x0)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlCf, &m_CpuInfo),
          Expr::MakeBitVector(1, 0x0)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlSf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlZf, &m_CpuInfo),
          Expr::MakeTernaryCond(ConditionExpression::CondEq,
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))));
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBitVector(1, 0x1)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlPf, &m_CpuInfo),
          Expr::MakeVar("pf_tmp", VariableExpression::Use)));
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x2:
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Not);
      if (Operand__Eb(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: res = ~op0.val */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeUnOp(
            OperationExpression::OpNot,
            rInsn.GetOperand(0))));
        /* semantic: op0.val = res */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("res", VariableExpression::Use)));
        /* semantic: free_var('res') */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x3:
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Neg);
      if (Operand__Eb(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: if __expr and op0.val == int(op0.bit, 0):
          cf.id = int1(0)
        else:
          cf.id = int1(1) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          rInsn.GetOperand(0),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlCf, &m_CpuInfo),
            Expr::MakeBitVector(1, 0x0)),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlCf, &m_CpuInfo),
            Expr::MakeBitVector(1, 0x1))));
        /* semantic: res = -op0.val */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeUnOp(
            OperationExpression::OpNeg,
            rInsn.GetOperand(0))));
        /* semantic: of.id = bit_cast((res.val & op0.val) >> (int(op0.bit, op0.bit) - int(op0.bit, 1)), int1(1)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlOf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeVar("res", VariableExpression::Use),
              rInsn.GetOperand(0)),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        /* semantic: call('sign_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlSf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        /* semantic: call('zero_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlZf, &m_CpuInfo),
          Expr::MakeTernaryCond(ConditionExpression::CondEq,
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))));
        /* semantic: call('parity_flag') */
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBitVector(1, 0x1)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlPf, &m_CpuInfo),
          Expr::MakeVar("pf_tmp", VariableExpression::Use)));
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
        /* semantic: af.id = bit_cast((op0.val ^ res.val) >> (int(op0.bit, 4)), int1(1)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlAf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              rInsn.GetOperand(0),
              Expr::MakeVar("res", VariableExpression::Use)),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))));
        /* semantic: op0.val = res */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("res", VariableExpression::Use)));
        /* semantic: free_var('res') */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x4:
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Mul);
      if (Operand__Eb(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('upper_res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("upper_res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: alloc_var('mul_res', concat(op0.bit, ignore(' * 2'))) */
        AllExpr.push_back(Expr::MakeVar("mul_res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize() * 2));
        /* semantic: if __code and is_byte_operation:
          ax.id = bit_cast(bit_cast(al.id, int_type16) * bit_cast(op0.val, int_type16), int_type16)
          upper_res = ah.id */
        if (rInsn.GetOperand(0)->GetBitSize() == 8)
        {
          /* block glb expressions */
          AllExpr.push_back(Expr::MakeAssign(
            Expr::MakeId(X86_Reg_Ax, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpMul,
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeId(X86_Reg_Al, &m_CpuInfo), Expr::MakeBitVector(16, 16)),
              Expr::MakeBinOp(OperationExpression::OpBcast, rInsn.GetOperand(0), Expr::MakeBitVector(16, 16))), Expr::MakeBitVector(16, 16))));
          AllExpr.push_back(Expr::MakeAssign(
            Expr::MakeVar("upper_res", VariableExpression::Use),
            Expr::MakeId(X86_Reg_Ah, &m_CpuInfo)));
        }
        /* semantic: if __code and is_word_operation:
          mul_res = bit_cast(bit_cast(ax.id, int_type32) * bit_cast(op0.val, int_type32), int_type32)
          ax.id = bit_cast(mul_res, int_type16)
          dx.id = bit_cast(mul_res >> int(32, 16), int_type16)
          upper_res = dx.id */
        if (rInsn.GetOperand(0)->GetBitSize() == 16)
        {
          /* block glb expressions */
          AllExpr.push_back(Expr::MakeAssign(
            Expr::MakeVar("mul_res", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpMul,
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeId(X86_Reg_Ax, &m_CpuInfo), Expr::MakeBitVector(32, 32)),
              Expr::MakeBinOp(OperationExpression::OpBcast, rInsn.GetOperand(0), Expr::MakeBitVector(32, 32))), Expr::MakeBitVector(32, 32))));
          AllExpr.push_back(Expr::MakeAssign(
            Expr::MakeId(X86_Reg_Ax, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeVar("mul_res", VariableExpression::Use), Expr::MakeBitVector(16, 16))));
          AllExpr.push_back(Expr::MakeAssign(
            Expr::MakeId(X86_Reg_Dx, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("mul_res", VariableExpression::Use),
              Expr::MakeBitVector(0x20, 0x10)), Expr::MakeBitVector(16, 16))));
          AllExpr.push_back(Expr::MakeAssign(
            Expr::MakeVar("upper_res", VariableExpression::Use),
            Expr::MakeId(X86_Reg_Dx, &m_CpuInfo)));
        }
        /* semantic: if __code and is_dword_operation:
          mul_res = bit_cast(bit_cast(eax.id, int_type64) * bit_cast(op0.val, int_type64), int_type64)
          eax.id = bit_cast(mul_res, int_type32)
          edx.id = bit_cast(mul_res >> int(64, 32), int_type32)
          upper_res = edx.id */
        if (rInsn.GetOperand(0)->GetBitSize() == 32)
        {
          /* block glb expressions */
          AllExpr.push_back(Expr::MakeAssign(
            Expr::MakeVar("mul_res", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpMul,
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeId(X86_Reg_Eax, &m_CpuInfo), Expr::MakeBitVector(64, 64)),
              Expr::MakeBinOp(OperationExpression::OpBcast, rInsn.GetOperand(0), Expr::MakeBitVector(64, 64))), Expr::MakeBitVector(64, 64))));
          AllExpr.push_back(Expr::MakeAssign(
            Expr::MakeId(X86_Reg_Eax, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeVar("mul_res", VariableExpression::Use), Expr::MakeBitVector(32, 32))));
          AllExpr.push_back(Expr::MakeAssign(
            Expr::MakeId(X86_Reg_Edx, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("mul_res", VariableExpression::Use),
              Expr::MakeBitVector(0x40, 0x20)), Expr::MakeBitVector(32, 32))));
          AllExpr.push_back(Expr::MakeAssign(
            Expr::MakeVar("upper_res", VariableExpression::Use),
            Expr::MakeId(X86_Reg_Edx, &m_CpuInfo)));
        }
        /* semantic: if __code and is_qword_operation:
          mul_res = bit_cast(bit_cast(rax.id, int_type128) * bit_cast(op0.val, int_type128), int_type128)
          rax.id = bit_cast(mul_res, int_type64)
          rdx.id = bit_cast(mul_res >> int(128, 64), int_type64)
          upper_res = rdx.id */
        if (rInsn.GetOperand(0)->GetBitSize() == 64)
        {
          /* block glb expressions */
          AllExpr.push_back(Expr::MakeAssign(
            Expr::MakeVar("mul_res", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpMul,
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeId(X86_Reg_Rax, &m_CpuInfo), Expr::MakeBitVector(128, 128)),
              Expr::MakeBinOp(OperationExpression::OpBcast, rInsn.GetOperand(0), Expr::MakeBitVector(128, 128))), Expr::MakeBitVector(128, 128))));
          AllExpr.push_back(Expr::MakeAssign(
            Expr::MakeId(X86_Reg_Rax, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeVar("mul_res", VariableExpression::Use), Expr::MakeBitVector(64, 64))));
          AllExpr.push_back(Expr::MakeAssign(
            Expr::MakeId(X86_Reg_Rdx, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("mul_res", VariableExpression::Use),
              Expr::MakeBitVector(0x80, 0x40)), Expr::MakeBitVector(64, 64))));
          AllExpr.push_back(Expr::MakeAssign(
            Expr::MakeVar("upper_res", VariableExpression::Use),
            Expr::MakeId(X86_Reg_Rdx, &m_CpuInfo)));
        }
        /* semantic: if __expr and upper_res == int(op0.bit, 0):
          of.id = int1(0)
          cf.id = int1(0)
        else:
          of.id = int1(1)
          cf.id = int1(1) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeVar("upper_res", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeBind({
          Expr::MakeAssign(
            Expr::MakeId(X86_FlOf, &m_CpuInfo),
            Expr::MakeBitVector(1, 0x0)),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlCf, &m_CpuInfo),
            Expr::MakeBitVector(1, 0x0))})
        ,
          Expr::MakeBind({
          Expr::MakeAssign(
            Expr::MakeId(X86_FlOf, &m_CpuInfo),
            Expr::MakeBitVector(1, 0x1)),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlCf, &m_CpuInfo),
            Expr::MakeBitVector(1, 0x1))})
        ));
        /* semantic: free_var('mul_res') */
        AllExpr.push_back(Expr::MakeVar("mul_res", VariableExpression::Free));
        /* semantic: free_var('upper_res') */
        AllExpr.push_back(Expr::MakeVar("upper_res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x5:
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Imul);
      if (Operand__Eb(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: alloc_var('mul_res', concat(op0.bit, ignore(' * 2'))) */
        AllExpr.push_back(Expr::MakeVar("mul_res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize() * 2));
        /* semantic: alloc_var('extended', concat(op0.bit, ignore(' * 2'))) */
        AllExpr.push_back(Expr::MakeVar("extended", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize() * 2));
        /* semantic: if __code and is_byte_operation:
          mul_res = sign_extend(al.id, int_type16) * sign_extend(op0.val, int_type16)
          ax.id = bit_cast(mul_res, int_type16)
          sf.id = bit_cast(mul_res >> int(16, 7), int_type1) */
        if (rInsn.GetOperand(0)->GetBitSize() == 8)
        {
          /* block glb expressions */
          AllExpr.push_back(Expr::MakeAssign(
            Expr::MakeVar("mul_res", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpMul,
              Expr::MakeBinOp(OperationExpression::OpSext, Expr::MakeId(X86_Reg_Al, &m_CpuInfo), Expr::MakeBitVector(16, 16)),
              Expr::MakeBinOp(OperationExpression::OpSext, rInsn.GetOperand(0), Expr::MakeBitVector(16, 16)))));
          AllExpr.push_back(Expr::MakeAssign(
            Expr::MakeId(X86_Reg_Ax, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeVar("mul_res", VariableExpression::Use), Expr::MakeBitVector(16, 16))));
          AllExpr.push_back(Expr::MakeAssign(
            Expr::MakeId(X86_FlSf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("mul_res", VariableExpression::Use),
              Expr::MakeBitVector(0x10, 0x7)), Expr::MakeBitVector(1, 1))));
        }
        /* semantic: if __code and is_word_operation:
          mul_res = sign_extend(ax.id, int_type32) * sign_extend(op0.val, int_type32)
          ax.id = bit_cast(mul_res, int_type16)
          dx.id = bit_cast(mul_res >> int(32, 16), int_type16)
          sf.id = bit_cast(mul_res >> int(32, 15), int_type1) */
        if (rInsn.GetOperand(0)->GetBitSize() == 16)
        {
          /* block glb expressions */
          AllExpr.push_back(Expr::MakeAssign(
            Expr::MakeVar("mul_res", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpMul,
              Expr::MakeBinOp(OperationExpression::OpSext, Expr::MakeId(X86_Reg_Ax, &m_CpuInfo), Expr::MakeBitVector(32, 32)),
              Expr::MakeBinOp(OperationExpression::OpSext, rInsn.GetOperand(0), Expr::MakeBitVector(32, 32)))));
          AllExpr.push_back(Expr::MakeAssign(
            Expr::MakeId(X86_Reg_Ax, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeVar("mul_res", VariableExpression::Use), Expr::MakeBitVector(16, 16))));
          AllExpr.push_back(Expr::MakeAssign(
            Expr::MakeId(X86_Reg_Dx, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("mul_res", VariableExpression::Use),
              Expr::MakeBitVector(0x20, 0x10)), Expr::MakeBitVector(16, 16))));
          AllExpr.push_back(Expr::MakeAssign(
            Expr::MakeId(X86_FlSf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("mul_res", VariableExpression::Use),
              Expr::MakeBitVector(0x20, 0xf)), Expr::MakeBitVector(1, 1))));
        }
        /* semantic: if __code and is_dword_operation:
          mul_res = sign_extend(eax.id, int_type64) * sign_extend(op0.val, int_type64)
          eax.id = bit_cast(mul_res, int_type32)
          edx.id = bit_cast(mul_res >> int(64, 32), int_type32)
          sf.id = bit_cast(mul_res >> int(64, 32), int_type1) */
        if (rInsn.GetOperand(0)->GetBitSize() == 32)
        {
          /* block glb expressions */
          AllExpr.push_back(Expr::MakeAssign(
            Expr::MakeVar("mul_res", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpMul,
              Expr::MakeBinOp(OperationExpression::OpSext, Expr::MakeId(X86_Reg_Eax, &m_CpuInfo), Expr::MakeBitVector(64, 64)),
              Expr::MakeBinOp(OperationExpression::OpSext, rInsn.GetOperand(0), Expr::MakeBitVector(64, 64)))));
          AllExpr.push_back(Expr::MakeAssign(
            Expr::MakeId(X86_Reg_Eax, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeVar("mul_res", VariableExpression::Use), Expr::MakeBitVector(32, 32))));
          AllExpr.push_back(Expr::MakeAssign(
            Expr::MakeId(X86_Reg_Edx, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("mul_res", VariableExpression::Use),
              Expr::MakeBitVector(0x40, 0x20)), Expr::MakeBitVector(32, 32))));
          AllExpr.push_back(Expr::MakeAssign(
            Expr::MakeId(X86_FlSf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("mul_res", VariableExpression::Use),
              Expr::MakeBitVector(0x40, 0x20)), Expr::MakeBitVector(1, 1))));
        }
        /* semantic: if __code and is_qword_operation:
          mul_res = sign_extend(rax.id, int_type128) * sign_extend(op0.val, int_type128)
          rax.id = bit_cast(mul_res, int_type64)
          rdx.id = bit_cast(mul_res >> int(128, 64), int_type64)
          sf.id = bit_cast(mul_res >> int(128, 63), int_type1) */
        if (rInsn.GetOperand(0)->GetBitSize() == 64)
        {
          /* block glb expressions */
          AllExpr.push_back(Expr::MakeAssign(
            Expr::MakeVar("mul_res", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpMul,
              Expr::MakeBinOp(OperationExpression::OpSext, Expr::MakeId(X86_Reg_Rax, &m_CpuInfo), Expr::MakeBitVector(128, 128)),
              Expr::MakeBinOp(OperationExpression::OpSext, rInsn.GetOperand(0), Expr::MakeBitVector(128, 128)))));
          AllExpr.push_back(Expr::MakeAssign(
            Expr::MakeId(X86_Reg_Rax, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeVar("mul_res", VariableExpression::Use), Expr::MakeBitVector(64, 64))));
          AllExpr.push_back(Expr::MakeAssign(
            Expr::MakeId(X86_Reg_Rdx, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("mul_res", VariableExpression::Use),
              Expr::MakeBitVector(0x80, 0x40)), Expr::MakeBitVector(64, 64))));
          AllExpr.push_back(Expr::MakeAssign(
            Expr::MakeId(X86_FlSf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("mul_res", VariableExpression::Use),
              Expr::MakeBitVector(0x80, 0x3f)), Expr::MakeBitVector(1, 1))));
        }
        /* semantic: res = bit_cast(mul_res, int_type(op0.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeVar("mul_res", VariableExpression::Use), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()))));
        /* semantic: extended = sign_extend(res, int_type(concat(op0.bit, ignore(' * 2')))) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("extended", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpSext, Expr::MakeVar("res", VariableExpression::Use), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize() * 2, rInsn.GetOperand(0)->GetBitSize() * 2))));
        /* semantic: if __expr and extended == mul_res:
          of.id = int1(0)
          cf.id = int1(0)
        else:
          of.id = int1(1)
          cf.id = int1(1) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeVar("extended", VariableExpression::Use),
          Expr::MakeVar("mul_res", VariableExpression::Use),
          Expr::MakeBind({
          Expr::MakeAssign(
            Expr::MakeId(X86_FlOf, &m_CpuInfo),
            Expr::MakeBitVector(1, 0x0)),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlCf, &m_CpuInfo),
            Expr::MakeBitVector(1, 0x0))})
        ,
          Expr::MakeBind({
          Expr::MakeAssign(
            Expr::MakeId(X86_FlOf, &m_CpuInfo),
            Expr::MakeBitVector(1, 0x1)),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlCf, &m_CpuInfo),
            Expr::MakeBitVector(1, 0x1))})
        ));
        /* semantic: free_var('extended') */
        AllExpr.push_back(Expr::MakeVar("extended", VariableExpression::Free));
        /* semantic: free_var('mul_res') */
        AllExpr.push_back(Expr::MakeVar("mul_res", VariableExpression::Free));
        /* semantic: free_var('res') */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x6:
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Div);
      if (Operand__Eb(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('dividend', concat(op0.bit, ignore(' * 2'))) */
        AllExpr.push_back(Expr::MakeVar("dividend", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize() * 2));
        /* semantic: if __code and is_byte_operation:
          dividend = bit_cast(ax.id, int_type16)
          al.id = bit_cast(dividend / zero_extend(op0.val, int_type16), int_type8)
          ah.id = bit_cast(dividend % zero_extend(op0.val, int_type16), int_type8) */
        if (rInsn.GetOperand(0)->GetBitSize() == 8)
        {
          /* block glb expressions */
          AllExpr.push_back(Expr::MakeAssign(
            Expr::MakeVar("dividend", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeId(X86_Reg_Ax, &m_CpuInfo), Expr::MakeBitVector(16, 16))));
          AllExpr.push_back(Expr::MakeAssign(
            Expr::MakeId(X86_Reg_Al, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpUDiv,
              Expr::MakeVar("dividend", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpZext, rInsn.GetOperand(0), Expr::MakeBitVector(16, 16))), Expr::MakeBitVector(8, 8))));
          AllExpr.push_back(Expr::MakeAssign(
            Expr::MakeId(X86_Reg_Ah, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpUMod,
              Expr::MakeVar("dividend", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpZext, rInsn.GetOperand(0), Expr::MakeBitVector(16, 16))), Expr::MakeBitVector(8, 8))));
        }
        /* semantic: if __code and is_word_operation:
          dividend = bit_cast(dx.id, int_type32) << int(32, 16) | bit_cast(ax.id, int_type32)
          ax.id = bit_cast(dividend / zero_extend(op0.val, int_type32), int_type16)
          dx.id = bit_cast(dividend % zero_extend(op0.val, int_type32), int_type16) */
        if (rInsn.GetOperand(0)->GetBitSize() == 16)
        {
          /* block glb expressions */
          AllExpr.push_back(Expr::MakeAssign(
            Expr::MakeVar("dividend", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpOr,
              Expr::MakeBinOp(
                OperationExpression::OpLls,
                Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeId(X86_Reg_Dx, &m_CpuInfo), Expr::MakeBitVector(32, 32)),
                Expr::MakeBitVector(0x20, 0x10)),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeId(X86_Reg_Ax, &m_CpuInfo), Expr::MakeBitVector(32, 32)))));
          AllExpr.push_back(Expr::MakeAssign(
            Expr::MakeId(X86_Reg_Ax, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpUDiv,
              Expr::MakeVar("dividend", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpZext, rInsn.GetOperand(0), Expr::MakeBitVector(32, 32))), Expr::MakeBitVector(16, 16))));
          AllExpr.push_back(Expr::MakeAssign(
            Expr::MakeId(X86_Reg_Dx, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpUMod,
              Expr::MakeVar("dividend", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpZext, rInsn.GetOperand(0), Expr::MakeBitVector(32, 32))), Expr::MakeBitVector(16, 16))));
        }
        /* semantic: if __code and is_dword_operation:
          dividend = bit_cast(edx.id, int_type64) << int(64, 32) | bit_cast(eax.id, int_type64)
          eax.id = bit_cast(dividend / zero_extend(op0.val, int_type64), int_type32)
          edx.id = bit_cast(dividend % zero_extend(op0.val, int_type64), int_type32) */
        if (rInsn.GetOperand(0)->GetBitSize() == 32)
        {
          /* block glb expressions */
          AllExpr.push_back(Expr::MakeAssign(
            Expr::MakeVar("dividend", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpOr,
              Expr::MakeBinOp(
                OperationExpression::OpLls,
                Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeId(X86_Reg_Edx, &m_CpuInfo), Expr::MakeBitVector(64, 64)),
                Expr::MakeBitVector(0x40, 0x20)),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeId(X86_Reg_Eax, &m_CpuInfo), Expr::MakeBitVector(64, 64)))));
          AllExpr.push_back(Expr::MakeAssign(
            Expr::MakeId(X86_Reg_Eax, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpUDiv,
              Expr::MakeVar("dividend", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpZext, rInsn.GetOperand(0), Expr::MakeBitVector(64, 64))), Expr::MakeBitVector(32, 32))));
          AllExpr.push_back(Expr::MakeAssign(
            Expr::MakeId(X86_Reg_Edx, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpUMod,
              Expr::MakeVar("dividend", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpZext, rInsn.GetOperand(0), Expr::MakeBitVector(64, 64))), Expr::MakeBitVector(32, 32))));
        }
        /* semantic: if __code and is_qword_operation:
          dividend = bit_cast(rdx.id, int_type128) << int(128, 64) | bit_cast(rax.id, int_type128)
          rax.id = bit_cast(dividend / zero_extend(op0.val, int_type128), int_type64)
          rdx.id = bit_cast(dividend % zero_extend(op0.val, int_type128), int_type64) */
        if (rInsn.GetOperand(0)->GetBitSize() == 64)
        {
          /* block glb expressions */
          AllExpr.push_back(Expr::MakeAssign(
            Expr::MakeVar("dividend", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpOr,
              Expr::MakeBinOp(
                OperationExpression::OpLls,
                Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeId(X86_Reg_Rdx, &m_CpuInfo), Expr::MakeBitVector(128, 128)),
                Expr::MakeBitVector(0x80, 0x40)),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeId(X86_Reg_Rax, &m_CpuInfo), Expr::MakeBitVector(128, 128)))));
          AllExpr.push_back(Expr::MakeAssign(
            Expr::MakeId(X86_Reg_Rax, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpUDiv,
              Expr::MakeVar("dividend", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpZext, rInsn.GetOperand(0), Expr::MakeBitVector(128, 128))), Expr::MakeBitVector(64, 64))));
          AllExpr.push_back(Expr::MakeAssign(
            Expr::MakeId(X86_Reg_Rdx, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpUMod,
              Expr::MakeVar("dividend", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpZext, rInsn.GetOperand(0), Expr::MakeBitVector(128, 128))), Expr::MakeBitVector(64, 64))));
        }
        /* semantic: free_var('dividend') */
        AllExpr.push_back(Expr::MakeVar("dividend", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x7:
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Idiv);
      if (Operand__Eb(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('dividend', concat(op0.bit, ignore(' * 2'))) */
        AllExpr.push_back(Expr::MakeVar("dividend", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize() * 2));
        /* semantic: alloc_var('extended', concat(op0.bit, ignore(' * 2'))) */
        AllExpr.push_back(Expr::MakeVar("extended", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize() * 2));
        /* semantic: extended = sign_extend(op0.val, int_type(concat(op0.bit, ignore(' * 2')))) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("extended", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpSext, rInsn.GetOperand(0), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize() * 2, rInsn.GetOperand(0)->GetBitSize() * 2))));
        /* semantic: if __code and is_byte_operation:
          dividend = sign_extend(ax.id, int_type16)
          al.id = bit_cast(sdiv(dividend, extended), int_type8)
          ah.id = bit_cast(smod(dividend, extended), int_type8) */
        if (rInsn.GetOperand(0)->GetBitSize() == 8)
        {
          /* block glb expressions */
          AllExpr.push_back(Expr::MakeAssign(
            Expr::MakeVar("dividend", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpSext, Expr::MakeId(X86_Reg_Ax, &m_CpuInfo), Expr::MakeBitVector(16, 16))));
          AllExpr.push_back(Expr::MakeAssign(
            Expr::MakeId(X86_Reg_Al, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(OperationExpression::OpSDiv, Expr::MakeVar("dividend", VariableExpression::Use), Expr::MakeVar("extended", VariableExpression::Use)), Expr::MakeBitVector(8, 8))));
          AllExpr.push_back(Expr::MakeAssign(
            Expr::MakeId(X86_Reg_Ah, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(OperationExpression::OpSMod, Expr::MakeVar("dividend", VariableExpression::Use), Expr::MakeVar("extended", VariableExpression::Use)), Expr::MakeBitVector(8, 8))));
        }
        /* semantic: if __code and is_word_operation:
          dividend = sign_extend(dx.id, int_type32) << int(32, 16) | sign_extend(ax.id, int_type32)
          ax.id = bit_cast(sdiv(dividend, extended), int_type16)
          dx.id = bit_cast(smod(dividend, extended), int_type16) */
        if (rInsn.GetOperand(0)->GetBitSize() == 16)
        {
          /* block glb expressions */
          AllExpr.push_back(Expr::MakeAssign(
            Expr::MakeVar("dividend", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpOr,
              Expr::MakeBinOp(
                OperationExpression::OpLls,
                Expr::MakeBinOp(OperationExpression::OpSext, Expr::MakeId(X86_Reg_Dx, &m_CpuInfo), Expr::MakeBitVector(32, 32)),
                Expr::MakeBitVector(0x20, 0x10)),
              Expr::MakeBinOp(OperationExpression::OpSext, Expr::MakeId(X86_Reg_Ax, &m_CpuInfo), Expr::MakeBitVector(32, 32)))));
          AllExpr.push_back(Expr::MakeAssign(
            Expr::MakeId(X86_Reg_Ax, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(OperationExpression::OpSDiv, Expr::MakeVar("dividend", VariableExpression::Use), Expr::MakeVar("extended", VariableExpression::Use)), Expr::MakeBitVector(16, 16))));
          AllExpr.push_back(Expr::MakeAssign(
            Expr::MakeId(X86_Reg_Dx, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(OperationExpression::OpSMod, Expr::MakeVar("dividend", VariableExpression::Use), Expr::MakeVar("extended", VariableExpression::Use)), Expr::MakeBitVector(16, 16))));
        }
        /* semantic: if __code and is_dword_operation:
          dividend = sign_extend(edx.id, int_type64) << int(64, 32) | sign_extend(eax.id, int_type64)
          eax.id = bit_cast(sdiv(dividend, extended), int_type32)
          edx.id = bit_cast(smod(dividend, extended), int_type32) */
        if (rInsn.GetOperand(0)->GetBitSize() == 32)
        {
          /* block glb expressions */
          AllExpr.push_back(Expr::MakeAssign(
            Expr::MakeVar("dividend", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpOr,
              Expr::MakeBinOp(
                OperationExpression::OpLls,
                Expr::MakeBinOp(OperationExpression::OpSext, Expr::MakeId(X86_Reg_Edx, &m_CpuInfo), Expr::MakeBitVector(64, 64)),
                Expr::MakeBitVector(0x40, 0x20)),
              Expr::MakeBinOp(OperationExpression::OpSext, Expr::MakeId(X86_Reg_Eax, &m_CpuInfo), Expr::MakeBitVector(64, 64)))));
          AllExpr.push_back(Expr::MakeAssign(
            Expr::MakeId(X86_Reg_Eax, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(OperationExpression::OpSDiv, Expr::MakeVar("dividend", VariableExpression::Use), Expr::MakeVar("extended", VariableExpression::Use)), Expr::MakeBitVector(32, 32))));
          AllExpr.push_back(Expr::MakeAssign(
            Expr::MakeId(X86_Reg_Edx, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(OperationExpression::OpSMod, Expr::MakeVar("dividend", VariableExpression::Use), Expr::MakeVar("extended", VariableExpression::Use)), Expr::MakeBitVector(32, 32))));
        }
        /* semantic: if __code and is_qword_operation:
          dividend = sign_extend(rdx.id, int_type128) << int(128, 64) | sign_extend(rax.id, int_type128)
          rax.id = bit_cast(sdiv(dividend, extended), int_type64)
          rdx.id = bit_cast(smod(dividend, extended), int_type64) */
        if (rInsn.GetOperand(0)->GetBitSize() == 64)
        {
          /* block glb expressions */
          AllExpr.push_back(Expr::MakeAssign(
            Expr::MakeVar("dividend", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpOr,
              Expr::MakeBinOp(
                OperationExpression::OpLls,
                Expr::MakeBinOp(OperationExpression::OpSext, Expr::MakeId(X86_Reg_Rdx, &m_CpuInfo), Expr::MakeBitVector(128, 128)),
                Expr::MakeBitVector(0x80, 0x40)),
              Expr::MakeBinOp(OperationExpression::OpSext, Expr::MakeId(X86_Reg_Rax, &m_CpuInfo), Expr::MakeBitVector(128, 128)))));
          AllExpr.push_back(Expr::MakeAssign(
            Expr::MakeId(X86_Reg_Rax, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(OperationExpression::OpSDiv, Expr::MakeVar("dividend", VariableExpression::Use), Expr::MakeVar("extended", VariableExpression::Use)), Expr::MakeBitVector(64, 64))));
          AllExpr.push_back(Expr::MakeAssign(
            Expr::MakeId(X86_Reg_Rdx, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(OperationExpression::OpSMod, Expr::MakeVar("dividend", VariableExpression::Use), Expr::MakeVar("extended", VariableExpression::Use)), Expr::MakeBitVector(64, 64))));
        }
        /* semantic: free_var('extended') */
        AllExpr.push_back(Expr::MakeVar("extended", VariableExpression::Free));
        /* semantic: free_var('dividend') */
        AllExpr.push_back(Expr::MakeVar("dividend", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    default:
      return false;
    }
}

/** group:
 * mnemonic: test
 * clear_flags: ['af']
 * semantic: alloc_var('res', op0.bit);
res = op0.val & op1.val;
of.id = int1(0)
cf.id = int1(0)
call('sign_flag')
call('zero_flag')
call('parity_flag')
free_var('res');

 * operand: ['Ev', 'Iz']
 * opcode: 00
 * update_flags: ['of', 'sf', 'zf', 'pf', 'cf']
 *
 * mnemonic: test
 * clear_flags: ['af']
 * semantic: alloc_var('res', op0.bit);
res = op0.val & op1.val;
of.id = int1(0)
cf.id = int1(0)
call('sign_flag')
call('zero_flag')
call('parity_flag')
free_var('res');

 * operand: ['Ev', 'Iz']
 * opcode: 01
 * update_flags: ['of', 'sf', 'zf', 'pf', 'cf']
 *
 * mnemonic: not
 * operand: ['Ev']
 * opcode: 02
 * semantic: alloc_var('res', op0.bit);
res = ~op0.val;
op0.val = res;
free_var('res');

 *
 * mnemonic: neg
 * operand: ['Ev']
 * opcode: 03
 * semantic: alloc_var('res', op0.bit);
if __expr and op0.val == int(op0.bit, 0):
  cf.id = int1(0)
else:
  cf.id = int1(1);
res = -op0.val;
of.id = bit_cast((res.val & op0.val) >> (int(op0.bit, op0.bit) - int(op0.bit, 1)), int1(1));
call('sign_flag');
call('zero_flag');
call('parity_flag');
af.id = bit_cast((op0.val ^ res.val) >> (int(op0.bit, 4)), int1(1));
op0.val = res;
free_var('res');

 *
 * mnemonic: mul
 * operand: ['Ev']
 * opcode: 04
 * semantic: alloc_var('upper_res', op0.bit);
alloc_var('mul_res', concat(op0.bit, ignore(' * 2')));
if __code and is_byte_operation:
  ax.id = bit_cast(bit_cast(al.id, int_type16) * bit_cast(op0.val, int_type16), int_type16)
  upper_res = ah.id;
if __code and is_word_operation:
  mul_res = bit_cast(bit_cast(ax.id, int_type32) * bit_cast(op0.val, int_type32), int_type32)
  ax.id = bit_cast(mul_res, int_type16)
  dx.id = bit_cast(mul_res >> int(32, 16), int_type16)
  upper_res = dx.id;
if __code and is_dword_operation:
  mul_res = bit_cast(bit_cast(eax.id, int_type64) * bit_cast(op0.val, int_type64), int_type64)
  eax.id = bit_cast(mul_res, int_type32)
  edx.id = bit_cast(mul_res >> int(64, 32), int_type32)
  upper_res = edx.id;
if __code and is_qword_operation:
  mul_res = bit_cast(bit_cast(rax.id, int_type128) * bit_cast(op0.val, int_type128), int_type128)
  rax.id = bit_cast(mul_res, int_type64)
  rdx.id = bit_cast(mul_res >> int(128, 64), int_type64)
  upper_res = rdx.id;
if __expr and upper_res == int(op0.bit, 0):
  of.id = int1(0)
  cf.id = int1(0)
else:
  of.id = int1(1)
  cf.id = int1(1);
free_var('mul_res');
free_var('upper_res');

 *
 * mnemonic: imul
 * operand: ['Ev']
 * opcode: 05
 * semantic: alloc_var('res', op0.bit);
alloc_var('mul_res', concat(op0.bit, ignore(' * 2')));
alloc_var('extended', concat(op0.bit, ignore(' * 2')));
if __code and is_byte_operation:
  mul_res = sign_extend(al.id, int_type16) * sign_extend(op0.val, int_type16)
  ax.id = bit_cast(mul_res, int_type16)
  sf.id = bit_cast(mul_res >> int(16, 7), int_type1);
if __code and is_word_operation:
  mul_res = sign_extend(ax.id, int_type32) * sign_extend(op0.val, int_type32)
  ax.id = bit_cast(mul_res, int_type16)
  dx.id = bit_cast(mul_res >> int(32, 16), int_type16)
  sf.id = bit_cast(mul_res >> int(32, 15), int_type1);
if __code and is_dword_operation:
  mul_res = sign_extend(eax.id, int_type64) * sign_extend(op0.val, int_type64)
  eax.id = bit_cast(mul_res, int_type32)
  edx.id = bit_cast(mul_res >> int(64, 32), int_type32)
  sf.id = bit_cast(mul_res >> int(64, 32), int_type1);
if __code and is_qword_operation:
  mul_res = sign_extend(rax.id, int_type128) * sign_extend(op0.val, int_type128)
  rax.id = bit_cast(mul_res, int_type64)
  rdx.id = bit_cast(mul_res >> int(128, 64), int_type64)
  sf.id = bit_cast(mul_res >> int(128, 63), int_type1);
res = bit_cast(mul_res, int_type(op0.bit));
extended = sign_extend(res, int_type(concat(op0.bit, ignore(' * 2'))));
if __expr and extended == mul_res:
  of.id = int1(0)
  cf.id = int1(0)
else:
  of.id = int1(1)
  cf.id = int1(1);
free_var('extended');
free_var('mul_res');
free_var('res');

 *
 * mnemonic: div
 * operand: ['Ev']
 * opcode: 06
 * semantic: alloc_var('dividend', concat(op0.bit, ignore(' * 2')));
if __code and is_byte_operation:
  dividend = bit_cast(ax.id, int_type16)
  al.id = bit_cast(dividend / zero_extend(op0.val, int_type16), int_type8)
  ah.id = bit_cast(dividend % zero_extend(op0.val, int_type16), int_type8);
if __code and is_word_operation:
  dividend = bit_cast(dx.id, int_type32) << int(32, 16) | bit_cast(ax.id, int_type32)
  ax.id = bit_cast(dividend / zero_extend(op0.val, int_type32), int_type16)
  dx.id = bit_cast(dividend % zero_extend(op0.val, int_type32), int_type16);
if __code and is_dword_operation:
  dividend = bit_cast(edx.id, int_type64) << int(64, 32) | bit_cast(eax.id, int_type64)
  eax.id = bit_cast(dividend / zero_extend(op0.val, int_type64), int_type32)
  edx.id = bit_cast(dividend % zero_extend(op0.val, int_type64), int_type32);
if __code and is_qword_operation:
  dividend = bit_cast(rdx.id, int_type128) << int(128, 64) | bit_cast(rax.id, int_type128)
  rax.id = bit_cast(dividend / zero_extend(op0.val, int_type128), int_type64)
  rdx.id = bit_cast(dividend % zero_extend(op0.val, int_type128), int_type64);
free_var('dividend');

 *
 * mnemonic: idiv
 * operand: ['Ev']
 * opcode: 07
 * semantic: alloc_var('dividend', concat(op0.bit, ignore(' * 2')));
alloc_var('extended', concat(op0.bit, ignore(' * 2')));
extended = sign_extend(op0.val, int_type(concat(op0.bit, ignore(' * 2'))));
if __code and is_byte_operation:
  dividend = sign_extend(ax.id, int_type16)
  al.id = bit_cast(sdiv(dividend, extended), int_type8)
  ah.id = bit_cast(smod(dividend, extended), int_type8);
if __code and is_word_operation:
  dividend = sign_extend(dx.id, int_type32) << int(32, 16) | sign_extend(ax.id, int_type32)
  ax.id = bit_cast(sdiv(dividend, extended), int_type16)
  dx.id = bit_cast(smod(dividend, extended), int_type16);
if __code and is_dword_operation:
  dividend = sign_extend(edx.id, int_type64) << int(64, 32) | sign_extend(eax.id, int_type64)
  eax.id = bit_cast(sdiv(dividend, extended), int_type32)
  edx.id = bit_cast(smod(dividend, extended), int_type32);
if __code and is_qword_operation:
  dividend = sign_extend(rdx.id, int_type128) << int(128, 64) | sign_extend(rax.id, int_type128)
  rax.id = bit_cast(sdiv(dividend, extended), int_type64)
  rdx.id = bit_cast(smod(dividend, extended), int_type64);
free_var('extended');
free_var('dividend');

 *
**/
bool X86Architecture::Table_1_f7(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    u8 ModRmByte;
    if (!rBinStrm.Read(Offset, ModRmByte))
      return false;

    x86::ModRM ModRm(ModRmByte);
    switch (ModRm.Reg())
    {
    case 0x0:
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Test);
      if (Operand__Ev_Iz(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        rInsn.SetUpdatedFlags(X86_FlOf | X86_FlSf | X86_FlZf | X86_FlPf | X86_FlCf);
        rInsn.SetClearedFlags(X86_FlAf);
        AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlAf, &m_CpuInfo), Expr::MakeBoolean(false)));
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: res = op0.val & op1.val */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpAnd,
            rInsn.GetOperand(0),
            rInsn.GetOperand(1))));
        /* semantic: of.id = int1(0)
        cf.id = int1(0)
        call('sign_flag')
        call('zero_flag')
        call('parity_flag')
        free_var('res') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlOf, &m_CpuInfo),
          Expr::MakeBitVector(1, 0x0)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlCf, &m_CpuInfo),
          Expr::MakeBitVector(1, 0x0)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlSf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlZf, &m_CpuInfo),
          Expr::MakeTernaryCond(ConditionExpression::CondEq,
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))));
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBitVector(1, 0x1)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlPf, &m_CpuInfo),
          Expr::MakeVar("pf_tmp", VariableExpression::Use)));
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x1:
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Test);
      if (Operand__Ev_Iz(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        rInsn.SetUpdatedFlags(X86_FlOf | X86_FlSf | X86_FlZf | X86_FlPf | X86_FlCf);
        rInsn.SetClearedFlags(X86_FlAf);
        AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlAf, &m_CpuInfo), Expr::MakeBoolean(false)));
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: res = op0.val & op1.val */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpAnd,
            rInsn.GetOperand(0),
            rInsn.GetOperand(1))));
        /* semantic: of.id = int1(0)
        cf.id = int1(0)
        call('sign_flag')
        call('zero_flag')
        call('parity_flag')
        free_var('res') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlOf, &m_CpuInfo),
          Expr::MakeBitVector(1, 0x0)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlCf, &m_CpuInfo),
          Expr::MakeBitVector(1, 0x0)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlSf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlZf, &m_CpuInfo),
          Expr::MakeTernaryCond(ConditionExpression::CondEq,
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))));
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBitVector(1, 0x1)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlPf, &m_CpuInfo),
          Expr::MakeVar("pf_tmp", VariableExpression::Use)));
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x2:
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Not);
      if (Operand__Ev(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: res = ~op0.val */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeUnOp(
            OperationExpression::OpNot,
            rInsn.GetOperand(0))));
        /* semantic: op0.val = res */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("res", VariableExpression::Use)));
        /* semantic: free_var('res') */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x3:
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Neg);
      if (Operand__Ev(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: if __expr and op0.val == int(op0.bit, 0):
          cf.id = int1(0)
        else:
          cf.id = int1(1) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          rInsn.GetOperand(0),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlCf, &m_CpuInfo),
            Expr::MakeBitVector(1, 0x0)),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlCf, &m_CpuInfo),
            Expr::MakeBitVector(1, 0x1))));
        /* semantic: res = -op0.val */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeUnOp(
            OperationExpression::OpNeg,
            rInsn.GetOperand(0))));
        /* semantic: of.id = bit_cast((res.val & op0.val) >> (int(op0.bit, op0.bit) - int(op0.bit, 1)), int1(1)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlOf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeVar("res", VariableExpression::Use),
              rInsn.GetOperand(0)),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        /* semantic: call('sign_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlSf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        /* semantic: call('zero_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlZf, &m_CpuInfo),
          Expr::MakeTernaryCond(ConditionExpression::CondEq,
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))));
        /* semantic: call('parity_flag') */
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBitVector(1, 0x1)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlPf, &m_CpuInfo),
          Expr::MakeVar("pf_tmp", VariableExpression::Use)));
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
        /* semantic: af.id = bit_cast((op0.val ^ res.val) >> (int(op0.bit, 4)), int1(1)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlAf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              rInsn.GetOperand(0),
              Expr::MakeVar("res", VariableExpression::Use)),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))));
        /* semantic: op0.val = res */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("res", VariableExpression::Use)));
        /* semantic: free_var('res') */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x4:
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Mul);
      if (Operand__Ev(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('upper_res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("upper_res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: alloc_var('mul_res', concat(op0.bit, ignore(' * 2'))) */
        AllExpr.push_back(Expr::MakeVar("mul_res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize() * 2));
        /* semantic: if __code and is_byte_operation:
          ax.id = bit_cast(bit_cast(al.id, int_type16) * bit_cast(op0.val, int_type16), int_type16)
          upper_res = ah.id */
        if (rInsn.GetOperand(0)->GetBitSize() == 8)
        {
          /* block glb expressions */
          AllExpr.push_back(Expr::MakeAssign(
            Expr::MakeId(X86_Reg_Ax, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpMul,
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeId(X86_Reg_Al, &m_CpuInfo), Expr::MakeBitVector(16, 16)),
              Expr::MakeBinOp(OperationExpression::OpBcast, rInsn.GetOperand(0), Expr::MakeBitVector(16, 16))), Expr::MakeBitVector(16, 16))));
          AllExpr.push_back(Expr::MakeAssign(
            Expr::MakeVar("upper_res", VariableExpression::Use),
            Expr::MakeId(X86_Reg_Ah, &m_CpuInfo)));
        }
        /* semantic: if __code and is_word_operation:
          mul_res = bit_cast(bit_cast(ax.id, int_type32) * bit_cast(op0.val, int_type32), int_type32)
          ax.id = bit_cast(mul_res, int_type16)
          dx.id = bit_cast(mul_res >> int(32, 16), int_type16)
          upper_res = dx.id */
        if (rInsn.GetOperand(0)->GetBitSize() == 16)
        {
          /* block glb expressions */
          AllExpr.push_back(Expr::MakeAssign(
            Expr::MakeVar("mul_res", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpMul,
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeId(X86_Reg_Ax, &m_CpuInfo), Expr::MakeBitVector(32, 32)),
              Expr::MakeBinOp(OperationExpression::OpBcast, rInsn.GetOperand(0), Expr::MakeBitVector(32, 32))), Expr::MakeBitVector(32, 32))));
          AllExpr.push_back(Expr::MakeAssign(
            Expr::MakeId(X86_Reg_Ax, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeVar("mul_res", VariableExpression::Use), Expr::MakeBitVector(16, 16))));
          AllExpr.push_back(Expr::MakeAssign(
            Expr::MakeId(X86_Reg_Dx, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("mul_res", VariableExpression::Use),
              Expr::MakeBitVector(0x20, 0x10)), Expr::MakeBitVector(16, 16))));
          AllExpr.push_back(Expr::MakeAssign(
            Expr::MakeVar("upper_res", VariableExpression::Use),
            Expr::MakeId(X86_Reg_Dx, &m_CpuInfo)));
        }
        /* semantic: if __code and is_dword_operation:
          mul_res = bit_cast(bit_cast(eax.id, int_type64) * bit_cast(op0.val, int_type64), int_type64)
          eax.id = bit_cast(mul_res, int_type32)
          edx.id = bit_cast(mul_res >> int(64, 32), int_type32)
          upper_res = edx.id */
        if (rInsn.GetOperand(0)->GetBitSize() == 32)
        {
          /* block glb expressions */
          AllExpr.push_back(Expr::MakeAssign(
            Expr::MakeVar("mul_res", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpMul,
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeId(X86_Reg_Eax, &m_CpuInfo), Expr::MakeBitVector(64, 64)),
              Expr::MakeBinOp(OperationExpression::OpBcast, rInsn.GetOperand(0), Expr::MakeBitVector(64, 64))), Expr::MakeBitVector(64, 64))));
          AllExpr.push_back(Expr::MakeAssign(
            Expr::MakeId(X86_Reg_Eax, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeVar("mul_res", VariableExpression::Use), Expr::MakeBitVector(32, 32))));
          AllExpr.push_back(Expr::MakeAssign(
            Expr::MakeId(X86_Reg_Edx, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("mul_res", VariableExpression::Use),
              Expr::MakeBitVector(0x40, 0x20)), Expr::MakeBitVector(32, 32))));
          AllExpr.push_back(Expr::MakeAssign(
            Expr::MakeVar("upper_res", VariableExpression::Use),
            Expr::MakeId(X86_Reg_Edx, &m_CpuInfo)));
        }
        /* semantic: if __code and is_qword_operation:
          mul_res = bit_cast(bit_cast(rax.id, int_type128) * bit_cast(op0.val, int_type128), int_type128)
          rax.id = bit_cast(mul_res, int_type64)
          rdx.id = bit_cast(mul_res >> int(128, 64), int_type64)
          upper_res = rdx.id */
        if (rInsn.GetOperand(0)->GetBitSize() == 64)
        {
          /* block glb expressions */
          AllExpr.push_back(Expr::MakeAssign(
            Expr::MakeVar("mul_res", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpMul,
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeId(X86_Reg_Rax, &m_CpuInfo), Expr::MakeBitVector(128, 128)),
              Expr::MakeBinOp(OperationExpression::OpBcast, rInsn.GetOperand(0), Expr::MakeBitVector(128, 128))), Expr::MakeBitVector(128, 128))));
          AllExpr.push_back(Expr::MakeAssign(
            Expr::MakeId(X86_Reg_Rax, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeVar("mul_res", VariableExpression::Use), Expr::MakeBitVector(64, 64))));
          AllExpr.push_back(Expr::MakeAssign(
            Expr::MakeId(X86_Reg_Rdx, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("mul_res", VariableExpression::Use),
              Expr::MakeBitVector(0x80, 0x40)), Expr::MakeBitVector(64, 64))));
          AllExpr.push_back(Expr::MakeAssign(
            Expr::MakeVar("upper_res", VariableExpression::Use),
            Expr::MakeId(X86_Reg_Rdx, &m_CpuInfo)));
        }
        /* semantic: if __expr and upper_res == int(op0.bit, 0):
          of.id = int1(0)
          cf.id = int1(0)
        else:
          of.id = int1(1)
          cf.id = int1(1) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeVar("upper_res", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeBind({
          Expr::MakeAssign(
            Expr::MakeId(X86_FlOf, &m_CpuInfo),
            Expr::MakeBitVector(1, 0x0)),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlCf, &m_CpuInfo),
            Expr::MakeBitVector(1, 0x0))})
        ,
          Expr::MakeBind({
          Expr::MakeAssign(
            Expr::MakeId(X86_FlOf, &m_CpuInfo),
            Expr::MakeBitVector(1, 0x1)),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlCf, &m_CpuInfo),
            Expr::MakeBitVector(1, 0x1))})
        ));
        /* semantic: free_var('mul_res') */
        AllExpr.push_back(Expr::MakeVar("mul_res", VariableExpression::Free));
        /* semantic: free_var('upper_res') */
        AllExpr.push_back(Expr::MakeVar("upper_res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x5:
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Imul);
      if (Operand__Ev(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: alloc_var('mul_res', concat(op0.bit, ignore(' * 2'))) */
        AllExpr.push_back(Expr::MakeVar("mul_res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize() * 2));
        /* semantic: alloc_var('extended', concat(op0.bit, ignore(' * 2'))) */
        AllExpr.push_back(Expr::MakeVar("extended", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize() * 2));
        /* semantic: if __code and is_byte_operation:
          mul_res = sign_extend(al.id, int_type16) * sign_extend(op0.val, int_type16)
          ax.id = bit_cast(mul_res, int_type16)
          sf.id = bit_cast(mul_res >> int(16, 7), int_type1) */
        if (rInsn.GetOperand(0)->GetBitSize() == 8)
        {
          /* block glb expressions */
          AllExpr.push_back(Expr::MakeAssign(
            Expr::MakeVar("mul_res", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpMul,
              Expr::MakeBinOp(OperationExpression::OpSext, Expr::MakeId(X86_Reg_Al, &m_CpuInfo), Expr::MakeBitVector(16, 16)),
              Expr::MakeBinOp(OperationExpression::OpSext, rInsn.GetOperand(0), Expr::MakeBitVector(16, 16)))));
          AllExpr.push_back(Expr::MakeAssign(
            Expr::MakeId(X86_Reg_Ax, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeVar("mul_res", VariableExpression::Use), Expr::MakeBitVector(16, 16))));
          AllExpr.push_back(Expr::MakeAssign(
            Expr::MakeId(X86_FlSf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("mul_res", VariableExpression::Use),
              Expr::MakeBitVector(0x10, 0x7)), Expr::MakeBitVector(1, 1))));
        }
        /* semantic: if __code and is_word_operation:
          mul_res = sign_extend(ax.id, int_type32) * sign_extend(op0.val, int_type32)
          ax.id = bit_cast(mul_res, int_type16)
          dx.id = bit_cast(mul_res >> int(32, 16), int_type16)
          sf.id = bit_cast(mul_res >> int(32, 15), int_type1) */
        if (rInsn.GetOperand(0)->GetBitSize() == 16)
        {
          /* block glb expressions */
          AllExpr.push_back(Expr::MakeAssign(
            Expr::MakeVar("mul_res", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpMul,
              Expr::MakeBinOp(OperationExpression::OpSext, Expr::MakeId(X86_Reg_Ax, &m_CpuInfo), Expr::MakeBitVector(32, 32)),
              Expr::MakeBinOp(OperationExpression::OpSext, rInsn.GetOperand(0), Expr::MakeBitVector(32, 32)))));
          AllExpr.push_back(Expr::MakeAssign(
            Expr::MakeId(X86_Reg_Ax, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeVar("mul_res", VariableExpression::Use), Expr::MakeBitVector(16, 16))));
          AllExpr.push_back(Expr::MakeAssign(
            Expr::MakeId(X86_Reg_Dx, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("mul_res", VariableExpression::Use),
              Expr::MakeBitVector(0x20, 0x10)), Expr::MakeBitVector(16, 16))));
          AllExpr.push_back(Expr::MakeAssign(
            Expr::MakeId(X86_FlSf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("mul_res", VariableExpression::Use),
              Expr::MakeBitVector(0x20, 0xf)), Expr::MakeBitVector(1, 1))));
        }
        /* semantic: if __code and is_dword_operation:
          mul_res = sign_extend(eax.id, int_type64) * sign_extend(op0.val, int_type64)
          eax.id = bit_cast(mul_res, int_type32)
          edx.id = bit_cast(mul_res >> int(64, 32), int_type32)
          sf.id = bit_cast(mul_res >> int(64, 32), int_type1) */
        if (rInsn.GetOperand(0)->GetBitSize() == 32)
        {
          /* block glb expressions */
          AllExpr.push_back(Expr::MakeAssign(
            Expr::MakeVar("mul_res", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpMul,
              Expr::MakeBinOp(OperationExpression::OpSext, Expr::MakeId(X86_Reg_Eax, &m_CpuInfo), Expr::MakeBitVector(64, 64)),
              Expr::MakeBinOp(OperationExpression::OpSext, rInsn.GetOperand(0), Expr::MakeBitVector(64, 64)))));
          AllExpr.push_back(Expr::MakeAssign(
            Expr::MakeId(X86_Reg_Eax, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeVar("mul_res", VariableExpression::Use), Expr::MakeBitVector(32, 32))));
          AllExpr.push_back(Expr::MakeAssign(
            Expr::MakeId(X86_Reg_Edx, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("mul_res", VariableExpression::Use),
              Expr::MakeBitVector(0x40, 0x20)), Expr::MakeBitVector(32, 32))));
          AllExpr.push_back(Expr::MakeAssign(
            Expr::MakeId(X86_FlSf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("mul_res", VariableExpression::Use),
              Expr::MakeBitVector(0x40, 0x20)), Expr::MakeBitVector(1, 1))));
        }
        /* semantic: if __code and is_qword_operation:
          mul_res = sign_extend(rax.id, int_type128) * sign_extend(op0.val, int_type128)
          rax.id = bit_cast(mul_res, int_type64)
          rdx.id = bit_cast(mul_res >> int(128, 64), int_type64)
          sf.id = bit_cast(mul_res >> int(128, 63), int_type1) */
        if (rInsn.GetOperand(0)->GetBitSize() == 64)
        {
          /* block glb expressions */
          AllExpr.push_back(Expr::MakeAssign(
            Expr::MakeVar("mul_res", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpMul,
              Expr::MakeBinOp(OperationExpression::OpSext, Expr::MakeId(X86_Reg_Rax, &m_CpuInfo), Expr::MakeBitVector(128, 128)),
              Expr::MakeBinOp(OperationExpression::OpSext, rInsn.GetOperand(0), Expr::MakeBitVector(128, 128)))));
          AllExpr.push_back(Expr::MakeAssign(
            Expr::MakeId(X86_Reg_Rax, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeVar("mul_res", VariableExpression::Use), Expr::MakeBitVector(64, 64))));
          AllExpr.push_back(Expr::MakeAssign(
            Expr::MakeId(X86_Reg_Rdx, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("mul_res", VariableExpression::Use),
              Expr::MakeBitVector(0x80, 0x40)), Expr::MakeBitVector(64, 64))));
          AllExpr.push_back(Expr::MakeAssign(
            Expr::MakeId(X86_FlSf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("mul_res", VariableExpression::Use),
              Expr::MakeBitVector(0x80, 0x3f)), Expr::MakeBitVector(1, 1))));
        }
        /* semantic: res = bit_cast(mul_res, int_type(op0.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeVar("mul_res", VariableExpression::Use), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()))));
        /* semantic: extended = sign_extend(res, int_type(concat(op0.bit, ignore(' * 2')))) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("extended", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpSext, Expr::MakeVar("res", VariableExpression::Use), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize() * 2, rInsn.GetOperand(0)->GetBitSize() * 2))));
        /* semantic: if __expr and extended == mul_res:
          of.id = int1(0)
          cf.id = int1(0)
        else:
          of.id = int1(1)
          cf.id = int1(1) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeVar("extended", VariableExpression::Use),
          Expr::MakeVar("mul_res", VariableExpression::Use),
          Expr::MakeBind({
          Expr::MakeAssign(
            Expr::MakeId(X86_FlOf, &m_CpuInfo),
            Expr::MakeBitVector(1, 0x0)),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlCf, &m_CpuInfo),
            Expr::MakeBitVector(1, 0x0))})
        ,
          Expr::MakeBind({
          Expr::MakeAssign(
            Expr::MakeId(X86_FlOf, &m_CpuInfo),
            Expr::MakeBitVector(1, 0x1)),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlCf, &m_CpuInfo),
            Expr::MakeBitVector(1, 0x1))})
        ));
        /* semantic: free_var('extended') */
        AllExpr.push_back(Expr::MakeVar("extended", VariableExpression::Free));
        /* semantic: free_var('mul_res') */
        AllExpr.push_back(Expr::MakeVar("mul_res", VariableExpression::Free));
        /* semantic: free_var('res') */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x6:
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Div);
      if (Operand__Ev(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('dividend', concat(op0.bit, ignore(' * 2'))) */
        AllExpr.push_back(Expr::MakeVar("dividend", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize() * 2));
        /* semantic: if __code and is_byte_operation:
          dividend = bit_cast(ax.id, int_type16)
          al.id = bit_cast(dividend / zero_extend(op0.val, int_type16), int_type8)
          ah.id = bit_cast(dividend % zero_extend(op0.val, int_type16), int_type8) */
        if (rInsn.GetOperand(0)->GetBitSize() == 8)
        {
          /* block glb expressions */
          AllExpr.push_back(Expr::MakeAssign(
            Expr::MakeVar("dividend", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeId(X86_Reg_Ax, &m_CpuInfo), Expr::MakeBitVector(16, 16))));
          AllExpr.push_back(Expr::MakeAssign(
            Expr::MakeId(X86_Reg_Al, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpUDiv,
              Expr::MakeVar("dividend", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpZext, rInsn.GetOperand(0), Expr::MakeBitVector(16, 16))), Expr::MakeBitVector(8, 8))));
          AllExpr.push_back(Expr::MakeAssign(
            Expr::MakeId(X86_Reg_Ah, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpUMod,
              Expr::MakeVar("dividend", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpZext, rInsn.GetOperand(0), Expr::MakeBitVector(16, 16))), Expr::MakeBitVector(8, 8))));
        }
        /* semantic: if __code and is_word_operation:
          dividend = bit_cast(dx.id, int_type32) << int(32, 16) | bit_cast(ax.id, int_type32)
          ax.id = bit_cast(dividend / zero_extend(op0.val, int_type32), int_type16)
          dx.id = bit_cast(dividend % zero_extend(op0.val, int_type32), int_type16) */
        if (rInsn.GetOperand(0)->GetBitSize() == 16)
        {
          /* block glb expressions */
          AllExpr.push_back(Expr::MakeAssign(
            Expr::MakeVar("dividend", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpOr,
              Expr::MakeBinOp(
                OperationExpression::OpLls,
                Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeId(X86_Reg_Dx, &m_CpuInfo), Expr::MakeBitVector(32, 32)),
                Expr::MakeBitVector(0x20, 0x10)),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeId(X86_Reg_Ax, &m_CpuInfo), Expr::MakeBitVector(32, 32)))));
          AllExpr.push_back(Expr::MakeAssign(
            Expr::MakeId(X86_Reg_Ax, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpUDiv,
              Expr::MakeVar("dividend", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpZext, rInsn.GetOperand(0), Expr::MakeBitVector(32, 32))), Expr::MakeBitVector(16, 16))));
          AllExpr.push_back(Expr::MakeAssign(
            Expr::MakeId(X86_Reg_Dx, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpUMod,
              Expr::MakeVar("dividend", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpZext, rInsn.GetOperand(0), Expr::MakeBitVector(32, 32))), Expr::MakeBitVector(16, 16))));
        }
        /* semantic: if __code and is_dword_operation:
          dividend = bit_cast(edx.id, int_type64) << int(64, 32) | bit_cast(eax.id, int_type64)
          eax.id = bit_cast(dividend / zero_extend(op0.val, int_type64), int_type32)
          edx.id = bit_cast(dividend % zero_extend(op0.val, int_type64), int_type32) */
        if (rInsn.GetOperand(0)->GetBitSize() == 32)
        {
          /* block glb expressions */
          AllExpr.push_back(Expr::MakeAssign(
            Expr::MakeVar("dividend", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpOr,
              Expr::MakeBinOp(
                OperationExpression::OpLls,
                Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeId(X86_Reg_Edx, &m_CpuInfo), Expr::MakeBitVector(64, 64)),
                Expr::MakeBitVector(0x40, 0x20)),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeId(X86_Reg_Eax, &m_CpuInfo), Expr::MakeBitVector(64, 64)))));
          AllExpr.push_back(Expr::MakeAssign(
            Expr::MakeId(X86_Reg_Eax, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpUDiv,
              Expr::MakeVar("dividend", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpZext, rInsn.GetOperand(0), Expr::MakeBitVector(64, 64))), Expr::MakeBitVector(32, 32))));
          AllExpr.push_back(Expr::MakeAssign(
            Expr::MakeId(X86_Reg_Edx, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpUMod,
              Expr::MakeVar("dividend", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpZext, rInsn.GetOperand(0), Expr::MakeBitVector(64, 64))), Expr::MakeBitVector(32, 32))));
        }
        /* semantic: if __code and is_qword_operation:
          dividend = bit_cast(rdx.id, int_type128) << int(128, 64) | bit_cast(rax.id, int_type128)
          rax.id = bit_cast(dividend / zero_extend(op0.val, int_type128), int_type64)
          rdx.id = bit_cast(dividend % zero_extend(op0.val, int_type128), int_type64) */
        if (rInsn.GetOperand(0)->GetBitSize() == 64)
        {
          /* block glb expressions */
          AllExpr.push_back(Expr::MakeAssign(
            Expr::MakeVar("dividend", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpOr,
              Expr::MakeBinOp(
                OperationExpression::OpLls,
                Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeId(X86_Reg_Rdx, &m_CpuInfo), Expr::MakeBitVector(128, 128)),
                Expr::MakeBitVector(0x80, 0x40)),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeId(X86_Reg_Rax, &m_CpuInfo), Expr::MakeBitVector(128, 128)))));
          AllExpr.push_back(Expr::MakeAssign(
            Expr::MakeId(X86_Reg_Rax, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpUDiv,
              Expr::MakeVar("dividend", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpZext, rInsn.GetOperand(0), Expr::MakeBitVector(128, 128))), Expr::MakeBitVector(64, 64))));
          AllExpr.push_back(Expr::MakeAssign(
            Expr::MakeId(X86_Reg_Rdx, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpUMod,
              Expr::MakeVar("dividend", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpZext, rInsn.GetOperand(0), Expr::MakeBitVector(128, 128))), Expr::MakeBitVector(64, 64))));
        }
        /* semantic: free_var('dividend') */
        AllExpr.push_back(Expr::MakeVar("dividend", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x7:
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Idiv);
      if (Operand__Ev(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('dividend', concat(op0.bit, ignore(' * 2'))) */
        AllExpr.push_back(Expr::MakeVar("dividend", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize() * 2));
        /* semantic: alloc_var('extended', concat(op0.bit, ignore(' * 2'))) */
        AllExpr.push_back(Expr::MakeVar("extended", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize() * 2));
        /* semantic: extended = sign_extend(op0.val, int_type(concat(op0.bit, ignore(' * 2')))) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("extended", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpSext, rInsn.GetOperand(0), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize() * 2, rInsn.GetOperand(0)->GetBitSize() * 2))));
        /* semantic: if __code and is_byte_operation:
          dividend = sign_extend(ax.id, int_type16)
          al.id = bit_cast(sdiv(dividend, extended), int_type8)
          ah.id = bit_cast(smod(dividend, extended), int_type8) */
        if (rInsn.GetOperand(0)->GetBitSize() == 8)
        {
          /* block glb expressions */
          AllExpr.push_back(Expr::MakeAssign(
            Expr::MakeVar("dividend", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpSext, Expr::MakeId(X86_Reg_Ax, &m_CpuInfo), Expr::MakeBitVector(16, 16))));
          AllExpr.push_back(Expr::MakeAssign(
            Expr::MakeId(X86_Reg_Al, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(OperationExpression::OpSDiv, Expr::MakeVar("dividend", VariableExpression::Use), Expr::MakeVar("extended", VariableExpression::Use)), Expr::MakeBitVector(8, 8))));
          AllExpr.push_back(Expr::MakeAssign(
            Expr::MakeId(X86_Reg_Ah, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(OperationExpression::OpSMod, Expr::MakeVar("dividend", VariableExpression::Use), Expr::MakeVar("extended", VariableExpression::Use)), Expr::MakeBitVector(8, 8))));
        }
        /* semantic: if __code and is_word_operation:
          dividend = sign_extend(dx.id, int_type32) << int(32, 16) | sign_extend(ax.id, int_type32)
          ax.id = bit_cast(sdiv(dividend, extended), int_type16)
          dx.id = bit_cast(smod(dividend, extended), int_type16) */
        if (rInsn.GetOperand(0)->GetBitSize() == 16)
        {
          /* block glb expressions */
          AllExpr.push_back(Expr::MakeAssign(
            Expr::MakeVar("dividend", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpOr,
              Expr::MakeBinOp(
                OperationExpression::OpLls,
                Expr::MakeBinOp(OperationExpression::OpSext, Expr::MakeId(X86_Reg_Dx, &m_CpuInfo), Expr::MakeBitVector(32, 32)),
                Expr::MakeBitVector(0x20, 0x10)),
              Expr::MakeBinOp(OperationExpression::OpSext, Expr::MakeId(X86_Reg_Ax, &m_CpuInfo), Expr::MakeBitVector(32, 32)))));
          AllExpr.push_back(Expr::MakeAssign(
            Expr::MakeId(X86_Reg_Ax, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(OperationExpression::OpSDiv, Expr::MakeVar("dividend", VariableExpression::Use), Expr::MakeVar("extended", VariableExpression::Use)), Expr::MakeBitVector(16, 16))));
          AllExpr.push_back(Expr::MakeAssign(
            Expr::MakeId(X86_Reg_Dx, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(OperationExpression::OpSMod, Expr::MakeVar("dividend", VariableExpression::Use), Expr::MakeVar("extended", VariableExpression::Use)), Expr::MakeBitVector(16, 16))));
        }
        /* semantic: if __code and is_dword_operation:
          dividend = sign_extend(edx.id, int_type64) << int(64, 32) | sign_extend(eax.id, int_type64)
          eax.id = bit_cast(sdiv(dividend, extended), int_type32)
          edx.id = bit_cast(smod(dividend, extended), int_type32) */
        if (rInsn.GetOperand(0)->GetBitSize() == 32)
        {
          /* block glb expressions */
          AllExpr.push_back(Expr::MakeAssign(
            Expr::MakeVar("dividend", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpOr,
              Expr::MakeBinOp(
                OperationExpression::OpLls,
                Expr::MakeBinOp(OperationExpression::OpSext, Expr::MakeId(X86_Reg_Edx, &m_CpuInfo), Expr::MakeBitVector(64, 64)),
                Expr::MakeBitVector(0x40, 0x20)),
              Expr::MakeBinOp(OperationExpression::OpSext, Expr::MakeId(X86_Reg_Eax, &m_CpuInfo), Expr::MakeBitVector(64, 64)))));
          AllExpr.push_back(Expr::MakeAssign(
            Expr::MakeId(X86_Reg_Eax, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(OperationExpression::OpSDiv, Expr::MakeVar("dividend", VariableExpression::Use), Expr::MakeVar("extended", VariableExpression::Use)), Expr::MakeBitVector(32, 32))));
          AllExpr.push_back(Expr::MakeAssign(
            Expr::MakeId(X86_Reg_Edx, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(OperationExpression::OpSMod, Expr::MakeVar("dividend", VariableExpression::Use), Expr::MakeVar("extended", VariableExpression::Use)), Expr::MakeBitVector(32, 32))));
        }
        /* semantic: if __code and is_qword_operation:
          dividend = sign_extend(rdx.id, int_type128) << int(128, 64) | sign_extend(rax.id, int_type128)
          rax.id = bit_cast(sdiv(dividend, extended), int_type64)
          rdx.id = bit_cast(smod(dividend, extended), int_type64) */
        if (rInsn.GetOperand(0)->GetBitSize() == 64)
        {
          /* block glb expressions */
          AllExpr.push_back(Expr::MakeAssign(
            Expr::MakeVar("dividend", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpOr,
              Expr::MakeBinOp(
                OperationExpression::OpLls,
                Expr::MakeBinOp(OperationExpression::OpSext, Expr::MakeId(X86_Reg_Rdx, &m_CpuInfo), Expr::MakeBitVector(128, 128)),
                Expr::MakeBitVector(0x80, 0x40)),
              Expr::MakeBinOp(OperationExpression::OpSext, Expr::MakeId(X86_Reg_Rax, &m_CpuInfo), Expr::MakeBitVector(128, 128)))));
          AllExpr.push_back(Expr::MakeAssign(
            Expr::MakeId(X86_Reg_Rax, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(OperationExpression::OpSDiv, Expr::MakeVar("dividend", VariableExpression::Use), Expr::MakeVar("extended", VariableExpression::Use)), Expr::MakeBitVector(64, 64))));
          AllExpr.push_back(Expr::MakeAssign(
            Expr::MakeId(X86_Reg_Rdx, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(OperationExpression::OpSMod, Expr::MakeVar("dividend", VariableExpression::Use), Expr::MakeVar("extended", VariableExpression::Use)), Expr::MakeBitVector(64, 64))));
        }
        /* semantic: free_var('extended') */
        AllExpr.push_back(Expr::MakeVar("extended", VariableExpression::Free));
        /* semantic: free_var('dividend') */
        AllExpr.push_back(Expr::MakeVar("dividend", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    default:
      return false;
    }
}

/** instruction
 * mnemonic: clc
 * clear_flags: ['cf']
 * opcode: f8
 * semantic: cf.id = int1(0);

**/
bool X86Architecture::Table_1_f8(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Clc);
    {
      Expression::LSPType AllExpr;
      rInsn.SetClearedFlags(X86_FlCf);
      AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlCf, &m_CpuInfo), Expr::MakeBoolean(false)));
      /* semantic: cf.id = int1(0) */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlCf, &m_CpuInfo),
        Expr::MakeBitVector(1, 0x0)));
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instruction
 * mnemonic: stc
 * opcode: f9
 * update_flags: ['cf']
 * semantic: cf.id = int1(1);

**/
bool X86Architecture::Table_1_f9(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Stc);
    {
      Expression::LSPType AllExpr;
      rInsn.SetUpdatedFlags(X86_FlCf);
      /* semantic: cf.id = int1(1) */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlCf, &m_CpuInfo),
        Expr::MakeBitVector(1, 0x1)));
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instruction
 * mnemonic: cli
 * clear_flags: ['if']
 * opcode: fa
 * semantic: []
**/
bool X86Architecture::Table_1_fa(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Cli);
    {
      Expression::LSPType AllExpr;
      rInsn.SetClearedFlags(X86_FlIf);
      AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlIf, &m_CpuInfo), Expr::MakeBoolean(false)));
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instruction
 * mnemonic: sti
 * opcode: fb
 * semantic: []
 * set_flags: ['if']
**/
bool X86Architecture::Table_1_fb(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Sti);
    {
      Expression::LSPType AllExpr;
      rInsn.SetFixedFlags(X86_FlIf);
      AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlIf, &m_CpuInfo), Expr::MakeBoolean(true)));
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instruction
 * mnemonic: cld
 * clear_flags: ['df']
 * opcode: fc
 * semantic: df.id = int1(0);

**/
bool X86Architecture::Table_1_fc(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Cld);
    {
      Expression::LSPType AllExpr;
      rInsn.SetClearedFlags(X86_FlDf);
      AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlDf, &m_CpuInfo), Expr::MakeBoolean(false)));
      /* semantic: df.id = int1(0) */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlDf, &m_CpuInfo),
        Expr::MakeBitVector(1, 0x0)));
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instruction
 * mnemonic: std
 * opcode: fd
 * semantic: df.id = int1(1);

 * set_flags: ['df']
**/
bool X86Architecture::Table_1_fd(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Std);
    {
      Expression::LSPType AllExpr;
      rInsn.SetFixedFlags(X86_FlDf);
      AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlDf, &m_CpuInfo), Expr::MakeBoolean(true)));
      /* semantic: df.id = int1(1) */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlDf, &m_CpuInfo),
        Expr::MakeBitVector(1, 0x1)));
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** group:
 * mnemonic: inc
 * operand: ['Eb']
 * update_flags: ['pf', 'af', 'zf', 'sf', 'of']
 * opcode: 00
 * semantic: alloc_var('op1', op0.bit);
alloc_var('res', op0.bit);
op1.val = int(op0.bit, 1);
res.val = op0.val + op1.val;
call('overflow_flag_add');
call('sign_flag');
call('zero_flag');
call('parity_flag');
call('adjust_flag');
op0.val = res.val;
free_var('op1');
free_var('res');

 *
 * mnemonic: dec
 * operand: ['Eb']
 * update_flags: ['pf', 'af', 'zf', 'sf', 'of']
 * opcode: 01
 * semantic: alloc_var('res', op0.bit);
alloc_var('op1', op0.bit);
op1 = int(op0.bit, 1);
res = op0.val - op1;
call('overflow_flag_sub');
call('sign_flag');
call('zero_flag');
call('parity_flag');
call('adjust_flag');
op0.val = res;
free_var('res');

 *
 * opcode: 02
 * invalid
 *
 * opcode: 03
 * invalid
 *
 * opcode: 04
 * invalid
 *
 * opcode: 05
 * invalid
 *
 * opcode: 06
 * invalid
 *
 * opcode: 07
 * invalid
 *
**/
bool X86Architecture::Table_1_fe(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    u8 ModRmByte;
    if (!rBinStrm.Read(Offset, ModRmByte))
      return false;

    x86::ModRM ModRm(ModRmByte);
    switch (ModRm.Reg())
    {
    case 0x0:
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Inc);
      if (Operand__Eb(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        rInsn.SetUpdatedFlags(X86_FlPf | X86_FlAf | X86_FlZf | X86_FlSf | X86_FlOf);
        /* semantic: alloc_var('op1', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("op1", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: op1.val = int(op0.bit, 1) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("op1", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)));
        /* semantic: res.val = op0.val + op1.val */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpAdd,
            rInsn.GetOperand(0),
            Expr::MakeVar("op1", VariableExpression::Use))));
        /* semantic: call('overflow_flag_add') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlOf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                Expr::MakeVar("res", VariableExpression::Use)),
              Expr::MakeUnOp(
                OperationExpression::OpNot,
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  rInsn.GetOperand(0),
                  Expr::MakeVar("op1", VariableExpression::Use)))),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        /* semantic: call('sign_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlSf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        /* semantic: call('zero_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlZf, &m_CpuInfo),
          Expr::MakeTernaryCond(ConditionExpression::CondEq,
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))));
        /* semantic: call('parity_flag') */
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBitVector(1, 0x1)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlPf, &m_CpuInfo),
          Expr::MakeVar("pf_tmp", VariableExpression::Use)));
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
        /* semantic: call('adjust_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlAf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                Expr::MakeVar("op1", VariableExpression::Use)),
              Expr::MakeVar("res", VariableExpression::Use)),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))));
        /* semantic: op0.val = res.val */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("res", VariableExpression::Use)));
        /* semantic: free_var('op1') */
        AllExpr.push_back(Expr::MakeVar("op1", VariableExpression::Free));
        /* semantic: free_var('res') */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x1:
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Dec);
      if (Operand__Eb(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        rInsn.SetUpdatedFlags(X86_FlPf | X86_FlAf | X86_FlZf | X86_FlSf | X86_FlOf);
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: alloc_var('op1', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("op1", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: op1 = int(op0.bit, 1) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("op1", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)));
        /* semantic: res = op0.val - op1 */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            rInsn.GetOperand(0),
            Expr::MakeVar("op1", VariableExpression::Use))));
        /* semantic: call('overflow_flag_sub') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlOf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                Expr::MakeVar("res", VariableExpression::Use)),
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                Expr::MakeVar("op1", VariableExpression::Use))),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        /* semantic: call('sign_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlSf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        /* semantic: call('zero_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlZf, &m_CpuInfo),
          Expr::MakeTernaryCond(ConditionExpression::CondEq,
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))));
        /* semantic: call('parity_flag') */
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBitVector(1, 0x1)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlPf, &m_CpuInfo),
          Expr::MakeVar("pf_tmp", VariableExpression::Use)));
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
        /* semantic: call('adjust_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlAf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                Expr::MakeVar("op1", VariableExpression::Use)),
              Expr::MakeVar("res", VariableExpression::Use)),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))));
        /* semantic: op0.val = res */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("res", VariableExpression::Use)));
        /* semantic: free_var('res') */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x2:
      return false;
    case 0x3:
      return false;
    case 0x4:
      return false;
    case 0x5:
      return false;
    case 0x6:
      return false;
    case 0x7:
      return false;
    default:
      return false;
    }
}

/** group:
 * mnemonic: inc
 * operand: ['Ev']
 * update_flags: ['pf', 'af', 'zf', 'sf', 'of']
 * opcode: 00
 * semantic: alloc_var('op1', op0.bit);
alloc_var('res', op0.bit);
op1.val = int(op0.bit, 1);
res.val = op0.val + op1.val;
call('overflow_flag_add');
call('sign_flag');
call('zero_flag');
call('parity_flag');
call('adjust_flag');
op0.val = res.val;
free_var('op1');
free_var('res');

 *
 * mnemonic: dec
 * operand: ['Ev']
 * update_flags: ['pf', 'af', 'zf', 'sf', 'of']
 * opcode: 01
 * semantic: alloc_var('res', op0.bit);
alloc_var('op1', op0.bit);
op1 = int(op0.bit, 1);
res = op0.val - op1;
call('overflow_flag_sub');
call('sign_flag');
call('zero_flag');
call('parity_flag');
call('adjust_flag');
op0.val = res;
free_var('res');

 *
 * mnemonic: call
 * operand: ['Ev']
 * semantic: stack.id -= stack.size;
stack.mem = program.id;
program.id = op0.val;

 * constraint: df64
 * operation_type: ['call']
 * opcode: 02
 *
 * mnemonic: call
 * operand: ['Mp']
 * opcode: 03
 * operation_type: ['call']
 *
 * mnemonic: jmp
 * operand: ['Ev']
 * semantic: program.id = op0.val;

 * constraint: df64
 * operation_type: ['jmp']
 * opcode: 04
 *
 * mnemonic: jmp
 * operand: ['Mp']
 * opcode: 05
 * operation_type: ['jmp']
 * semantic: program.id = op0.val;

 *
 * mnemonic: push
 * operand: ['Ev']
 * opcode: 06
 * semantic: alloc_var('pushed_value', stack.bit);
pushed_value = sign_extend(op0.val, int(stack.bit, stack.bit));
stack.id -= stack.size;
stack.mem = pushed_value;
free_var('pushed_value');

 * constraint: d64
 *
 * opcode: 07
 * invalid
 *
**/
bool X86Architecture::Table_1_ff(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    u8 ModRmByte;
    if (!rBinStrm.Read(Offset, ModRmByte))
      return false;

    x86::ModRM ModRm(ModRmByte);
    switch (ModRm.Reg())
    {
    case 0x0:
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Inc);
      if (Operand__Ev(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        rInsn.SetUpdatedFlags(X86_FlPf | X86_FlAf | X86_FlZf | X86_FlSf | X86_FlOf);
        /* semantic: alloc_var('op1', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("op1", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: op1.val = int(op0.bit, 1) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("op1", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)));
        /* semantic: res.val = op0.val + op1.val */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpAdd,
            rInsn.GetOperand(0),
            Expr::MakeVar("op1", VariableExpression::Use))));
        /* semantic: call('overflow_flag_add') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlOf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                Expr::MakeVar("res", VariableExpression::Use)),
              Expr::MakeUnOp(
                OperationExpression::OpNot,
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  rInsn.GetOperand(0),
                  Expr::MakeVar("op1", VariableExpression::Use)))),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        /* semantic: call('sign_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlSf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        /* semantic: call('zero_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlZf, &m_CpuInfo),
          Expr::MakeTernaryCond(ConditionExpression::CondEq,
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))));
        /* semantic: call('parity_flag') */
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBitVector(1, 0x1)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlPf, &m_CpuInfo),
          Expr::MakeVar("pf_tmp", VariableExpression::Use)));
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
        /* semantic: call('adjust_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlAf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                Expr::MakeVar("op1", VariableExpression::Use)),
              Expr::MakeVar("res", VariableExpression::Use)),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))));
        /* semantic: op0.val = res.val */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("res", VariableExpression::Use)));
        /* semantic: free_var('op1') */
        AllExpr.push_back(Expr::MakeVar("op1", VariableExpression::Free));
        /* semantic: free_var('res') */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x1:
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Dec);
      if (Operand__Ev(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        rInsn.SetUpdatedFlags(X86_FlPf | X86_FlAf | X86_FlZf | X86_FlSf | X86_FlOf);
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: alloc_var('op1', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("op1", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: op1 = int(op0.bit, 1) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("op1", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)));
        /* semantic: res = op0.val - op1 */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            rInsn.GetOperand(0),
            Expr::MakeVar("op1", VariableExpression::Use))));
        /* semantic: call('overflow_flag_sub') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlOf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                Expr::MakeVar("res", VariableExpression::Use)),
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                Expr::MakeVar("op1", VariableExpression::Use))),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        /* semantic: call('sign_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlSf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        /* semantic: call('zero_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlZf, &m_CpuInfo),
          Expr::MakeTernaryCond(ConditionExpression::CondEq,
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))));
        /* semantic: call('parity_flag') */
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBitVector(1, 0x1)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlPf, &m_CpuInfo),
          Expr::MakeVar("pf_tmp", VariableExpression::Use)));
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
        /* semantic: call('adjust_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlAf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                Expr::MakeVar("op1", VariableExpression::Use)),
              Expr::MakeVar("res", VariableExpression::Use)),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))));
        /* semantic: op0.val = res */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("res", VariableExpression::Use)));
        /* semantic: free_var('res') */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x2:
      if (!(rInsn.Prefix() & X86_Prefix_OpSize))
      {
        rInsn.Prefix() |= X86_Prefix_REX_w; /* d64/df64 constraint */
      }
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Call);
      rInsn.SubType() |= Instruction::CallType;
      if (Operand__Ev(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: stack.id -= stack.size */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
            Expr::MakeBitVector(
              m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())),
              m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())) / 8)))
        );
        /* semantic: stack.mem = program.id */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeMem(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), nullptr, Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo)),
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::ProgramPointerRegister, rInsn.GetMode()), &m_CpuInfo)));
        /* semantic: program.id = op0.val */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::ProgramPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          rInsn.GetOperand(0)));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x3:
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Call);
      rInsn.SubType() |= Instruction::CallType;
      if (Operand__Mp(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    case 0x4:
      if (!(rInsn.Prefix() & X86_Prefix_OpSize))
      {
        rInsn.Prefix() |= X86_Prefix_REX_w; /* d64/df64 constraint */
      }
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Jmp);
      rInsn.SubType() |= Instruction::JumpType;
      if (Operand__Ev(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: program.id = op0.val */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::ProgramPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          rInsn.GetOperand(0)));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x5:
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Jmp);
      rInsn.SubType() |= Instruction::JumpType;
      if (Operand__Mp(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: program.id = op0.val */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::ProgramPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          rInsn.GetOperand(0)));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x6:
      if (!(rInsn.Prefix() & X86_Prefix_OpSize))
      {
        rInsn.Prefix() |= X86_Prefix_REX_w; /* d64/df64 constraint */
      }
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Push);
      if (Operand__Ev(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('pushed_value', stack.bit) */
        AllExpr.push_back(Expr::MakeVar("pushed_value", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()))));
        /* semantic: pushed_value = sign_extend(op0.val, int(stack.bit, stack.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pushed_value", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpSext, rInsn.GetOperand(0), Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()))))));
        /* semantic: stack.id -= stack.size */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
            Expr::MakeBitVector(
              m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())),
              m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())) / 8)))
        );
        /* semantic: stack.mem = pushed_value */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeMem(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), nullptr, Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo)),
          Expr::MakeVar("pushed_value", VariableExpression::Use)));
        /* semantic: free_var('pushed_value') */
        AllExpr.push_back(Expr::MakeVar("pushed_value", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x7:
      return false;
    default:
      return false;
    }
}

/** group:
 * opcode: 00
 * sub_opcodes: [{'mnemonic': 'sldt', 'operand': ['Mw']}, {'mnemonic': 'sldt', 'operand': ['Rv'], 'attr': ['na16']}]
 *
 * opcode: 01
 * sub_opcodes: [{'mnemonic': 'str', 'operand': ['Mw']}, {'mnemonic': 'str', 'operand': ['Rv'], 'attr': ['na16']}]
 *
 * opcode: 02
 * sub_opcodes: [{'mnemonic': 'lldt', 'operand': ['Mw']}, {'mnemonic': 'lldt', 'operand': ['Rv'], 'attr': ['na16']}]
 *
 * opcode: 03
 * sub_opcodes: [{'mnemonic': 'ltr', 'operand': ['Mw']}, {'mnemonic': 'ltr', 'operand': ['Rv'], 'attr': ['na16']}]
 *
 * opcode: 04
 * sub_opcodes: [{'mnemonic': 'verr', 'operand': ['Mw']}, {'mnemonic': 'verr', 'operand': ['Rv'], 'attr': ['na16']}]
 *
 * opcode: 05
 * sub_opcodes: [{'mnemonic': 'verw', 'operand': ['Mw']}, {'mnemonic': 'verw', 'operand': ['Rv'], 'attr': ['na16']}]
 *
 * mnemonic: jmpe
 * operand: ['Ev']
 * opcode: 06
 * attr: ['ia64']
 *
 * opcode: 07
 * invalid
 *
**/
bool X86Architecture::Table_2_00(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    u8 ModRmByte;
    if (!rBinStrm.Read(Offset, ModRmByte))
      return false;

    x86::ModRM ModRm(ModRmByte);
    switch (ModRm.Reg())
    {
    case 0x0:
      if ((Mode == X86_Bit_16 && rInsn.Prefix() & X86_Prefix_AdSize) || (Mode != X86_Bit_16 && !(rInsn.Prefix() & X86_Prefix_AdSize)))
      {
        rInsn.Length()++;
        rInsn.SetOpcode(X86_Opcode_Sldt);
        if (Operand__Rv(rBinStrm, Offset, rInsn, Mode) == false)
        {
          return false;
        }
        return true;
      }
      else
      {
        rInsn.Length()++;
        rInsn.SetOpcode(X86_Opcode_Sldt);
        if (Operand__Mw(rBinStrm, Offset, rInsn, Mode) == false)
        {
          return false;
        }
        return true;
      }
    case 0x1:
      if ((Mode == X86_Bit_16 && rInsn.Prefix() & X86_Prefix_AdSize) || (Mode != X86_Bit_16 && !(rInsn.Prefix() & X86_Prefix_AdSize)))
      {
        rInsn.Length()++;
        rInsn.SetOpcode(X86_Opcode_Str);
        if (Operand__Rv(rBinStrm, Offset, rInsn, Mode) == false)
        {
          return false;
        }
        return true;
      }
      else
      {
        rInsn.Length()++;
        rInsn.SetOpcode(X86_Opcode_Str);
        if (Operand__Mw(rBinStrm, Offset, rInsn, Mode) == false)
        {
          return false;
        }
        return true;
      }
    case 0x2:
      if ((Mode == X86_Bit_16 && rInsn.Prefix() & X86_Prefix_AdSize) || (Mode != X86_Bit_16 && !(rInsn.Prefix() & X86_Prefix_AdSize)))
      {
        rInsn.Length()++;
        rInsn.SetOpcode(X86_Opcode_Lldt);
        if (Operand__Rv(rBinStrm, Offset, rInsn, Mode) == false)
        {
          return false;
        }
        return true;
      }
      else
      {
        rInsn.Length()++;
        rInsn.SetOpcode(X86_Opcode_Lldt);
        if (Operand__Mw(rBinStrm, Offset, rInsn, Mode) == false)
        {
          return false;
        }
        return true;
      }
    case 0x3:
      if ((Mode == X86_Bit_16 && rInsn.Prefix() & X86_Prefix_AdSize) || (Mode != X86_Bit_16 && !(rInsn.Prefix() & X86_Prefix_AdSize)))
      {
        rInsn.Length()++;
        rInsn.SetOpcode(X86_Opcode_Ltr);
        if (Operand__Rv(rBinStrm, Offset, rInsn, Mode) == false)
        {
          return false;
        }
        return true;
      }
      else
      {
        rInsn.Length()++;
        rInsn.SetOpcode(X86_Opcode_Ltr);
        if (Operand__Mw(rBinStrm, Offset, rInsn, Mode) == false)
        {
          return false;
        }
        return true;
      }
    case 0x4:
      if ((Mode == X86_Bit_16 && rInsn.Prefix() & X86_Prefix_AdSize) || (Mode != X86_Bit_16 && !(rInsn.Prefix() & X86_Prefix_AdSize)))
      {
        rInsn.Length()++;
        rInsn.SetOpcode(X86_Opcode_Verr);
        if (Operand__Rv(rBinStrm, Offset, rInsn, Mode) == false)
        {
          return false;
        }
        return true;
      }
      else
      {
        rInsn.Length()++;
        rInsn.SetOpcode(X86_Opcode_Verr);
        if (Operand__Mw(rBinStrm, Offset, rInsn, Mode) == false)
        {
          return false;
        }
        return true;
      }
    case 0x5:
      if ((Mode == X86_Bit_16 && rInsn.Prefix() & X86_Prefix_AdSize) || (Mode != X86_Bit_16 && !(rInsn.Prefix() & X86_Prefix_AdSize)))
      {
        rInsn.Length()++;
        rInsn.SetOpcode(X86_Opcode_Verw);
        if (Operand__Rv(rBinStrm, Offset, rInsn, Mode) == false)
        {
          return false;
        }
        return true;
      }
      else
      {
        rInsn.Length()++;
        rInsn.SetOpcode(X86_Opcode_Verw);
        if (Operand__Mw(rBinStrm, Offset, rInsn, Mode) == false)
        {
          return false;
        }
        return true;
      }
    case 0x6:
      if (m_CfgMdl.GetEnum("Vendor") == X86_ProcType_IA64)
      {
        rInsn.Length()++;
        rInsn.SetOpcode(X86_Opcode_Jmpe);
        if (Operand__Ev(rBinStrm, Offset, rInsn, Mode) == false)
        {
          return false;
        }
        return true;
      }
      else
        return false;
    case 0x7:
      return false;
    default:
      return false;
    }
}

/** group:
 * opcode: 00
 * sub_opcodes: [{'mnemonic': 'sgdt', 'operand': ['Mp'], 'constraint': 'f64'}, {'mnemonic': 'vmcall', 'suffix': 193}, {'mnemonic': 'vmlaunch', 'suffix': 194}, {'mnemonic': 'vmresume', 'suffix': 195}, {'mnemonic': 'vmxoff', 'suffix': 196}]
 *
 * opcode: 01
 * sub_opcodes: [{'mnemonic': 'sidt', 'operand': ['Mp'], 'constraint': 'f64'}, {'mnemonic': 'monitor', 'suffix': 200}, {'mnemonic': 'mwait', 'suffix': 201}]
 *
 * opcode: 02
 * sub_opcodes: [{'mnemonic': 'lgdt', 'operand': ['Mp'], 'constraint': 'f64'}, {'mnemonic': 'xgetbv', 'suffix': 208}, {'mnemonic': 'xsetbv', 'suffix': 209}]
 *
 * opcode: 03
 * sub_opcodes: [{'mnemonic': 'lidt', 'operand': ['Mp'], 'constraint': 'f64'}, {'mnemonic': 'vmrun', 'suffix': 216}, {'mnemonic': 'vmmcall', 'suffix': 217}, {'mnemonic': 'vmload', 'suffix': 218}, {'mnemonic': 'vmsave', 'suffix': 219}, {'mnemonic': 'stgi', 'suffix': 220}, {'mnemonic': 'clgi', 'suffix': 221}, {'mnemonic': 'skinit', 'suffix': 222}, {'mnemonic': 'invlpga', 'suffix': 223}]
 *
 * opcode: 04
 * sub_opcodes: [{'mnemonic': 'smsw', 'operand': ['Mw']}, {'mnemonic': 'smsw', 'operand': ['Rv'], 'attr': ['na16']}]
 *
 * opcode: 05
 * invalid
 *
 * opcode: 06
 * sub_opcodes: [{'mnemonic': 'lmsw', 'operand': ['Mw']}, {'mnemonic': 'lmsw', 'operand': ['Rv'], 'attr': ['na16']}]
 *
 * opcode: 07
 * sub_opcodes: [{'mnemonic': 'invlpg', 'operand': ['M']}, {'mnemonic': 'swapgs', 'suffix': 248}, {'mnemonic': 'rdtscp', 'suffix': 249}]
 *
**/
bool X86Architecture::Table_2_01(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    u8 ModRmByte;
    if (!rBinStrm.Read(Offset, ModRmByte))
      return false;

    x86::ModRM ModRm(ModRmByte);
    switch (ModRm.Reg())
    {
    case 0x0:
      {
        u8 Suffix;
        if (!rBinStrm.Read(Offset + 0, Suffix))
          return false;

        if (Suffix == 0xc4)
        {
          rInsn.Length() += 2;
          rInsn.SetOpcode(X86_Opcode_Vmxoff);
          return true;
        }
        else if (Suffix == 0xc3)
        {
          rInsn.Length() += 2;
          rInsn.SetOpcode(X86_Opcode_Vmresume);
          return true;
        }
        else if (Suffix == 0xc2)
        {
          rInsn.Length() += 2;
          rInsn.SetOpcode(X86_Opcode_Vmlaunch);
          return true;
        }
        else if (Suffix == 0xc1)
        {
          rInsn.Length() += 2;
          rInsn.SetOpcode(X86_Opcode_Vmcall);
          return true;
        }
        else
        {
          rInsn.Length()++;
          rInsn.SetOpcode(X86_Opcode_Sgdt);
          if (Operand__Mp(rBinStrm, Offset, rInsn, Mode) == false)
          {
            return false;
          }
          return true;
        }
      }
    case 0x1:
      {
        u8 Suffix;
        if (!rBinStrm.Read(Offset + 0, Suffix))
          return false;

        if (Suffix == 0xc9)
        {
          rInsn.Length() += 2;
          rInsn.SetOpcode(X86_Opcode_Mwait);
          return true;
        }
        else if (Suffix == 0xc8)
        {
          rInsn.Length() += 2;
          rInsn.SetOpcode(X86_Opcode_Monitor);
          return true;
        }
        else
        {
          rInsn.Length()++;
          rInsn.SetOpcode(X86_Opcode_Sidt);
          if (Operand__Mp(rBinStrm, Offset, rInsn, Mode) == false)
          {
            return false;
          }
          return true;
        }
      }
    case 0x2:
      {
        u8 Suffix;
        if (!rBinStrm.Read(Offset + 0, Suffix))
          return false;

        if (Suffix == 0xd1)
        {
          rInsn.Length() += 2;
          rInsn.SetOpcode(X86_Opcode_Xsetbv);
          return true;
        }
        else if (Suffix == 0xd0)
        {
          rInsn.Length() += 2;
          rInsn.SetOpcode(X86_Opcode_Xgetbv);
          return true;
        }
        else
        {
          rInsn.Length()++;
          rInsn.SetOpcode(X86_Opcode_Lgdt);
          if (Operand__Mp(rBinStrm, Offset, rInsn, Mode) == false)
          {
            return false;
          }
          return true;
        }
      }
    case 0x3:
      {
        u8 Suffix;
        if (!rBinStrm.Read(Offset + 0, Suffix))
          return false;

        if (Suffix == 0xdf)
        {
          rInsn.Length() += 2;
          rInsn.SetOpcode(X86_Opcode_Invlpga);
          return true;
        }
        else if (Suffix == 0xde)
        {
          rInsn.Length() += 2;
          rInsn.SetOpcode(X86_Opcode_Skinit);
          return true;
        }
        else if (Suffix == 0xdd)
        {
          rInsn.Length() += 2;
          rInsn.SetOpcode(X86_Opcode_Clgi);
          return true;
        }
        else if (Suffix == 0xdc)
        {
          rInsn.Length() += 2;
          rInsn.SetOpcode(X86_Opcode_Stgi);
          return true;
        }
        else if (Suffix == 0xdb)
        {
          rInsn.Length() += 2;
          rInsn.SetOpcode(X86_Opcode_Vmsave);
          return true;
        }
        else if (Suffix == 0xda)
        {
          rInsn.Length() += 2;
          rInsn.SetOpcode(X86_Opcode_Vmload);
          return true;
        }
        else if (Suffix == 0xd9)
        {
          rInsn.Length() += 2;
          rInsn.SetOpcode(X86_Opcode_Vmmcall);
          return true;
        }
        else if (Suffix == 0xd8)
        {
          rInsn.Length() += 2;
          rInsn.SetOpcode(X86_Opcode_Vmrun);
          return true;
        }
        else
        {
          rInsn.Length()++;
          rInsn.SetOpcode(X86_Opcode_Lidt);
          if (Operand__Mp(rBinStrm, Offset, rInsn, Mode) == false)
          {
            return false;
          }
          return true;
        }
      }
    case 0x4:
      if ((Mode == X86_Bit_16 && rInsn.Prefix() & X86_Prefix_AdSize) || (Mode != X86_Bit_16 && !(rInsn.Prefix() & X86_Prefix_AdSize)))
      {
        rInsn.Length()++;
        rInsn.SetOpcode(X86_Opcode_Smsw);
        if (Operand__Rv(rBinStrm, Offset, rInsn, Mode) == false)
        {
          return false;
        }
        return true;
      }
      else
      {
        rInsn.Length()++;
        rInsn.SetOpcode(X86_Opcode_Smsw);
        if (Operand__Mw(rBinStrm, Offset, rInsn, Mode) == false)
        {
          return false;
        }
        return true;
      }
    case 0x5:
      return false;
    case 0x6:
      if ((Mode == X86_Bit_16 && rInsn.Prefix() & X86_Prefix_AdSize) || (Mode != X86_Bit_16 && !(rInsn.Prefix() & X86_Prefix_AdSize)))
      {
        rInsn.Length()++;
        rInsn.SetOpcode(X86_Opcode_Lmsw);
        if (Operand__Rv(rBinStrm, Offset, rInsn, Mode) == false)
        {
          return false;
        }
        return true;
      }
      else
      {
        rInsn.Length()++;
        rInsn.SetOpcode(X86_Opcode_Lmsw);
        if (Operand__Mw(rBinStrm, Offset, rInsn, Mode) == false)
        {
          return false;
        }
        return true;
      }
    case 0x7:
      {
        u8 Suffix;
        if (!rBinStrm.Read(Offset + 0, Suffix))
          return false;

        if (Suffix == 0xf9)
        {
          rInsn.Length() += 2;
          rInsn.SetOpcode(X86_Opcode_Rdtscp);
          return true;
        }
        else if (Suffix == 0xf8)
        {
          rInsn.Length() += 2;
          rInsn.SetOpcode(X86_Opcode_Swapgs);
          return true;
        }
        else
        {
          rInsn.Length()++;
          rInsn.SetOpcode(X86_Opcode_Invlpg);
          if (Operand__M(rBinStrm, Offset, rInsn, Mode) == false)
          {
            return false;
          }
          return true;
        }
      }
    default:
      return false;
    }
}

/** instruction
 * mnemonic: lar
 * operand: ['Gv', 'Ew']
 * opcode: 02
**/
bool X86Architecture::Table_2_02(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Lar);
    if (Operand__Gv_Ew(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: lsl
 * operand: ['Gv', 'Ew']
 * opcode: 03
**/
bool X86Architecture::Table_2_03(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Lsl);
    if (Operand__Gv_Ew(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: loadall
 * opcode: 04
 * cpu_model: == X86_Arch_80286
**/
bool X86Architecture::Table_2_04(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") == X86_Arch_80286)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Loadall);
      return true;
    }
    else
      return false;
}

/** instructions
 * opcode: 05
 *
 * mnemonic: loadall
 * cpu_model: == X86_Arch_80286
 *
 * mnemonic: syscall
 * semantic: 
 * cpu_model: >= X86_Arch_K6_2
 *
**/
bool X86Architecture::Table_2_05(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_K6_2)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Syscall);
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") == X86_Arch_80286)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Loadall);
      return true;
    }
    return false;
}

/** instruction
 * mnemonic: clts
 * opcode: 06
**/
bool X86Architecture::Table_2_06(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Clts);
    return true;
}

/** instructions
 * opcode: 07
 *
 * mnemonic: loadall
 * cpu_model: == X86_Arch_80386
 *
 * mnemonic: sysret
 * semantic: 
 * cpu_model: >= X86_Arch_K6_2
 *
**/
bool X86Architecture::Table_2_07(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_K6_2)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Sysret);
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") == X86_Arch_80386)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Loadall);
      return true;
    }
    return false;
}

/** instruction
 * mnemonic: invd
 * opcode: 08
 * cpu_model: >= X86_Arch_80486
**/
bool X86Architecture::Table_2_08(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_80486)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Invd);
      return true;
    }
    else
      return false;
}

/** instruction
 * mnemonic: wbindvd
 * opcode: 09
 * cpu_model: >= X86_Arch_80486
**/
bool X86Architecture::Table_2_09(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_80486)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Wbindvd);
      return true;
    }
    else
      return false;
}

/** instruction
 * opcode: 0a
 * invalid
**/
bool X86Architecture::Table_2_0a(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * mnemonic: ud1
 * opcode: 0b
 * cpu_model: >= X86_Arch_80286
**/
bool X86Architecture::Table_2_0b(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_80286)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Ud1);
      return true;
    }
    else
      return false;
}

/** instruction
 * opcode: 0c
 * invalid
**/
bool X86Architecture::Table_2_0c(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instructions
 * opcode: 0d
 *
 * invalid
 *
 * mnemonic: nop
 * semantic: program.id = program.id;

 * attr: ['amd']
 * reference: group_3DNOW1
 * operand: ['M']
 * cpu_model: >= X86_Arch_Pentium_pro
 *
**/
bool X86Architecture::Table_2_0d(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Pentium_pro && m_CfgMdl.GetEnum("Vendor") == X86_ProcType_AMD)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Nop);
      if (Operand__M(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: program.id = program.id */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::ProgramPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::ProgramPointerRegister, rInsn.GetMode()), &m_CpuInfo)));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    else
    {
      return false; /* INVALID */
    }
}

/** instructions
 * opcode: 0e
 *
 * invalid
 *
 * mnemonic: femms
 * attr: ['amd']
 *
**/
bool X86Architecture::Table_2_0e(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Vendor") == X86_ProcType_AMD)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Femms);
      return true;
    }
    else
    {
      return false; /* INVALID */
    }
}

/** instructions
 * opcode: 0f
 *
 * invalid
 * reference: table_3DNOW1
 * cpu_model: >= X86_Arch_K6_2
 *
**/
bool X86Architecture::Table_2_0f(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_K6_2)
    {
      return false; /* INVALID */
    }
    return false;
}

/** instructions
 * opcode: 10
 *
 * mnemonic: umov
 * operand: ['Eb', 'Gb']
 * cpu_model: == X86_Arch_80386
 *
 * mnemonic: movups
 * operand: ['Vx', 'Wx']
 * semantic: op0.val = op1.val;

 * cpu_model: >= X86_Arch_Sse
 *
 * mnemonic: movupd
 * operand: ['Vx', 'Wx']
 * prefix: 66
 * cpu_model: >= X86_Arch_Sse2
 *
 * mnemonic: movss
 * operand: ['Vo', 'Wod']
 * prefix: f3
 * semantic: alloc_var('tmp_val', op0.bit);
if __code and is_id_and_mem(op0, op1):
  op0.val = bit_cast(op1.val, int_type128);
if __code and is_mem_and_id(op0, op1):
  tmp_val = op0.val >> int(op0.bit, 32)
  tmp_val = tmp_val << int(op0.bit, 32)
  tmp_val += bit_cast(op1.val, int_type32)
  op0.val = tmp_val;
if __code and is_id_and_id(op0, op1):
  tmp_val = op0.val >> int(op0.bit, 32)
  tmp_val = tmp_val << int(op0.bit, 32)
  tmp_val += bit_cast(op1.val, int_type32)
  op0.val = tmp_val;
free_var('tmp_val');

 * cpu_model: >= X86_Arch_Sse
 *
 * mnemonic: movsd
 * operand: ['Vo', 'Woq']
 * prefix: f2
 * semantic: alloc_var('tmp_val', op0.bit);
if __code and is_id_and_mem(op0, op1):
  op0.val = bit_cast(op1.val, int_type128);
if __code and is_mem_and_id(op0, op1):
  op0.val = bit_cast(op1.val, int_type64);
if __code and is_id_and_id(op0, op1):
  tmp_val = op0.val >> int(op0.bit, 64)
  tmp_val = tmp_val << int(op0.bit, 64)
  tmp_val += bit_cast(op1.val, int_type64)
  op0.val = tmp_val;
free_var('tmp_val');

 * cpu_model: >= X86_Arch_Sse2
 *
**/
bool X86Architecture::Table_2_10(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse2 && (rInsn.GetPrefix() & X86_Prefix_RepNz) == X86_Prefix_RepNz)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Movsd);
      if (Operand__Vo_Woq(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('tmp_val', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("tmp_val", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: if __code and is_id_and_mem(op0, op1):
          op0.val = bit_cast(op1.val, int_type128) */
        if ((Expr::TestKind(Expression::Id, rInsn.GetOperand(0)) && Expr::TestKind(Expression::Mem, rInsn.GetOperand(1))))
        {
          /* block glb expressions */
          AllExpr.push_back(Expr::MakeAssign(
            rInsn.GetOperand(0),
            Expr::MakeBinOp(OperationExpression::OpBcast, rInsn.GetOperand(1), Expr::MakeBitVector(128, 128))));
        }
        /* semantic: if __code and is_mem_and_id(op0, op1):
          op0.val = bit_cast(op1.val, int_type64) */
        if ((Expr::TestKind(Expression::Mem, rInsn.GetOperand(0)) && Expr::TestKind(Expression::Id, rInsn.GetOperand(1))))
        {
          /* block glb expressions */
          AllExpr.push_back(Expr::MakeAssign(
            rInsn.GetOperand(0),
            Expr::MakeBinOp(OperationExpression::OpBcast, rInsn.GetOperand(1), Expr::MakeBitVector(64, 64))));
        }
        /* semantic: if __code and is_id_and_id(op0, op1):
          tmp_val = op0.val >> int(op0.bit, 64)
          tmp_val = tmp_val << int(op0.bit, 64)
          tmp_val += bit_cast(op1.val, int_type64)
          op0.val = tmp_val */
        if ((Expr::TestKind(Expression::Id, rInsn.GetOperand(0)) && Expr::TestKind(Expression::Id, rInsn.GetOperand(1))))
        {
          /* block glb expressions */
          AllExpr.push_back(Expr::MakeAssign(
            Expr::MakeVar("tmp_val", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpLrs,
              rInsn.GetOperand(0),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x40))));
          AllExpr.push_back(Expr::MakeAssign(
            Expr::MakeVar("tmp_val", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpLls,
              Expr::MakeVar("tmp_val", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x40))));
          AllExpr.push_back(Expr::MakeAssign(
            Expr::MakeVar("tmp_val", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpAdd,
              Expr::MakeVar("tmp_val", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, rInsn.GetOperand(1), Expr::MakeBitVector(64, 64))))
          );
          AllExpr.push_back(Expr::MakeAssign(
            rInsn.GetOperand(0),
            Expr::MakeVar("tmp_val", VariableExpression::Use)));
        }
        /* semantic: free_var('tmp_val') */
        AllExpr.push_back(Expr::MakeVar("tmp_val", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse && (rInsn.GetPrefix() & X86_Prefix_Rep) == X86_Prefix_Rep)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Movss);
      if (Operand__Vo_Wod(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('tmp_val', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("tmp_val", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: if __code and is_id_and_mem(op0, op1):
          op0.val = bit_cast(op1.val, int_type128) */
        if ((Expr::TestKind(Expression::Id, rInsn.GetOperand(0)) && Expr::TestKind(Expression::Mem, rInsn.GetOperand(1))))
        {
          /* block glb expressions */
          AllExpr.push_back(Expr::MakeAssign(
            rInsn.GetOperand(0),
            Expr::MakeBinOp(OperationExpression::OpBcast, rInsn.GetOperand(1), Expr::MakeBitVector(128, 128))));
        }
        /* semantic: if __code and is_mem_and_id(op0, op1):
          tmp_val = op0.val >> int(op0.bit, 32)
          tmp_val = tmp_val << int(op0.bit, 32)
          tmp_val += bit_cast(op1.val, int_type32)
          op0.val = tmp_val */
        if ((Expr::TestKind(Expression::Mem, rInsn.GetOperand(0)) && Expr::TestKind(Expression::Id, rInsn.GetOperand(1))))
        {
          /* block glb expressions */
          AllExpr.push_back(Expr::MakeAssign(
            Expr::MakeVar("tmp_val", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpLrs,
              rInsn.GetOperand(0),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x20))));
          AllExpr.push_back(Expr::MakeAssign(
            Expr::MakeVar("tmp_val", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpLls,
              Expr::MakeVar("tmp_val", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x20))));
          AllExpr.push_back(Expr::MakeAssign(
            Expr::MakeVar("tmp_val", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpAdd,
              Expr::MakeVar("tmp_val", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, rInsn.GetOperand(1), Expr::MakeBitVector(32, 32))))
          );
          AllExpr.push_back(Expr::MakeAssign(
            rInsn.GetOperand(0),
            Expr::MakeVar("tmp_val", VariableExpression::Use)));
        }
        /* semantic: if __code and is_id_and_id(op0, op1):
          tmp_val = op0.val >> int(op0.bit, 32)
          tmp_val = tmp_val << int(op0.bit, 32)
          tmp_val += bit_cast(op1.val, int_type32)
          op0.val = tmp_val */
        if ((Expr::TestKind(Expression::Id, rInsn.GetOperand(0)) && Expr::TestKind(Expression::Id, rInsn.GetOperand(1))))
        {
          /* block glb expressions */
          AllExpr.push_back(Expr::MakeAssign(
            Expr::MakeVar("tmp_val", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpLrs,
              rInsn.GetOperand(0),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x20))));
          AllExpr.push_back(Expr::MakeAssign(
            Expr::MakeVar("tmp_val", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpLls,
              Expr::MakeVar("tmp_val", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x20))));
          AllExpr.push_back(Expr::MakeAssign(
            Expr::MakeVar("tmp_val", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpAdd,
              Expr::MakeVar("tmp_val", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, rInsn.GetOperand(1), Expr::MakeBitVector(32, 32))))
          );
          AllExpr.push_back(Expr::MakeAssign(
            rInsn.GetOperand(0),
            Expr::MakeVar("tmp_val", VariableExpression::Use)));
        }
        /* semantic: free_var('tmp_val') */
        AllExpr.push_back(Expr::MakeVar("tmp_val", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse2 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Movupd);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Movups);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: op0.val = op1.val */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          rInsn.GetOperand(1)));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") == X86_Arch_80386)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Umov);
      if (Operand__Eb_Gb(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    return false;
}

/** instructions
 * opcode: 11
 *
 * mnemonic: umov
 * operand: ['Ev', 'Gv']
 * cpu_model: == X86_Arch_80386
 *
 * mnemonic: movups
 * operand: ['Wx', 'Vx']
 * semantic: op0.val = op1.val;

 * cpu_model: >= X86_Arch_Sse
 *
 * mnemonic: movupd
 * operand: ['Wx', 'Vx']
 * prefix: 66
 * cpu_model: >= X86_Arch_Sse2
 *
 * mnemonic: movss
 * operand: ['Wod', 'Vo']
 * prefix: f3
 * semantic: alloc_var('tmp_val', op0.bit);
if __code and is_id_and_mem(op0, op1):
  op0.val = bit_cast(op1.val, int_type128);
if __code and is_mem_and_id(op0, op1):
  tmp_val = op0.val >> int(op0.bit, 32)
  tmp_val = tmp_val << int(op0.bit, 32)
  tmp_val += bit_cast(op1.val, int_type32)
  op0.val = tmp_val;
if __code and is_id_and_id(op0, op1):
  tmp_val = op0.val >> int(op0.bit, 32)
  tmp_val = tmp_val << int(op0.bit, 32)
  tmp_val += bit_cast(op1.val, int_type32)
  op0.val = tmp_val;
free_var('tmp_val');

 * cpu_model: >= X86_Arch_Sse
 *
 * mnemonic: movsd
 * operand: ['Woq', 'Vo']
 * prefix: f2
 * semantic: alloc_var('tmp_val', op0.bit);
if __code and is_id_and_mem(op0, op1):
  op0.val = bit_cast(op1.val, int_type128);
if __code and is_mem_and_id(op0, op1):
  op0.val = bit_cast(op1.val, int_type64);
if __code and is_id_and_id(op0, op1):
  tmp_val = op0.val >> int(op0.bit, 64)
  tmp_val = tmp_val << int(op0.bit, 64)
  tmp_val += bit_cast(op1.val, int_type64)
  op0.val = tmp_val;
free_var('tmp_val');

 * cpu_model: >= X86_Arch_Sse2
 *
**/
bool X86Architecture::Table_2_11(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse2 && (rInsn.GetPrefix() & X86_Prefix_RepNz) == X86_Prefix_RepNz)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Movsd);
      if (Operand__Woq_Vo(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('tmp_val', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("tmp_val", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: if __code and is_id_and_mem(op0, op1):
          op0.val = bit_cast(op1.val, int_type128) */
        if ((Expr::TestKind(Expression::Id, rInsn.GetOperand(0)) && Expr::TestKind(Expression::Mem, rInsn.GetOperand(1))))
        {
          /* block glb expressions */
          AllExpr.push_back(Expr::MakeAssign(
            rInsn.GetOperand(0),
            Expr::MakeBinOp(OperationExpression::OpBcast, rInsn.GetOperand(1), Expr::MakeBitVector(128, 128))));
        }
        /* semantic: if __code and is_mem_and_id(op0, op1):
          op0.val = bit_cast(op1.val, int_type64) */
        if ((Expr::TestKind(Expression::Mem, rInsn.GetOperand(0)) && Expr::TestKind(Expression::Id, rInsn.GetOperand(1))))
        {
          /* block glb expressions */
          AllExpr.push_back(Expr::MakeAssign(
            rInsn.GetOperand(0),
            Expr::MakeBinOp(OperationExpression::OpBcast, rInsn.GetOperand(1), Expr::MakeBitVector(64, 64))));
        }
        /* semantic: if __code and is_id_and_id(op0, op1):
          tmp_val = op0.val >> int(op0.bit, 64)
          tmp_val = tmp_val << int(op0.bit, 64)
          tmp_val += bit_cast(op1.val, int_type64)
          op0.val = tmp_val */
        if ((Expr::TestKind(Expression::Id, rInsn.GetOperand(0)) && Expr::TestKind(Expression::Id, rInsn.GetOperand(1))))
        {
          /* block glb expressions */
          AllExpr.push_back(Expr::MakeAssign(
            Expr::MakeVar("tmp_val", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpLrs,
              rInsn.GetOperand(0),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x40))));
          AllExpr.push_back(Expr::MakeAssign(
            Expr::MakeVar("tmp_val", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpLls,
              Expr::MakeVar("tmp_val", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x40))));
          AllExpr.push_back(Expr::MakeAssign(
            Expr::MakeVar("tmp_val", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpAdd,
              Expr::MakeVar("tmp_val", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, rInsn.GetOperand(1), Expr::MakeBitVector(64, 64))))
          );
          AllExpr.push_back(Expr::MakeAssign(
            rInsn.GetOperand(0),
            Expr::MakeVar("tmp_val", VariableExpression::Use)));
        }
        /* semantic: free_var('tmp_val') */
        AllExpr.push_back(Expr::MakeVar("tmp_val", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse && (rInsn.GetPrefix() & X86_Prefix_Rep) == X86_Prefix_Rep)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Movss);
      if (Operand__Wod_Vo(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('tmp_val', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("tmp_val", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: if __code and is_id_and_mem(op0, op1):
          op0.val = bit_cast(op1.val, int_type128) */
        if ((Expr::TestKind(Expression::Id, rInsn.GetOperand(0)) && Expr::TestKind(Expression::Mem, rInsn.GetOperand(1))))
        {
          /* block glb expressions */
          AllExpr.push_back(Expr::MakeAssign(
            rInsn.GetOperand(0),
            Expr::MakeBinOp(OperationExpression::OpBcast, rInsn.GetOperand(1), Expr::MakeBitVector(128, 128))));
        }
        /* semantic: if __code and is_mem_and_id(op0, op1):
          tmp_val = op0.val >> int(op0.bit, 32)
          tmp_val = tmp_val << int(op0.bit, 32)
          tmp_val += bit_cast(op1.val, int_type32)
          op0.val = tmp_val */
        if ((Expr::TestKind(Expression::Mem, rInsn.GetOperand(0)) && Expr::TestKind(Expression::Id, rInsn.GetOperand(1))))
        {
          /* block glb expressions */
          AllExpr.push_back(Expr::MakeAssign(
            Expr::MakeVar("tmp_val", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpLrs,
              rInsn.GetOperand(0),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x20))));
          AllExpr.push_back(Expr::MakeAssign(
            Expr::MakeVar("tmp_val", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpLls,
              Expr::MakeVar("tmp_val", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x20))));
          AllExpr.push_back(Expr::MakeAssign(
            Expr::MakeVar("tmp_val", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpAdd,
              Expr::MakeVar("tmp_val", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, rInsn.GetOperand(1), Expr::MakeBitVector(32, 32))))
          );
          AllExpr.push_back(Expr::MakeAssign(
            rInsn.GetOperand(0),
            Expr::MakeVar("tmp_val", VariableExpression::Use)));
        }
        /* semantic: if __code and is_id_and_id(op0, op1):
          tmp_val = op0.val >> int(op0.bit, 32)
          tmp_val = tmp_val << int(op0.bit, 32)
          tmp_val += bit_cast(op1.val, int_type32)
          op0.val = tmp_val */
        if ((Expr::TestKind(Expression::Id, rInsn.GetOperand(0)) && Expr::TestKind(Expression::Id, rInsn.GetOperand(1))))
        {
          /* block glb expressions */
          AllExpr.push_back(Expr::MakeAssign(
            Expr::MakeVar("tmp_val", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpLrs,
              rInsn.GetOperand(0),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x20))));
          AllExpr.push_back(Expr::MakeAssign(
            Expr::MakeVar("tmp_val", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpLls,
              Expr::MakeVar("tmp_val", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x20))));
          AllExpr.push_back(Expr::MakeAssign(
            Expr::MakeVar("tmp_val", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpAdd,
              Expr::MakeVar("tmp_val", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, rInsn.GetOperand(1), Expr::MakeBitVector(32, 32))))
          );
          AllExpr.push_back(Expr::MakeAssign(
            rInsn.GetOperand(0),
            Expr::MakeVar("tmp_val", VariableExpression::Use)));
        }
        /* semantic: free_var('tmp_val') */
        AllExpr.push_back(Expr::MakeVar("tmp_val", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse2 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Movupd);
      if (Operand__Wx_Vx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Movups);
      if (Operand__Wx_Vx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: op0.val = op1.val */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          rInsn.GetOperand(1)));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") == X86_Arch_80386)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Umov);
      if (Operand__Ev_Gv(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    return false;
}

/** instructions
 * opcode: 12
 *
 * mnemonic: umov
 * operand: ['Gb', 'Ev']
 * cpu_model: == X86_Arch_80386
 *
 * mnemonic: movlps
 * operand: ['Vo', 'Woq']
 * cpu_model: >= X86_Arch_Sse
 *
 * mnemonic: movlpd
 * operand: ['Vo', 'Woq']
 * prefix: 66
 * cpu_model: >= X86_Arch_Sse2
 *
 * mnemonic: movsldup
 * operand: ['Vx', 'Wx']
 * prefix: f3
 * cpu_model: >= X86_Arch_Sse3
 *
 * mnemonic: movddup
 * operand: ['Vo', 'Woq']
 * prefix: f2
 * cpu_model: >= X86_Arch_Sse3
 *
**/
bool X86Architecture::Table_2_12(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse3 && (rInsn.GetPrefix() & X86_Prefix_RepNz) == X86_Prefix_RepNz)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Movddup);
      if (Operand__Vo_Woq(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse3 && (rInsn.GetPrefix() & X86_Prefix_Rep) == X86_Prefix_Rep)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Movsldup);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse2 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Movlpd);
      if (Operand__Vo_Woq(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Movlps);
      if (Operand__Vo_Woq(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") == X86_Arch_80386)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Umov);
      if (Operand__Gb_Ev(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    return false;
}

/** instructions
 * opcode: 13
 *
 * mnemonic: umov
 * operand: ['Gv', 'Ev']
 * cpu_model: == X86_Arch_80386
 *
 * mnemonic: movlps
 * operand: ['Woq', 'Vo']
 * cpu_model: >= X86_Arch_Sse
 *
 * mnemonic: movlpd
 * operand: ['Woq', 'Vo']
 * cpu_model: >= X86_Arch_Sse2
 *
**/
bool X86Architecture::Table_2_13(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse2)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Movlpd);
      if (Operand__Woq_Vo(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Movlps);
      if (Operand__Woq_Vo(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") == X86_Arch_80386)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Umov);
      if (Operand__Gv_Ev(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    return false;
}

/** instructions
 * opcode: 14
 *
 * invalid
 *
 * mnemonic: unpcklps
 * operand: ['Vx', 'Wx']
 * cpu_model: >= X86_Arch_Sse
 *
 * mnemonic: unpcklpd
 * operand: ['Vx', 'Wx']
 * prefix: 66
 * cpu_model: >= X86_Arch_Sse2
 *
**/
bool X86Architecture::Table_2_14(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse2 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Unpcklpd);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Unpcklps);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else
    {
      return false; /* INVALID */
    }
}

/** instructions
 * opcode: 15
 *
 * invalid
 *
 * mnemonic: unpckhps
 * operand: ['Vx', 'Wx']
 * cpu_model: >= X86_Arch_Sse
 *
 * mnemonic: unpckhpd
 * operand: ['Vx', 'Wx']
 * prefix: 66
 * cpu_model: >= X86_Arch_Sse2
 *
**/
bool X86Architecture::Table_2_15(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse2 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Unpckhpd);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Unpckhps);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else
    {
      return false; /* INVALID */
    }
}

/** instructions
 * opcode: 16
 *
 * invalid
 *
 * mnemonic: movhps
 * operand: ['Vo', 'Woq']
 * cpu_model: >= X86_Arch_Sse
 *
 * mnemonic: movhpd
 * operand: ['Vo', 'Woq']
 * prefix: 66
 * cpu_model: >= X86_Arch_Sse2
 *
 * mnemonic: movshdup
 * operand: ['Vx', 'Wx']
 * prefix: f3
 * cpu_model: >= X86_Arch_Sse3
 *
**/
bool X86Architecture::Table_2_16(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse3 && (rInsn.GetPrefix() & X86_Prefix_Rep) == X86_Prefix_Rep)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Movshdup);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse2 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Movhpd);
      if (Operand__Vo_Woq(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Movhps);
      if (Operand__Vo_Woq(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else
    {
      return false; /* INVALID */
    }
}

/** instructions
 * opcode: 17
 *
 * invalid
 *
 * mnemonic: movhps
 * operand: ['Woq', 'Vo']
 * cpu_model: >= X86_Arch_Sse
 *
 * mnemonic: movhpd
 * operand: ['Woq', 'Vo']
 * prefix: 66
 * cpu_model: >= X86_Arch_Sse2
 *
**/
bool X86Architecture::Table_2_17(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse2 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Movhpd);
      if (Operand__Woq_Vo(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Movhps);
      if (Operand__Woq_Vo(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else
    {
      return false; /* INVALID */
    }
}

/** group:
 * mnemonic: hint_nop
 * operand: ['Ev']
 * opcode: 00
 * semantic: program.id = program.id;

 *
 * mnemonic: hint_nop
 * operand: ['Ev']
 * opcode: 01
 * semantic: program.id = program.id;

 *
 * mnemonic: hint_nop
 * operand: ['Ev']
 * opcode: 02
 * semantic: program.id = program.id;

 *
 * mnemonic: hint_nop
 * operand: ['Ev']
 * opcode: 03
 * semantic: program.id = program.id;

 *
 * mnemonic: hint_nop
 * operand: ['Ev']
 * opcode: 04
 * semantic: program.id = program.id;

 *
 * mnemonic: hint_nop
 * operand: ['Ev']
 * opcode: 05
 * semantic: program.id = program.id;

 *
 * mnemonic: hint_nop
 * operand: ['Ev']
 * opcode: 06
 * semantic: program.id = program.id;

 *
 * mnemonic: hint_nop
 * operand: ['Ev']
 * opcode: 07
 * semantic: program.id = program.id;

 *
**/
bool X86Architecture::Table_2_18(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    u8 ModRmByte;
    if (!rBinStrm.Read(Offset, ModRmByte))
      return false;

    x86::ModRM ModRm(ModRmByte);
    switch (ModRm.Reg())
    {
    case 0x0:
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Hint_nop);
      if (Operand__Ev(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: program.id = program.id */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::ProgramPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::ProgramPointerRegister, rInsn.GetMode()), &m_CpuInfo)));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x1:
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Hint_nop);
      if (Operand__Ev(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: program.id = program.id */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::ProgramPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::ProgramPointerRegister, rInsn.GetMode()), &m_CpuInfo)));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x2:
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Hint_nop);
      if (Operand__Ev(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: program.id = program.id */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::ProgramPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::ProgramPointerRegister, rInsn.GetMode()), &m_CpuInfo)));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x3:
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Hint_nop);
      if (Operand__Ev(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: program.id = program.id */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::ProgramPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::ProgramPointerRegister, rInsn.GetMode()), &m_CpuInfo)));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x4:
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Hint_nop);
      if (Operand__Ev(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: program.id = program.id */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::ProgramPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::ProgramPointerRegister, rInsn.GetMode()), &m_CpuInfo)));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x5:
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Hint_nop);
      if (Operand__Ev(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: program.id = program.id */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::ProgramPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::ProgramPointerRegister, rInsn.GetMode()), &m_CpuInfo)));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x6:
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Hint_nop);
      if (Operand__Ev(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: program.id = program.id */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::ProgramPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::ProgramPointerRegister, rInsn.GetMode()), &m_CpuInfo)));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x7:
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Hint_nop);
      if (Operand__Ev(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: program.id = program.id */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::ProgramPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::ProgramPointerRegister, rInsn.GetMode()), &m_CpuInfo)));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    default:
      return false;
    }
}

/** group:
 * mnemonic: hint_nop
 * operand: ['Ev']
 * opcode: 00
 * semantic: program.id = program.id;

 *
 * mnemonic: hint_nop
 * operand: ['Ev']
 * opcode: 01
 * semantic: program.id = program.id;

 *
 * mnemonic: hint_nop
 * operand: ['Ev']
 * opcode: 02
 * semantic: program.id = program.id;

 *
 * mnemonic: hint_nop
 * operand: ['Ev']
 * opcode: 03
 * semantic: program.id = program.id;

 *
 * mnemonic: hint_nop
 * operand: ['Ev']
 * opcode: 04
 * semantic: program.id = program.id;

 *
 * mnemonic: hint_nop
 * operand: ['Ev']
 * opcode: 05
 * semantic: program.id = program.id;

 *
 * mnemonic: hint_nop
 * operand: ['Ev']
 * opcode: 06
 * semantic: program.id = program.id;

 *
 * mnemonic: hint_nop
 * operand: ['Ev']
 * opcode: 07
 * semantic: program.id = program.id;

 *
**/
bool X86Architecture::Table_2_19(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    u8 ModRmByte;
    if (!rBinStrm.Read(Offset, ModRmByte))
      return false;

    x86::ModRM ModRm(ModRmByte);
    switch (ModRm.Reg())
    {
    case 0x0:
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Hint_nop);
      if (Operand__Ev(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: program.id = program.id */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::ProgramPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::ProgramPointerRegister, rInsn.GetMode()), &m_CpuInfo)));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x1:
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Hint_nop);
      if (Operand__Ev(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: program.id = program.id */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::ProgramPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::ProgramPointerRegister, rInsn.GetMode()), &m_CpuInfo)));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x2:
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Hint_nop);
      if (Operand__Ev(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: program.id = program.id */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::ProgramPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::ProgramPointerRegister, rInsn.GetMode()), &m_CpuInfo)));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x3:
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Hint_nop);
      if (Operand__Ev(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: program.id = program.id */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::ProgramPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::ProgramPointerRegister, rInsn.GetMode()), &m_CpuInfo)));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x4:
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Hint_nop);
      if (Operand__Ev(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: program.id = program.id */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::ProgramPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::ProgramPointerRegister, rInsn.GetMode()), &m_CpuInfo)));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x5:
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Hint_nop);
      if (Operand__Ev(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: program.id = program.id */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::ProgramPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::ProgramPointerRegister, rInsn.GetMode()), &m_CpuInfo)));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x6:
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Hint_nop);
      if (Operand__Ev(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: program.id = program.id */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::ProgramPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::ProgramPointerRegister, rInsn.GetMode()), &m_CpuInfo)));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x7:
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Hint_nop);
      if (Operand__Ev(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: program.id = program.id */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::ProgramPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::ProgramPointerRegister, rInsn.GetMode()), &m_CpuInfo)));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    default:
      return false;
    }
}

/** group:
 * mnemonic: hint_nop
 * operand: ['Ev']
 * opcode: 00
 * semantic: program.id = program.id;

 *
 * mnemonic: hint_nop
 * operand: ['Ev']
 * opcode: 01
 * semantic: program.id = program.id;

 *
 * mnemonic: hint_nop
 * operand: ['Ev']
 * opcode: 02
 * semantic: program.id = program.id;

 *
 * mnemonic: hint_nop
 * operand: ['Ev']
 * opcode: 03
 * semantic: program.id = program.id;

 *
 * mnemonic: hint_nop
 * operand: ['Ev']
 * opcode: 04
 * semantic: program.id = program.id;

 *
 * mnemonic: hint_nop
 * operand: ['Ev']
 * opcode: 05
 * semantic: program.id = program.id;

 *
 * mnemonic: hint_nop
 * operand: ['Ev']
 * opcode: 06
 * semantic: program.id = program.id;

 *
 * mnemonic: hint_nop
 * operand: ['Ev']
 * opcode: 07
 * semantic: program.id = program.id;

 *
**/
bool X86Architecture::Table_2_1a(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    u8 ModRmByte;
    if (!rBinStrm.Read(Offset, ModRmByte))
      return false;

    x86::ModRM ModRm(ModRmByte);
    switch (ModRm.Reg())
    {
    case 0x0:
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Hint_nop);
      if (Operand__Ev(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: program.id = program.id */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::ProgramPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::ProgramPointerRegister, rInsn.GetMode()), &m_CpuInfo)));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x1:
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Hint_nop);
      if (Operand__Ev(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: program.id = program.id */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::ProgramPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::ProgramPointerRegister, rInsn.GetMode()), &m_CpuInfo)));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x2:
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Hint_nop);
      if (Operand__Ev(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: program.id = program.id */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::ProgramPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::ProgramPointerRegister, rInsn.GetMode()), &m_CpuInfo)));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x3:
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Hint_nop);
      if (Operand__Ev(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: program.id = program.id */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::ProgramPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::ProgramPointerRegister, rInsn.GetMode()), &m_CpuInfo)));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x4:
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Hint_nop);
      if (Operand__Ev(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: program.id = program.id */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::ProgramPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::ProgramPointerRegister, rInsn.GetMode()), &m_CpuInfo)));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x5:
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Hint_nop);
      if (Operand__Ev(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: program.id = program.id */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::ProgramPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::ProgramPointerRegister, rInsn.GetMode()), &m_CpuInfo)));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x6:
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Hint_nop);
      if (Operand__Ev(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: program.id = program.id */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::ProgramPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::ProgramPointerRegister, rInsn.GetMode()), &m_CpuInfo)));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x7:
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Hint_nop);
      if (Operand__Ev(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: program.id = program.id */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::ProgramPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::ProgramPointerRegister, rInsn.GetMode()), &m_CpuInfo)));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    default:
      return false;
    }
}

/** group:
 * mnemonic: hint_nop
 * operand: ['Ev']
 * opcode: 00
 * semantic: program.id = program.id;

 *
 * mnemonic: hint_nop
 * operand: ['Ev']
 * opcode: 01
 * semantic: program.id = program.id;

 *
 * mnemonic: hint_nop
 * operand: ['Ev']
 * opcode: 02
 * semantic: program.id = program.id;

 *
 * mnemonic: hint_nop
 * operand: ['Ev']
 * opcode: 03
 * semantic: program.id = program.id;

 *
 * mnemonic: hint_nop
 * operand: ['Ev']
 * opcode: 04
 * semantic: program.id = program.id;

 *
 * mnemonic: hint_nop
 * operand: ['Ev']
 * opcode: 05
 * semantic: program.id = program.id;

 *
 * mnemonic: hint_nop
 * operand: ['Ev']
 * opcode: 06
 * semantic: program.id = program.id;

 *
 * mnemonic: hint_nop
 * operand: ['Ev']
 * opcode: 07
 * semantic: program.id = program.id;

 *
**/
bool X86Architecture::Table_2_1b(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    u8 ModRmByte;
    if (!rBinStrm.Read(Offset, ModRmByte))
      return false;

    x86::ModRM ModRm(ModRmByte);
    switch (ModRm.Reg())
    {
    case 0x0:
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Hint_nop);
      if (Operand__Ev(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: program.id = program.id */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::ProgramPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::ProgramPointerRegister, rInsn.GetMode()), &m_CpuInfo)));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x1:
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Hint_nop);
      if (Operand__Ev(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: program.id = program.id */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::ProgramPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::ProgramPointerRegister, rInsn.GetMode()), &m_CpuInfo)));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x2:
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Hint_nop);
      if (Operand__Ev(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: program.id = program.id */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::ProgramPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::ProgramPointerRegister, rInsn.GetMode()), &m_CpuInfo)));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x3:
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Hint_nop);
      if (Operand__Ev(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: program.id = program.id */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::ProgramPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::ProgramPointerRegister, rInsn.GetMode()), &m_CpuInfo)));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x4:
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Hint_nop);
      if (Operand__Ev(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: program.id = program.id */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::ProgramPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::ProgramPointerRegister, rInsn.GetMode()), &m_CpuInfo)));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x5:
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Hint_nop);
      if (Operand__Ev(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: program.id = program.id */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::ProgramPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::ProgramPointerRegister, rInsn.GetMode()), &m_CpuInfo)));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x6:
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Hint_nop);
      if (Operand__Ev(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: program.id = program.id */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::ProgramPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::ProgramPointerRegister, rInsn.GetMode()), &m_CpuInfo)));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x7:
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Hint_nop);
      if (Operand__Ev(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: program.id = program.id */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::ProgramPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::ProgramPointerRegister, rInsn.GetMode()), &m_CpuInfo)));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    default:
      return false;
    }
}

/** group:
 * mnemonic: hint_nop
 * operand: ['Ev']
 * opcode: 00
 * semantic: program.id = program.id;

 *
 * mnemonic: hint_nop
 * operand: ['Ev']
 * opcode: 01
 * semantic: program.id = program.id;

 *
 * mnemonic: hint_nop
 * operand: ['Ev']
 * opcode: 02
 * semantic: program.id = program.id;

 *
 * mnemonic: hint_nop
 * operand: ['Ev']
 * opcode: 03
 * semantic: program.id = program.id;

 *
 * mnemonic: hint_nop
 * operand: ['Ev']
 * opcode: 04
 * semantic: program.id = program.id;

 *
 * mnemonic: hint_nop
 * operand: ['Ev']
 * opcode: 05
 * semantic: program.id = program.id;

 *
 * mnemonic: hint_nop
 * operand: ['Ev']
 * opcode: 06
 * semantic: program.id = program.id;

 *
 * mnemonic: hint_nop
 * operand: ['Ev']
 * opcode: 07
 * semantic: program.id = program.id;

 *
**/
bool X86Architecture::Table_2_1c(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    u8 ModRmByte;
    if (!rBinStrm.Read(Offset, ModRmByte))
      return false;

    x86::ModRM ModRm(ModRmByte);
    switch (ModRm.Reg())
    {
    case 0x0:
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Hint_nop);
      if (Operand__Ev(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: program.id = program.id */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::ProgramPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::ProgramPointerRegister, rInsn.GetMode()), &m_CpuInfo)));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x1:
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Hint_nop);
      if (Operand__Ev(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: program.id = program.id */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::ProgramPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::ProgramPointerRegister, rInsn.GetMode()), &m_CpuInfo)));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x2:
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Hint_nop);
      if (Operand__Ev(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: program.id = program.id */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::ProgramPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::ProgramPointerRegister, rInsn.GetMode()), &m_CpuInfo)));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x3:
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Hint_nop);
      if (Operand__Ev(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: program.id = program.id */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::ProgramPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::ProgramPointerRegister, rInsn.GetMode()), &m_CpuInfo)));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x4:
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Hint_nop);
      if (Operand__Ev(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: program.id = program.id */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::ProgramPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::ProgramPointerRegister, rInsn.GetMode()), &m_CpuInfo)));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x5:
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Hint_nop);
      if (Operand__Ev(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: program.id = program.id */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::ProgramPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::ProgramPointerRegister, rInsn.GetMode()), &m_CpuInfo)));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x6:
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Hint_nop);
      if (Operand__Ev(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: program.id = program.id */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::ProgramPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::ProgramPointerRegister, rInsn.GetMode()), &m_CpuInfo)));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x7:
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Hint_nop);
      if (Operand__Ev(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: program.id = program.id */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::ProgramPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::ProgramPointerRegister, rInsn.GetMode()), &m_CpuInfo)));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    default:
      return false;
    }
}

/** group:
 * mnemonic: hint_nop
 * operand: ['Ev']
 * opcode: 00
 * semantic: program.id = program.id;

 *
 * mnemonic: hint_nop
 * operand: ['Ev']
 * opcode: 01
 * semantic: program.id = program.id;

 *
 * mnemonic: hint_nop
 * operand: ['Ev']
 * opcode: 02
 * semantic: program.id = program.id;

 *
 * mnemonic: hint_nop
 * operand: ['Ev']
 * opcode: 03
 * semantic: program.id = program.id;

 *
 * mnemonic: hint_nop
 * operand: ['Ev']
 * opcode: 04
 * semantic: program.id = program.id;

 *
 * mnemonic: hint_nop
 * operand: ['Ev']
 * opcode: 05
 * semantic: program.id = program.id;

 *
 * mnemonic: hint_nop
 * operand: ['Ev']
 * opcode: 06
 * semantic: program.id = program.id;

 *
 * mnemonic: hint_nop
 * operand: ['Ev']
 * opcode: 07
 * semantic: program.id = program.id;

 *
**/
bool X86Architecture::Table_2_1d(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    u8 ModRmByte;
    if (!rBinStrm.Read(Offset, ModRmByte))
      return false;

    x86::ModRM ModRm(ModRmByte);
    switch (ModRm.Reg())
    {
    case 0x0:
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Hint_nop);
      if (Operand__Ev(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: program.id = program.id */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::ProgramPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::ProgramPointerRegister, rInsn.GetMode()), &m_CpuInfo)));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x1:
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Hint_nop);
      if (Operand__Ev(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: program.id = program.id */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::ProgramPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::ProgramPointerRegister, rInsn.GetMode()), &m_CpuInfo)));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x2:
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Hint_nop);
      if (Operand__Ev(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: program.id = program.id */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::ProgramPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::ProgramPointerRegister, rInsn.GetMode()), &m_CpuInfo)));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x3:
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Hint_nop);
      if (Operand__Ev(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: program.id = program.id */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::ProgramPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::ProgramPointerRegister, rInsn.GetMode()), &m_CpuInfo)));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x4:
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Hint_nop);
      if (Operand__Ev(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: program.id = program.id */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::ProgramPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::ProgramPointerRegister, rInsn.GetMode()), &m_CpuInfo)));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x5:
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Hint_nop);
      if (Operand__Ev(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: program.id = program.id */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::ProgramPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::ProgramPointerRegister, rInsn.GetMode()), &m_CpuInfo)));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x6:
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Hint_nop);
      if (Operand__Ev(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: program.id = program.id */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::ProgramPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::ProgramPointerRegister, rInsn.GetMode()), &m_CpuInfo)));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x7:
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Hint_nop);
      if (Operand__Ev(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: program.id = program.id */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::ProgramPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::ProgramPointerRegister, rInsn.GetMode()), &m_CpuInfo)));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    default:
      return false;
    }
}

/** group:
 * mnemonic: hint_nop
 * operand: ['Ev']
 * opcode: 00
 * semantic: program.id = program.id;

 *
 * mnemonic: hint_nop
 * operand: ['Ev']
 * opcode: 01
 * semantic: program.id = program.id;

 *
 * mnemonic: hint_nop
 * operand: ['Ev']
 * opcode: 02
 * semantic: program.id = program.id;

 *
 * mnemonic: hint_nop
 * operand: ['Ev']
 * opcode: 03
 * semantic: program.id = program.id;

 *
 * mnemonic: hint_nop
 * operand: ['Ev']
 * opcode: 04
 * semantic: program.id = program.id;

 *
 * mnemonic: hint_nop
 * operand: ['Ev']
 * opcode: 05
 * semantic: program.id = program.id;

 *
 * mnemonic: hint_nop
 * operand: ['Ev']
 * opcode: 06
 * semantic: program.id = program.id;

 *
 * mnemonic: hint_nop
 * operand: ['Ev']
 * opcode: 07
 * semantic: program.id = program.id;

 *
**/
bool X86Architecture::Table_2_1e(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    u8 ModRmByte;
    if (!rBinStrm.Read(Offset, ModRmByte))
      return false;

    x86::ModRM ModRm(ModRmByte);
    switch (ModRm.Reg())
    {
    case 0x0:
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Hint_nop);
      if (Operand__Ev(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: program.id = program.id */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::ProgramPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::ProgramPointerRegister, rInsn.GetMode()), &m_CpuInfo)));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x1:
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Hint_nop);
      if (Operand__Ev(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: program.id = program.id */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::ProgramPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::ProgramPointerRegister, rInsn.GetMode()), &m_CpuInfo)));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x2:
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Hint_nop);
      if (Operand__Ev(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: program.id = program.id */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::ProgramPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::ProgramPointerRegister, rInsn.GetMode()), &m_CpuInfo)));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x3:
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Hint_nop);
      if (Operand__Ev(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: program.id = program.id */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::ProgramPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::ProgramPointerRegister, rInsn.GetMode()), &m_CpuInfo)));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x4:
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Hint_nop);
      if (Operand__Ev(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: program.id = program.id */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::ProgramPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::ProgramPointerRegister, rInsn.GetMode()), &m_CpuInfo)));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x5:
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Hint_nop);
      if (Operand__Ev(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: program.id = program.id */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::ProgramPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::ProgramPointerRegister, rInsn.GetMode()), &m_CpuInfo)));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x6:
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Hint_nop);
      if (Operand__Ev(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: program.id = program.id */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::ProgramPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::ProgramPointerRegister, rInsn.GetMode()), &m_CpuInfo)));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x7:
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Hint_nop);
      if (Operand__Ev(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: program.id = program.id */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::ProgramPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::ProgramPointerRegister, rInsn.GetMode()), &m_CpuInfo)));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    default:
      return false;
    }
}

/** group:
 * mnemonic: hint_nop
 * operand: ['Ev']
 * opcode: 00
 * semantic: program.id = program.id;

 *
 * mnemonic: hint_nop
 * operand: ['Ev']
 * opcode: 01
 * semantic: program.id = program.id;

 *
 * mnemonic: hint_nop
 * operand: ['Ev']
 * opcode: 02
 * semantic: program.id = program.id;

 *
 * mnemonic: hint_nop
 * operand: ['Ev']
 * opcode: 03
 * semantic: program.id = program.id;

 *
 * mnemonic: hint_nop
 * operand: ['Ev']
 * opcode: 04
 * semantic: program.id = program.id;

 *
 * mnemonic: hint_nop
 * operand: ['Ev']
 * opcode: 05
 * semantic: program.id = program.id;

 *
 * mnemonic: hint_nop
 * operand: ['Ev']
 * opcode: 06
 * semantic: program.id = program.id;

 *
 * mnemonic: hint_nop
 * operand: ['Ev']
 * opcode: 07
 * semantic: program.id = program.id;

 *
**/
bool X86Architecture::Table_2_1f(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    u8 ModRmByte;
    if (!rBinStrm.Read(Offset, ModRmByte))
      return false;

    x86::ModRM ModRm(ModRmByte);
    switch (ModRm.Reg())
    {
    case 0x0:
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Hint_nop);
      if (Operand__Ev(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: program.id = program.id */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::ProgramPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::ProgramPointerRegister, rInsn.GetMode()), &m_CpuInfo)));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x1:
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Hint_nop);
      if (Operand__Ev(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: program.id = program.id */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::ProgramPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::ProgramPointerRegister, rInsn.GetMode()), &m_CpuInfo)));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x2:
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Hint_nop);
      if (Operand__Ev(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: program.id = program.id */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::ProgramPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::ProgramPointerRegister, rInsn.GetMode()), &m_CpuInfo)));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x3:
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Hint_nop);
      if (Operand__Ev(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: program.id = program.id */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::ProgramPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::ProgramPointerRegister, rInsn.GetMode()), &m_CpuInfo)));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x4:
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Hint_nop);
      if (Operand__Ev(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: program.id = program.id */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::ProgramPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::ProgramPointerRegister, rInsn.GetMode()), &m_CpuInfo)));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x5:
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Hint_nop);
      if (Operand__Ev(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: program.id = program.id */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::ProgramPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::ProgramPointerRegister, rInsn.GetMode()), &m_CpuInfo)));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x6:
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Hint_nop);
      if (Operand__Ev(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: program.id = program.id */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::ProgramPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::ProgramPointerRegister, rInsn.GetMode()), &m_CpuInfo)));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x7:
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Hint_nop);
      if (Operand__Ev(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: program.id = program.id */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::ProgramPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::ProgramPointerRegister, rInsn.GetMode()), &m_CpuInfo)));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    default:
      return false;
    }
}

/** instructions
 * opcode: 20
 *
 * invalid
 *
 * mnemonic: mov
 * operand: ['Ry', 'Cy']
 * cpu_model: >= X86_Arch_80386
 * constraint: f64
 *
**/
bool X86Architecture::Table_2_20(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_80386)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Mov);
      if (Operand__Ry_Cy(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else
    {
      return false; /* INVALID */
    }
}

/** instructions
 * opcode: 21
 *
 * invalid
 *
 * mnemonic: mov
 * operand: ['Ry', 'Dy']
 * cpu_model: >= X86_Arch_80386
 * constraint: f64
 *
**/
bool X86Architecture::Table_2_21(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_80386)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Mov);
      if (Operand__Ry_Dy(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else
    {
      return false; /* INVALID */
    }
}

/** instructions
 * opcode: 22
 *
 * invalid
 *
 * mnemonic: mov
 * operand: ['Dy', 'Ry']
 * cpu_model: >= X86_Arch_80386
 * constraint: f64
 *
**/
bool X86Architecture::Table_2_22(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_80386)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Mov);
      if (Operand__Dy_Ry(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else
    {
      return false; /* INVALID */
    }
}

/** instructions
 * opcode: 23
 *
 * invalid
 *
 * mnemonic: mov
 * operand: ['Dy', 'Ry']
 * cpu_model: >= X86_Arch_80386
 * constraint: f64
 *
**/
bool X86Architecture::Table_2_23(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_80386)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Mov);
      if (Operand__Dy_Ry(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else
    {
      return false; /* INVALID */
    }
}

/** instructions
 * opcode: 24
 *
 * invalid
 *
 * mnemonic: mov
 * semantic: op0.val = op1.val;

 * attr: ['amd']
 * reference: table_sse5a
 * operand: ['Ry', 'Ty']
 * cpu_model: == X86_Arch_80386
 *
**/
bool X86Architecture::Table_2_24(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") == X86_Arch_80386 && m_CfgMdl.GetEnum("Vendor") == X86_ProcType_AMD)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Mov);
      if (Operand__Ry_Ty(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: op0.val = op1.val */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          rInsn.GetOperand(1)));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    else
    {
      return false; /* INVALID */
    }
}

/** instructions
 * opcode: 25
 *
 * invalid
 * reference: table_sse5a
 * attr: ['amd']
 *
**/
bool X86Architecture::Table_2_25(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Vendor") == X86_ProcType_AMD)
    {
      return false; /* INVALID */
    }
    return false;
}

/** instructions
 * opcode: 26
 *
 * invalid
 *
 * mnemonic: mov
 * operand: ['Ty', 'Ry']
 * semantic: op0.val = op1.val;

 * cpu_model: == X86_Arch_80386
 * constraint: f64
 *
**/
bool X86Architecture::Table_2_26(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") == X86_Arch_80386)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Mov);
      if (Operand__Ty_Ry(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: op0.val = op1.val */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          rInsn.GetOperand(1)));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    else
    {
      return false; /* INVALID */
    }
}

/** instruction
 * opcode: 27
 * invalid
**/
bool X86Architecture::Table_2_27(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instructions
 * opcode: 28
 *
 * mnemonic: movaps
 * operand: ['Vx', 'Wx']
 * semantic: op0.val = op1.val;

 * cpu_model: >= X86_Arch_Sse
 *
 * mnemonic: movapd
 * operand: ['Vx', 'Wx']
 * prefix: 66
 * cpu_model: >= X86_Arch_Sse2
 *
**/
bool X86Architecture::Table_2_28(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse2 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Movapd);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Movaps);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: op0.val = op1.val */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          rInsn.GetOperand(1)));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    return false;
}

/** instructions
 * opcode: 29
 *
 * mnemonic: movaps
 * operand: ['Wx', 'Vx']
 * semantic: op0.val = op1.val;

 * cpu_model: >= X86_Arch_Sse
 *
 * mnemonic: movapd
 * operand: ['Wx', 'Vx']
 * prefix: 66
 * cpu_model: >= X86_Arch_Sse2
 *
**/
bool X86Architecture::Table_2_29(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse2 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Movapd);
      if (Operand__Wx_Vx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Movaps);
      if (Operand__Wx_Vx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: op0.val = op1.val */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          rInsn.GetOperand(1)));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    return false;
}

/** instructions
 * opcode: 2a
 *
 * mnemonic: cvtpi2ps
 * operand: ['Vo', 'Mq']
 * cpu_model: >= X86_Arch_Sse
 *
 * mnemonic: cvtpi2ps
 * operand: ['Vo', 'Nq']
 * cpu_model: >= X86_Arch_Sse
 *
 * mnemonic: cvtpi2pd
 * operand: ['Vo', 'Mq']
 * prefix: 66
 * cpu_model: >= X86_Arch_Sse
 *
 * mnemonic: cvtpi2pd
 * operand: ['Vo', 'Nq']
 * prefix: 66
 * cpu_model: >= X86_Arch_Sse
 *
 * mnemonic: cvtsi2ss
 * operand: ['Vo', 'Ey']
 * prefix: f3
 * cpu_model: >= X86_Arch_Sse
 *
 * mnemonic: cvtsi2sd
 * operand: ['Vo', 'Ey']
 * prefix: f2
 * cpu_model: >= X86_Arch_Sse2
 *
**/
bool X86Architecture::Table_2_2a(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse2 && (rInsn.GetPrefix() & X86_Prefix_RepNz) == X86_Prefix_RepNz)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Cvtsi2sd);
      if (Operand__Vo_Ey(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse && (rInsn.GetPrefix() & X86_Prefix_Rep) == X86_Prefix_Rep)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Cvtsi2ss);
      if (Operand__Vo_Ey(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Cvtpi2pd);
      if (Operand__Vo_Nq(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Cvtpi2pd);
      if (Operand__Vo_Mq(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Cvtpi2ps);
      if (Operand__Vo_Nq(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Cvtpi2ps);
      if (Operand__Vo_Mq(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    return false;
}

/** instructions
 * opcode: 2b
 *
 * mnemonic: movntps
 * operand: ['Mx', 'Vx']
 * cpu_model: >= X86_Arch_Sse
 *
 * mnemonic: movntpd
 * operand: ['Mx', 'Vx']
 * prefix: 66
 * cpu_model: >= X86_Arch_Sse2
 *
 * mnemonic: movntss
 * operand: ['Md', 'Vo']
 * prefix: f3
 * cpu_model: >= X86_Arch_Sse4a
 *
 * mnemonic: movntsd
 * operand: ['Mq', 'Vo']
 * prefix: f2
 * cpu_model: >= X86_Arch_Sse4a
 *
**/
bool X86Architecture::Table_2_2b(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse4a && (rInsn.GetPrefix() & X86_Prefix_RepNz) == X86_Prefix_RepNz)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Movntsd);
      if (Operand__Mq_Vo(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse4a && (rInsn.GetPrefix() & X86_Prefix_Rep) == X86_Prefix_Rep)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Movntss);
      if (Operand__Md_Vo(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse2 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Movntpd);
      if (Operand__Mx_Vx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Movntps);
      if (Operand__Mx_Vx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    return false;
}

/** instructions
 * opcode: 2c
 *
 * mnemonic: cvttps2pi
 * operand: ['Pq', 'Woq']
 * cpu_model: >= X86_Arch_Sse
 *
 * mnemonic: cvttpd2pi
 * operand: ['Pq', 'Wo']
 * prefix: 66
 * cpu_model: >= X86_Arch_Sse2_mmx
 *
 * mnemonic: cvttss2si
 * operand: ['Gy', 'Wod']
 * prefix: f3
 * cpu_model: >= X86_Arch_Sse
 *
 * mnemonic: cvttsd2si
 * operand: ['Gy', 'Woq']
 * prefix: f2
 * cpu_model: >= X86_Arch_Sse2
 *
**/
bool X86Architecture::Table_2_2c(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse2 && (rInsn.GetPrefix() & X86_Prefix_RepNz) == X86_Prefix_RepNz)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Cvttsd2si);
      if (Operand__Gy_Woq(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse && (rInsn.GetPrefix() & X86_Prefix_Rep) == X86_Prefix_Rep)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Cvttss2si);
      if (Operand__Gy_Wod(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse2_mmx && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Cvttpd2pi);
      if (Operand__Pq_Wo(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Cvttps2pi);
      if (Operand__Pq_Woq(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    return false;
}

/** instructions
 * opcode: 2d
 *
 * mnemonic: cvtps2pi
 * operand: ['Pq', 'Woq']
 * cpu_model: >= X86_Arch_Sse
 *
 * mnemonic: cvtpd2pi
 * operand: ['Pq', 'Wo']
 * prefix: 66
 * cpu_model: >= X86_Arch_Sse2_mmx
 *
 * mnemonic: cvtss2si
 * operand: ['Gy', 'Wod']
 * prefix: f3
 * cpu_model: >= X86_Arch_Sse
 *
 * mnemonic: cvtsd2si
 * operand: ['Gy', 'Woq']
 * prefix: f2
 * cpu_model: >= X86_Arch_Sse2
 *
**/
bool X86Architecture::Table_2_2d(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse2 && (rInsn.GetPrefix() & X86_Prefix_RepNz) == X86_Prefix_RepNz)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Cvtsd2si);
      if (Operand__Gy_Woq(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse && (rInsn.GetPrefix() & X86_Prefix_Rep) == X86_Prefix_Rep)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Cvtss2si);
      if (Operand__Gy_Wod(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse2_mmx && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Cvtpd2pi);
      if (Operand__Pq_Wo(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Cvtps2pi);
      if (Operand__Pq_Woq(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    return false;
}

/** instructions
 * opcode: 2e
 *
 * mnemonic: ucomiss
 * operand: ['Vo', 'Wod']
 * cpu_model: >= X86_Arch_Sse
 *
 * mnemonic: ucomisd
 * operand: ['Vo', 'Woq']
 * prefix: 66
 * cpu_model: >= X86_Arch_Sse2
 *
**/
bool X86Architecture::Table_2_2e(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse2 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Ucomisd);
      if (Operand__Vo_Woq(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Ucomiss);
      if (Operand__Vo_Wod(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    return false;
}

/** instructions
 * opcode: 2f
 *
 * mnemonic: comiss
 * operand: ['Vo', 'Wod']
 * cpu_model: >= X86_Arch_Sse
 *
 * mnemonic: comisd
 * operand: ['Vo', 'Woq']
 * prefix: 66
 * cpu_model: >= X86_Arch_Sse2
 *
**/
bool X86Architecture::Table_2_2f(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse2 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Comisd);
      if (Operand__Vo_Woq(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Comiss);
      if (Operand__Vo_Wod(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    return false;
}

/** instruction
 * mnemonic: wrmsr
 * opcode: 30
**/
bool X86Architecture::Table_2_30(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Wrmsr);
    return true;
}

/** instruction
 * mnemonic: rdtsc
 * opcode: 31
 * semantic: eax.id = int32(0);
edx.id = int32(0);

**/
bool X86Architecture::Table_2_31(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Rdtsc);
    {
      Expression::LSPType AllExpr;
      /* semantic: eax.id = int32(0) */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_Reg_Eax, &m_CpuInfo),
        Expr::MakeBitVector(32, 0x0)));
      /* semantic: edx.id = int32(0) */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_Reg_Edx, &m_CpuInfo),
        Expr::MakeBitVector(32, 0x0)));
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instruction
 * mnemonic: rdmsr
 * opcode: 32
**/
bool X86Architecture::Table_2_32(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Rdmsr);
    return true;
}

/** instruction
 * mnemonic: rdpmc
 * opcode: 33
**/
bool X86Architecture::Table_2_33(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Rdpmc);
    return true;
}

/** instruction
 * mnemonic: sysenter
 * opcode: 34
 * semantic: 
 * attr: ['intel']
**/
bool X86Architecture::Table_2_34(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Vendor") == X86_ProcType_INTEL)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Sysenter);
      return true;
    }
    else
      return false;
}

/** instruction
 * mnemonic: sysexit
 * opcode: 35
 * semantic: 
 * attr: ['intel']
**/
bool X86Architecture::Table_2_35(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Vendor") == X86_ProcType_INTEL)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Sysexit);
      return true;
    }
    else
      return false;
}

/** instructions
 * opcode: 36
 *
 * invalid
 *
 * mnemonic: rdshr
 * operand: ['Ed']
 * attr: ['cyrix']
 *
**/
bool X86Architecture::Table_2_36(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Vendor") == X86_ProcType_CYRIX)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Rdshr);
      if (Operand__Ed(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else
    {
      return false; /* INVALID */
    }
}

/** instructions
 * opcode: 37
 *
 * mnemonic: getsec
 *
 * mnemonic: wrshr
 * operand: ['Ed']
 * attr: ['cyrix']
 *
**/
bool X86Architecture::Table_2_37(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Vendor") == X86_ProcType_CYRIX)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Wrshr);
      if (Operand__Ed(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Getsec);
      return true;
    }
}

/** instructions
 * opcode: 38
 *
 * reference: table_3_38
 *
 * mnemonic: smint
 * attr: ['cyrix']
 * cpu_model: >= X86_Arch_80486
 *
 * mnemonic: smint
 * attr: ['cyrix']
 * cpu_model: >= X86_Arch_Geode_lx
 *
**/
bool X86Architecture::Table_2_38(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Geode_lx && m_CfgMdl.GetEnum("Vendor") == X86_ProcType_CYRIX)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Smint);
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_80486 && m_CfgMdl.GetEnum("Vendor") == X86_ProcType_CYRIX)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Smint);
      return true;
    }
    else
    {
      u8 Opcode;
      if (!rBinStrm.Read(Offset, Opcode))
        return false;

      rInsn.Length()++;
      if (Opcode + 1 > sizeof(m_Table_3_38))
        return false;
      return (this->*m_Table_3_38[Opcode])(rBinStrm, Offset + 1, rInsn, Mode);
    }
}

/** instruction
 * mnemonic: dmint
 * opcode: 39
 * attr: ['cyrix']
 * cpu_model: >= X86_Arch_Geode_lx
**/
bool X86Architecture::Table_2_39(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Geode_lx && m_CfgMdl.GetEnum("Vendor") == X86_ProcType_CYRIX)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Dmint);
      return true;
    }
    else
      return false;
}

/** instructions
 * opcode: 3a
 *
 * reference: table_3_3A
 *
 * mnemonic: bb0_reset
 * attr: ['cyrix']
 * cpu_model: >= X86_Arch_Cyrix_gx1
 *
 * mnemonic: rdm
 * attr: ['cyrix']
 * cpu_model: >= X86_Arch_Geode_lx
 *
**/
bool X86Architecture::Table_2_3a(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Geode_lx && m_CfgMdl.GetEnum("Vendor") == X86_ProcType_CYRIX)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Rdm);
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Cyrix_gx1 && m_CfgMdl.GetEnum("Vendor") == X86_ProcType_CYRIX)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Bb0_reset);
      return true;
    }
    else
    {
      u8 Opcode;
      if (!rBinStrm.Read(Offset, Opcode))
        return false;

      rInsn.Length()++;
      if (Opcode + 1 > sizeof(m_Table_3_3a))
        return false;
      return (this->*m_Table_3_3a[Opcode])(rBinStrm, Offset + 1, rInsn, Mode);
    }
}

/** instruction
 * mnemonic: bb1_reset
 * opcode: 3b
 * attr: ['cyrix']
 * cpu_model: >= X86_Arch_Cyrix_gx1
**/
bool X86Architecture::Table_2_3b(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Cyrix_gx1 && m_CfgMdl.GetEnum("Vendor") == X86_ProcType_CYRIX)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Bb1_reset);
      return true;
    }
    else
      return false;
}

/** instruction
 * mnemonic: cpu_write
 * opcode: 3c
 * attr: ['cyrix']
 * cpu_model: >= X86_Arch_Cyrix_gx1
**/
bool X86Architecture::Table_2_3c(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Cyrix_gx1 && m_CfgMdl.GetEnum("Vendor") == X86_ProcType_CYRIX)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Cpu_write);
      return true;
    }
    else
      return false;
}

/** instruction
 * mnemonic: cpu_read
 * opcode: 3d
 * attr: ['cyrix']
 * cpu_model: >= X86_Arch_Cyrix_gx1
**/
bool X86Architecture::Table_2_3d(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Cyrix_gx1 && m_CfgMdl.GetEnum("Vendor") == X86_ProcType_CYRIX)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Cpu_read);
      return true;
    }
    else
      return false;
}

/** instruction
 * opcode: 3e
 * invalid
**/
bool X86Architecture::Table_2_3e(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * mnemonic: altinst
 * opcode: 3f
 * attr: ['cyrix']
 * cpu_model: >= X86_Arch_Centaur_ais
**/
bool X86Architecture::Table_2_3f(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Centaur_ais && m_CfgMdl.GetEnum("Vendor") == X86_ProcType_CYRIX)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Altinst);
      return true;
    }
    else
      return false;
}

/** instruction
 * mnemonic: cmovo
 * operand: ['Gv', 'Ev']
 * test_flags: ['of']
 * semantic: if __expr and of.id == int1(1): op0.val = op1.val;

 * operation_type: ['cond']
 * opcode: 40
**/
bool X86Architecture::Table_2_40(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Cmovo);
    rInsn.SubType() |= Instruction::ConditionalType;
    if (Operand__Gv_Ev(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    {
      Expression::LSPType AllExpr;
      rInsn.SetTestedFlags(X86_FlOf);
      /* semantic: if __expr and of.id == int1(1): op0.val = op1.val */
      AllExpr.push_back(Expr::MakeIfElseCond(
        ConditionExpression::CondEq,
        Expr::MakeId(X86_FlOf, &m_CpuInfo),
        Expr::MakeBitVector(1, 0x1),
        Expr::MakeAssign(
          rInsn.GetOperand(0),
          rInsn.GetOperand(1)), nullptr)
      );
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instruction
 * mnemonic: cmovno
 * operand: ['Gv', 'Ev']
 * test_flags: ['of']
 * semantic: if __expr and of.id == int1(0): op0.val = op1.val;

 * operation_type: ['cond']
 * opcode: 41
**/
bool X86Architecture::Table_2_41(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Cmovno);
    rInsn.SubType() |= Instruction::ConditionalType;
    if (Operand__Gv_Ev(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    {
      Expression::LSPType AllExpr;
      rInsn.SetTestedFlags(X86_FlOf);
      /* semantic: if __expr and of.id == int1(0): op0.val = op1.val */
      AllExpr.push_back(Expr::MakeIfElseCond(
        ConditionExpression::CondEq,
        Expr::MakeId(X86_FlOf, &m_CpuInfo),
        Expr::MakeBitVector(1, 0x0),
        Expr::MakeAssign(
          rInsn.GetOperand(0),
          rInsn.GetOperand(1)), nullptr)
      );
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instruction
 * mnemonic: cmovb
 * operand: ['Gv', 'Ev']
 * test_flags: ['cf']
 * semantic: if __expr and cf.id == int1(1): op0.val = op1.val;

 * operation_type: ['cond']
 * opcode: 42
**/
bool X86Architecture::Table_2_42(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Cmovb);
    rInsn.SubType() |= Instruction::ConditionalType;
    if (Operand__Gv_Ev(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    {
      Expression::LSPType AllExpr;
      rInsn.SetTestedFlags(X86_FlCf);
      /* semantic: if __expr and cf.id == int1(1): op0.val = op1.val */
      AllExpr.push_back(Expr::MakeIfElseCond(
        ConditionExpression::CondEq,
        Expr::MakeId(X86_FlCf, &m_CpuInfo),
        Expr::MakeBitVector(1, 0x1),
        Expr::MakeAssign(
          rInsn.GetOperand(0),
          rInsn.GetOperand(1)), nullptr)
      );
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instruction
 * mnemonic: cmovnb
 * operand: ['Gv', 'Ev']
 * test_flags: ['cf']
 * semantic: if __expr and cf.id == int1(0): op0.val = op1.val;

 * operation_type: ['cond']
 * opcode: 43
**/
bool X86Architecture::Table_2_43(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Cmovnb);
    rInsn.SubType() |= Instruction::ConditionalType;
    if (Operand__Gv_Ev(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    {
      Expression::LSPType AllExpr;
      rInsn.SetTestedFlags(X86_FlCf);
      /* semantic: if __expr and cf.id == int1(0): op0.val = op1.val */
      AllExpr.push_back(Expr::MakeIfElseCond(
        ConditionExpression::CondEq,
        Expr::MakeId(X86_FlCf, &m_CpuInfo),
        Expr::MakeBitVector(1, 0x0),
        Expr::MakeAssign(
          rInsn.GetOperand(0),
          rInsn.GetOperand(1)), nullptr)
      );
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instruction
 * mnemonic: cmovz
 * operand: ['Gv', 'Ev']
 * test_flags: ['zf']
 * semantic: if __expr and zf.id == int1(1): op0.val = op1.val;

 * operation_type: ['cond']
 * opcode: 44
**/
bool X86Architecture::Table_2_44(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Cmovz);
    rInsn.SubType() |= Instruction::ConditionalType;
    if (Operand__Gv_Ev(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    {
      Expression::LSPType AllExpr;
      rInsn.SetTestedFlags(X86_FlZf);
      /* semantic: if __expr and zf.id == int1(1): op0.val = op1.val */
      AllExpr.push_back(Expr::MakeIfElseCond(
        ConditionExpression::CondEq,
        Expr::MakeId(X86_FlZf, &m_CpuInfo),
        Expr::MakeBitVector(1, 0x1),
        Expr::MakeAssign(
          rInsn.GetOperand(0),
          rInsn.GetOperand(1)), nullptr)
      );
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instruction
 * mnemonic: cmovnz
 * operand: ['Gv', 'Ev']
 * test_flags: ['zf']
 * semantic: if __expr and zf.id == int1(0): op0.val = op1.val;

 * operation_type: ['cond']
 * opcode: 45
**/
bool X86Architecture::Table_2_45(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Cmovnz);
    rInsn.SubType() |= Instruction::ConditionalType;
    if (Operand__Gv_Ev(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    {
      Expression::LSPType AllExpr;
      rInsn.SetTestedFlags(X86_FlZf);
      /* semantic: if __expr and zf.id == int1(0): op0.val = op1.val */
      AllExpr.push_back(Expr::MakeIfElseCond(
        ConditionExpression::CondEq,
        Expr::MakeId(X86_FlZf, &m_CpuInfo),
        Expr::MakeBitVector(1, 0x0),
        Expr::MakeAssign(
          rInsn.GetOperand(0),
          rInsn.GetOperand(1)), nullptr)
      );
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instruction
 * mnemonic: cmovbe
 * operand: ['Gv', 'Ev']
 * test_flags: ['zf', 'cf']
 * semantic: if __expr and (cf.id | zf.id) != int1(0): op0.val = op1.val;

 * operation_type: ['cond']
 * opcode: 46
**/
bool X86Architecture::Table_2_46(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Cmovbe);
    rInsn.SubType() |= Instruction::ConditionalType;
    if (Operand__Gv_Ev(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    {
      Expression::LSPType AllExpr;
      rInsn.SetTestedFlags(X86_FlZf | X86_FlCf);
      /* semantic: if __expr and (cf.id | zf.id) != int1(0): op0.val = op1.val */
      AllExpr.push_back(Expr::MakeIfElseCond(
        ConditionExpression::CondNe,
        Expr::MakeBinOp(
          OperationExpression::OpOr,
          Expr::MakeId(X86_FlCf, &m_CpuInfo),
          Expr::MakeId(X86_FlZf, &m_CpuInfo)),
        Expr::MakeBitVector(1, 0x0),
        Expr::MakeAssign(
          rInsn.GetOperand(0),
          rInsn.GetOperand(1)), nullptr)
      );
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instruction
 * mnemonic: cmovnbe
 * operand: ['Gv', 'Ev']
 * test_flags: ['zf', 'cf']
 * semantic: if __expr and (cf.id | zf.id) == int1(0): op0.val = op1.val;

 * operation_type: ['cond']
 * opcode: 47
**/
bool X86Architecture::Table_2_47(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Cmovnbe);
    rInsn.SubType() |= Instruction::ConditionalType;
    if (Operand__Gv_Ev(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    {
      Expression::LSPType AllExpr;
      rInsn.SetTestedFlags(X86_FlZf | X86_FlCf);
      /* semantic: if __expr and (cf.id | zf.id) == int1(0): op0.val = op1.val */
      AllExpr.push_back(Expr::MakeIfElseCond(
        ConditionExpression::CondEq,
        Expr::MakeBinOp(
          OperationExpression::OpOr,
          Expr::MakeId(X86_FlCf, &m_CpuInfo),
          Expr::MakeId(X86_FlZf, &m_CpuInfo)),
        Expr::MakeBitVector(1, 0x0),
        Expr::MakeAssign(
          rInsn.GetOperand(0),
          rInsn.GetOperand(1)), nullptr)
      );
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instruction
 * mnemonic: cmovs
 * operand: ['Gv', 'Ev']
 * test_flags: ['sf']
 * semantic: if __expr and sf.id == int1(1): op0.val = op1.val;

 * operation_type: ['cond']
 * opcode: 48
**/
bool X86Architecture::Table_2_48(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Cmovs);
    rInsn.SubType() |= Instruction::ConditionalType;
    if (Operand__Gv_Ev(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    {
      Expression::LSPType AllExpr;
      rInsn.SetTestedFlags(X86_FlSf);
      /* semantic: if __expr and sf.id == int1(1): op0.val = op1.val */
      AllExpr.push_back(Expr::MakeIfElseCond(
        ConditionExpression::CondEq,
        Expr::MakeId(X86_FlSf, &m_CpuInfo),
        Expr::MakeBitVector(1, 0x1),
        Expr::MakeAssign(
          rInsn.GetOperand(0),
          rInsn.GetOperand(1)), nullptr)
      );
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instruction
 * mnemonic: cmovns
 * operand: ['Gv', 'Ev']
 * test_flags: ['sf']
 * semantic: if __expr and sf.id == int1(0): op0.val = op1.val;

 * operation_type: ['cond']
 * opcode: 49
**/
bool X86Architecture::Table_2_49(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Cmovns);
    rInsn.SubType() |= Instruction::ConditionalType;
    if (Operand__Gv_Ev(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    {
      Expression::LSPType AllExpr;
      rInsn.SetTestedFlags(X86_FlSf);
      /* semantic: if __expr and sf.id == int1(0): op0.val = op1.val */
      AllExpr.push_back(Expr::MakeIfElseCond(
        ConditionExpression::CondEq,
        Expr::MakeId(X86_FlSf, &m_CpuInfo),
        Expr::MakeBitVector(1, 0x0),
        Expr::MakeAssign(
          rInsn.GetOperand(0),
          rInsn.GetOperand(1)), nullptr)
      );
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instruction
 * mnemonic: cmovp
 * operand: ['Gv', 'Ev']
 * test_flags: ['pf']
 * semantic: if __expr and pf.id == int1(1): op0.val = op1.val;

 * operation_type: ['cond']
 * opcode: 4a
**/
bool X86Architecture::Table_2_4a(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Cmovp);
    rInsn.SubType() |= Instruction::ConditionalType;
    if (Operand__Gv_Ev(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    {
      Expression::LSPType AllExpr;
      rInsn.SetTestedFlags(X86_FlPf);
      /* semantic: if __expr and pf.id == int1(1): op0.val = op1.val */
      AllExpr.push_back(Expr::MakeIfElseCond(
        ConditionExpression::CondEq,
        Expr::MakeId(X86_FlPf, &m_CpuInfo),
        Expr::MakeBitVector(1, 0x1),
        Expr::MakeAssign(
          rInsn.GetOperand(0),
          rInsn.GetOperand(1)), nullptr)
      );
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instruction
 * mnemonic: cmovnp
 * operand: ['Gv', 'Ev']
 * test_flags: ['pf']
 * semantic: if __expr and pf.id == int1(0): op0.val = op1.val;

 * operation_type: ['cond']
 * opcode: 4b
**/
bool X86Architecture::Table_2_4b(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Cmovnp);
    rInsn.SubType() |= Instruction::ConditionalType;
    if (Operand__Gv_Ev(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    {
      Expression::LSPType AllExpr;
      rInsn.SetTestedFlags(X86_FlPf);
      /* semantic: if __expr and pf.id == int1(0): op0.val = op1.val */
      AllExpr.push_back(Expr::MakeIfElseCond(
        ConditionExpression::CondEq,
        Expr::MakeId(X86_FlPf, &m_CpuInfo),
        Expr::MakeBitVector(1, 0x0),
        Expr::MakeAssign(
          rInsn.GetOperand(0),
          rInsn.GetOperand(1)), nullptr)
      );
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instruction
 * mnemonic: cmovl
 * operand: ['Gv', 'Ev']
 * test_flags: ['of', 'sf']
 * semantic: if __expr and (sf.id ^ of.id) != int1(0): op0.val = op1.val;

 * operation_type: ['cond']
 * opcode: 4c
**/
bool X86Architecture::Table_2_4c(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Cmovl);
    rInsn.SubType() |= Instruction::ConditionalType;
    if (Operand__Gv_Ev(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    {
      Expression::LSPType AllExpr;
      rInsn.SetTestedFlags(X86_FlOf | X86_FlSf);
      /* semantic: if __expr and (sf.id ^ of.id) != int1(0): op0.val = op1.val */
      AllExpr.push_back(Expr::MakeIfElseCond(
        ConditionExpression::CondNe,
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeId(X86_FlSf, &m_CpuInfo),
          Expr::MakeId(X86_FlOf, &m_CpuInfo)),
        Expr::MakeBitVector(1, 0x0),
        Expr::MakeAssign(
          rInsn.GetOperand(0),
          rInsn.GetOperand(1)), nullptr)
      );
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instruction
 * mnemonic: cmovnl
 * operand: ['Gv', 'Ev']
 * test_flags: ['of', 'sf']
 * semantic: if __expr and (sf.id ^ of.id) == int1(0): op0.val = op1.val;

 * operation_type: ['cond']
 * opcode: 4d
**/
bool X86Architecture::Table_2_4d(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Cmovnl);
    rInsn.SubType() |= Instruction::ConditionalType;
    if (Operand__Gv_Ev(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    {
      Expression::LSPType AllExpr;
      rInsn.SetTestedFlags(X86_FlOf | X86_FlSf);
      /* semantic: if __expr and (sf.id ^ of.id) == int1(0): op0.val = op1.val */
      AllExpr.push_back(Expr::MakeIfElseCond(
        ConditionExpression::CondEq,
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeId(X86_FlSf, &m_CpuInfo),
          Expr::MakeId(X86_FlOf, &m_CpuInfo)),
        Expr::MakeBitVector(1, 0x0),
        Expr::MakeAssign(
          rInsn.GetOperand(0),
          rInsn.GetOperand(1)), nullptr)
      );
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instruction
 * mnemonic: cmovle
 * operand: ['Gv', 'Ev']
 * test_flags: ['of', 'sf', 'zf']
 * semantic: if __expr and ((sf.id ^ of.id) | zf.id) != int1(0): op0.val = op1.val;

 * operation_type: ['cond']
 * opcode: 4e
**/
bool X86Architecture::Table_2_4e(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Cmovle);
    rInsn.SubType() |= Instruction::ConditionalType;
    if (Operand__Gv_Ev(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    {
      Expression::LSPType AllExpr;
      rInsn.SetTestedFlags(X86_FlOf | X86_FlSf | X86_FlZf);
      /* semantic: if __expr and ((sf.id ^ of.id) | zf.id) != int1(0): op0.val = op1.val */
      AllExpr.push_back(Expr::MakeIfElseCond(
        ConditionExpression::CondNe,
        Expr::MakeBinOp(
          OperationExpression::OpOr,
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeId(X86_FlSf, &m_CpuInfo),
            Expr::MakeId(X86_FlOf, &m_CpuInfo)),
          Expr::MakeId(X86_FlZf, &m_CpuInfo)),
        Expr::MakeBitVector(1, 0x0),
        Expr::MakeAssign(
          rInsn.GetOperand(0),
          rInsn.GetOperand(1)), nullptr)
      );
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instruction
 * mnemonic: cmovnle
 * operand: ['Gv', 'Ev']
 * test_flags: ['of', 'sf', 'zf']
 * semantic: if __expr and ((sf.id ^ of.id) | zf.id) == int1(0): op0.val = op1.val;

 * operation_type: ['cond']
 * opcode: 4f
**/
bool X86Architecture::Table_2_4f(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Cmovnle);
    rInsn.SubType() |= Instruction::ConditionalType;
    if (Operand__Gv_Ev(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    {
      Expression::LSPType AllExpr;
      rInsn.SetTestedFlags(X86_FlOf | X86_FlSf | X86_FlZf);
      /* semantic: if __expr and ((sf.id ^ of.id) | zf.id) == int1(0): op0.val = op1.val */
      AllExpr.push_back(Expr::MakeIfElseCond(
        ConditionExpression::CondEq,
        Expr::MakeBinOp(
          OperationExpression::OpOr,
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeId(X86_FlSf, &m_CpuInfo),
            Expr::MakeId(X86_FlOf, &m_CpuInfo)),
          Expr::MakeId(X86_FlZf, &m_CpuInfo)),
        Expr::MakeBitVector(1, 0x0),
        Expr::MakeAssign(
          rInsn.GetOperand(0),
          rInsn.GetOperand(1)), nullptr)
      );
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instructions
 * opcode: 50
 *
 * mnemonic: movmskps
 * operand: ['Gy', 'Ux']
 * cpu_model: >= X86_Arch_Sse
 *
 * mnemonic: movmskpd
 * operand: ['Gy', 'Ux']
 * prefix: 66
 * cpu_model: >= X86_Arch_Sse2
 *
**/
bool X86Architecture::Table_2_50(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse2 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Movmskpd);
      if (Operand__Gy_Ux(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Movmskps);
      if (Operand__Gy_Ux(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    return false;
}

/** instructions
 * opcode: 51
 *
 * mnemonic: sqrtps
 * operand: ['Vx', 'Wx']
 * cpu_model: >= X86_Arch_Sse
 *
 * mnemonic: sqrtpsd
 * operand: ['Vx', 'Wx']
 * prefix: 66
 * cpu_model: >= X86_Arch_Sse2
 *
 * mnemonic: sqrtss
 * operand: ['Vo', 'Wod']
 * prefix: f3
 * cpu_model: >= X86_Arch_Sse
 *
 * mnemonic: sqrtsd
 * operand: ['Vo', 'Woq']
 * prefix: f2
 * cpu_model: >= X86_Arch_Sse2
 *
**/
bool X86Architecture::Table_2_51(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse2 && (rInsn.GetPrefix() & X86_Prefix_RepNz) == X86_Prefix_RepNz)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Sqrtsd);
      if (Operand__Vo_Woq(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse && (rInsn.GetPrefix() & X86_Prefix_Rep) == X86_Prefix_Rep)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Sqrtss);
      if (Operand__Vo_Wod(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse2 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Sqrtpsd);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Sqrtps);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    return false;
}

/** instructions
 * opcode: 52
 *
 * mnemonic: rsqrtps
 * operand: ['Vx', 'Wx']
 * cpu_model: >= X86_Arch_Sse
 *
 * mnemonic: rsqrtss
 * operand: ['Vo', 'Wod']
 * prefix: f3
 * cpu_model: >= X86_Arch_Sse
 *
**/
bool X86Architecture::Table_2_52(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse && (rInsn.GetPrefix() & X86_Prefix_Rep) == X86_Prefix_Rep)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Rsqrtss);
      if (Operand__Vo_Wod(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Rsqrtps);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    return false;
}

/** instructions
 * opcode: 53
 *
 * mnemonic: rcpps
 * operand: ['Vx', 'Wx']
 * cpu_model: >= X86_Arch_Sse
 *
 * mnemonic: rcpss
 * operand: ['Vo', 'Wod']
 * prefix: f3
 * cpu_model: >= X86_Arch_Sse
 *
**/
bool X86Architecture::Table_2_53(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse && (rInsn.GetPrefix() & X86_Prefix_Rep) == X86_Prefix_Rep)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Rcpss);
      if (Operand__Vo_Wod(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Rcpps);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    return false;
}

/** instructions
 * opcode: 54
 *
 * mnemonic: andps
 * operand: ['Vx', 'Wx']
 * cpu_model: >= X86_Arch_Sse
 *
 * mnemonic: andpd
 * operand: ['Vx', 'Wx']
 * prefix: 66
 * cpu_model: >= X86_Arch_Sse2
 *
**/
bool X86Architecture::Table_2_54(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse2 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Andpd);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Andps);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    return false;
}

/** instructions
 * opcode: 55
 *
 * mnemonic: andnps
 * operand: ['Vx', 'Wx']
 * cpu_model: >= X86_Arch_Sse
 *
 * mnemonic: andnpd
 * operand: ['Vx', 'Wx']
 * prefix: 66
 * cpu_model: >= X86_Arch_Sse2
 *
**/
bool X86Architecture::Table_2_55(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse2 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Andnpd);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Andnps);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    return false;
}

/** instructions
 * opcode: 56
 *
 * mnemonic: orps
 * operand: ['Vx', 'Wx']
 * cpu_model: >= X86_Arch_Sse
 *
 * mnemonic: orpd
 * operand: ['Vx', 'Wx']
 * prefix: 66
 * cpu_model: >= X86_Arch_Sse
 *
**/
bool X86Architecture::Table_2_56(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Orpd);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Orps);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    return false;
}

/** instructions
 * opcode: 57
 *
 * mnemonic: xorps
 * operand: ['Vx', 'Wx']
 * semantic: op0.val ^= op1.val;

 * cpu_model: >= X86_Arch_Sse
 *
 * mnemonic: xorpd
 * operand: ['Vx', 'Wx']
 * prefix: 66
 * cpu_model: >= X86_Arch_Sse2
 *
**/
bool X86Architecture::Table_2_57(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse2 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Xorpd);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Xorps);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: op0.val ^= op1.val */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            rInsn.GetOperand(0),
            rInsn.GetOperand(1)))
        );
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    return false;
}

/** instructions
 * opcode: 58
 *
 * mnemonic: addps
 * operand: ['Vx', 'Wx']
 * cpu_model: >= X86_Arch_Sse
 *
 * mnemonic: addpd
 * operand: ['Vx', 'Wx']
 * prefix: 66
 * cpu_model: >= X86_Arch_Sse2
 *
 * mnemonic: addss
 * operand: ['Vo', 'Wod']
 * prefix: f3
 * semantic: alloc_var('res', 32);
res     = fadd(bit_cast(op0.val, int_type32), bit_cast(op1.val, int_type32));
op0.val = clear_bits(op0.val, bit_cast(int(op0.bit, 0xffffffff), int_type(op0.bit))) | bit_cast(res, int_type(op0.bit));
free_var('res');

 * cpu_model: >= X86_Arch_Sse
 *
 * mnemonic: addsd
 * operand: ['Vo', 'Woq']
 * prefix: f2
 * cpu_model: >= X86_Arch_Sse2
 *
**/
bool X86Architecture::Table_2_58(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse2 && (rInsn.GetPrefix() & X86_Prefix_RepNz) == X86_Prefix_RepNz)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Addsd);
      if (Operand__Vo_Woq(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse && (rInsn.GetPrefix() & X86_Prefix_Rep) == X86_Prefix_Rep)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Addss);
      if (Operand__Vo_Wod(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('res', 32) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, 0x20));
        /* semantic: res     = fadd(bit_cast(op0.val, int_type32), bit_cast(op1.val, int_type32)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpFAdd, Expr::MakeBinOp(OperationExpression::OpBcast, rInsn.GetOperand(0), Expr::MakeBitVector(32, 32)), Expr::MakeBinOp(OperationExpression::OpBcast, rInsn.GetOperand(1), Expr::MakeBitVector(32, 32)))));
        /* semantic: op0.val = clear_bits(op0.val, bit_cast(int(op0.bit, 0xffffffff), int_type(op0.bit))) | bit_cast(res, int_type(op0.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeBinOp(
            OperationExpression::OpOr,
            Expr::MakeBinOp(OperationExpression::OpClearBits, rInsn.GetOperand(0), Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0xffffffff), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()))),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeVar("res", VariableExpression::Use), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize())))));
        /* semantic: free_var('res') */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse2 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Addpd);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Addps);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    return false;
}

/** instructions
 * opcode: 59
 *
 * mnemonic: mulps
 * operand: ['Vx', 'Wx']
 * cpu_model: >= X86_Arch_Sse
 *
 * mnemonic: mulpd
 * operand: ['Vx', 'Wx']
 * prefix: 66
 * cpu_model: >= X86_Arch_Sse2
 *
 * mnemonic: mulss
 * operand: ['Vo', 'Wod']
 * prefix: f3
 * semantic: alloc_var('res', 32);
res     = fmul(bit_cast(op0.val, int_type32), bit_cast(op1.val, int_type32));
op0.val = clear_bits(op0.val, bit_cast(int(op0.bit, 0xffffffff), int_type(op0.bit))) | bit_cast(res, int_type(op0.bit));
free_var('res');

 * cpu_model: >= X86_Arch_Sse
 *
 * mnemonic: mulsd
 * operand: ['Vo', 'Woq']
 * prefix: f2
 * cpu_model: >= X86_Arch_Sse2
 *
**/
bool X86Architecture::Table_2_59(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse2 && (rInsn.GetPrefix() & X86_Prefix_RepNz) == X86_Prefix_RepNz)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Mulsd);
      if (Operand__Vo_Woq(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse && (rInsn.GetPrefix() & X86_Prefix_Rep) == X86_Prefix_Rep)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Mulss);
      if (Operand__Vo_Wod(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('res', 32) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, 0x20));
        /* semantic: res     = fmul(bit_cast(op0.val, int_type32), bit_cast(op1.val, int_type32)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpFMul, Expr::MakeBinOp(OperationExpression::OpBcast, rInsn.GetOperand(0), Expr::MakeBitVector(32, 32)), Expr::MakeBinOp(OperationExpression::OpBcast, rInsn.GetOperand(1), Expr::MakeBitVector(32, 32)))));
        /* semantic: op0.val = clear_bits(op0.val, bit_cast(int(op0.bit, 0xffffffff), int_type(op0.bit))) | bit_cast(res, int_type(op0.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeBinOp(
            OperationExpression::OpOr,
            Expr::MakeBinOp(OperationExpression::OpClearBits, rInsn.GetOperand(0), Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0xffffffff), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()))),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeVar("res", VariableExpression::Use), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize())))));
        /* semantic: free_var('res') */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse2 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Mulpd);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Mulps);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    return false;
}

/** instructions
 * opcode: 5a
 *
 * mnemonic: cvtps2pd
 * operand: ['Vx', 'Wx']
 * cpu_model: >= X86_Arch_Sse
 *
 * mnemonic: cvtpd2ps
 * operand: ['Vx', 'Wx']
 * prefix: 66
 * cpu_model: >= X86_Arch_Sse2
 *
 * mnemonic: cvtss2sd
 * operand: ['Vo', 'Wod']
 * prefix: f3
 * cpu_model: >= X86_Arch_Sse2
 *
 * mnemonic: cvtsd2ss
 * operand: ['Vo', 'Woq']
 * prefix: f2
 * cpu_model: >= X86_Arch_Sse2
 *
**/
bool X86Architecture::Table_2_5a(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse2 && (rInsn.GetPrefix() & X86_Prefix_RepNz) == X86_Prefix_RepNz)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Cvtsd2ss);
      if (Operand__Vo_Woq(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse2 && (rInsn.GetPrefix() & X86_Prefix_Rep) == X86_Prefix_Rep)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Cvtss2sd);
      if (Operand__Vo_Wod(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse2 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Cvtpd2ps);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Cvtps2pd);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    return false;
}

/** instructions
 * opcode: 5b
 *
 * mnemonic: cvtdq2ps
 * operand: ['Vx', 'Wx']
 * cpu_model: >= X86_Arch_Sse
 *
 * mnemonic: cvtps2dq
 * operand: ['Vx', 'Wx']
 * prefix: 66
 * cpu_model: >= X86_Arch_Sse2
 *
 * mnemonic: cvttps2dq
 * operand: ['Vx', 'Wx']
 * prefix: f3
 * cpu_model: >= X86_Arch_Sse2
 *
**/
bool X86Architecture::Table_2_5b(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse2 && (rInsn.GetPrefix() & X86_Prefix_Rep) == X86_Prefix_Rep)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Cvttps2dq);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse2 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Cvtps2dq);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Cvtdq2ps);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    return false;
}

/** instructions
 * opcode: 5c
 *
 * mnemonic: subps
 * operand: ['Vx', 'Wx']
 * cpu_model: >= X86_Arch_Sse
 *
 * mnemonic: subpd
 * operand: ['Vx', 'Wx']
 * prefix: 66
 * cpu_model: >= X86_Arch_Sse2
 *
 * mnemonic: subss
 * operand: ['Vo', 'Wod']
 * prefix: f3
 * cpu_model: >= X86_Arch_Sse
 *
 * mnemonic: subsd
 * operand: ['Vo', 'Woq']
 * prefix: f2
 * cpu_model: >= X86_Arch_Sse2
 *
**/
bool X86Architecture::Table_2_5c(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse2 && (rInsn.GetPrefix() & X86_Prefix_RepNz) == X86_Prefix_RepNz)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Subsd);
      if (Operand__Vo_Woq(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse && (rInsn.GetPrefix() & X86_Prefix_Rep) == X86_Prefix_Rep)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Subss);
      if (Operand__Vo_Wod(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse2 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Subpd);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Subps);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    return false;
}

/** instructions
 * opcode: 5d
 *
 * mnemonic: minps
 * operand: ['Vx', 'Wx']
 * cpu_model: >= X86_Arch_Sse
 *
 * mnemonic: minpd
 * operand: ['Vx', 'Wx']
 * prefix: 66
 * cpu_model: >= X86_Arch_Sse2
 *
 * mnemonic: minss
 * operand: ['Vo', 'Wod']
 * prefix: f3
 * cpu_model: >= X86_Arch_Sse
 *
 * mnemonic: minsd
 * operand: ['Vo', 'Woq']
 * prefix: f2
 * cpu_model: >= X86_Arch_Sse2
 *
**/
bool X86Architecture::Table_2_5d(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse2 && (rInsn.GetPrefix() & X86_Prefix_RepNz) == X86_Prefix_RepNz)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Minsd);
      if (Operand__Vo_Woq(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse && (rInsn.GetPrefix() & X86_Prefix_Rep) == X86_Prefix_Rep)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Minss);
      if (Operand__Vo_Wod(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse2 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Minpd);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Minps);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    return false;
}

/** instructions
 * opcode: 5e
 *
 * mnemonic: divps
 * operand: ['Vx', 'Wx']
 * cpu_model: >= X86_Arch_Sse
 *
 * mnemonic: divpd
 * operand: ['Vx', 'Wx']
 * prefix: 66
 * cpu_model: >= X86_Arch_Sse2
 *
 * mnemonic: divss
 * operand: ['Vo', 'Wod']
 * prefix: f3
 * cpu_model: >= X86_Arch_Sse
 *
 * mnemonic: divsd
 * operand: ['Vo', 'Woq']
 * prefix: f2
 * cpu_model: >= X86_Arch_Sse2
 *
**/
bool X86Architecture::Table_2_5e(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse2 && (rInsn.GetPrefix() & X86_Prefix_RepNz) == X86_Prefix_RepNz)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Divsd);
      if (Operand__Vo_Woq(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse && (rInsn.GetPrefix() & X86_Prefix_Rep) == X86_Prefix_Rep)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Divss);
      if (Operand__Vo_Wod(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse2 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Divpd);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Divps);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    return false;
}

/** instructions
 * opcode: 5f
 *
 * mnemonic: maxps
 * operand: ['Vx', 'Wx']
 * cpu_model: >= X86_Arch_Sse
 *
 * mnemonic: maxpd
 * operand: ['Vx', 'Wx']
 * prefix: 66
 * cpu_model: >= X86_Arch_Sse2
 *
 * mnemonic: maxss
 * operand: ['Vo', 'Wod']
 * prefix: f3
 * cpu_model: >= X86_Arch_Sse
 *
 * mnemonic: maxsd
 * operand: ['Vo', 'Woq']
 * prefix: f2
 * cpu_model: >= X86_Arch_Sse2
 *
**/
bool X86Architecture::Table_2_5f(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse2 && (rInsn.GetPrefix() & X86_Prefix_RepNz) == X86_Prefix_RepNz)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Maxsd);
      if (Operand__Vo_Woq(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse && (rInsn.GetPrefix() & X86_Prefix_Rep) == X86_Prefix_Rep)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Maxss);
      if (Operand__Vo_Wod(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse2 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Maxpd);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Maxps);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    return false;
}

/** instructions
 * opcode: 60
 *
 * mnemonic: punpcklbw
 * operand: ['Pq', 'Qd']
 * cpu_model: >= X86_Arch_Mmx
 *
 * mnemonic: pupcklbw
 * operand: ['Vx', 'Wx']
 * prefix: 66
 * cpu_model: >= X86_Arch_Sse2
 *
**/
bool X86Architecture::Table_2_60(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse2 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pupcklbw);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Mmx)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Punpcklbw);
      if (Operand__Pq_Qd(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    return false;
}

/** instructions
 * opcode: 61
 *
 * mnemonic: punpcklwd
 * operand: ['Pq', 'Qd']
 * cpu_model: >= X86_Arch_Mmx
 *
 * mnemonic: punpcklwd
 * operand: ['Vx', 'Wx']
 * prefix: 66
 * cpu_model: >= X86_Arch_Sse2
 *
**/
bool X86Architecture::Table_2_61(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse2 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Punpcklwd);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Mmx)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Punpcklwd);
      if (Operand__Pq_Qd(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    return false;
}

/** instructions
 * opcode: 62
 *
 * mnemonic: punpckldq
 * operand: ['Pq', 'Qd']
 * cpu_model: >= X86_Arch_Mmx
 *
 * mnemonic: pupckldq
 * operand: ['Vx', 'Wx']
 * cpu_model: >= X86_Arch_Sse2
 *
**/
bool X86Architecture::Table_2_62(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse2)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pupckldq);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Mmx)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Punpckldq);
      if (Operand__Pq_Qd(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    return false;
}

/** instructions
 * opcode: 63
 *
 * mnemonic: packsswb
 * operand: ['Pq', 'Qq']
 * cpu_model: >= X86_Arch_Mmx
 *
 * mnemonic: packsswb
 * operand: ['Vx', 'Wx']
 * prefix: 66
 * cpu_model: >= X86_Arch_Sse2
 *
**/
bool X86Architecture::Table_2_63(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse2 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Packsswb);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Mmx)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Packsswb);
      if (Operand__Pq_Qq(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    return false;
}

/** instructions
 * opcode: 64
 *
 * mnemonic: pcmpgtb
 * operand: ['Pq', 'Qq']
 * cpu_model: >= X86_Arch_Mmx
 *
 * mnemonic: pcmpgtb
 * operand: ['Vx', 'Wx']
 * prefix: 66
 * cpu_model: >= X86_Arch_Sse2
 *
**/
bool X86Architecture::Table_2_64(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse2 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pcmpgtb);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Mmx)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pcmpgtb);
      if (Operand__Pq_Qq(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    return false;
}

/** instructions
 * opcode: 65
 *
 * mnemonic: pcmpgtw
 * operand: ['Pq', 'Qq']
 * cpu_model: >= X86_Arch_Mmx
 *
 * mnemonic: pcmpgtw
 * operand: ['Vx', 'Wx']
 * prefix: 66
 * cpu_model: >= X86_Arch_Sse2
 *
**/
bool X86Architecture::Table_2_65(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse2 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pcmpgtw);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Mmx)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pcmpgtw);
      if (Operand__Pq_Qq(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    return false;
}

/** instructions
 * opcode: 66
 *
 * mnemonic: pcmpgtd
 * operand: ['Pq', 'Qq']
 * cpu_model: >= X86_Arch_Mmx
 *
 * mnemonic: cmpgtd
 * operand: ['Vx', 'Wx']
 * prefix: 66
 * cpu_model: >= X86_Arch_Sse2
 *
**/
bool X86Architecture::Table_2_66(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse2 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Cmpgtd);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Mmx)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pcmpgtd);
      if (Operand__Pq_Qq(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    return false;
}

/** instructions
 * opcode: 67
 *
 * mnemonic: packuswb
 * operand: ['Pq', 'Qq']
 * cpu_model: >= X86_Arch_Mmx
 *
 * mnemonic: packuswb
 * operand: ['Vx', 'Wx']
 * prefix: 66
 * cpu_model: >= X86_Arch_Sse2
 *
**/
bool X86Architecture::Table_2_67(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse2 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Packuswb);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Mmx)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Packuswb);
      if (Operand__Pq_Qq(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    return false;
}

/** instructions
 * opcode: 68
 *
 * mnemonic: punpckhbw
 * operand: ['Pq', 'Qq']
 * cpu_model: >= X86_Arch_Mmx
 *
 * mnemonic: punpckhbw
 * operand: ['Hx', 'Hx', 'Wx']
 * prefix: 66
 * cpu_model: >= X86_Arch_Sse2
 *
**/
bool X86Architecture::Table_2_68(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse2 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Punpckhbw);
      if (Operand__Hx_Hx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Mmx)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Punpckhbw);
      if (Operand__Pq_Qq(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    return false;
}

/** instructions
 * opcode: 69
 *
 * mnemonic: punpckhwd
 * operand: ['Pq', 'Qq']
 * cpu_model: >= X86_Arch_Mmx
 *
 * mnemonic: punpckhwd
 * operand: ['Vx', 'Wx']
 * prefix: 66
 * cpu_model: >= X86_Arch_Sse2
 *
**/
bool X86Architecture::Table_2_69(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse2 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Punpckhwd);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Mmx)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Punpckhwd);
      if (Operand__Pq_Qq(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    return false;
}

/** instructions
 * opcode: 6a
 *
 * mnemonic: punpckhdq
 * operand: ['Pq', 'Qq']
 * cpu_model: >= X86_Arch_Mmx
 *
 * mnemonic: punpckhdq
 * operand: ['Vx', 'Wx']
 * prefix: 66
 * cpu_model: >= X86_Arch_Sse2
 *
**/
bool X86Architecture::Table_2_6a(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse2 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Punpckhdq);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Mmx)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Punpckhdq);
      if (Operand__Pq_Qq(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    return false;
}

/** instructions
 * opcode: 6b
 *
 * mnemonic: packssdw
 * operand: ['Pq', 'Qq']
 * cpu_model: >= X86_Arch_Mmx
 *
 * mnemonic: packssdw
 * operand: ['Vx', 'Wx']
 * prefix: 66
 * cpu_model: >= X86_Arch_Sse2
 *
**/
bool X86Architecture::Table_2_6b(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse2 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Packssdw);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Mmx)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Packssdw);
      if (Operand__Pq_Qq(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    return false;
}

/** instructions
 * opcode: 6c
 *
 * invalid
 *
 * mnemonic: punpcklqdq
 * operand: ['Vx', 'Wx']
 * prefix: 66
 * cpu_model: >= X86_Arch_Sse2
 *
**/
bool X86Architecture::Table_2_6c(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse2 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Punpcklqdq);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else
    {
      return false; /* INVALID */
    }
}

/** instructions
 * opcode: 6d
 *
 * invalid
 *
 * mnemonic: punpckhqdq
 * operand: ['Vx', 'Wx']
 * prefix: 66
 * cpu_model: >= X86_Arch_Sse2
 *
**/
bool X86Architecture::Table_2_6d(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse2 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Punpckhqdq);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else
    {
      return false; /* INVALID */
    }
}

/** instructions
 * opcode: 6e
 *
 * mnemonic: movd
 * operand: ['Pq', 'Ey']
 * cpu_model: >= X86_Arch_Mmx
 *
 * mnemonic: movq
 * operand: ['Pq', 'Ey']
 * attr: ['m64', 'rexw']
 *
 * mnemonic: movd
 * operand: ['Vo', 'Ed']
 * semantic: if __code and is_dword_operation:
  op0.val = bit_cast(op1.val, int_type32);
if __code and is_oword_operation:
  op0.val = bit_cast(op1.val, int_type128);

 * attr: ['op_size']
 * cpu_model: >= X86_Arch_Sse2
 *
 * mnemonic: movq
 * operand: ['Vo', 'Ey']
 * attr: ['m64', 'rexw', 'op_size']
 * cpu_model: >= X86_Arch_Sse2
 *
**/
bool X86Architecture::Table_2_6e(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse2 && Mode == X86_Bit_64 && (rInsn.GetPrefix() & X86_Prefix_REX_w) == X86_Prefix_REX_w && (rInsn.GetPrefix() & X86_Prefix_OpSize))
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Movq);
      if (Operand__Vo_Ey(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse2 && (rInsn.GetPrefix() & X86_Prefix_OpSize))
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Movd);
      if (Operand__Vo_Ed(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: if __code and is_dword_operation:
          op0.val = bit_cast(op1.val, int_type32) */
        if (rInsn.GetOperand(0)->GetBitSize() == 32)
        {
          /* block glb expressions */
          AllExpr.push_back(Expr::MakeAssign(
            rInsn.GetOperand(0),
            Expr::MakeBinOp(OperationExpression::OpBcast, rInsn.GetOperand(1), Expr::MakeBitVector(32, 32))));
        }
        /* semantic: if __code and is_oword_operation:
          op0.val = bit_cast(op1.val, int_type128) */
        if (rInsn.GetOperand(0)->GetBitSize() == 128)
        {
          /* block glb expressions */
          AllExpr.push_back(Expr::MakeAssign(
            rInsn.GetOperand(0),
            Expr::MakeBinOp(OperationExpression::OpBcast, rInsn.GetOperand(1), Expr::MakeBitVector(128, 128))));
        }
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    else if (Mode == X86_Bit_64 && (rInsn.GetPrefix() & X86_Prefix_REX_w) == X86_Prefix_REX_w)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Movq);
      if (Operand__Pq_Ey(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Mmx)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Movd);
      if (Operand__Pq_Ey(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    return false;
}

/** instructions
 * opcode: 6f
 *
 * mnemonic: movq
 * operand: ['Pq', 'Qq']
 * cpu_model: >= X86_Arch_Mmx
 *
 * mnemonic: modqa
 * operand: ['Vx', 'Wx']
 * prefix: 66
 * cpu_model: >= X86_Arch_Sse2
 *
 * mnemonic: movdqu
 * operand: ['Vx', 'Wx']
 * prefix: f3
 * cpu_model: >= X86_Arch_Sse
 *
**/
bool X86Architecture::Table_2_6f(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse && (rInsn.GetPrefix() & X86_Prefix_Rep) == X86_Prefix_Rep)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Movdqu);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse2 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Modqa);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Mmx)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Movq);
      if (Operand__Pq_Qq(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    return false;
}

/** instructions
 * opcode: 70
 *
 * mnemonic: pshufw
 * operand: ['Pq', 'Qq', 'Ib']
 * cpu_model: >= X86_Arch_Mmx_sse
 *
 * mnemonic: pshufd
 * operand: ['Vx', 'Wx', 'Ib']
 * prefix: 66
 * cpu_model: >= X86_Arch_Sse2
 *
 * mnemonic: pshufhw
 * operand: ['Vx', 'Wx', 'Ib']
 * prefix: f3
 * cpu_model: >= X86_Arch_Sse2
 *
 * mnemonic: pshuflw
 * operand: ['Vx', 'Wx', 'Ib']
 * prefix: f2
 * cpu_model: >= X86_Arch_Sse2
 *
**/
bool X86Architecture::Table_2_70(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse2 && (rInsn.GetPrefix() & X86_Prefix_RepNz) == X86_Prefix_RepNz)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pshuflw);
      if (Operand__Vx_Wx_Ib(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse2 && (rInsn.GetPrefix() & X86_Prefix_Rep) == X86_Prefix_Rep)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pshufhw);
      if (Operand__Vx_Wx_Ib(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse2 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pshufd);
      if (Operand__Vx_Wx_Ib(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Mmx_sse)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pshufw);
      if (Operand__Pq_Qq_Ib(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    return false;
}

/** group:
 * opcode: 00
 * invalid
 *
 * opcode: 01
 * invalid
 *
 * opcode: 02
 * sub_opcodes: [{'mnemonic': 'psrlw', 'operand': ['Nq', 'Ib']}, {'mnemonic': 'psrlw', 'operand': ['Ux', 'Ib'], 'prefix': 102}]
 *
 * opcode: 03
 * invalid
 *
 * opcode: 04
 * sub_opcodes: [{'mnemonic': 'psraw', 'operand': ['Nq', 'Ib']}, {'mnemonic': 'psraw', 'operand': ['Ux', 'Ib'], 'prefix': 102}]
 *
 * opcode: 05
 * invalid
 *
 * opcode: 06
 * sub_opcodes: [{'mnemonic': 'psllw', 'operand': ['Nq', 'Ib']}, {'mnemonic': 'psllw', 'operand': ['Ux', 'Ib'], 'prefix': 102}]
 *
 * opcode: 07
 * invalid
 *
**/
bool X86Architecture::Table_2_71(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    u8 ModRmByte;
    if (!rBinStrm.Read(Offset, ModRmByte))
      return false;

    x86::ModRM ModRm(ModRmByte);
    switch (ModRm.Reg())
    {
    case 0x0:
      return false;
    case 0x1:
      return false;
    case 0x2:
      if ((rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
      {
        rInsn.Length()++;
        rInsn.SetOpcode(X86_Opcode_Psrlw);
        if (Operand__Ux_Ib(rBinStrm, Offset, rInsn, Mode) == false)
        {
          return false;
        }
        return true;
      }
      else
      {
        rInsn.Length()++;
        rInsn.SetOpcode(X86_Opcode_Psrlw);
        if (Operand__Nq_Ib(rBinStrm, Offset, rInsn, Mode) == false)
        {
          return false;
        }
        return true;
      }
    case 0x3:
      return false;
    case 0x4:
      if ((rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
      {
        rInsn.Length()++;
        rInsn.SetOpcode(X86_Opcode_Psraw);
        if (Operand__Ux_Ib(rBinStrm, Offset, rInsn, Mode) == false)
        {
          return false;
        }
        return true;
      }
      else
      {
        rInsn.Length()++;
        rInsn.SetOpcode(X86_Opcode_Psraw);
        if (Operand__Nq_Ib(rBinStrm, Offset, rInsn, Mode) == false)
        {
          return false;
        }
        return true;
      }
    case 0x5:
      return false;
    case 0x6:
      if ((rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
      {
        rInsn.Length()++;
        rInsn.SetOpcode(X86_Opcode_Psllw);
        if (Operand__Ux_Ib(rBinStrm, Offset, rInsn, Mode) == false)
        {
          return false;
        }
        return true;
      }
      else
      {
        rInsn.Length()++;
        rInsn.SetOpcode(X86_Opcode_Psllw);
        if (Operand__Nq_Ib(rBinStrm, Offset, rInsn, Mode) == false)
        {
          return false;
        }
        return true;
      }
    case 0x7:
      return false;
    default:
      return false;
    }
}

/** group:
 * opcode: 00
 * invalid
 *
 * opcode: 01
 * invalid
 *
 * opcode: 02
 * sub_opcodes: [{'mnemonic': 'psrld', 'operand': ['Nq', 'Ib']}, {'mnemonic': 'psrld', 'operand': ['Ux', 'Ib'], 'prefix': 102}]
 *
 * opcode: 03
 * invalid
 *
 * opcode: 04
 * sub_opcodes: [{'mnemonic': 'psrad', 'operand': ['Nq', 'Ib']}, {'mnemonic': 'psrad', 'operand': ['Ux', 'Ib'], 'prefix': 102}]
 *
 * opcode: 05
 * invalid
 *
 * opcode: 06
 * sub_opcodes: [{'mnemonic': 'pslld', 'operand': ['Nq', 'Ib']}, {'mnemonic': 'pslld', 'operand': ['Ux', 'Ib'], 'prefix': 102}]
 *
 * opcode: 07
 * invalid
 *
**/
bool X86Architecture::Table_2_72(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    u8 ModRmByte;
    if (!rBinStrm.Read(Offset, ModRmByte))
      return false;

    x86::ModRM ModRm(ModRmByte);
    switch (ModRm.Reg())
    {
    case 0x0:
      return false;
    case 0x1:
      return false;
    case 0x2:
      if ((rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
      {
        rInsn.Length()++;
        rInsn.SetOpcode(X86_Opcode_Psrld);
        if (Operand__Ux_Ib(rBinStrm, Offset, rInsn, Mode) == false)
        {
          return false;
        }
        return true;
      }
      else
      {
        rInsn.Length()++;
        rInsn.SetOpcode(X86_Opcode_Psrld);
        if (Operand__Nq_Ib(rBinStrm, Offset, rInsn, Mode) == false)
        {
          return false;
        }
        return true;
      }
    case 0x3:
      return false;
    case 0x4:
      if ((rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
      {
        rInsn.Length()++;
        rInsn.SetOpcode(X86_Opcode_Psrad);
        if (Operand__Ux_Ib(rBinStrm, Offset, rInsn, Mode) == false)
        {
          return false;
        }
        return true;
      }
      else
      {
        rInsn.Length()++;
        rInsn.SetOpcode(X86_Opcode_Psrad);
        if (Operand__Nq_Ib(rBinStrm, Offset, rInsn, Mode) == false)
        {
          return false;
        }
        return true;
      }
    case 0x5:
      return false;
    case 0x6:
      if ((rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
      {
        rInsn.Length()++;
        rInsn.SetOpcode(X86_Opcode_Pslld);
        if (Operand__Ux_Ib(rBinStrm, Offset, rInsn, Mode) == false)
        {
          return false;
        }
        return true;
      }
      else
      {
        rInsn.Length()++;
        rInsn.SetOpcode(X86_Opcode_Pslld);
        if (Operand__Nq_Ib(rBinStrm, Offset, rInsn, Mode) == false)
        {
          return false;
        }
        return true;
      }
    case 0x7:
      return false;
    default:
      return false;
    }
}

/** group:
 * opcode: 00
 * invalid
 *
 * opcode: 01
 * invalid
 *
 * opcode: 02
 * sub_opcodes: [{'mnemonic': 'psrlq', 'operand': ['Nq', 'Ib']}, {'mnemonic': 'psrlq', 'operand': ['Ux', 'Ib'], 'prefix': 102}]
 *
 * opcode: 03
 * sub_opcodes: [{'invalid': None}, {'mnemonic': 'psrldq', 'operand': ['Ux', 'Ib'], 'prefix': 102}]
 *
 * opcode: 04
 * invalid
 *
 * opcode: 05
 * invalid
 *
 * opcode: 06
 * sub_opcodes: [{'mnemonic': 'psllq', 'operand': ['Nq', 'Ib']}, {'mnemonic': 'psllq', 'operand': ['Ux', 'Ib'], 'prefix': 102}]
 *
 * opcode: 07
 * sub_opcodes: [{'invalid': None}, {'mnemonic': 'pslldq', 'operand': ['Ux', 'Ib'], 'prefix': 102}]
 *
**/
bool X86Architecture::Table_2_73(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    u8 ModRmByte;
    if (!rBinStrm.Read(Offset, ModRmByte))
      return false;

    x86::ModRM ModRm(ModRmByte);
    switch (ModRm.Reg())
    {
    case 0x0:
      return false;
    case 0x1:
      return false;
    case 0x2:
      if ((rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
      {
        rInsn.Length()++;
        rInsn.SetOpcode(X86_Opcode_Psrlq);
        if (Operand__Ux_Ib(rBinStrm, Offset, rInsn, Mode) == false)
        {
          return false;
        }
        return true;
      }
      else
      {
        rInsn.Length()++;
        rInsn.SetOpcode(X86_Opcode_Psrlq);
        if (Operand__Nq_Ib(rBinStrm, Offset, rInsn, Mode) == false)
        {
          return false;
        }
        return true;
      }
    case 0x3:
      if ((rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
      {
        rInsn.Length()++;
        rInsn.SetOpcode(X86_Opcode_Psrldq);
        if (Operand__Ux_Ib(rBinStrm, Offset, rInsn, Mode) == false)
        {
          return false;
        }
        return true;
      }
      else
      {
        return false; /* INVALID */
      }
    case 0x4:
      return false;
    case 0x5:
      return false;
    case 0x6:
      if ((rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
      {
        rInsn.Length()++;
        rInsn.SetOpcode(X86_Opcode_Psllq);
        if (Operand__Ux_Ib(rBinStrm, Offset, rInsn, Mode) == false)
        {
          return false;
        }
        return true;
      }
      else
      {
        rInsn.Length()++;
        rInsn.SetOpcode(X86_Opcode_Psllq);
        if (Operand__Nq_Ib(rBinStrm, Offset, rInsn, Mode) == false)
        {
          return false;
        }
        return true;
      }
    case 0x7:
      if ((rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
      {
        rInsn.Length()++;
        rInsn.SetOpcode(X86_Opcode_Pslldq);
        if (Operand__Ux_Ib(rBinStrm, Offset, rInsn, Mode) == false)
        {
          return false;
        }
        return true;
      }
      else
      {
        return false; /* INVALID */
      }
    default:
      return false;
    }
}

/** instructions
 * opcode: 74
 *
 * mnemonic: pcmpeqb
 * operand: ['Pq', 'Qq']
 * cpu_model: >= X86_Arch_Mmx
 *
 * mnemonic: pcmpeqb
 * operand: ['Vx', 'Wx']
 * prefix: 66
 * cpu_model: >= X86_Arch_Sse2
 *
**/
bool X86Architecture::Table_2_74(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse2 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pcmpeqb);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Mmx)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pcmpeqb);
      if (Operand__Pq_Qq(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    return false;
}

/** instructions
 * opcode: 75
 *
 * mnemonic: pcmpeqw
 * operand: ['Pq', 'Qq']
 * cpu_model: >= X86_Arch_Mmx
 *
 * mnemonic: pcmpeqw
 * operand: ['Vx', 'Wx']
 * prefix: 66
 * cpu_model: >= X86_Arch_Sse2
 *
**/
bool X86Architecture::Table_2_75(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse2 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pcmpeqw);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Mmx)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pcmpeqw);
      if (Operand__Pq_Qq(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    return false;
}

/** instructions
 * opcode: 76
 *
 * mnemonic: pcmpeqd
 * operand: ['Pq', 'Qq']
 * cpu_model: >= X86_Arch_Mmx
 *
 * mnemonic: pcmpeqd
 * operand: ['Vx', 'Wx']
 * prefix: 66
 * cpu_model: >= X86_Arch_Sse2
 *
**/
bool X86Architecture::Table_2_76(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse2 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pcmpeqd);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Mmx)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pcmpeqd);
      if (Operand__Pq_Qq(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    return false;
}

/** instructions
 * opcode: 77
 *
 * mnemonic: emms
 * cpu_model: >= X86_Arch_Mmx
 *
 * mnemonic: zeroupper
 * cpu_model: >= X86_Arch_Avx
 *
**/
bool X86Architecture::Table_2_77(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Avx)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Zeroupper);
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Mmx)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Emms);
      return true;
    }
    return false;
}

/** instructions
 * opcode: 78
 *
 * mnemonic: mread
 * operand: ['Ey', 'Gy']
 *
 * mnemonic: extrq
 * operand: ['Uo', 'Ib', 'Ib']
 * prefix: 66
 * cpu_model: >= X86_Arch_Sse4a
 *
**/
bool X86Architecture::Table_2_78(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse4a && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Extrq);
      if (Operand__Uo_Ib_Ib(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Mread);
      if (Operand__Ey_Gy(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
}

/** instructions
 * opcode: 79
 *
 * mnemonic: vmwrite
 * operand: ['Gy', 'Ey']
 *
 * mnemonic: extrq
 * operand: ['Vo', 'Uo']
 * prefix: 66
 * cpu_model: >= X86_Arch_Sse4a
 *
**/
bool X86Architecture::Table_2_79(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse4a && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Extrq);
      if (Operand__Vo_Uo(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Vmwrite);
      if (Operand__Gy_Ey(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
}

/** instruction
 * opcode: 7a
 * attr: ['amd']
 * reference: table_sse5a
**/
bool X86Architecture::Table_2_7a(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    u8 Opcode;
    if (!rBinStrm.Read(Offset, Opcode))
      return false;

    rInsn.Length()++;
    if (Opcode + 1 > sizeof(m_Table_sse5a))
      return false;
    return (this->*m_Table_sse5a[Opcode])(rBinStrm, Offset + 1, rInsn, Mode);
}

/** instruction
 * opcode: 7b
 * attr: ['amd']
 * reference: table_sse5a
**/
bool X86Architecture::Table_2_7b(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    u8 Opcode;
    if (!rBinStrm.Read(Offset, Opcode))
      return false;

    rInsn.Length()++;
    if (Opcode + 1 > sizeof(m_Table_sse5a))
      return false;
    return (this->*m_Table_sse5a[Opcode])(rBinStrm, Offset + 1, rInsn, Mode);
}

/** instructions
 * opcode: 7c
 *
 * invalid
 *
 * mnemonic: haddpd
 * operand: ['Vx', 'Wx']
 * prefix: 66
 * cpu_model: >= X86_Arch_Sse3
 *
 * mnemonic: haddps
 * operand: ['Vx', 'Wx']
 * prefix: f2
 * cpu_model: >= X86_Arch_Sse3
 *
**/
bool X86Architecture::Table_2_7c(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse3 && (rInsn.GetPrefix() & X86_Prefix_RepNz) == X86_Prefix_RepNz)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Haddps);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse3 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Haddpd);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else
    {
      return false; /* INVALID */
    }
}

/** instructions
 * opcode: 7d
 *
 * invalid
 *
 * mnemonic: hsubpd
 * operand: ['Vx', 'Wx']
 * prefix: 66
 * cpu_model: >= X86_Arch_Sse3
 *
 * mnemonic: hsubps
 * operand: ['Vx', 'Wx']
 * prefix: f2
 * cpu_model: >= X86_Arch_Sse3
 *
**/
bool X86Architecture::Table_2_7d(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse3 && (rInsn.GetPrefix() & X86_Prefix_RepNz) == X86_Prefix_RepNz)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Hsubps);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse3 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Hsubpd);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else
    {
      return false; /* INVALID */
    }
}

/** instructions
 * opcode: 7e
 *
 * mnemonic: movd
 * operand: ['Ey', 'Pq']
 * cpu_model: >= X86_Arch_Mmx
 *
 * mnemonic: movd
 * operand: ['Ed', 'Vo']
 * semantic: if __code and is_dword_operation:
  op0.val = bit_cast(op1.val, int_type32);
if __code and is_oword_operation:
  op0.val = bit_cast(op1.val, int_type128);

 * attr: ['op_size']
 * cpu_model: >= X86_Arch_Sse2
 *
 * mnemonic: movq
 * operand: ['Vo', 'Woq']
 * attr: ['rep']
 * cpu_model: >= X86_Arch_Sse2
 *
**/
bool X86Architecture::Table_2_7e(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse2 && (rInsn.GetPrefix() & X86_Prefix_Rep))
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Movq);
      if (Operand__Vo_Woq(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse2 && (rInsn.GetPrefix() & X86_Prefix_OpSize))
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Movd);
      if (Operand__Ed_Vo(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: if __code and is_dword_operation:
          op0.val = bit_cast(op1.val, int_type32) */
        if (rInsn.GetOperand(0)->GetBitSize() == 32)
        {
          /* block glb expressions */
          AllExpr.push_back(Expr::MakeAssign(
            rInsn.GetOperand(0),
            Expr::MakeBinOp(OperationExpression::OpBcast, rInsn.GetOperand(1), Expr::MakeBitVector(32, 32))));
        }
        /* semantic: if __code and is_oword_operation:
          op0.val = bit_cast(op1.val, int_type128) */
        if (rInsn.GetOperand(0)->GetBitSize() == 128)
        {
          /* block glb expressions */
          AllExpr.push_back(Expr::MakeAssign(
            rInsn.GetOperand(0),
            Expr::MakeBinOp(OperationExpression::OpBcast, rInsn.GetOperand(1), Expr::MakeBitVector(128, 128))));
        }
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Mmx)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Movd);
      if (Operand__Ey_Pq(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    return false;
}

/** instructions
 * opcode: 7f
 *
 * mnemonic: movq
 * operand: ['Qq', 'Pq']
 * cpu_model: >= X86_Arch_Mmx
 *
 * mnemonic: movdqa
 * operand: ['Wx', 'Vx']
 * attr: ['op_size']
 * cpu_model: >= X86_Arch_Sse2
 *
 * mnemonic: movdqu
 * operand: ['Wx', 'Vx']
 * attr: ['rep']
 * cpu_model: >= X86_Arch_Sse2
 *
**/
bool X86Architecture::Table_2_7f(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse2 && (rInsn.GetPrefix() & X86_Prefix_Rep))
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Movdqu);
      if (Operand__Wx_Vx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse2 && (rInsn.GetPrefix() & X86_Prefix_OpSize))
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Movdqa);
      if (Operand__Wx_Vx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Mmx)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Movq);
      if (Operand__Qq_Pq(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    return false;
}

/** instruction
 * mnemonic: jo
 * semantic: if __expr and of.id == int1(1): program.id = op0.val;

 * constraint: df64
 * cpu_model: >= X86_Arch_80386
 * operand: ['Jz']
 * test_flags: ['of']
 * opcode: 80
 * operation_type: ['jmp', 'cond']
**/
bool X86Architecture::Table_2_80(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_80386)
    {
      if (!(rInsn.Prefix() & X86_Prefix_OpSize))
      {
        rInsn.Prefix() |= X86_Prefix_REX_w; /* d64/df64 constraint */
      }
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Jo);
      rInsn.SubType() |= Instruction::JumpType | Instruction::ConditionalType;
      if (Operand__Jz(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        rInsn.SetTestedFlags(X86_FlOf);
        /* semantic: if __expr and of.id == int1(1): program.id = op0.val */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeId(X86_FlOf, &m_CpuInfo),
          Expr::MakeBitVector(1, 0x1),
          Expr::MakeAssign(
            Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::ProgramPointerRegister, rInsn.GetMode()), &m_CpuInfo),
            rInsn.GetOperand(0)), nullptr)
        );
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    else
      return false;
}

/** instruction
 * mnemonic: jno
 * semantic: if __expr and of.id == int1(0): program.id = op0.val;

 * constraint: df64
 * cpu_model: >= X86_Arch_80386
 * operand: ['Jz']
 * test_flags: ['of']
 * opcode: 81
 * operation_type: ['jmp', 'cond']
**/
bool X86Architecture::Table_2_81(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_80386)
    {
      if (!(rInsn.Prefix() & X86_Prefix_OpSize))
      {
        rInsn.Prefix() |= X86_Prefix_REX_w; /* d64/df64 constraint */
      }
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Jno);
      rInsn.SubType() |= Instruction::JumpType | Instruction::ConditionalType;
      if (Operand__Jz(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        rInsn.SetTestedFlags(X86_FlOf);
        /* semantic: if __expr and of.id == int1(0): program.id = op0.val */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeId(X86_FlOf, &m_CpuInfo),
          Expr::MakeBitVector(1, 0x0),
          Expr::MakeAssign(
            Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::ProgramPointerRegister, rInsn.GetMode()), &m_CpuInfo),
            rInsn.GetOperand(0)), nullptr)
        );
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    else
      return false;
}

/** instruction
 * mnemonic: jb
 * semantic: if __expr and cf.id == int1(1): program.id = op0.val;

 * constraint: df64
 * cpu_model: >= X86_Arch_80386
 * operand: ['Jz']
 * test_flags: ['cf']
 * opcode: 82
 * operation_type: ['jmp', 'cond']
**/
bool X86Architecture::Table_2_82(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_80386)
    {
      if (!(rInsn.Prefix() & X86_Prefix_OpSize))
      {
        rInsn.Prefix() |= X86_Prefix_REX_w; /* d64/df64 constraint */
      }
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Jb);
      rInsn.SubType() |= Instruction::JumpType | Instruction::ConditionalType;
      if (Operand__Jz(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        rInsn.SetTestedFlags(X86_FlCf);
        /* semantic: if __expr and cf.id == int1(1): program.id = op0.val */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeId(X86_FlCf, &m_CpuInfo),
          Expr::MakeBitVector(1, 0x1),
          Expr::MakeAssign(
            Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::ProgramPointerRegister, rInsn.GetMode()), &m_CpuInfo),
            rInsn.GetOperand(0)), nullptr)
        );
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    else
      return false;
}

/** instruction
 * mnemonic: jnb
 * semantic: if __expr and cf.id == int1(0): program.id = op0.val;

 * constraint: df64
 * cpu_model: >= X86_Arch_80386
 * operand: ['Jz']
 * test_flags: ['cf']
 * opcode: 83
 * operation_type: ['jmp', 'cond']
**/
bool X86Architecture::Table_2_83(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_80386)
    {
      if (!(rInsn.Prefix() & X86_Prefix_OpSize))
      {
        rInsn.Prefix() |= X86_Prefix_REX_w; /* d64/df64 constraint */
      }
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Jnb);
      rInsn.SubType() |= Instruction::JumpType | Instruction::ConditionalType;
      if (Operand__Jz(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        rInsn.SetTestedFlags(X86_FlCf);
        /* semantic: if __expr and cf.id == int1(0): program.id = op0.val */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeId(X86_FlCf, &m_CpuInfo),
          Expr::MakeBitVector(1, 0x0),
          Expr::MakeAssign(
            Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::ProgramPointerRegister, rInsn.GetMode()), &m_CpuInfo),
            rInsn.GetOperand(0)), nullptr)
        );
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    else
      return false;
}

/** instruction
 * mnemonic: jz
 * semantic: if __expr and zf.id == int1(1): program.id = op0.val;

 * constraint: df64
 * cpu_model: >= X86_Arch_80386
 * operand: ['Jz']
 * test_flags: ['zf']
 * opcode: 84
 * operation_type: ['jmp', 'cond']
**/
bool X86Architecture::Table_2_84(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_80386)
    {
      if (!(rInsn.Prefix() & X86_Prefix_OpSize))
      {
        rInsn.Prefix() |= X86_Prefix_REX_w; /* d64/df64 constraint */
      }
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Jz);
      rInsn.SubType() |= Instruction::JumpType | Instruction::ConditionalType;
      if (Operand__Jz(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        rInsn.SetTestedFlags(X86_FlZf);
        /* semantic: if __expr and zf.id == int1(1): program.id = op0.val */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeId(X86_FlZf, &m_CpuInfo),
          Expr::MakeBitVector(1, 0x1),
          Expr::MakeAssign(
            Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::ProgramPointerRegister, rInsn.GetMode()), &m_CpuInfo),
            rInsn.GetOperand(0)), nullptr)
        );
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    else
      return false;
}

/** instruction
 * mnemonic: jnz
 * semantic: if __expr and zf.id == int1(0): program.id = op0.val;

 * constraint: df64
 * cpu_model: >= X86_Arch_80386
 * operand: ['Jz']
 * test_flags: ['zf']
 * opcode: 85
 * operation_type: ['jmp', 'cond']
**/
bool X86Architecture::Table_2_85(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_80386)
    {
      if (!(rInsn.Prefix() & X86_Prefix_OpSize))
      {
        rInsn.Prefix() |= X86_Prefix_REX_w; /* d64/df64 constraint */
      }
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Jnz);
      rInsn.SubType() |= Instruction::JumpType | Instruction::ConditionalType;
      if (Operand__Jz(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        rInsn.SetTestedFlags(X86_FlZf);
        /* semantic: if __expr and zf.id == int1(0): program.id = op0.val */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeId(X86_FlZf, &m_CpuInfo),
          Expr::MakeBitVector(1, 0x0),
          Expr::MakeAssign(
            Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::ProgramPointerRegister, rInsn.GetMode()), &m_CpuInfo),
            rInsn.GetOperand(0)), nullptr)
        );
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    else
      return false;
}

/** instruction
 * mnemonic: jbe
 * semantic: if __expr and (cf.id | zf.id) != int1(0): program.id = op0.val;

 * constraint: df64
 * cpu_model: >= X86_Arch_80386
 * operand: ['Jz']
 * test_flags: ['zf', 'cf']
 * opcode: 86
 * operation_type: ['jmp', 'cond']
**/
bool X86Architecture::Table_2_86(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_80386)
    {
      if (!(rInsn.Prefix() & X86_Prefix_OpSize))
      {
        rInsn.Prefix() |= X86_Prefix_REX_w; /* d64/df64 constraint */
      }
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Jbe);
      rInsn.SubType() |= Instruction::JumpType | Instruction::ConditionalType;
      if (Operand__Jz(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        rInsn.SetTestedFlags(X86_FlZf | X86_FlCf);
        /* semantic: if __expr and (cf.id | zf.id) != int1(0): program.id = op0.val */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondNe,
          Expr::MakeBinOp(
            OperationExpression::OpOr,
            Expr::MakeId(X86_FlCf, &m_CpuInfo),
            Expr::MakeId(X86_FlZf, &m_CpuInfo)),
          Expr::MakeBitVector(1, 0x0),
          Expr::MakeAssign(
            Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::ProgramPointerRegister, rInsn.GetMode()), &m_CpuInfo),
            rInsn.GetOperand(0)), nullptr)
        );
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    else
      return false;
}

/** instruction
 * mnemonic: jnbe
 * semantic: if __expr and (cf.id | zf.id) == int1(0): program.id = op0.val;

 * constraint: df64
 * cpu_model: >= X86_Arch_80386
 * operand: ['Jz']
 * test_flags: ['zf', 'cf']
 * opcode: 87
 * operation_type: ['jmp', 'cond']
**/
bool X86Architecture::Table_2_87(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_80386)
    {
      if (!(rInsn.Prefix() & X86_Prefix_OpSize))
      {
        rInsn.Prefix() |= X86_Prefix_REX_w; /* d64/df64 constraint */
      }
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Jnbe);
      rInsn.SubType() |= Instruction::JumpType | Instruction::ConditionalType;
      if (Operand__Jz(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        rInsn.SetTestedFlags(X86_FlZf | X86_FlCf);
        /* semantic: if __expr and (cf.id | zf.id) == int1(0): program.id = op0.val */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeBinOp(
            OperationExpression::OpOr,
            Expr::MakeId(X86_FlCf, &m_CpuInfo),
            Expr::MakeId(X86_FlZf, &m_CpuInfo)),
          Expr::MakeBitVector(1, 0x0),
          Expr::MakeAssign(
            Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::ProgramPointerRegister, rInsn.GetMode()), &m_CpuInfo),
            rInsn.GetOperand(0)), nullptr)
        );
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    else
      return false;
}

/** instruction
 * mnemonic: js
 * semantic: if __expr and sf.id == int1(1): program.id = op0.val;

 * constraint: df64
 * cpu_model: >= X86_Arch_80386
 * operand: ['Jz']
 * test_flags: ['sf']
 * opcode: 88
 * operation_type: ['jmp', 'cond']
**/
bool X86Architecture::Table_2_88(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_80386)
    {
      if (!(rInsn.Prefix() & X86_Prefix_OpSize))
      {
        rInsn.Prefix() |= X86_Prefix_REX_w; /* d64/df64 constraint */
      }
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Js);
      rInsn.SubType() |= Instruction::JumpType | Instruction::ConditionalType;
      if (Operand__Jz(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        rInsn.SetTestedFlags(X86_FlSf);
        /* semantic: if __expr and sf.id == int1(1): program.id = op0.val */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeId(X86_FlSf, &m_CpuInfo),
          Expr::MakeBitVector(1, 0x1),
          Expr::MakeAssign(
            Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::ProgramPointerRegister, rInsn.GetMode()), &m_CpuInfo),
            rInsn.GetOperand(0)), nullptr)
        );
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    else
      return false;
}

/** instruction
 * mnemonic: jns
 * semantic: if __expr and sf.id == int1(0): program.id = op0.val;

 * constraint: df64
 * cpu_model: >= X86_Arch_80386
 * operand: ['Jz']
 * test_flags: ['sf']
 * opcode: 89
 * operation_type: ['jmp', 'cond']
**/
bool X86Architecture::Table_2_89(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_80386)
    {
      if (!(rInsn.Prefix() & X86_Prefix_OpSize))
      {
        rInsn.Prefix() |= X86_Prefix_REX_w; /* d64/df64 constraint */
      }
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Jns);
      rInsn.SubType() |= Instruction::JumpType | Instruction::ConditionalType;
      if (Operand__Jz(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        rInsn.SetTestedFlags(X86_FlSf);
        /* semantic: if __expr and sf.id == int1(0): program.id = op0.val */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeId(X86_FlSf, &m_CpuInfo),
          Expr::MakeBitVector(1, 0x0),
          Expr::MakeAssign(
            Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::ProgramPointerRegister, rInsn.GetMode()), &m_CpuInfo),
            rInsn.GetOperand(0)), nullptr)
        );
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    else
      return false;
}

/** instruction
 * mnemonic: jp
 * semantic: if __expr and pf.id == int1(1): program.id = op0.val;

 * constraint: df64
 * cpu_model: >= X86_Arch_80386
 * operand: ['Jz']
 * test_flags: ['pf']
 * opcode: 8a
 * operation_type: ['jmp', 'cond']
**/
bool X86Architecture::Table_2_8a(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_80386)
    {
      if (!(rInsn.Prefix() & X86_Prefix_OpSize))
      {
        rInsn.Prefix() |= X86_Prefix_REX_w; /* d64/df64 constraint */
      }
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Jp);
      rInsn.SubType() |= Instruction::JumpType | Instruction::ConditionalType;
      if (Operand__Jz(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        rInsn.SetTestedFlags(X86_FlPf);
        /* semantic: if __expr and pf.id == int1(1): program.id = op0.val */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeId(X86_FlPf, &m_CpuInfo),
          Expr::MakeBitVector(1, 0x1),
          Expr::MakeAssign(
            Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::ProgramPointerRegister, rInsn.GetMode()), &m_CpuInfo),
            rInsn.GetOperand(0)), nullptr)
        );
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    else
      return false;
}

/** instruction
 * mnemonic: jnp
 * semantic: if __expr and pf.id == int1(0): program.id = op0.val;

 * constraint: df64
 * cpu_model: >= X86_Arch_80386
 * operand: ['Jz']
 * test_flags: ['pf']
 * opcode: 8b
 * operation_type: ['jmp', 'cond']
**/
bool X86Architecture::Table_2_8b(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_80386)
    {
      if (!(rInsn.Prefix() & X86_Prefix_OpSize))
      {
        rInsn.Prefix() |= X86_Prefix_REX_w; /* d64/df64 constraint */
      }
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Jnp);
      rInsn.SubType() |= Instruction::JumpType | Instruction::ConditionalType;
      if (Operand__Jz(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        rInsn.SetTestedFlags(X86_FlPf);
        /* semantic: if __expr and pf.id == int1(0): program.id = op0.val */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeId(X86_FlPf, &m_CpuInfo),
          Expr::MakeBitVector(1, 0x0),
          Expr::MakeAssign(
            Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::ProgramPointerRegister, rInsn.GetMode()), &m_CpuInfo),
            rInsn.GetOperand(0)), nullptr)
        );
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    else
      return false;
}

/** instruction
 * mnemonic: jl
 * semantic: if __expr and (sf.id ^ of.id) != int1(0): program.id = op0.val;

 * constraint: df64
 * cpu_model: >= X86_Arch_80386
 * operand: ['Jz']
 * test_flags: ['of', 'sf']
 * opcode: 8c
 * operation_type: ['jmp', 'cond']
**/
bool X86Architecture::Table_2_8c(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_80386)
    {
      if (!(rInsn.Prefix() & X86_Prefix_OpSize))
      {
        rInsn.Prefix() |= X86_Prefix_REX_w; /* d64/df64 constraint */
      }
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Jl);
      rInsn.SubType() |= Instruction::JumpType | Instruction::ConditionalType;
      if (Operand__Jz(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        rInsn.SetTestedFlags(X86_FlOf | X86_FlSf);
        /* semantic: if __expr and (sf.id ^ of.id) != int1(0): program.id = op0.val */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondNe,
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeId(X86_FlSf, &m_CpuInfo),
            Expr::MakeId(X86_FlOf, &m_CpuInfo)),
          Expr::MakeBitVector(1, 0x0),
          Expr::MakeAssign(
            Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::ProgramPointerRegister, rInsn.GetMode()), &m_CpuInfo),
            rInsn.GetOperand(0)), nullptr)
        );
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    else
      return false;
}

/** instruction
 * mnemonic: jnl
 * semantic: if __expr and (sf.id ^ of.id) == int1(0): program.id = op0.val;

 * constraint: df64
 * cpu_model: >= X86_Arch_80386
 * operand: ['Jz']
 * test_flags: ['of', 'sf']
 * opcode: 8d
 * operation_type: ['jmp', 'cond']
**/
bool X86Architecture::Table_2_8d(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_80386)
    {
      if (!(rInsn.Prefix() & X86_Prefix_OpSize))
      {
        rInsn.Prefix() |= X86_Prefix_REX_w; /* d64/df64 constraint */
      }
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Jnl);
      rInsn.SubType() |= Instruction::JumpType | Instruction::ConditionalType;
      if (Operand__Jz(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        rInsn.SetTestedFlags(X86_FlOf | X86_FlSf);
        /* semantic: if __expr and (sf.id ^ of.id) == int1(0): program.id = op0.val */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeId(X86_FlSf, &m_CpuInfo),
            Expr::MakeId(X86_FlOf, &m_CpuInfo)),
          Expr::MakeBitVector(1, 0x0),
          Expr::MakeAssign(
            Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::ProgramPointerRegister, rInsn.GetMode()), &m_CpuInfo),
            rInsn.GetOperand(0)), nullptr)
        );
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    else
      return false;
}

/** instruction
 * mnemonic: jle
 * semantic: if __expr and ((sf.id ^ of.id) | zf.id) != int1(0): program.id = op0.val;

 * constraint: df64
 * cpu_model: >= X86_Arch_80386
 * operand: ['Jz']
 * test_flags: ['of', 'sf', 'zf']
 * opcode: 8e
 * operation_type: ['jmp', 'cond']
**/
bool X86Architecture::Table_2_8e(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_80386)
    {
      if (!(rInsn.Prefix() & X86_Prefix_OpSize))
      {
        rInsn.Prefix() |= X86_Prefix_REX_w; /* d64/df64 constraint */
      }
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Jle);
      rInsn.SubType() |= Instruction::JumpType | Instruction::ConditionalType;
      if (Operand__Jz(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        rInsn.SetTestedFlags(X86_FlOf | X86_FlSf | X86_FlZf);
        /* semantic: if __expr and ((sf.id ^ of.id) | zf.id) != int1(0): program.id = op0.val */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondNe,
          Expr::MakeBinOp(
            OperationExpression::OpOr,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeId(X86_FlSf, &m_CpuInfo),
              Expr::MakeId(X86_FlOf, &m_CpuInfo)),
            Expr::MakeId(X86_FlZf, &m_CpuInfo)),
          Expr::MakeBitVector(1, 0x0),
          Expr::MakeAssign(
            Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::ProgramPointerRegister, rInsn.GetMode()), &m_CpuInfo),
            rInsn.GetOperand(0)), nullptr)
        );
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    else
      return false;
}

/** instruction
 * mnemonic: jnle
 * semantic: if __expr and ((sf.id ^ of.id) | zf.id) == int1(0): program.id = op0.val;

 * constraint: df64
 * cpu_model: >= X86_Arch_80386
 * operand: ['Jz']
 * test_flags: ['of', 'sf', 'zf']
 * opcode: 8f
 * operation_type: ['jmp', 'cond']
**/
bool X86Architecture::Table_2_8f(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_80386)
    {
      if (!(rInsn.Prefix() & X86_Prefix_OpSize))
      {
        rInsn.Prefix() |= X86_Prefix_REX_w; /* d64/df64 constraint */
      }
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Jnle);
      rInsn.SubType() |= Instruction::JumpType | Instruction::ConditionalType;
      if (Operand__Jz(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        rInsn.SetTestedFlags(X86_FlOf | X86_FlSf | X86_FlZf);
        /* semantic: if __expr and ((sf.id ^ of.id) | zf.id) == int1(0): program.id = op0.val */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeBinOp(
            OperationExpression::OpOr,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeId(X86_FlSf, &m_CpuInfo),
              Expr::MakeId(X86_FlOf, &m_CpuInfo)),
            Expr::MakeId(X86_FlZf, &m_CpuInfo)),
          Expr::MakeBitVector(1, 0x0),
          Expr::MakeAssign(
            Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::ProgramPointerRegister, rInsn.GetMode()), &m_CpuInfo),
            rInsn.GetOperand(0)), nullptr)
        );
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    else
      return false;
}

/** instruction
 * mnemonic: seto
 * test_flags: ['of']
 * semantic: if __expr and of.id == int1(1): op0.val = int8(1)
else: op0.val = int8(0);

 * operand: ['Eb']
 * opcode: 90
 * cpu_model: >= X86_Arch_80386
**/
bool X86Architecture::Table_2_90(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_80386)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Seto);
      if (Operand__Eb(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        rInsn.SetTestedFlags(X86_FlOf);
        /* semantic: if __expr and of.id == int1(1): op0.val = int8(1)
        else: op0.val = int8(0) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeId(X86_FlOf, &m_CpuInfo),
          Expr::MakeBitVector(1, 0x1),
          Expr::MakeAssign(
            rInsn.GetOperand(0),
            Expr::MakeBitVector(8, 0x1)),
          Expr::MakeAssign(
            rInsn.GetOperand(0),
            Expr::MakeBitVector(8, 0x0))));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    else
      return false;
}

/** instruction
 * mnemonic: setno
 * test_flags: ['of']
 * semantic: if __expr and of.id == int1(0): op0.val = int8(1)
else: op0.val = int8(0);

 * operand: ['Eb']
 * opcode: 91
 * cpu_model: >= X86_Arch_80386
**/
bool X86Architecture::Table_2_91(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_80386)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Setno);
      if (Operand__Eb(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        rInsn.SetTestedFlags(X86_FlOf);
        /* semantic: if __expr and of.id == int1(0): op0.val = int8(1)
        else: op0.val = int8(0) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeId(X86_FlOf, &m_CpuInfo),
          Expr::MakeBitVector(1, 0x0),
          Expr::MakeAssign(
            rInsn.GetOperand(0),
            Expr::MakeBitVector(8, 0x1)),
          Expr::MakeAssign(
            rInsn.GetOperand(0),
            Expr::MakeBitVector(8, 0x0))));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    else
      return false;
}

/** instruction
 * mnemonic: setb
 * test_flags: ['cf']
 * semantic: if __expr and cf.id == int1(1): op0.val = int8(1)
else: op0.val = int8(0);

 * operand: ['Eb']
 * opcode: 92
 * cpu_model: >= X86_Arch_80386
**/
bool X86Architecture::Table_2_92(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_80386)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Setb);
      if (Operand__Eb(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        rInsn.SetTestedFlags(X86_FlCf);
        /* semantic: if __expr and cf.id == int1(1): op0.val = int8(1)
        else: op0.val = int8(0) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeId(X86_FlCf, &m_CpuInfo),
          Expr::MakeBitVector(1, 0x1),
          Expr::MakeAssign(
            rInsn.GetOperand(0),
            Expr::MakeBitVector(8, 0x1)),
          Expr::MakeAssign(
            rInsn.GetOperand(0),
            Expr::MakeBitVector(8, 0x0))));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    else
      return false;
}

/** instruction
 * mnemonic: setnb
 * test_flags: ['cf']
 * semantic: if __expr and cf.id == int1(0): op0.val = int8(1)
else: op0.val = int8(0);

 * operand: ['Eb']
 * opcode: 93
 * cpu_model: >= X86_Arch_80386
**/
bool X86Architecture::Table_2_93(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_80386)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Setnb);
      if (Operand__Eb(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        rInsn.SetTestedFlags(X86_FlCf);
        /* semantic: if __expr and cf.id == int1(0): op0.val = int8(1)
        else: op0.val = int8(0) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeId(X86_FlCf, &m_CpuInfo),
          Expr::MakeBitVector(1, 0x0),
          Expr::MakeAssign(
            rInsn.GetOperand(0),
            Expr::MakeBitVector(8, 0x1)),
          Expr::MakeAssign(
            rInsn.GetOperand(0),
            Expr::MakeBitVector(8, 0x0))));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    else
      return false;
}

/** instruction
 * mnemonic: setz
 * test_flags: ['zf']
 * semantic: if __expr and zf.id == int1(1): op0.val = int8(1)
else: op0.val = int8(0);

 * operand: ['Eb']
 * opcode: 94
 * cpu_model: >= X86_Arch_80386
**/
bool X86Architecture::Table_2_94(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_80386)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Setz);
      if (Operand__Eb(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        rInsn.SetTestedFlags(X86_FlZf);
        /* semantic: if __expr and zf.id == int1(1): op0.val = int8(1)
        else: op0.val = int8(0) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeId(X86_FlZf, &m_CpuInfo),
          Expr::MakeBitVector(1, 0x1),
          Expr::MakeAssign(
            rInsn.GetOperand(0),
            Expr::MakeBitVector(8, 0x1)),
          Expr::MakeAssign(
            rInsn.GetOperand(0),
            Expr::MakeBitVector(8, 0x0))));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    else
      return false;
}

/** instruction
 * mnemonic: setnz
 * test_flags: ['zf']
 * semantic: if __expr and zf.id == int1(0): op0.val = int8(1)
else: op0.val = int8(0);

 * operand: ['Eb']
 * opcode: 95
 * cpu_model: >= X86_Arch_80386
**/
bool X86Architecture::Table_2_95(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_80386)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Setnz);
      if (Operand__Eb(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        rInsn.SetTestedFlags(X86_FlZf);
        /* semantic: if __expr and zf.id == int1(0): op0.val = int8(1)
        else: op0.val = int8(0) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeId(X86_FlZf, &m_CpuInfo),
          Expr::MakeBitVector(1, 0x0),
          Expr::MakeAssign(
            rInsn.GetOperand(0),
            Expr::MakeBitVector(8, 0x1)),
          Expr::MakeAssign(
            rInsn.GetOperand(0),
            Expr::MakeBitVector(8, 0x0))));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    else
      return false;
}

/** instruction
 * mnemonic: setbe
 * test_flags: ['zf', 'cf']
 * semantic: if __expr and (cf.id | zf.id) != int1(0): op0.val = int8(1)
else: op0.val = int8(0);

 * operand: ['Eb']
 * opcode: 96
 * cpu_model: >= X86_Arch_80386
**/
bool X86Architecture::Table_2_96(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_80386)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Setbe);
      if (Operand__Eb(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        rInsn.SetTestedFlags(X86_FlZf | X86_FlCf);
        /* semantic: if __expr and (cf.id | zf.id) != int1(0): op0.val = int8(1)
        else: op0.val = int8(0) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondNe,
          Expr::MakeBinOp(
            OperationExpression::OpOr,
            Expr::MakeId(X86_FlCf, &m_CpuInfo),
            Expr::MakeId(X86_FlZf, &m_CpuInfo)),
          Expr::MakeBitVector(1, 0x0),
          Expr::MakeAssign(
            rInsn.GetOperand(0),
            Expr::MakeBitVector(8, 0x1)),
          Expr::MakeAssign(
            rInsn.GetOperand(0),
            Expr::MakeBitVector(8, 0x0))));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    else
      return false;
}

/** instruction
 * mnemonic: setnbe
 * test_flags: ['zf', 'cf']
 * semantic: if __expr and (cf.id | zf.id) == int1(0): op0.val = int8(1)
else: op0.val = int8(0);

 * operand: ['Eb']
 * opcode: 97
 * cpu_model: >= X86_Arch_80386
**/
bool X86Architecture::Table_2_97(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_80386)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Setnbe);
      if (Operand__Eb(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        rInsn.SetTestedFlags(X86_FlZf | X86_FlCf);
        /* semantic: if __expr and (cf.id | zf.id) == int1(0): op0.val = int8(1)
        else: op0.val = int8(0) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeBinOp(
            OperationExpression::OpOr,
            Expr::MakeId(X86_FlCf, &m_CpuInfo),
            Expr::MakeId(X86_FlZf, &m_CpuInfo)),
          Expr::MakeBitVector(1, 0x0),
          Expr::MakeAssign(
            rInsn.GetOperand(0),
            Expr::MakeBitVector(8, 0x1)),
          Expr::MakeAssign(
            rInsn.GetOperand(0),
            Expr::MakeBitVector(8, 0x0))));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    else
      return false;
}

/** instruction
 * mnemonic: sets
 * test_flags: ['sf']
 * semantic: if __expr and sf.id == int1(1): op0.val = int8(1)
else: op0.val = int8(0);

 * operand: ['Eb']
 * opcode: 98
 * cpu_model: >= X86_Arch_80386
**/
bool X86Architecture::Table_2_98(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_80386)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Sets);
      if (Operand__Eb(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        rInsn.SetTestedFlags(X86_FlSf);
        /* semantic: if __expr and sf.id == int1(1): op0.val = int8(1)
        else: op0.val = int8(0) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeId(X86_FlSf, &m_CpuInfo),
          Expr::MakeBitVector(1, 0x1),
          Expr::MakeAssign(
            rInsn.GetOperand(0),
            Expr::MakeBitVector(8, 0x1)),
          Expr::MakeAssign(
            rInsn.GetOperand(0),
            Expr::MakeBitVector(8, 0x0))));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    else
      return false;
}

/** instruction
 * mnemonic: setns
 * test_flags: ['sf']
 * semantic: if __expr and sf.id == int1(0): op0.val = int8(1)
else: op0.val = int8(0);

 * operand: ['Eb']
 * opcode: 99
 * cpu_model: >= X86_Arch_80386
**/
bool X86Architecture::Table_2_99(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_80386)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Setns);
      if (Operand__Eb(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        rInsn.SetTestedFlags(X86_FlSf);
        /* semantic: if __expr and sf.id == int1(0): op0.val = int8(1)
        else: op0.val = int8(0) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeId(X86_FlSf, &m_CpuInfo),
          Expr::MakeBitVector(1, 0x0),
          Expr::MakeAssign(
            rInsn.GetOperand(0),
            Expr::MakeBitVector(8, 0x1)),
          Expr::MakeAssign(
            rInsn.GetOperand(0),
            Expr::MakeBitVector(8, 0x0))));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    else
      return false;
}

/** instruction
 * mnemonic: setp
 * test_flags: ['pf']
 * semantic: if __expr and pf.id == int1(1): op0.val = int8(1)
else: op0.val = int8(0);

 * operand: ['Eb']
 * opcode: 9a
 * cpu_model: >= X86_Arch_80386
**/
bool X86Architecture::Table_2_9a(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_80386)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Setp);
      if (Operand__Eb(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        rInsn.SetTestedFlags(X86_FlPf);
        /* semantic: if __expr and pf.id == int1(1): op0.val = int8(1)
        else: op0.val = int8(0) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeId(X86_FlPf, &m_CpuInfo),
          Expr::MakeBitVector(1, 0x1),
          Expr::MakeAssign(
            rInsn.GetOperand(0),
            Expr::MakeBitVector(8, 0x1)),
          Expr::MakeAssign(
            rInsn.GetOperand(0),
            Expr::MakeBitVector(8, 0x0))));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    else
      return false;
}

/** instruction
 * mnemonic: setnp
 * test_flags: ['pf']
 * semantic: if __expr and pf.id == int1(0): op0.val = int8(1)
else: op0.val = int8(0);

 * operand: ['Eb']
 * opcode: 9b
 * cpu_model: >= X86_Arch_80386
**/
bool X86Architecture::Table_2_9b(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_80386)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Setnp);
      if (Operand__Eb(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        rInsn.SetTestedFlags(X86_FlPf);
        /* semantic: if __expr and pf.id == int1(0): op0.val = int8(1)
        else: op0.val = int8(0) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeId(X86_FlPf, &m_CpuInfo),
          Expr::MakeBitVector(1, 0x0),
          Expr::MakeAssign(
            rInsn.GetOperand(0),
            Expr::MakeBitVector(8, 0x1)),
          Expr::MakeAssign(
            rInsn.GetOperand(0),
            Expr::MakeBitVector(8, 0x0))));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    else
      return false;
}

/** instruction
 * mnemonic: setl
 * test_flags: ['of', 'sf']
 * semantic: if __expr and (sf.id ^ of.id) != int1(0): op0.val = int8(1)
else: op0.val = int8(0);

 * operand: ['Eb']
 * opcode: 9c
 * cpu_model: >= X86_Arch_80386
**/
bool X86Architecture::Table_2_9c(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_80386)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Setl);
      if (Operand__Eb(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        rInsn.SetTestedFlags(X86_FlOf | X86_FlSf);
        /* semantic: if __expr and (sf.id ^ of.id) != int1(0): op0.val = int8(1)
        else: op0.val = int8(0) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondNe,
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeId(X86_FlSf, &m_CpuInfo),
            Expr::MakeId(X86_FlOf, &m_CpuInfo)),
          Expr::MakeBitVector(1, 0x0),
          Expr::MakeAssign(
            rInsn.GetOperand(0),
            Expr::MakeBitVector(8, 0x1)),
          Expr::MakeAssign(
            rInsn.GetOperand(0),
            Expr::MakeBitVector(8, 0x0))));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    else
      return false;
}

/** instruction
 * mnemonic: setnl
 * test_flags: ['of', 'sf']
 * semantic: if __expr and (sf.id ^ of.id) == int1(0): op0.val = int8(1)
else: op0.val = int8(0);

 * operand: ['Eb']
 * opcode: 9d
 * cpu_model: >= X86_Arch_80386
**/
bool X86Architecture::Table_2_9d(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_80386)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Setnl);
      if (Operand__Eb(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        rInsn.SetTestedFlags(X86_FlOf | X86_FlSf);
        /* semantic: if __expr and (sf.id ^ of.id) == int1(0): op0.val = int8(1)
        else: op0.val = int8(0) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeId(X86_FlSf, &m_CpuInfo),
            Expr::MakeId(X86_FlOf, &m_CpuInfo)),
          Expr::MakeBitVector(1, 0x0),
          Expr::MakeAssign(
            rInsn.GetOperand(0),
            Expr::MakeBitVector(8, 0x1)),
          Expr::MakeAssign(
            rInsn.GetOperand(0),
            Expr::MakeBitVector(8, 0x0))));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    else
      return false;
}

/** instruction
 * mnemonic: setle
 * test_flags: ['of', 'sf', 'zf']
 * semantic: if __expr and ((sf.id ^ of.id) | zf.id) != int1(0): op0.val = int8(1)
else: op0.val = int8(0);

 * operand: ['Eb']
 * opcode: 9e
 * cpu_model: >= X86_Arch_80386
**/
bool X86Architecture::Table_2_9e(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_80386)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Setle);
      if (Operand__Eb(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        rInsn.SetTestedFlags(X86_FlOf | X86_FlSf | X86_FlZf);
        /* semantic: if __expr and ((sf.id ^ of.id) | zf.id) != int1(0): op0.val = int8(1)
        else: op0.val = int8(0) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondNe,
          Expr::MakeBinOp(
            OperationExpression::OpOr,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeId(X86_FlSf, &m_CpuInfo),
              Expr::MakeId(X86_FlOf, &m_CpuInfo)),
            Expr::MakeId(X86_FlZf, &m_CpuInfo)),
          Expr::MakeBitVector(1, 0x0),
          Expr::MakeAssign(
            rInsn.GetOperand(0),
            Expr::MakeBitVector(8, 0x1)),
          Expr::MakeAssign(
            rInsn.GetOperand(0),
            Expr::MakeBitVector(8, 0x0))));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    else
      return false;
}

/** instruction
 * mnemonic: setnle
 * test_flags: ['of', 'sf', 'zf']
 * semantic: if __expr and ((sf.id ^ of.id) | zf.id) == int1(0): op0.val = int8(1)
else: op0.val = int8(0);

 * operand: ['Eb']
 * opcode: 9f
 * cpu_model: >= X86_Arch_80386
**/
bool X86Architecture::Table_2_9f(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_80386)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Setnle);
      if (Operand__Eb(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        rInsn.SetTestedFlags(X86_FlOf | X86_FlSf | X86_FlZf);
        /* semantic: if __expr and ((sf.id ^ of.id) | zf.id) == int1(0): op0.val = int8(1)
        else: op0.val = int8(0) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeBinOp(
            OperationExpression::OpOr,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeId(X86_FlSf, &m_CpuInfo),
              Expr::MakeId(X86_FlOf, &m_CpuInfo)),
            Expr::MakeId(X86_FlZf, &m_CpuInfo)),
          Expr::MakeBitVector(1, 0x0),
          Expr::MakeAssign(
            rInsn.GetOperand(0),
            Expr::MakeBitVector(8, 0x1)),
          Expr::MakeAssign(
            rInsn.GetOperand(0),
            Expr::MakeBitVector(8, 0x0))));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    else
      return false;
}

/** instruction
 * mnemonic: push
 * semantic: alloc_var('pushed_value', stack.bit);
pushed_value = sign_extend(op0.val, int(stack.bit, stack.bit));
stack.id -= stack.size;
stack.mem = pushed_value;
free_var('pushed_value');

 * constraint: df64
 * operand: ['FS']
 * opcode: a0
 * cpu_model: >= X86_Arch_80386
**/
bool X86Architecture::Table_2_a0(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_80386)
    {
      if (!(rInsn.Prefix() & X86_Prefix_OpSize))
      {
        rInsn.Prefix() |= X86_Prefix_REX_w; /* d64/df64 constraint */
      }
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Push);
      if (Operand__FS(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('pushed_value', stack.bit) */
        AllExpr.push_back(Expr::MakeVar("pushed_value", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()))));
        /* semantic: pushed_value = sign_extend(op0.val, int(stack.bit, stack.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pushed_value", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpSext, rInsn.GetOperand(0), Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()))))));
        /* semantic: stack.id -= stack.size */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
            Expr::MakeBitVector(
              m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())),
              m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())) / 8)))
        );
        /* semantic: stack.mem = pushed_value */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeMem(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), nullptr, Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo)),
          Expr::MakeVar("pushed_value", VariableExpression::Use)));
        /* semantic: free_var('pushed_value') */
        AllExpr.push_back(Expr::MakeVar("pushed_value", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    else
      return false;
}

/** instruction
 * mnemonic: pop
 * semantic: alloc_var('popped_value', stack.bit);
popped_value = stack.mem;
stack.id += stack.size;
op0.val = popped_value;
free_var('popped_value');

 * constraint: df64
 * operand: ['FS']
 * opcode: a1
 * cpu_model: >= X86_Arch_80386
**/
bool X86Architecture::Table_2_a1(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_80386)
    {
      if (!(rInsn.Prefix() & X86_Prefix_OpSize))
      {
        rInsn.Prefix() |= X86_Prefix_REX_w; /* d64/df64 constraint */
      }
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pop);
      if (Operand__FS(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('popped_value', stack.bit) */
        AllExpr.push_back(Expr::MakeVar("popped_value", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()))));
        /* semantic: popped_value = stack.mem */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("popped_value", VariableExpression::Use),
          Expr::MakeMem(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), nullptr, Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo))));
        /* semantic: stack.id += stack.size */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeBinOp(
            OperationExpression::OpAdd,
            Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
            Expr::MakeBitVector(
              m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())),
              m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())) / 8)))
        );
        /* semantic: op0.val = popped_value */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("popped_value", VariableExpression::Use)));
        /* semantic: free_var('popped_value') */
        AllExpr.push_back(Expr::MakeVar("popped_value", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    else
      return false;
}

/** instruction
 * mnemonic: cpuid
 * opcode: a2
 * semantic: eax.id = int32(0x11111111);
ecx.id = int32(0x22222222);
edx.id = int32(0x33333333);
ebx.id = int32(0x44444444);

**/
bool X86Architecture::Table_2_a2(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Cpuid);
    {
      Expression::LSPType AllExpr;
      /* semantic: eax.id = int32(0x11111111) */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_Reg_Eax, &m_CpuInfo),
        Expr::MakeBitVector(32, 0x11111111)));
      /* semantic: ecx.id = int32(0x22222222) */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_Reg_Ecx, &m_CpuInfo),
        Expr::MakeBitVector(32, 0x22222222)));
      /* semantic: edx.id = int32(0x33333333) */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_Reg_Edx, &m_CpuInfo),
        Expr::MakeBitVector(32, 0x33333333)));
      /* semantic: ebx.id = int32(0x44444444) */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_Reg_Ebx, &m_CpuInfo),
        Expr::MakeBitVector(32, 0x44444444)));
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instruction
 * mnemonic: bt
 * operand: ['Ev', 'Gv']
 * opcode: a3
 * cpu_model: >= X86_Arch_80386
 * semantic: cf.id = bit_cast((op0.val >> (bit_cast(op1.val, int_type(op0.bit)) & (int(op0.bit, op0.bit) - int(op0.bit, 1)))), int_type1);

**/
bool X86Architecture::Table_2_a3(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_80386)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Bt);
      if (Operand__Ev_Gv(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: cf.id = bit_cast((op0.val >> (bit_cast(op1.val, int_type(op0.bit)) & (int(op0.bit, op0.bit) - int(op0.bit, 1)))), int_type1) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlCf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            rInsn.GetOperand(0),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeBinOp(OperationExpression::OpBcast, rInsn.GetOperand(1), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize())),
              Expr::MakeBinOp(
                OperationExpression::OpSub,
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)))), Expr::MakeBitVector(1, 1))));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    else
      return false;
}

/** instruction
 * mnemonic: shld
 * semantic: alloc_var('res', op0.bit);
alloc_var('count', op0.bit);
alloc_var('sign_saved', 1);
sign_saved = bit_cast(op0.val >> (int(op0.bit, op0.bit) - int(op0.bit, 1)), int1(1));
count = bit_cast(op2.val, int(op0.bit, op0.bit));
call('count_mask');
res = ((op0.val << count) | (op1.val >> (int(op0.bit, op0.bit) - count)));
if __expr and count != int(op0.bit, 0):
  cf.id = bit_cast(op0.val >> (int(op0.bit, op0.bit) - count), int1(1))
  call('sign_flag')
  call('zero_flag')
  call('parity_flag');
if __expr and count == int(op0.bit, 1):
  of.id = sf.id ^ sign_saved;
op0.val = res;
free_var('sign_saved');
free_var('count');
free_var('res');

 * operand: ['Ev', 'Gv', 'Ib']
 * opcode: a4
 * update_flags: ['cf', 'pf', 'af', 'zf', 'sf', 'of']
 * cpu_model: >= X86_Arch_80386
**/
bool X86Architecture::Table_2_a4(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_80386)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Shld);
      if (Operand__Ev_Gv_Ib(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        rInsn.SetUpdatedFlags(X86_FlCf | X86_FlPf | X86_FlAf | X86_FlZf | X86_FlSf | X86_FlOf);
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: alloc_var('count', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("count", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: alloc_var('sign_saved', 1) */
        AllExpr.push_back(Expr::MakeVar("sign_saved", VariableExpression::Alloc, 0x1));
        /* semantic: sign_saved = bit_cast(op0.val >> (int(op0.bit, op0.bit) - int(op0.bit, 1)), int1(1)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("sign_saved", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            rInsn.GetOperand(0),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        /* semantic: count = bit_cast(op2.val, int(op0.bit, op0.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, rInsn.GetOperand(2), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()))));
        /* semantic: call('count_mask') */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x40),
          Expr::MakeAssign(
            Expr::MakeVar("count", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeVar("count", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3f))),
          Expr::MakeAssign(
            Expr::MakeVar("count", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeVar("count", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1f)))));
        /* semantic: res = ((op0.val << count) | (op1.val >> (int(op0.bit, op0.bit) - count))) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpOr,
            Expr::MakeBinOp(
              OperationExpression::OpLls,
              rInsn.GetOperand(0),
              Expr::MakeVar("count", VariableExpression::Use)),
            Expr::MakeBinOp(
              OperationExpression::OpLrs,
              rInsn.GetOperand(1),
              Expr::MakeBinOp(
                OperationExpression::OpSub,
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                Expr::MakeVar("count", VariableExpression::Use))))));
        /* semantic: if __expr and count != int(op0.bit, 0):
          cf.id = bit_cast(op0.val >> (int(op0.bit, op0.bit) - count), int1(1))
          call('sign_flag')
          call('zero_flag')
          call('parity_flag') */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondNe,
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeBind({
          Expr::MakeAssign(
            Expr::MakeId(X86_FlCf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              rInsn.GetOperand(0),
              Expr::MakeBinOp(
                OperationExpression::OpSub,
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                Expr::MakeVar("count", VariableExpression::Use))), Expr::MakeBitVector(1, 0x1))),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlSf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBinOp(
                OperationExpression::OpSub,
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlZf, &m_CpuInfo),
            Expr::MakeTernaryCond(ConditionExpression::CondEq,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
            Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))),
          Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)),
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBitVector(1, 0x1)),
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeId(X86_FlPf, &m_CpuInfo),
            Expr::MakeVar("pf_tmp", VariableExpression::Use)),
          Expr::MakeVar("pf_tmp", VariableExpression::Free)})
        , nullptr)
        );
        /* semantic: if __expr and count == int(op0.bit, 1):
          of.id = sf.id ^ sign_saved */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlOf, &m_CpuInfo),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeId(X86_FlSf, &m_CpuInfo),
              Expr::MakeVar("sign_saved", VariableExpression::Use))), nullptr)
        );
        /* semantic: op0.val = res */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("res", VariableExpression::Use)));
        /* semantic: free_var('sign_saved') */
        AllExpr.push_back(Expr::MakeVar("sign_saved", VariableExpression::Free));
        /* semantic: free_var('count') */
        AllExpr.push_back(Expr::MakeVar("count", VariableExpression::Free));
        /* semantic: free_var('res') */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    else
      return false;
}

/** instruction
 * mnemonic: shld
 * semantic: alloc_var('res', op0.bit);
alloc_var('count', op0.bit);
alloc_var('sign_saved', 1);
sign_saved = bit_cast(op0.val >> (int(op0.bit, op0.bit) - int(op0.bit, 1)), int1(1));
count = bit_cast(op2.val, int(op0.bit, op0.bit));
call('count_mask');
res = ((op0.val << count) | (op1.val >> (int(op0.bit, op0.bit) - count)));
if __expr and count != int(op0.bit, 0):
  cf.id = bit_cast(op0.val >> (int(op0.bit, op0.bit) - count), int1(1))
  call('sign_flag')
  call('zero_flag')
  call('parity_flag');
if __expr and count == int(op0.bit, 1):
  of.id = sf.id ^ sign_saved;
op0.val = res;
free_var('sign_saved');
free_var('count');
free_var('res');

 * operand: ['Ev', 'Gv', 'CL']
 * opcode: a5
 * update_flags: ['cf', 'pf', 'af', 'zf', 'sf', 'of']
 * cpu_model: >= X86_Arch_80386
**/
bool X86Architecture::Table_2_a5(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_80386)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Shld);
      if (Operand__Ev_Gv_CL(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        rInsn.SetUpdatedFlags(X86_FlCf | X86_FlPf | X86_FlAf | X86_FlZf | X86_FlSf | X86_FlOf);
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: alloc_var('count', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("count", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: alloc_var('sign_saved', 1) */
        AllExpr.push_back(Expr::MakeVar("sign_saved", VariableExpression::Alloc, 0x1));
        /* semantic: sign_saved = bit_cast(op0.val >> (int(op0.bit, op0.bit) - int(op0.bit, 1)), int1(1)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("sign_saved", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            rInsn.GetOperand(0),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        /* semantic: count = bit_cast(op2.val, int(op0.bit, op0.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, rInsn.GetOperand(2), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()))));
        /* semantic: call('count_mask') */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x40),
          Expr::MakeAssign(
            Expr::MakeVar("count", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeVar("count", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3f))),
          Expr::MakeAssign(
            Expr::MakeVar("count", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeVar("count", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1f)))));
        /* semantic: res = ((op0.val << count) | (op1.val >> (int(op0.bit, op0.bit) - count))) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpOr,
            Expr::MakeBinOp(
              OperationExpression::OpLls,
              rInsn.GetOperand(0),
              Expr::MakeVar("count", VariableExpression::Use)),
            Expr::MakeBinOp(
              OperationExpression::OpLrs,
              rInsn.GetOperand(1),
              Expr::MakeBinOp(
                OperationExpression::OpSub,
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                Expr::MakeVar("count", VariableExpression::Use))))));
        /* semantic: if __expr and count != int(op0.bit, 0):
          cf.id = bit_cast(op0.val >> (int(op0.bit, op0.bit) - count), int1(1))
          call('sign_flag')
          call('zero_flag')
          call('parity_flag') */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondNe,
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeBind({
          Expr::MakeAssign(
            Expr::MakeId(X86_FlCf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              rInsn.GetOperand(0),
              Expr::MakeBinOp(
                OperationExpression::OpSub,
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                Expr::MakeVar("count", VariableExpression::Use))), Expr::MakeBitVector(1, 0x1))),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlSf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBinOp(
                OperationExpression::OpSub,
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlZf, &m_CpuInfo),
            Expr::MakeTernaryCond(ConditionExpression::CondEq,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
            Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))),
          Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)),
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBitVector(1, 0x1)),
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeId(X86_FlPf, &m_CpuInfo),
            Expr::MakeVar("pf_tmp", VariableExpression::Use)),
          Expr::MakeVar("pf_tmp", VariableExpression::Free)})
        , nullptr)
        );
        /* semantic: if __expr and count == int(op0.bit, 1):
          of.id = sf.id ^ sign_saved */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlOf, &m_CpuInfo),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeId(X86_FlSf, &m_CpuInfo),
              Expr::MakeVar("sign_saved", VariableExpression::Use))), nullptr)
        );
        /* semantic: op0.val = res */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("res", VariableExpression::Use)));
        /* semantic: free_var('sign_saved') */
        AllExpr.push_back(Expr::MakeVar("sign_saved", VariableExpression::Free));
        /* semantic: free_var('count') */
        AllExpr.push_back(Expr::MakeVar("count", VariableExpression::Free));
        /* semantic: free_var('res') */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    else
      return false;
}

/** instructions
 * opcode: a6
 *
 * mnemonic: xbts
 * cpu_model: == X86_Arch_80386, == X86_Arch_80486
 *
 * mnemonic: montmul
 * cpu_model: >= X86_Arch_Centaur_mm
 *
 * mnemonic: xsha
 * cpu_model: >= X86_Arch_Centaur_he
 *
**/
bool X86Architecture::Table_2_a6(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Centaur_he)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Xsha);
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Centaur_mm)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Montmul);
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") == X86_Arch_80386 || m_CfgMdl.GetEnum("Architecture")  == X86_Arch_80486)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Xbts);
      return true;
    }
    return false;
}

/** instructions
 * opcode: a7
 *
 * mnemonic: ibts
 * cpu_model: == X86_Arch_80386, == X86_Arch_80486
 *
 * mnemonic: xstore
 * cpu_model: >= X86_Arch_Centaur_rng
 *
 * mnemonic: xcrypt
 * cpu_model: >= X86_Arch_Centaur_ace
 *
**/
bool X86Architecture::Table_2_a7(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Centaur_ace)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Xcrypt);
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Centaur_rng)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Xstore);
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") == X86_Arch_80386 || m_CfgMdl.GetEnum("Architecture")  == X86_Arch_80486)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Ibts);
      return true;
    }
    return false;
}

/** instruction
 * mnemonic: push
 * semantic: alloc_var('pushed_value', stack.bit);
pushed_value = sign_extend(op0.val, int(stack.bit, stack.bit));
stack.id -= stack.size;
stack.mem = pushed_value;
free_var('pushed_value');

 * constraint: d64
 * operand: ['GS']
 * opcode: a8
 * cpu_model: >= X86_Arch_80386
**/
bool X86Architecture::Table_2_a8(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_80386)
    {
      if (!(rInsn.Prefix() & X86_Prefix_OpSize))
      {
        rInsn.Prefix() |= X86_Prefix_REX_w; /* d64/df64 constraint */
      }
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Push);
      if (Operand__GS(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('pushed_value', stack.bit) */
        AllExpr.push_back(Expr::MakeVar("pushed_value", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()))));
        /* semantic: pushed_value = sign_extend(op0.val, int(stack.bit, stack.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pushed_value", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpSext, rInsn.GetOperand(0), Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()))))));
        /* semantic: stack.id -= stack.size */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
            Expr::MakeBitVector(
              m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())),
              m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())) / 8)))
        );
        /* semantic: stack.mem = pushed_value */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeMem(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), nullptr, Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo)),
          Expr::MakeVar("pushed_value", VariableExpression::Use)));
        /* semantic: free_var('pushed_value') */
        AllExpr.push_back(Expr::MakeVar("pushed_value", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    else
      return false;
}

/** instruction
 * mnemonic: pop
 * semantic: alloc_var('popped_value', stack.bit);
popped_value = stack.mem;
stack.id += stack.size;
op0.val = popped_value;
free_var('popped_value');

 * constraint: d64
 * operand: ['GS']
 * opcode: a9
 * cpu_model: >= X86_Arch_80386
**/
bool X86Architecture::Table_2_a9(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_80386)
    {
      if (!(rInsn.Prefix() & X86_Prefix_OpSize))
      {
        rInsn.Prefix() |= X86_Prefix_REX_w; /* d64/df64 constraint */
      }
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pop);
      if (Operand__GS(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('popped_value', stack.bit) */
        AllExpr.push_back(Expr::MakeVar("popped_value", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()))));
        /* semantic: popped_value = stack.mem */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("popped_value", VariableExpression::Use),
          Expr::MakeMem(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), nullptr, Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo))));
        /* semantic: stack.id += stack.size */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeBinOp(
            OperationExpression::OpAdd,
            Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
            Expr::MakeBitVector(
              m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())),
              m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())) / 8)))
        );
        /* semantic: op0.val = popped_value */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("popped_value", VariableExpression::Use)));
        /* semantic: free_var('popped_value') */
        AllExpr.push_back(Expr::MakeVar("popped_value", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    else
      return false;
}

/** instruction
 * mnemonic: rsm
 * opcode: aa
 * cpu_model: >= X86_Arch_80386sl
**/
bool X86Architecture::Table_2_aa(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_80386sl)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Rsm);
      return true;
    }
    else
      return false;
}

/** instruction
 * mnemonic: bts
 * operand: ['Ev', 'Gv']
 * opcode: ab
 * cpu_model: >= X86_Arch_80386
 * semantic: alloc_var('res', op0.bit);
alloc_var('bit_set', 16);
bit_set = bit_cast(bit_cast(op1.val, int_type(op0.bit)) & (int(op0.bit, op0.bit) - int(op0.bit, 1)), int_type16);
cf.id = bit_cast((op0.val >> bit_set), int_type1);
res = (op0.val | ((int(op0.bit, 1) << bit_cast(bit_set, int_type(op0.bit)))));
op0.val = res
free_var('bit_set');
free_var('res');

**/
bool X86Architecture::Table_2_ab(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_80386)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Bts);
      if (Operand__Ev_Gv(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: alloc_var('bit_set', 16) */
        AllExpr.push_back(Expr::MakeVar("bit_set", VariableExpression::Alloc, 0x10));
        /* semantic: bit_set = bit_cast(bit_cast(op1.val, int_type(op0.bit)) & (int(op0.bit, op0.bit) - int(op0.bit, 1)), int_type16) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("bit_set", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpAnd,
            Expr::MakeBinOp(OperationExpression::OpBcast, rInsn.GetOperand(1), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize())),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(16, 16))));
        /* semantic: cf.id = bit_cast((op0.val >> bit_set), int_type1) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlCf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            rInsn.GetOperand(0),
            Expr::MakeVar("bit_set", VariableExpression::Use)), Expr::MakeBitVector(1, 1))));
        /* semantic: res = (op0.val | ((int(op0.bit, 1) << bit_cast(bit_set, int_type(op0.bit))))) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpOr,
            rInsn.GetOperand(0),
            Expr::MakeBinOp(
              OperationExpression::OpLls,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeVar("bit_set", VariableExpression::Use), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()))))));
        /* semantic: op0.val = res
        free_var('bit_set') */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("res", VariableExpression::Use)));
        AllExpr.push_back(Expr::MakeVar("bit_set", VariableExpression::Free));
        /* semantic: free_var('res') */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    else
      return false;
}

/** instruction
 * mnemonic: shrd
 * operand: ['Ev', 'Gv', 'Ib']
 * opcode: ac
 * cpu_model: >= X86_Arch_80386
 * semantic: alloc_var('res', op0.bit);
alloc_var('count', op0.bit);
alloc_var('sign_saved', 1);
sign_saved = bit_cast(op0.val >> (int(op0.bit, op0.bit) - int(op0.bit, 1)), int1(1));
count = bit_cast(op2.val, int(op0.bit, op0.bit));
call('count_mask');
res = ((op0.val >> count) | (op1.val << (int(op0.bit, op0.bit) - count)));
if __expr and count != int(op0.bit, 0):
  cf.id = bit_cast(op0.val >> (count - int(op0.bit, 1)), int1(1))
  call('sign_flag')
  call('zero_flag')
  call('parity_flag');
if __expr and count == int(op0.bit, 1):
  of.id = sf.id ^ sign_saved;
op0.val = res;
free_var('sign_saved');
free_var('count');
free_var('res');

**/
bool X86Architecture::Table_2_ac(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_80386)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Shrd);
      if (Operand__Ev_Gv_Ib(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: alloc_var('count', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("count", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: alloc_var('sign_saved', 1) */
        AllExpr.push_back(Expr::MakeVar("sign_saved", VariableExpression::Alloc, 0x1));
        /* semantic: sign_saved = bit_cast(op0.val >> (int(op0.bit, op0.bit) - int(op0.bit, 1)), int1(1)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("sign_saved", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            rInsn.GetOperand(0),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        /* semantic: count = bit_cast(op2.val, int(op0.bit, op0.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, rInsn.GetOperand(2), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()))));
        /* semantic: call('count_mask') */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x40),
          Expr::MakeAssign(
            Expr::MakeVar("count", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeVar("count", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3f))),
          Expr::MakeAssign(
            Expr::MakeVar("count", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeVar("count", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1f)))));
        /* semantic: res = ((op0.val >> count) | (op1.val << (int(op0.bit, op0.bit) - count))) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpOr,
            Expr::MakeBinOp(
              OperationExpression::OpLrs,
              rInsn.GetOperand(0),
              Expr::MakeVar("count", VariableExpression::Use)),
            Expr::MakeBinOp(
              OperationExpression::OpLls,
              rInsn.GetOperand(1),
              Expr::MakeBinOp(
                OperationExpression::OpSub,
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                Expr::MakeVar("count", VariableExpression::Use))))));
        /* semantic: if __expr and count != int(op0.bit, 0):
          cf.id = bit_cast(op0.val >> (count - int(op0.bit, 1)), int1(1))
          call('sign_flag')
          call('zero_flag')
          call('parity_flag') */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondNe,
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeBind({
          Expr::MakeAssign(
            Expr::MakeId(X86_FlCf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              rInsn.GetOperand(0),
              Expr::MakeBinOp(
                OperationExpression::OpSub,
                Expr::MakeVar("count", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlSf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBinOp(
                OperationExpression::OpSub,
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlZf, &m_CpuInfo),
            Expr::MakeTernaryCond(ConditionExpression::CondEq,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
            Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))),
          Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)),
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBitVector(1, 0x1)),
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeId(X86_FlPf, &m_CpuInfo),
            Expr::MakeVar("pf_tmp", VariableExpression::Use)),
          Expr::MakeVar("pf_tmp", VariableExpression::Free)})
        , nullptr)
        );
        /* semantic: if __expr and count == int(op0.bit, 1):
          of.id = sf.id ^ sign_saved */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlOf, &m_CpuInfo),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeId(X86_FlSf, &m_CpuInfo),
              Expr::MakeVar("sign_saved", VariableExpression::Use))), nullptr)
        );
        /* semantic: op0.val = res */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("res", VariableExpression::Use)));
        /* semantic: free_var('sign_saved') */
        AllExpr.push_back(Expr::MakeVar("sign_saved", VariableExpression::Free));
        /* semantic: free_var('count') */
        AllExpr.push_back(Expr::MakeVar("count", VariableExpression::Free));
        /* semantic: free_var('res') */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    else
      return false;
}

/** instruction
 * mnemonic: shrd
 * operand: ['Ev', 'Gv', 'CL']
 * opcode: ad
 * cpu_model: >= X86_Arch_80386
 * semantic: alloc_var('res', op0.bit);
alloc_var('count', op0.bit);
alloc_var('sign_saved', 1);
sign_saved = bit_cast(op0.val >> (int(op0.bit, op0.bit) - int(op0.bit, 1)), int1(1));
count = bit_cast(op2.val, int(op0.bit, op0.bit));
call('count_mask');
res = ((op0.val >> count) | (op1.val << (int(op0.bit, op0.bit) - count)));
if __expr and count != int(op0.bit, 0):
  cf.id = bit_cast(op0.val >> (count - int(op0.bit, 1)), int1(1))
  call('sign_flag')
  call('zero_flag')
  call('parity_flag');
if __expr and count == int(op0.bit, 1):
  of.id = sf.id ^ sign_saved;
op0.val = res;
free_var('sign_saved');
free_var('count');
free_var('res');

**/
bool X86Architecture::Table_2_ad(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_80386)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Shrd);
      if (Operand__Ev_Gv_CL(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: alloc_var('count', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("count", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: alloc_var('sign_saved', 1) */
        AllExpr.push_back(Expr::MakeVar("sign_saved", VariableExpression::Alloc, 0x1));
        /* semantic: sign_saved = bit_cast(op0.val >> (int(op0.bit, op0.bit) - int(op0.bit, 1)), int1(1)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("sign_saved", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            rInsn.GetOperand(0),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        /* semantic: count = bit_cast(op2.val, int(op0.bit, op0.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, rInsn.GetOperand(2), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()))));
        /* semantic: call('count_mask') */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x40),
          Expr::MakeAssign(
            Expr::MakeVar("count", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeVar("count", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3f))),
          Expr::MakeAssign(
            Expr::MakeVar("count", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeVar("count", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1f)))));
        /* semantic: res = ((op0.val >> count) | (op1.val << (int(op0.bit, op0.bit) - count))) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpOr,
            Expr::MakeBinOp(
              OperationExpression::OpLrs,
              rInsn.GetOperand(0),
              Expr::MakeVar("count", VariableExpression::Use)),
            Expr::MakeBinOp(
              OperationExpression::OpLls,
              rInsn.GetOperand(1),
              Expr::MakeBinOp(
                OperationExpression::OpSub,
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                Expr::MakeVar("count", VariableExpression::Use))))));
        /* semantic: if __expr and count != int(op0.bit, 0):
          cf.id = bit_cast(op0.val >> (count - int(op0.bit, 1)), int1(1))
          call('sign_flag')
          call('zero_flag')
          call('parity_flag') */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondNe,
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeBind({
          Expr::MakeAssign(
            Expr::MakeId(X86_FlCf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              rInsn.GetOperand(0),
              Expr::MakeBinOp(
                OperationExpression::OpSub,
                Expr::MakeVar("count", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlSf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBinOp(
                OperationExpression::OpSub,
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlZf, &m_CpuInfo),
            Expr::MakeTernaryCond(ConditionExpression::CondEq,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
            Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))),
          Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)),
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBitVector(1, 0x1)),
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeId(X86_FlPf, &m_CpuInfo),
            Expr::MakeVar("pf_tmp", VariableExpression::Use)),
          Expr::MakeVar("pf_tmp", VariableExpression::Free)})
        , nullptr)
        );
        /* semantic: if __expr and count == int(op0.bit, 1):
          of.id = sf.id ^ sign_saved */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlOf, &m_CpuInfo),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeId(X86_FlSf, &m_CpuInfo),
              Expr::MakeVar("sign_saved", VariableExpression::Use))), nullptr)
        );
        /* semantic: op0.val = res */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("res", VariableExpression::Use)));
        /* semantic: free_var('sign_saved') */
        AllExpr.push_back(Expr::MakeVar("sign_saved", VariableExpression::Free));
        /* semantic: free_var('count') */
        AllExpr.push_back(Expr::MakeVar("count", VariableExpression::Free));
        /* semantic: free_var('res') */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    else
      return false;
}

/** group:
 * opcode: 00
 * sub_opcodes: [{'mnemonic': 'fxsave', 'operand': ['M']}, {'mnemonic': 'rdfsbase', 'operand': ['Ry'], 'prefix': 243}]
 *
 * opcode: 01
 * sub_opcodes: [{'mnemonic': 'fxrstor', 'operand': ['M']}, {'mnemonic': 'rdgsbase', 'operand': ['Ry'], 'prefix': 243}]
 *
 * opcode: 02
 * sub_opcodes: [{'mnemonic': 'ldmxcsr', 'operand': ['Md']}, {'mnemonic': 'wrfsbase', 'operand': ['Ry'], 'prefix': 243}]
 *
 * opcode: 03
 * sub_opcodes: [{'mnemonic': 'stmxcsr', 'operand': ['Md']}, {'mnemonic': 'wrgsbase', 'operand': ['Ry'], 'prefix': 243}]
 *
 * mnemonic: xsave
 * operand: ['M']
 * opcode: 04
 *
 * opcode: 05
 * sub_opcodes: [{'mnemonic': 'xrstor', 'operand': ['M']}, {'mnemonic': 'lfence', 'suffix': 232}]
 *
 * opcode: 06
 * sub_opcodes: [{'mnemonic': 'xsaveopt', 'operand': ['M']}, {'mnemonic': 'mfence', 'suffix': 240}]
 *
 * opcode: 07
 * sub_opcodes: [{'mnemonic': 'clflush', 'operand': ['M']}, {'mnemonic': 'sfence', 'suffix': 248}]
 *
**/
bool X86Architecture::Table_2_ae(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    u8 ModRmByte;
    if (!rBinStrm.Read(Offset, ModRmByte))
      return false;

    x86::ModRM ModRm(ModRmByte);
    switch (ModRm.Reg())
    {
    case 0x0:
      if ((rInsn.GetPrefix() & X86_Prefix_Rep) == X86_Prefix_Rep)
      {
        rInsn.Length()++;
        rInsn.SetOpcode(X86_Opcode_Rdfsbase);
        if (Operand__Ry(rBinStrm, Offset, rInsn, Mode) == false)
        {
          return false;
        }
        return true;
      }
      else
      {
        rInsn.Length()++;
        rInsn.SetOpcode(X86_Opcode_Fxsave);
        if (Operand__M(rBinStrm, Offset, rInsn, Mode) == false)
        {
          return false;
        }
        return true;
      }
    case 0x1:
      if ((rInsn.GetPrefix() & X86_Prefix_Rep) == X86_Prefix_Rep)
      {
        rInsn.Length()++;
        rInsn.SetOpcode(X86_Opcode_Rdgsbase);
        if (Operand__Ry(rBinStrm, Offset, rInsn, Mode) == false)
        {
          return false;
        }
        return true;
      }
      else
      {
        rInsn.Length()++;
        rInsn.SetOpcode(X86_Opcode_Fxrstor);
        if (Operand__M(rBinStrm, Offset, rInsn, Mode) == false)
        {
          return false;
        }
        return true;
      }
    case 0x2:
      if ((rInsn.GetPrefix() & X86_Prefix_Rep) == X86_Prefix_Rep)
      {
        rInsn.Length()++;
        rInsn.SetOpcode(X86_Opcode_Wrfsbase);
        if (Operand__Ry(rBinStrm, Offset, rInsn, Mode) == false)
        {
          return false;
        }
        return true;
      }
      else
      {
        rInsn.Length()++;
        rInsn.SetOpcode(X86_Opcode_Ldmxcsr);
        if (Operand__Md(rBinStrm, Offset, rInsn, Mode) == false)
        {
          return false;
        }
        return true;
      }
    case 0x3:
      if ((rInsn.GetPrefix() & X86_Prefix_Rep) == X86_Prefix_Rep)
      {
        rInsn.Length()++;
        rInsn.SetOpcode(X86_Opcode_Wrgsbase);
        if (Operand__Ry(rBinStrm, Offset, rInsn, Mode) == false)
        {
          return false;
        }
        return true;
      }
      else
      {
        rInsn.Length()++;
        rInsn.SetOpcode(X86_Opcode_Stmxcsr);
        if (Operand__Md(rBinStrm, Offset, rInsn, Mode) == false)
        {
          return false;
        }
        return true;
      }
    case 0x4:
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Xsave);
      if (Operand__M(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    case 0x5:
      {
        u8 Suffix;
        if (!rBinStrm.Read(Offset + 0, Suffix))
          return false;

        if (Suffix == 0xe8)
        {
          rInsn.Length() += 2;
          rInsn.SetOpcode(X86_Opcode_Lfence);
          return true;
        }
        else
        {
          rInsn.Length()++;
          rInsn.SetOpcode(X86_Opcode_Xrstor);
          if (Operand__M(rBinStrm, Offset, rInsn, Mode) == false)
          {
            return false;
          }
          return true;
        }
      }
    case 0x6:
      {
        u8 Suffix;
        if (!rBinStrm.Read(Offset + 0, Suffix))
          return false;

        if (Suffix == 0xf0)
        {
          rInsn.Length() += 2;
          rInsn.SetOpcode(X86_Opcode_Mfence);
          return true;
        }
        else
        {
          rInsn.Length()++;
          rInsn.SetOpcode(X86_Opcode_Xsaveopt);
          if (Operand__M(rBinStrm, Offset, rInsn, Mode) == false)
          {
            return false;
          }
          return true;
        }
      }
    case 0x7:
      {
        u8 Suffix;
        if (!rBinStrm.Read(Offset + 0, Suffix))
          return false;

        if (Suffix == 0xf8)
        {
          rInsn.Length() += 2;
          rInsn.SetOpcode(X86_Opcode_Sfence);
          return true;
        }
        else
        {
          rInsn.Length()++;
          rInsn.SetOpcode(X86_Opcode_Clflush);
          if (Operand__M(rBinStrm, Offset, rInsn, Mode) == false)
          {
            return false;
          }
          return true;
        }
      }
    default:
      return false;
    }
}

/** instruction
 * mnemonic: imul
 * operand: ['Gv', 'Ev']
 * opcode: af
 * cpu_model: >= X86_Arch_80386
 * semantic: alloc_var('res', op0.bit);
alloc_var('mul_res', concat(op0.bit, ignore(' * 2')));
alloc_var('extended', concat(op0.bit, ignore(' * 2')));
mul_res = sign_extend(op0.val, int_type(concat(op0.bit, ignore(' * 2')))) * sign_extend(op1.val, int_type(concat(op0.bit, ignore(' * 2'))));
res = bit_cast(mul_res, int_type(op0.bit));
call('sign_flag');
extended = sign_extend(res, int_type(concat(op0.bit, ignore(' * 2'))));
if __expr and extended == mul_res:
  of.id = int1(0)
  cf.id = int1(0)
else:
  of.id = int1(1)
  cf.id = int1(1);
op0.val = res;
free_var('extended');
free_var('mul_res');
free_var('res');

**/
bool X86Architecture::Table_2_af(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_80386)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Imul);
      if (Operand__Gv_Ev(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: alloc_var('mul_res', concat(op0.bit, ignore(' * 2'))) */
        AllExpr.push_back(Expr::MakeVar("mul_res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize() * 2));
        /* semantic: alloc_var('extended', concat(op0.bit, ignore(' * 2'))) */
        AllExpr.push_back(Expr::MakeVar("extended", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize() * 2));
        /* semantic: mul_res = sign_extend(op0.val, int_type(concat(op0.bit, ignore(' * 2')))) * sign_extend(op1.val, int_type(concat(op0.bit, ignore(' * 2')))) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("mul_res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpMul,
            Expr::MakeBinOp(OperationExpression::OpSext, rInsn.GetOperand(0), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize() * 2, rInsn.GetOperand(0)->GetBitSize() * 2)),
            Expr::MakeBinOp(OperationExpression::OpSext, rInsn.GetOperand(1), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize() * 2, rInsn.GetOperand(0)->GetBitSize() * 2)))));
        /* semantic: res = bit_cast(mul_res, int_type(op0.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeVar("mul_res", VariableExpression::Use), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()))));
        /* semantic: call('sign_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlSf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        /* semantic: extended = sign_extend(res, int_type(concat(op0.bit, ignore(' * 2')))) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("extended", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpSext, Expr::MakeVar("res", VariableExpression::Use), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize() * 2, rInsn.GetOperand(0)->GetBitSize() * 2))));
        /* semantic: if __expr and extended == mul_res:
          of.id = int1(0)
          cf.id = int1(0)
        else:
          of.id = int1(1)
          cf.id = int1(1) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeVar("extended", VariableExpression::Use),
          Expr::MakeVar("mul_res", VariableExpression::Use),
          Expr::MakeBind({
          Expr::MakeAssign(
            Expr::MakeId(X86_FlOf, &m_CpuInfo),
            Expr::MakeBitVector(1, 0x0)),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlCf, &m_CpuInfo),
            Expr::MakeBitVector(1, 0x0))})
        ,
          Expr::MakeBind({
          Expr::MakeAssign(
            Expr::MakeId(X86_FlOf, &m_CpuInfo),
            Expr::MakeBitVector(1, 0x1)),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlCf, &m_CpuInfo),
            Expr::MakeBitVector(1, 0x1))})
        ));
        /* semantic: op0.val = res */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("res", VariableExpression::Use)));
        /* semantic: free_var('extended') */
        AllExpr.push_back(Expr::MakeVar("extended", VariableExpression::Free));
        /* semantic: free_var('mul_res') */
        AllExpr.push_back(Expr::MakeVar("mul_res", VariableExpression::Free));
        /* semantic: free_var('res') */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    else
      return false;
}

/** instruction
 * mnemonic: cmpxchg
 * operand: ['Eb', 'Gb']
 * opcode: b0
 * cpu_model: >= X86_Arch_80486
 * semantic: if __expr and op0.val == acc.id:
  zf.id = int1(1)
else:
  zf.id = int1(0);

if __expr and zf.id == int1(1):
  op0.val = op1.val;

**/
bool X86Architecture::Table_2_b0(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_80486)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Cmpxchg);
      if (Operand__Eb_Gb(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: if __expr and op0.val == acc.id:
          zf.id = int1(1)
        else:
          zf.id = int1(0) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          rInsn.GetOperand(0),
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::AccumulatorRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlZf, &m_CpuInfo),
            Expr::MakeBitVector(1, 0x1)),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlZf, &m_CpuInfo),
            Expr::MakeBitVector(1, 0x0))));
        /* semantic: 
        if __expr and zf.id == int1(1):
          op0.val = op1.val */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeId(X86_FlZf, &m_CpuInfo),
          Expr::MakeBitVector(1, 0x1),
          Expr::MakeAssign(
            rInsn.GetOperand(0),
            rInsn.GetOperand(1)), nullptr)
        );
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    else
      return false;
}

/** instruction
 * mnemonic: cmpxchg
 * operand: ['Ev', 'Gv']
 * opcode: b1
 * cpu_model: >= X86_Arch_80486
 * semantic: if __expr and op0.val == acc.id:
  zf.id = int1(1)
else:
  zf.id = int1(0);

if __expr and zf.id == int1(1):
  op0.val = op1.val;

**/
bool X86Architecture::Table_2_b1(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_80486)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Cmpxchg);
      if (Operand__Ev_Gv(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: if __expr and op0.val == acc.id:
          zf.id = int1(1)
        else:
          zf.id = int1(0) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          rInsn.GetOperand(0),
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::AccumulatorRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlZf, &m_CpuInfo),
            Expr::MakeBitVector(1, 0x1)),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlZf, &m_CpuInfo),
            Expr::MakeBitVector(1, 0x0))));
        /* semantic: 
        if __expr and zf.id == int1(1):
          op0.val = op1.val */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeId(X86_FlZf, &m_CpuInfo),
          Expr::MakeBitVector(1, 0x1),
          Expr::MakeAssign(
            rInsn.GetOperand(0),
            rInsn.GetOperand(1)), nullptr)
        );
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    else
      return false;
}

/** instruction
 * mnemonic: lss
 * operand: ['Gv', 'Mp']
 * opcode: b2
 * cpu_model: >= X86_Arch_80386
**/
bool X86Architecture::Table_2_b2(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_80386)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Lss);
      if (Operand__Gv_Mp(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else
      return false;
}

/** instruction
 * mnemonic: btr
 * operand: ['Ev', 'Gv']
 * opcode: b3
 * cpu_model: >= X86_Arch_80386
 * semantic: alloc_var('bit_set', 16);
bit_set = bit_cast(bit_cast(op1.val, int_type(op0.bit)) & (int(op0.bit, op0.bit) - int(op0.bit, 1)), int_type16);
cf.id = bit_cast((op0.val >> bit_set), int_type1);
op0.val = (op0.val & (~(int(op0.bit, 1) << bit_cast(bit_set, int_type(op0.bit)))));
free_var('bit_set');

**/
bool X86Architecture::Table_2_b3(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_80386)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Btr);
      if (Operand__Ev_Gv(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('bit_set', 16) */
        AllExpr.push_back(Expr::MakeVar("bit_set", VariableExpression::Alloc, 0x10));
        /* semantic: bit_set = bit_cast(bit_cast(op1.val, int_type(op0.bit)) & (int(op0.bit, op0.bit) - int(op0.bit, 1)), int_type16) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("bit_set", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpAnd,
            Expr::MakeBinOp(OperationExpression::OpBcast, rInsn.GetOperand(1), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize())),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(16, 16))));
        /* semantic: cf.id = bit_cast((op0.val >> bit_set), int_type1) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlCf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            rInsn.GetOperand(0),
            Expr::MakeVar("bit_set", VariableExpression::Use)), Expr::MakeBitVector(1, 1))));
        /* semantic: op0.val = (op0.val & (~(int(op0.bit, 1) << bit_cast(bit_set, int_type(op0.bit))))) */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeBinOp(
            OperationExpression::OpAnd,
            rInsn.GetOperand(0),
            Expr::MakeUnOp(
              OperationExpression::OpNot,
              Expr::MakeBinOp(
                OperationExpression::OpLls,
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1),
                Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeVar("bit_set", VariableExpression::Use), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize())))))));
        /* semantic: free_var('bit_set') */
        AllExpr.push_back(Expr::MakeVar("bit_set", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    else
      return false;
}

/** instruction
 * mnemonic: lfs
 * operand: ['Gv', 'Mp']
 * opcode: b4
 * cpu_model: >= X86_Arch_80386
**/
bool X86Architecture::Table_2_b4(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_80386)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Lfs);
      if (Operand__Gv_Mp(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else
      return false;
}

/** instruction
 * mnemonic: lgs
 * operand: ['Gv', 'Mp']
 * opcode: b5
 * cpu_model: >= X86_Arch_80386
**/
bool X86Architecture::Table_2_b5(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_80386)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Lgs);
      if (Operand__Gv_Mp(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else
      return false;
}

/** instruction
 * mnemonic: movzx
 * operand: ['Gv', 'Eb']
 * opcode: b6
 * cpu_model: >= X86_Arch_80386
 * semantic: op0.val = zero_extend(op1.val, int(op0.bit, op0.bit));

**/
bool X86Architecture::Table_2_b6(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_80386)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Movzx);
      if (Operand__Gv_Eb(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: op0.val = zero_extend(op1.val, int(op0.bit, op0.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeBinOp(OperationExpression::OpZext, rInsn.GetOperand(1), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()))));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    else
      return false;
}

/** instruction
 * mnemonic: movzx
 * operand: ['Gv', 'Ew']
 * opcode: b7
 * cpu_model: >= X86_Arch_80386
 * semantic: op0.val = zero_extend(op1.val, int(op0.bit, op0.bit));

**/
bool X86Architecture::Table_2_b7(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_80386)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Movzx);
      if (Operand__Gv_Ew(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: op0.val = zero_extend(op1.val, int(op0.bit, op0.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeBinOp(OperationExpression::OpZext, rInsn.GetOperand(1), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()))));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    else
      return false;
}

/** instructions
 * opcode: b8
 *
 * mnemonic: jmpe
 * operand: ['Jz']
 * attr: ['ia64']
 *
 * mnemonic: popcnt
 * operand: ['Gv', 'Ev']
 * prefix: f3
 *
**/
bool X86Architecture::Table_2_b8(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if ((rInsn.GetPrefix() & X86_Prefix_Rep) == X86_Prefix_Rep)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Popcnt);
      if (Operand__Gv_Ev(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Vendor") == X86_ProcType_IA64)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Jmpe);
      if (Operand__Jz(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    return false;
}

/** group:
 * mnemonic: ud2
 * opcode: 00
 *
 * mnemonic: ud2
 * opcode: 01
 *
 * mnemonic: ud2
 * opcode: 02
 *
 * mnemonic: ud2
 * opcode: 03
 *
 * mnemonic: ud2
 * opcode: 04
 *
 * mnemonic: ud2
 * opcode: 05
 *
 * mnemonic: ud2
 * opcode: 06
 *
 * mnemonic: ud2
 * opcode: 07
 *
**/
bool X86Architecture::Table_2_b9(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    u8 ModRmByte;
    if (!rBinStrm.Read(Offset, ModRmByte))
      return false;

    x86::ModRM ModRm(ModRmByte);
    switch (ModRm.Reg())
    {
    case 0x0:
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Ud2);
      return true;
    case 0x1:
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Ud2);
      return true;
    case 0x2:
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Ud2);
      return true;
    case 0x3:
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Ud2);
      return true;
    case 0x4:
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Ud2);
      return true;
    case 0x5:
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Ud2);
      return true;
    case 0x6:
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Ud2);
      return true;
    case 0x7:
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Ud2);
      return true;
    default:
      return false;
    }
}

/** group:
 * opcode: 00
 * invalid
 *
 * opcode: 01
 * invalid
 *
 * opcode: 02
 * invalid
 *
 * opcode: 03
 * invalid
 *
 * mnemonic: bt
 * operand: ['Ev', 'Ib']
 * opcode: 04
 * semantic: cf.id = bit_cast((op0.val >> (bit_cast(op1.val, int_type(op0.bit)) & (int(op0.bit, op0.bit) - int(op0.bit, 1)))), int_type1);

 *
 * mnemonic: bts
 * operand: ['Ev', 'Ib']
 * opcode: 05
 * semantic: alloc_var('res', op0.bit);
alloc_var('bit_set', 16);
bit_set = bit_cast(bit_cast(op1.val, int_type(op0.bit)) & (int(op0.bit, op0.bit) - int(op0.bit, 1)), int_type16);
cf.id = bit_cast((op0.val >> bit_set), int_type1);
res = (op0.val | ((int(op0.bit, 1) << bit_cast(bit_set, int_type(op0.bit)))));
op0.val = res
free_var('bit_set');
free_var('res');

 *
 * mnemonic: btr
 * operand: ['Ev', 'Ib']
 * opcode: 06
 * semantic: alloc_var('bit_set', 16);
bit_set = bit_cast(bit_cast(op1.val, int_type(op0.bit)) & (int(op0.bit, op0.bit) - int(op0.bit, 1)), int_type16);
cf.id = bit_cast((op0.val >> bit_set), int_type1);
op0.val = (op0.val & (~(int(op0.bit, 1) << bit_cast(bit_set, int_type(op0.bit)))));
free_var('bit_set');

 *
 * mnemonic: btc
 * operand: ['Ev', 'Ib']
 * opcode: 07
 * semantic: alloc_var('bit_set', 16);
bit_set = bit_cast(bit_cast(op1.val, int_type(op0.bit)) & (int(op0.bit, op0.bit) - int(op0.bit, 1)), int_type16);
cf.id = bit_cast((op0.val >> bit_set), int_type1);
op0.val = (op0.val ^ ((int(op0.bit, 1) << bit_cast(bit_set, int_type(op0.bit)))));
free_var('bit_set');

 *
**/
bool X86Architecture::Table_2_ba(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    u8 ModRmByte;
    if (!rBinStrm.Read(Offset, ModRmByte))
      return false;

    x86::ModRM ModRm(ModRmByte);
    switch (ModRm.Reg())
    {
    case 0x0:
      return false;
    case 0x1:
      return false;
    case 0x2:
      return false;
    case 0x3:
      return false;
    case 0x4:
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Bt);
      if (Operand__Ev_Ib(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: cf.id = bit_cast((op0.val >> (bit_cast(op1.val, int_type(op0.bit)) & (int(op0.bit, op0.bit) - int(op0.bit, 1)))), int_type1) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlCf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            rInsn.GetOperand(0),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeBinOp(OperationExpression::OpBcast, rInsn.GetOperand(1), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize())),
              Expr::MakeBinOp(
                OperationExpression::OpSub,
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)))), Expr::MakeBitVector(1, 1))));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x5:
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Bts);
      if (Operand__Ev_Ib(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: alloc_var('bit_set', 16) */
        AllExpr.push_back(Expr::MakeVar("bit_set", VariableExpression::Alloc, 0x10));
        /* semantic: bit_set = bit_cast(bit_cast(op1.val, int_type(op0.bit)) & (int(op0.bit, op0.bit) - int(op0.bit, 1)), int_type16) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("bit_set", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpAnd,
            Expr::MakeBinOp(OperationExpression::OpBcast, rInsn.GetOperand(1), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize())),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(16, 16))));
        /* semantic: cf.id = bit_cast((op0.val >> bit_set), int_type1) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlCf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            rInsn.GetOperand(0),
            Expr::MakeVar("bit_set", VariableExpression::Use)), Expr::MakeBitVector(1, 1))));
        /* semantic: res = (op0.val | ((int(op0.bit, 1) << bit_cast(bit_set, int_type(op0.bit))))) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpOr,
            rInsn.GetOperand(0),
            Expr::MakeBinOp(
              OperationExpression::OpLls,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeVar("bit_set", VariableExpression::Use), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()))))));
        /* semantic: op0.val = res
        free_var('bit_set') */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("res", VariableExpression::Use)));
        AllExpr.push_back(Expr::MakeVar("bit_set", VariableExpression::Free));
        /* semantic: free_var('res') */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x6:
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Btr);
      if (Operand__Ev_Ib(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('bit_set', 16) */
        AllExpr.push_back(Expr::MakeVar("bit_set", VariableExpression::Alloc, 0x10));
        /* semantic: bit_set = bit_cast(bit_cast(op1.val, int_type(op0.bit)) & (int(op0.bit, op0.bit) - int(op0.bit, 1)), int_type16) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("bit_set", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpAnd,
            Expr::MakeBinOp(OperationExpression::OpBcast, rInsn.GetOperand(1), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize())),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(16, 16))));
        /* semantic: cf.id = bit_cast((op0.val >> bit_set), int_type1) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlCf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            rInsn.GetOperand(0),
            Expr::MakeVar("bit_set", VariableExpression::Use)), Expr::MakeBitVector(1, 1))));
        /* semantic: op0.val = (op0.val & (~(int(op0.bit, 1) << bit_cast(bit_set, int_type(op0.bit))))) */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeBinOp(
            OperationExpression::OpAnd,
            rInsn.GetOperand(0),
            Expr::MakeUnOp(
              OperationExpression::OpNot,
              Expr::MakeBinOp(
                OperationExpression::OpLls,
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1),
                Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeVar("bit_set", VariableExpression::Use), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize())))))));
        /* semantic: free_var('bit_set') */
        AllExpr.push_back(Expr::MakeVar("bit_set", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x7:
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Btc);
      if (Operand__Ev_Ib(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('bit_set', 16) */
        AllExpr.push_back(Expr::MakeVar("bit_set", VariableExpression::Alloc, 0x10));
        /* semantic: bit_set = bit_cast(bit_cast(op1.val, int_type(op0.bit)) & (int(op0.bit, op0.bit) - int(op0.bit, 1)), int_type16) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("bit_set", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpAnd,
            Expr::MakeBinOp(OperationExpression::OpBcast, rInsn.GetOperand(1), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize())),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(16, 16))));
        /* semantic: cf.id = bit_cast((op0.val >> bit_set), int_type1) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlCf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            rInsn.GetOperand(0),
            Expr::MakeVar("bit_set", VariableExpression::Use)), Expr::MakeBitVector(1, 1))));
        /* semantic: op0.val = (op0.val ^ ((int(op0.bit, 1) << bit_cast(bit_set, int_type(op0.bit))))) */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            rInsn.GetOperand(0),
            Expr::MakeBinOp(
              OperationExpression::OpLls,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeVar("bit_set", VariableExpression::Use), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()))))));
        /* semantic: free_var('bit_set') */
        AllExpr.push_back(Expr::MakeVar("bit_set", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    default:
      return false;
    }
}

/** instruction
 * mnemonic: btc
 * operand: ['Ev', 'Gv']
 * opcode: bb
 * cpu_model: >= X86_Arch_80386
 * semantic: alloc_var('bit_set', 16);
bit_set = bit_cast(bit_cast(op1.val, int_type(op0.bit)) & (int(op0.bit, op0.bit) - int(op0.bit, 1)), int_type16);
cf.id = bit_cast((op0.val >> bit_set), int_type1);
op0.val = (op0.val ^ ((int(op0.bit, 1) << bit_cast(bit_set, int_type(op0.bit)))));
free_var('bit_set');

**/
bool X86Architecture::Table_2_bb(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_80386)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Btc);
      if (Operand__Ev_Gv(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('bit_set', 16) */
        AllExpr.push_back(Expr::MakeVar("bit_set", VariableExpression::Alloc, 0x10));
        /* semantic: bit_set = bit_cast(bit_cast(op1.val, int_type(op0.bit)) & (int(op0.bit, op0.bit) - int(op0.bit, 1)), int_type16) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("bit_set", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpAnd,
            Expr::MakeBinOp(OperationExpression::OpBcast, rInsn.GetOperand(1), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize())),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(16, 16))));
        /* semantic: cf.id = bit_cast((op0.val >> bit_set), int_type1) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlCf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            rInsn.GetOperand(0),
            Expr::MakeVar("bit_set", VariableExpression::Use)), Expr::MakeBitVector(1, 1))));
        /* semantic: op0.val = (op0.val ^ ((int(op0.bit, 1) << bit_cast(bit_set, int_type(op0.bit))))) */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            rInsn.GetOperand(0),
            Expr::MakeBinOp(
              OperationExpression::OpLls,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeVar("bit_set", VariableExpression::Use), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()))))));
        /* semantic: free_var('bit_set') */
        AllExpr.push_back(Expr::MakeVar("bit_set", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    else
      return false;
}

/** instructions
 * opcode: bc
 *
 * mnemonic: bsf
 * operand: ['Gv', 'Ev']
 * semantic: if __expr and op1.val == int(op1.bit, 0):
  zf.id = int1(1)
else:
  zf.id = int1(0)
  op0.val = bsf(op1.val);

 * cpu_model: >= X86_Arch_80386
 *
 * mnemonic: tzcnt
 * operand: ['Gv', 'Ev']
 * prefix: f3
 *
**/
bool X86Architecture::Table_2_bc(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if ((rInsn.GetPrefix() & X86_Prefix_Rep) == X86_Prefix_Rep)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Tzcnt);
      if (Operand__Gv_Ev(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_80386)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Bsf);
      if (Operand__Gv_Ev(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: if __expr and op1.val == int(op1.bit, 0):
          zf.id = int1(1)
        else:
          zf.id = int1(0)
          op0.val = bsf(op1.val) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          rInsn.GetOperand(1),
          Expr::MakeBitVector(rInsn.GetOperand(1)->GetBitSize(), 0x0),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlZf, &m_CpuInfo),
            Expr::MakeBitVector(1, 0x1)),
          Expr::MakeBind({
          Expr::MakeAssign(
            Expr::MakeId(X86_FlZf, &m_CpuInfo),
            Expr::MakeBitVector(1, 0x0)),
          Expr::MakeAssign(
            rInsn.GetOperand(0),
            Expr::MakeUnOp(OperationExpression::OpBsf, rInsn.GetOperand(1)))})
        ));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    return false;
}

/** instructions
 * opcode: bd
 *
 * mnemonic: bsr
 * operand: ['Gv', 'Ev']
 * semantic: if __expr and op1.val == int(op1.bit, 0):
  zf.id = int1(1)
else:
  zf.id = int1(0)
  op0.val = bsr(op1);

 * cpu_model: >= X86_Arch_80386
 *
 * mnemonic: lzcnt
 * operand: ['Gv', 'Ev']
 * prefix: f3
 *
**/
bool X86Architecture::Table_2_bd(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if ((rInsn.GetPrefix() & X86_Prefix_Rep) == X86_Prefix_Rep)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Lzcnt);
      if (Operand__Gv_Ev(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_80386)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Bsr);
      if (Operand__Gv_Ev(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: if __expr and op1.val == int(op1.bit, 0):
          zf.id = int1(1)
        else:
          zf.id = int1(0)
          op0.val = bsr(op1) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          rInsn.GetOperand(1),
          Expr::MakeBitVector(rInsn.GetOperand(1)->GetBitSize(), 0x0),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlZf, &m_CpuInfo),
            Expr::MakeBitVector(1, 0x1)),
          Expr::MakeBind({
          Expr::MakeAssign(
            Expr::MakeId(X86_FlZf, &m_CpuInfo),
            Expr::MakeBitVector(1, 0x0)),
          Expr::MakeAssign(
            rInsn.GetOperand(0),
            Expr::MakeUnOp(OperationExpression::OpBsr, rInsn.GetOperand(1)))})
        ));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    return false;
}

/** instruction
 * mnemonic: movsx
 * operand: ['Gv', 'Eb']
 * opcode: be
 * cpu_model: >= X86_Arch_80386
 * semantic: op0.val = sign_extend(op1.val, int(op0.bit, op0.bit));

**/
bool X86Architecture::Table_2_be(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_80386)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Movsx);
      if (Operand__Gv_Eb(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: op0.val = sign_extend(op1.val, int(op0.bit, op0.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeBinOp(OperationExpression::OpSext, rInsn.GetOperand(1), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()))));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    else
      return false;
}

/** instruction
 * mnemonic: movsx
 * operand: ['Gv', 'Ew']
 * opcode: bf
 * cpu_model: >= X86_Arch_80386
 * semantic: op0.val = sign_extend(op1.val, int(op0.bit, op0.bit));

**/
bool X86Architecture::Table_2_bf(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_80386)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Movsx);
      if (Operand__Gv_Ew(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: op0.val = sign_extend(op1.val, int(op0.bit, op0.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeBinOp(OperationExpression::OpSext, rInsn.GetOperand(1), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()))));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    else
      return false;
}

/** instruction
 * mnemonic: xadd
 * semantic: alloc_var('res', op0.bit);
alloc_var('tmp_val', op0.bit);
tmp_val = op0.val;
op0.val = op1.val;
op1.val = tmp_val;
res = op1.val + op0.val;
call('overflow_flag_add');
call('carry_flag_add');
call('sign_flag');
call('zero_flag');
call('parity_flag');
call('adjust_flag');
op0.val = res;
free_var('res');
free_var('tmp_val');

 * operand: ['Eb', 'Gb']
 * opcode: c0
 * update_flags: ['cf', 'pf', 'af', 'zf', 'sf', 'of']
 * cpu_model: >= X86_Arch_80486
**/
bool X86Architecture::Table_2_c0(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_80486)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Xadd);
      if (Operand__Eb_Gb(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        rInsn.SetUpdatedFlags(X86_FlCf | X86_FlPf | X86_FlAf | X86_FlZf | X86_FlSf | X86_FlOf);
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: alloc_var('tmp_val', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("tmp_val", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: tmp_val = op0.val */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("tmp_val", VariableExpression::Use),
          rInsn.GetOperand(0)));
        /* semantic: op0.val = op1.val */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          rInsn.GetOperand(1)));
        /* semantic: op1.val = tmp_val */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(1),
          Expr::MakeVar("tmp_val", VariableExpression::Use)));
        /* semantic: res = op1.val + op0.val */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpAdd,
            rInsn.GetOperand(1),
            rInsn.GetOperand(0))));
        /* semantic: call('overflow_flag_add') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlOf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                Expr::MakeVar("res", VariableExpression::Use)),
              Expr::MakeUnOp(
                OperationExpression::OpNot,
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  rInsn.GetOperand(0),
                  rInsn.GetOperand(1)))),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        /* semantic: call('carry_flag_add') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlCf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(
                OperationExpression::OpAnd,
                rInsn.GetOperand(0),
                rInsn.GetOperand(1)),
              Expr::MakeBinOp(
                OperationExpression::OpAnd,
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  Expr::MakeBinOp(
                    OperationExpression::OpXor,
                    rInsn.GetOperand(0),
                    rInsn.GetOperand(1)),
                  Expr::MakeVar("res", VariableExpression::Use)),
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  rInsn.GetOperand(0),
                  rInsn.GetOperand(1)))),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        /* semantic: call('sign_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlSf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        /* semantic: call('zero_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlZf, &m_CpuInfo),
          Expr::MakeTernaryCond(ConditionExpression::CondEq,
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))));
        /* semantic: call('parity_flag') */
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBitVector(1, 0x1)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlPf, &m_CpuInfo),
          Expr::MakeVar("pf_tmp", VariableExpression::Use)));
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
        /* semantic: call('adjust_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlAf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                rInsn.GetOperand(1)),
              Expr::MakeVar("res", VariableExpression::Use)),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))));
        /* semantic: op0.val = res */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("res", VariableExpression::Use)));
        /* semantic: free_var('res') */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        /* semantic: free_var('tmp_val') */
        AllExpr.push_back(Expr::MakeVar("tmp_val", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    else
      return false;
}

/** instruction
 * mnemonic: xadd
 * semantic: alloc_var('res', op0.bit);
alloc_var('tmp_val', op0.bit);
tmp_val = op0.val;
op0.val = op1.val;
op1.val = tmp_val;
res = op1.val + op0.val;
call('overflow_flag_add');
call('carry_flag_add');
call('sign_flag');
call('zero_flag');
call('parity_flag');
call('adjust_flag');
op0.val = res;
free_var('res');
free_var('tmp_val');

 * operand: ['Ev', 'Gv']
 * opcode: c1
 * update_flags: ['cf', 'pf', 'af', 'zf', 'sf', 'of']
 * cpu_model: >= X86_Arch_80486
**/
bool X86Architecture::Table_2_c1(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_80486)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Xadd);
      if (Operand__Ev_Gv(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        rInsn.SetUpdatedFlags(X86_FlCf | X86_FlPf | X86_FlAf | X86_FlZf | X86_FlSf | X86_FlOf);
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: alloc_var('tmp_val', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("tmp_val", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: tmp_val = op0.val */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("tmp_val", VariableExpression::Use),
          rInsn.GetOperand(0)));
        /* semantic: op0.val = op1.val */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          rInsn.GetOperand(1)));
        /* semantic: op1.val = tmp_val */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(1),
          Expr::MakeVar("tmp_val", VariableExpression::Use)));
        /* semantic: res = op1.val + op0.val */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpAdd,
            rInsn.GetOperand(1),
            rInsn.GetOperand(0))));
        /* semantic: call('overflow_flag_add') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlOf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                Expr::MakeVar("res", VariableExpression::Use)),
              Expr::MakeUnOp(
                OperationExpression::OpNot,
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  rInsn.GetOperand(0),
                  rInsn.GetOperand(1)))),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        /* semantic: call('carry_flag_add') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlCf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(
                OperationExpression::OpAnd,
                rInsn.GetOperand(0),
                rInsn.GetOperand(1)),
              Expr::MakeBinOp(
                OperationExpression::OpAnd,
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  Expr::MakeBinOp(
                    OperationExpression::OpXor,
                    rInsn.GetOperand(0),
                    rInsn.GetOperand(1)),
                  Expr::MakeVar("res", VariableExpression::Use)),
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  rInsn.GetOperand(0),
                  rInsn.GetOperand(1)))),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        /* semantic: call('sign_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlSf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        /* semantic: call('zero_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlZf, &m_CpuInfo),
          Expr::MakeTernaryCond(ConditionExpression::CondEq,
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))));
        /* semantic: call('parity_flag') */
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBitVector(1, 0x1)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlPf, &m_CpuInfo),
          Expr::MakeVar("pf_tmp", VariableExpression::Use)));
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
        /* semantic: call('adjust_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlAf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                rInsn.GetOperand(1)),
              Expr::MakeVar("res", VariableExpression::Use)),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))));
        /* semantic: op0.val = res */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("res", VariableExpression::Use)));
        /* semantic: free_var('res') */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        /* semantic: free_var('tmp_val') */
        AllExpr.push_back(Expr::MakeVar("tmp_val", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    else
      return false;
}

/** instruction
 * opcode: c2
 * invalid
**/
bool X86Architecture::Table_2_c2(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * mnemonic: movnti
 * operand: ['My', 'Gy']
 * opcode: c3
 * cpu_model: >= X86_Arch_Sse2
**/
bool X86Architecture::Table_2_c3(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse2)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Movnti);
      if (Operand__My_Gy(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else
      return false;
}

/** instructions
 * opcode: c4
 *
 * mnemonic: pinsrw
 * operand: ['Pq', 'Mw', 'Ib']
 * cpu_model: >= X86_Arch_Mmx_sse
 *
 * mnemonic: pinsrw
 * operand: ['Vo', 'Mw', 'Ib']
 * prefix: 66
 * cpu_model: >= X86_Arch_Sse2
 *
**/
bool X86Architecture::Table_2_c4(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse2 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pinsrw);
      if (Operand__Vo_Mw_Ib(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Mmx_sse)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pinsrw);
      if (Operand__Pq_Mw_Ib(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    return false;
}

/** instructions
 * opcode: c5
 *
 * mnemonic: pextrw
 * operand: ['Gy', 'Nq', 'Ib']
 * cpu_model: >= X86_Arch_Mmx_sse
 *
 * mnemonic: pextrw
 * operand: ['Gy', 'Uo', 'Ib']
 * prefix: 66
 * cpu_model: >= X86_Arch_Sse2
 *
**/
bool X86Architecture::Table_2_c5(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse2 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pextrw);
      if (Operand__Gy_Uo_Ib(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Mmx_sse)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pextrw);
      if (Operand__Gy_Nq_Ib(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    return false;
}

/** instructions
 * opcode: c6
 *
 * mnemonic: shufps
 * operand: ['Vx', 'Wx', 'Ib']
 * cpu_model: >= X86_Arch_Sse
 *
 * mnemonic: shufpd
 * operand: ['Vx', 'Wx', 'Ib']
 * prefix: 66
 * cpu_model: >= X86_Arch_Sse2
 *
**/
bool X86Architecture::Table_2_c6(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse2 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Shufpd);
      if (Operand__Vx_Wx_Ib(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Shufps);
      if (Operand__Vx_Wx_Ib(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    return false;
}

/** group:
 * opcode: 00
 * invalid
 *
 * opcode: 01
 * sub_opcodes: [{'mnemonic': 'cmpxchg8b', 'operand': ['Mq'], 'semantic': []}, {'mnemonic': 'cmpxchg16b', 'operand': ['Uo'], 'semantic': [], 'attr': ['m64']}]
 *
 * opcode: 02
 * invalid
 *
 * opcode: 03
 * invalid
 *
 * opcode: 04
 * invalid
 *
 * opcode: 05
 * invalid
 *
 * opcode: 06
 * sub_opcodes: [{'mnemonic': 'vmptrld', 'operand': ['Mq']}, {'mnemonic': 'vmclear', 'operand': ['Mq'], 'prefix': 102}, {'mnemonic': 'vmxon', 'prefix': 243}]
 *
 * mnemonic: vmptrst
 * operand: ['Mq']
 * opcode: 07
 *
**/
bool X86Architecture::Table_2_c7(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    u8 ModRmByte;
    if (!rBinStrm.Read(Offset, ModRmByte))
      return false;

    x86::ModRM ModRm(ModRmByte);
    switch (ModRm.Reg())
    {
    case 0x0:
      return false;
    case 0x1:
      if (Mode == X86_Bit_64)
      {
        rInsn.Length()++;
        rInsn.SetOpcode(X86_Opcode_Cmpxchg16b);
        if (Operand__Uo(rBinStrm, Offset, rInsn, Mode) == false)
        {
          return false;
        }
        return true;
      }
      else
      {
        rInsn.Length()++;
        rInsn.SetOpcode(X86_Opcode_Cmpxchg8b);
        if (Operand__Mq(rBinStrm, Offset, rInsn, Mode) == false)
        {
          return false;
        }
        return true;
      }
    case 0x2:
      return false;
    case 0x3:
      return false;
    case 0x4:
      return false;
    case 0x5:
      return false;
    case 0x6:
      if ((rInsn.GetPrefix() & X86_Prefix_Rep) == X86_Prefix_Rep)
      {
        rInsn.Length()++;
        rInsn.SetOpcode(X86_Opcode_Vmxon);
        return true;
      }
      else if ((rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
      {
        rInsn.Length()++;
        rInsn.SetOpcode(X86_Opcode_Vmclear);
        if (Operand__Mq(rBinStrm, Offset, rInsn, Mode) == false)
        {
          return false;
        }
        return true;
      }
      else
      {
        rInsn.Length()++;
        rInsn.SetOpcode(X86_Opcode_Vmptrld);
        if (Operand__Mq(rBinStrm, Offset, rInsn, Mode) == false)
        {
          return false;
        }
        return true;
      }
    case 0x7:
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Vmptrst);
      if (Operand__Mq(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    default:
      return false;
    }
}

/** instructions
 * opcode: c8
 *
 * mnemonic: bswap
 * operand: ['rAX']
 * semantic: if __expr and int(op0.bit, op0.bit) == int(op0.bit, 16): # Handle undefined processor state on 16-bit
  op0.val = int(op0.bit, 0)
else:
  op0.val = swap(op0.val);

 * cpu_model: >= X86_Arch_80486
 *
 * mnemonic: bswap
 * operand: ['r8']
 * semantic: if __expr and int(op0.bit, op0.bit) == int(op0.bit, 16): # Handle undefined processor state on 16-bit
  op0.val = int(op0.bit, 0)
else:
  op0.val = swap(op0.val);

 * attr: ['rexb']
 * cpu_model: >= X86_Arch_80486
 *
**/
bool X86Architecture::Table_2_c8(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_80486 && (rInsn.GetPrefix() & X86_Prefix_REX_b) == X86_Prefix_REX_b)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Bswap);
      if (Operand__r8(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: if __expr and int(op0.bit, op0.bit) == int(op0.bit, 16): # Handle undefined processor state on 16-bit
          op0.val = int(op0.bit, 0)
        else:
          op0.val = swap(op0.val) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x10),
          Expr::MakeAssign(
            rInsn.GetOperand(0),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)),
          Expr::MakeAssign(
            rInsn.GetOperand(0),
            Expr::MakeUnOp(OperationExpression::OpSwap, rInsn.GetOperand(0)))));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_80486)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Bswap);
      if (Operand__rAX(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: if __expr and int(op0.bit, op0.bit) == int(op0.bit, 16): # Handle undefined processor state on 16-bit
          op0.val = int(op0.bit, 0)
        else:
          op0.val = swap(op0.val) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x10),
          Expr::MakeAssign(
            rInsn.GetOperand(0),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)),
          Expr::MakeAssign(
            rInsn.GetOperand(0),
            Expr::MakeUnOp(OperationExpression::OpSwap, rInsn.GetOperand(0)))));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    return false;
}

/** instructions
 * opcode: c9
 *
 * mnemonic: bswap
 * operand: ['rCX']
 * semantic: if __expr and int(op0.bit, op0.bit) == int(op0.bit, 16): # Handle undefined processor state on 16-bit
  op0.val = int(op0.bit, 0)
else:
  op0.val = swap(op0.val);

 * cpu_model: >= X86_Arch_80486
 *
 * mnemonic: bswap
 * operand: ['r9']
 * semantic: if __expr and int(op0.bit, op0.bit) == int(op0.bit, 16): # Handle undefined processor state on 16-bit
  op0.val = int(op0.bit, 0)
else:
  op0.val = swap(op0.val);

 * attr: ['rexb']
 * cpu_model: >= X86_Arch_80486
 *
**/
bool X86Architecture::Table_2_c9(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_80486 && (rInsn.GetPrefix() & X86_Prefix_REX_b) == X86_Prefix_REX_b)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Bswap);
      if (Operand__r9(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: if __expr and int(op0.bit, op0.bit) == int(op0.bit, 16): # Handle undefined processor state on 16-bit
          op0.val = int(op0.bit, 0)
        else:
          op0.val = swap(op0.val) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x10),
          Expr::MakeAssign(
            rInsn.GetOperand(0),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)),
          Expr::MakeAssign(
            rInsn.GetOperand(0),
            Expr::MakeUnOp(OperationExpression::OpSwap, rInsn.GetOperand(0)))));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_80486)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Bswap);
      if (Operand__rCX(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: if __expr and int(op0.bit, op0.bit) == int(op0.bit, 16): # Handle undefined processor state on 16-bit
          op0.val = int(op0.bit, 0)
        else:
          op0.val = swap(op0.val) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x10),
          Expr::MakeAssign(
            rInsn.GetOperand(0),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)),
          Expr::MakeAssign(
            rInsn.GetOperand(0),
            Expr::MakeUnOp(OperationExpression::OpSwap, rInsn.GetOperand(0)))));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    return false;
}

/** instructions
 * opcode: ca
 *
 * mnemonic: bswap
 * operand: ['rDX']
 * semantic: if __expr and int(op0.bit, op0.bit) == int(op0.bit, 16): # Handle undefined processor state on 16-bit
  op0.val = int(op0.bit, 0)
else:
  op0.val = swap(op0.val);

 * cpu_model: >= X86_Arch_80486
 *
 * mnemonic: bswap
 * operand: ['r10']
 * semantic: if __expr and int(op0.bit, op0.bit) == int(op0.bit, 16): # Handle undefined processor state on 16-bit
  op0.val = int(op0.bit, 0)
else:
  op0.val = swap(op0.val);

 * attr: ['rexb']
 * cpu_model: >= X86_Arch_80486
 *
**/
bool X86Architecture::Table_2_ca(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_80486 && (rInsn.GetPrefix() & X86_Prefix_REX_b) == X86_Prefix_REX_b)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Bswap);
      if (Operand__r10(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: if __expr and int(op0.bit, op0.bit) == int(op0.bit, 16): # Handle undefined processor state on 16-bit
          op0.val = int(op0.bit, 0)
        else:
          op0.val = swap(op0.val) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x10),
          Expr::MakeAssign(
            rInsn.GetOperand(0),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)),
          Expr::MakeAssign(
            rInsn.GetOperand(0),
            Expr::MakeUnOp(OperationExpression::OpSwap, rInsn.GetOperand(0)))));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_80486)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Bswap);
      if (Operand__rDX(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: if __expr and int(op0.bit, op0.bit) == int(op0.bit, 16): # Handle undefined processor state on 16-bit
          op0.val = int(op0.bit, 0)
        else:
          op0.val = swap(op0.val) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x10),
          Expr::MakeAssign(
            rInsn.GetOperand(0),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)),
          Expr::MakeAssign(
            rInsn.GetOperand(0),
            Expr::MakeUnOp(OperationExpression::OpSwap, rInsn.GetOperand(0)))));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    return false;
}

/** instructions
 * opcode: cb
 *
 * mnemonic: bswap
 * operand: ['rBX']
 * semantic: if __expr and int(op0.bit, op0.bit) == int(op0.bit, 16): # Handle undefined processor state on 16-bit
  op0.val = int(op0.bit, 0)
else:
  op0.val = swap(op0.val);

 * cpu_model: >= X86_Arch_80486
 *
 * mnemonic: bswap
 * operand: ['r11']
 * semantic: if __expr and int(op0.bit, op0.bit) == int(op0.bit, 16): # Handle undefined processor state on 16-bit
  op0.val = int(op0.bit, 0)
else:
  op0.val = swap(op0.val);

 * attr: ['rexb']
 * cpu_model: >= X86_Arch_80486
 *
**/
bool X86Architecture::Table_2_cb(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_80486 && (rInsn.GetPrefix() & X86_Prefix_REX_b) == X86_Prefix_REX_b)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Bswap);
      if (Operand__r11(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: if __expr and int(op0.bit, op0.bit) == int(op0.bit, 16): # Handle undefined processor state on 16-bit
          op0.val = int(op0.bit, 0)
        else:
          op0.val = swap(op0.val) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x10),
          Expr::MakeAssign(
            rInsn.GetOperand(0),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)),
          Expr::MakeAssign(
            rInsn.GetOperand(0),
            Expr::MakeUnOp(OperationExpression::OpSwap, rInsn.GetOperand(0)))));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_80486)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Bswap);
      if (Operand__rBX(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: if __expr and int(op0.bit, op0.bit) == int(op0.bit, 16): # Handle undefined processor state on 16-bit
          op0.val = int(op0.bit, 0)
        else:
          op0.val = swap(op0.val) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x10),
          Expr::MakeAssign(
            rInsn.GetOperand(0),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)),
          Expr::MakeAssign(
            rInsn.GetOperand(0),
            Expr::MakeUnOp(OperationExpression::OpSwap, rInsn.GetOperand(0)))));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    return false;
}

/** instructions
 * opcode: cc
 *
 * mnemonic: bswap
 * operand: ['rSP']
 * semantic: if __expr and int(op0.bit, op0.bit) == int(op0.bit, 16): # Handle undefined processor state on 16-bit
  op0.val = int(op0.bit, 0)
else:
  op0.val = swap(op0.val);

 * cpu_model: >= X86_Arch_80486
 *
 * mnemonic: bswap
 * operand: ['r12']
 * semantic: if __expr and int(op0.bit, op0.bit) == int(op0.bit, 16): # Handle undefined processor state on 16-bit
  op0.val = int(op0.bit, 0)
else:
  op0.val = swap(op0.val);

 * attr: ['rexb']
 * cpu_model: >= X86_Arch_80486
 *
**/
bool X86Architecture::Table_2_cc(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_80486 && (rInsn.GetPrefix() & X86_Prefix_REX_b) == X86_Prefix_REX_b)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Bswap);
      if (Operand__r12(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: if __expr and int(op0.bit, op0.bit) == int(op0.bit, 16): # Handle undefined processor state on 16-bit
          op0.val = int(op0.bit, 0)
        else:
          op0.val = swap(op0.val) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x10),
          Expr::MakeAssign(
            rInsn.GetOperand(0),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)),
          Expr::MakeAssign(
            rInsn.GetOperand(0),
            Expr::MakeUnOp(OperationExpression::OpSwap, rInsn.GetOperand(0)))));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_80486)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Bswap);
      if (Operand__rSP(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: if __expr and int(op0.bit, op0.bit) == int(op0.bit, 16): # Handle undefined processor state on 16-bit
          op0.val = int(op0.bit, 0)
        else:
          op0.val = swap(op0.val) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x10),
          Expr::MakeAssign(
            rInsn.GetOperand(0),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)),
          Expr::MakeAssign(
            rInsn.GetOperand(0),
            Expr::MakeUnOp(OperationExpression::OpSwap, rInsn.GetOperand(0)))));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    return false;
}

/** instructions
 * opcode: cd
 *
 * mnemonic: bswap
 * operand: ['rBP']
 * semantic: if __expr and int(op0.bit, op0.bit) == int(op0.bit, 16): # Handle undefined processor state on 16-bit
  op0.val = int(op0.bit, 0)
else:
  op0.val = swap(op0.val);

 * cpu_model: >= X86_Arch_80486
 *
 * mnemonic: bswap
 * operand: ['r13']
 * semantic: if __expr and int(op0.bit, op0.bit) == int(op0.bit, 16): # Handle undefined processor state on 16-bit
  op0.val = int(op0.bit, 0)
else:
  op0.val = swap(op0.val);

 * attr: ['rexb']
 * cpu_model: >= X86_Arch_80486
 *
**/
bool X86Architecture::Table_2_cd(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_80486 && (rInsn.GetPrefix() & X86_Prefix_REX_b) == X86_Prefix_REX_b)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Bswap);
      if (Operand__r13(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: if __expr and int(op0.bit, op0.bit) == int(op0.bit, 16): # Handle undefined processor state on 16-bit
          op0.val = int(op0.bit, 0)
        else:
          op0.val = swap(op0.val) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x10),
          Expr::MakeAssign(
            rInsn.GetOperand(0),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)),
          Expr::MakeAssign(
            rInsn.GetOperand(0),
            Expr::MakeUnOp(OperationExpression::OpSwap, rInsn.GetOperand(0)))));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_80486)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Bswap);
      if (Operand__rBP(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: if __expr and int(op0.bit, op0.bit) == int(op0.bit, 16): # Handle undefined processor state on 16-bit
          op0.val = int(op0.bit, 0)
        else:
          op0.val = swap(op0.val) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x10),
          Expr::MakeAssign(
            rInsn.GetOperand(0),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)),
          Expr::MakeAssign(
            rInsn.GetOperand(0),
            Expr::MakeUnOp(OperationExpression::OpSwap, rInsn.GetOperand(0)))));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    return false;
}

/** instructions
 * opcode: ce
 *
 * mnemonic: bswap
 * operand: ['rSI']
 * semantic: if __expr and int(op0.bit, op0.bit) == int(op0.bit, 16): # Handle undefined processor state on 16-bit
  op0.val = int(op0.bit, 0)
else:
  op0.val = swap(op0.val);

 * cpu_model: >= X86_Arch_80486
 *
 * mnemonic: bswap
 * operand: ['r14']
 * semantic: if __expr and int(op0.bit, op0.bit) == int(op0.bit, 16): # Handle undefined processor state on 16-bit
  op0.val = int(op0.bit, 0)
else:
  op0.val = swap(op0.val);

 * attr: ['rexb']
 * cpu_model: >= X86_Arch_80486
 *
**/
bool X86Architecture::Table_2_ce(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_80486 && (rInsn.GetPrefix() & X86_Prefix_REX_b) == X86_Prefix_REX_b)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Bswap);
      if (Operand__r14(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: if __expr and int(op0.bit, op0.bit) == int(op0.bit, 16): # Handle undefined processor state on 16-bit
          op0.val = int(op0.bit, 0)
        else:
          op0.val = swap(op0.val) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x10),
          Expr::MakeAssign(
            rInsn.GetOperand(0),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)),
          Expr::MakeAssign(
            rInsn.GetOperand(0),
            Expr::MakeUnOp(OperationExpression::OpSwap, rInsn.GetOperand(0)))));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_80486)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Bswap);
      if (Operand__rSI(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: if __expr and int(op0.bit, op0.bit) == int(op0.bit, 16): # Handle undefined processor state on 16-bit
          op0.val = int(op0.bit, 0)
        else:
          op0.val = swap(op0.val) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x10),
          Expr::MakeAssign(
            rInsn.GetOperand(0),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)),
          Expr::MakeAssign(
            rInsn.GetOperand(0),
            Expr::MakeUnOp(OperationExpression::OpSwap, rInsn.GetOperand(0)))));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    return false;
}

/** instructions
 * opcode: cf
 *
 * mnemonic: bswap
 * operand: ['rDI']
 * semantic: if __expr and int(op0.bit, op0.bit) == int(op0.bit, 16): # Handle undefined processor state on 16-bit
  op0.val = int(op0.bit, 0)
else:
  op0.val = swap(op0.val);

 * cpu_model: >= X86_Arch_80486
 *
 * mnemonic: bswap
 * operand: ['r15']
 * semantic: if __expr and int(op0.bit, op0.bit) == int(op0.bit, 16): # Handle undefined processor state on 16-bit
  op0.val = int(op0.bit, 0)
else:
  op0.val = swap(op0.val);

 * attr: ['rexb']
 * cpu_model: >= X86_Arch_80486
 *
**/
bool X86Architecture::Table_2_cf(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_80486 && (rInsn.GetPrefix() & X86_Prefix_REX_b) == X86_Prefix_REX_b)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Bswap);
      if (Operand__r15(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: if __expr and int(op0.bit, op0.bit) == int(op0.bit, 16): # Handle undefined processor state on 16-bit
          op0.val = int(op0.bit, 0)
        else:
          op0.val = swap(op0.val) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x10),
          Expr::MakeAssign(
            rInsn.GetOperand(0),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)),
          Expr::MakeAssign(
            rInsn.GetOperand(0),
            Expr::MakeUnOp(OperationExpression::OpSwap, rInsn.GetOperand(0)))));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_80486)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Bswap);
      if (Operand__rDI(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: if __expr and int(op0.bit, op0.bit) == int(op0.bit, 16): # Handle undefined processor state on 16-bit
          op0.val = int(op0.bit, 0)
        else:
          op0.val = swap(op0.val) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x10),
          Expr::MakeAssign(
            rInsn.GetOperand(0),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)),
          Expr::MakeAssign(
            rInsn.GetOperand(0),
            Expr::MakeUnOp(OperationExpression::OpSwap, rInsn.GetOperand(0)))));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    return false;
}

/** instructions
 * opcode: d0
 *
 * invalid
 *
 * mnemonic: addsubps
 * operand: ['Vx', 'Wx']
 * prefix: 66
 * cpu_model: >= X86_Arch_Sse3
 *
 * mnemonic: addsubps
 * operand: ['Vx', 'Wx']
 * prefix: f2
 * cpu_model: >= X86_Arch_Sse3
 *
**/
bool X86Architecture::Table_2_d0(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse3 && (rInsn.GetPrefix() & X86_Prefix_RepNz) == X86_Prefix_RepNz)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Addsubps);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse3 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Addsubps);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else
    {
      return false; /* INVALID */
    }
}

/** instructions
 * opcode: d1
 *
 * mnemonic: psrlw
 * operand: ['Pq', 'Qq']
 * cpu_model: >= X86_Arch_Mmx
 *
 * mnemonic: psrlw
 * operand: ['Vx', 'Wx']
 * prefix: 66
 * cpu_model: >= X86_Arch_Sse2
 *
**/
bool X86Architecture::Table_2_d1(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse2 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Psrlw);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Mmx)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Psrlw);
      if (Operand__Pq_Qq(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    return false;
}

/** instructions
 * opcode: d2
 *
 * mnemonic: psrld
 * operand: ['Pq', 'Qq']
 * cpu_model: >= X86_Arch_Mmx
 *
 * mnemonic: psrld
 * operand: ['Vx', 'Wx']
 * prefix: 66
 * cpu_model: >= X86_Arch_Sse2
 *
**/
bool X86Architecture::Table_2_d2(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse2 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Psrld);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Mmx)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Psrld);
      if (Operand__Pq_Qq(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    return false;
}

/** instructions
 * opcode: d3
 *
 * mnemonic: psrlq
 * operand: ['Pq', 'Qq']
 * cpu_model: >= X86_Arch_Mmx
 *
 * mnemonic: psrld
 * operand: ['Vx', 'Wx']
 * prefix: 66
 * cpu_model: >= X86_Arch_Sse2
 *
**/
bool X86Architecture::Table_2_d3(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse2 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Psrld);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Mmx)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Psrlq);
      if (Operand__Pq_Qq(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    return false;
}

/** instructions
 * opcode: d4
 *
 * mnemonic: paddq
 * operand: ['Pq', 'Qq']
 * cpu_model: >= X86_Arch_Mmx_sse2
 *
 * mnemonic: paddq
 * operand: ['Vx', 'Wx']
 * prefix: 66
 * cpu_model: >= X86_Arch_Sse2
 *
**/
bool X86Architecture::Table_2_d4(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse2 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Paddq);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Mmx_sse2)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Paddq);
      if (Operand__Pq_Qq(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    return false;
}

/** instructions
 * opcode: d5
 *
 * mnemonic: pmullw
 * operand: ['Pq', 'Qq']
 * cpu_model: >= X86_Arch_Mmx
 *
 * mnemonic: pmullw
 * operand: ['Vx', 'Wx']
 * prefix: 66
 * cpu_model: >= X86_Arch_Sse2
 *
**/
bool X86Architecture::Table_2_d5(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse2 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pmullw);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Mmx)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pmullw);
      if (Operand__Pq_Qq(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    return false;
}

/** instructions
 * opcode: d6
 *
 * invalid
 *
 * mnemonic: movq
 * operand: ['Woq', 'Vo']
 * prefix: 66
 * cpu_model: >= X86_Arch_Sse2
 *
 * mnemonic: movq2dq
 * operand: ['Vo', 'Nq']
 * prefix: f3
 * cpu_model: >= X86_Arch_Sse2_mmx
 *
 * mnemonic: movdq2q
 * operand: ['Pq', 'Uq']
 * prefix: f2
 * cpu_model: >= X86_Arch_Sse2_mmx
 *
**/
bool X86Architecture::Table_2_d6(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse2_mmx && (rInsn.GetPrefix() & X86_Prefix_RepNz) == X86_Prefix_RepNz)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Movdq2q);
      if (Operand__Pq_Uq(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse2_mmx && (rInsn.GetPrefix() & X86_Prefix_Rep) == X86_Prefix_Rep)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Movq2dq);
      if (Operand__Vo_Nq(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse2 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Movq);
      if (Operand__Woq_Vo(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else
    {
      return false; /* INVALID */
    }
}

/** instructions
 * opcode: d7
 *
 * mnemonic: pmovmskb
 * operand: ['Gy', 'Nq']
 * cpu_model: >= X86_Arch_Mmx_sse
 *
 * mnemonic: pmovmskb
 * operand: ['Gy', 'Ux']
 * prefix: 66
 * cpu_model: >= X86_Arch_Sse2
 *
**/
bool X86Architecture::Table_2_d7(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse2 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pmovmskb);
      if (Operand__Gy_Ux(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Mmx_sse)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pmovmskb);
      if (Operand__Gy_Nq(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    return false;
}

/** instructions
 * opcode: d8
 *
 * mnemonic: psubusb
 * operand: ['Pq', 'Qq']
 * cpu_model: >= X86_Arch_Mmx
 *
 * mnemonic: psubusb
 * operand: ['Vx', 'Wx']
 * prefix: 66
 * cpu_model: >= X86_Arch_Sse2
 *
**/
bool X86Architecture::Table_2_d8(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse2 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Psubusb);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Mmx)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Psubusb);
      if (Operand__Pq_Qq(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    return false;
}

/** instructions
 * opcode: d9
 *
 * mnemonic: psubusw
 * operand: ['Pq', 'Qq']
 * cpu_model: >= X86_Arch_Mmx
 *
 * mnemonic: psubusw
 * operand: ['Vx', 'Wx']
 * prefix: 66
 * cpu_model: >= X86_Arch_Sse2
 *
**/
bool X86Architecture::Table_2_d9(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse2 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Psubusw);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Mmx)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Psubusw);
      if (Operand__Pq_Qq(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    return false;
}

/** instructions
 * opcode: da
 *
 * mnemonic: pminub
 * operand: ['Pq', 'Qq']
 * cpu_model: >= X86_Arch_Mmx
 *
 * mnemonic: pminub
 * operand: ['Vx', 'Wx']
 * prefix: 66
 * cpu_model: >= X86_Arch_Sse2
 *
**/
bool X86Architecture::Table_2_da(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse2 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pminub);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Mmx)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pminub);
      if (Operand__Pq_Qq(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    return false;
}

/** instructions
 * opcode: db
 *
 * mnemonic: pand
 * operand: ['Pq', 'Qq']
 * cpu_model: >= X86_Arch_Mmx
 *
 * mnemonic: pand
 * operand: ['Vx', 'Wx']
 * prefix: 66
 * cpu_model: >= X86_Arch_Sse2
 *
**/
bool X86Architecture::Table_2_db(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse2 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pand);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Mmx)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pand);
      if (Operand__Pq_Qq(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    return false;
}

/** instructions
 * opcode: dc
 *
 * mnemonic: paddusb
 * operand: ['Pq', 'Qq']
 * cpu_model: >= X86_Arch_Mmx
 *
 * mnemonic: paddusb
 * operand: ['Vx', 'Wx']
 * prefix: 66
 * cpu_model: >= X86_Arch_Sse2
 *
**/
bool X86Architecture::Table_2_dc(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse2 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Paddusb);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Mmx)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Paddusb);
      if (Operand__Pq_Qq(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    return false;
}

/** instructions
 * opcode: dd
 *
 * mnemonic: paddusw
 * operand: ['Pq', 'Qq']
 * cpu_model: >= X86_Arch_Mmx
 *
 * mnemonic: paddusw
 * operand: ['Vx', 'Wx']
 * prefix: 66
 * cpu_model: >= X86_Arch_Sse2
 *
**/
bool X86Architecture::Table_2_dd(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse2 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Paddusw);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Mmx)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Paddusw);
      if (Operand__Pq_Qq(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    return false;
}

/** instructions
 * opcode: de
 *
 * mnemonic: pmaxub
 * operand: ['Pq', 'Qq']
 * cpu_model: >= X86_Arch_Mmx
 *
 * mnemonic: pmaxub
 * operand: ['Vx', 'Wx']
 * prefix: 66
 * cpu_model: >= X86_Arch_Sse2
 *
**/
bool X86Architecture::Table_2_de(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse2 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pmaxub);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Mmx)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pmaxub);
      if (Operand__Pq_Qq(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    return false;
}

/** instructions
 * opcode: df
 *
 * mnemonic: pandn
 * operand: ['Pq', 'Qq']
 * cpu_model: >= X86_Arch_Mmx
 *
 * mnemonic: pandn
 * operand: ['Vx', 'Wx']
 * prefix: 66
 * cpu_model: >= X86_Arch_Sse2
 *
**/
bool X86Architecture::Table_2_df(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse2 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pandn);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Mmx)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pandn);
      if (Operand__Pq_Qq(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    return false;
}

/** instructions
 * opcode: e0
 *
 * mnemonic: pavgb
 * operand: ['Pq', 'Qq']
 * cpu_model: >= X86_Arch_Mmx_sse
 *
 * mnemonic: pavgb
 * operand: ['Vx', 'Wx']
 * prefix: 66
 * cpu_model: >= X86_Arch_Sse2
 *
**/
bool X86Architecture::Table_2_e0(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse2 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pavgb);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Mmx_sse)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pavgb);
      if (Operand__Pq_Qq(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    return false;
}

/** instructions
 * opcode: e1
 *
 * mnemonic: psraw
 * operand: ['Pq', 'Qq']
 * cpu_model: >= X86_Arch_Mmx
 *
 * mnemonic: psraw
 * operand: ['Vx', 'Wx']
 * prefix: 66
 * cpu_model: >= X86_Arch_Sse2
 *
**/
bool X86Architecture::Table_2_e1(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse2 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Psraw);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Mmx)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Psraw);
      if (Operand__Pq_Qq(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    return false;
}

/** instructions
 * opcode: e2
 *
 * mnemonic: psrad
 * operand: ['Pq', 'Qq']
 * cpu_model: >= X86_Arch_Mmx
 *
 * mnemonic: psrad
 * operand: ['Vx', 'Wx']
 * prefix: 66
 * cpu_model: >= X86_Arch_Sse2
 *
**/
bool X86Architecture::Table_2_e2(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse2 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Psrad);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Mmx)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Psrad);
      if (Operand__Pq_Qq(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    return false;
}

/** instructions
 * opcode: e3
 *
 * mnemonic: pavgw
 * operand: ['Pq', 'Qq']
 * cpu_model: >= X86_Arch_Mmx_sse
 *
 * mnemonic: pavgw
 * operand: ['Vx', 'Wx']
 * prefix: 66
 * cpu_model: >= X86_Arch_Sse2
 *
**/
bool X86Architecture::Table_2_e3(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse2 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pavgw);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Mmx_sse)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pavgw);
      if (Operand__Pq_Qq(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    return false;
}

/** instructions
 * opcode: e4
 *
 * mnemonic: pmulhuw
 * operand: ['Pq', 'Qq']
 * cpu_model: >= X86_Arch_Mmx_sse
 *
 * mnemonic: pmulhuw
 * operand: ['Vx', 'Wx']
 * prefix: 66
 * cpu_model: >= X86_Arch_Sse2
 *
**/
bool X86Architecture::Table_2_e4(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse2 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pmulhuw);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Mmx_sse)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pmulhuw);
      if (Operand__Pq_Qq(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    return false;
}

/** instructions
 * opcode: e5
 *
 * mnemonic: pmulhw
 * operand: ['Pq', 'Qq']
 * cpu_model: >= X86_Arch_Mmx
 *
 * mnemonic: pmulhw
 * operand: ['Vx', 'Wx']
 * prefix: 66
 * cpu_model: >= X86_Arch_Sse2
 *
**/
bool X86Architecture::Table_2_e5(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse2 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pmulhw);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Mmx)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pmulhw);
      if (Operand__Pq_Qq(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    return false;
}

/** instructions
 * opcode: e6
 *
 * invalid
 *
 * mnemonic: cvttpd2dq
 * operand: ['Vo', 'Wx']
 * prefix: 66
 * cpu_model: >= X86_Arch_Sse2
 *
 * mnemonic: cvtdq2pd
 * operand: ['Vo', 'Woq']
 * prefix: f3
 * cpu_model: >= X86_Arch_Sse2
 *
 * mnemonic: cvtpd2dq
 * operand: ['Vo', 'Wx']
 * prefix: f2
 * cpu_model: >= X86_Arch_Sse2
 *
**/
bool X86Architecture::Table_2_e6(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse2 && (rInsn.GetPrefix() & X86_Prefix_RepNz) == X86_Prefix_RepNz)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Cvtpd2dq);
      if (Operand__Vo_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse2 && (rInsn.GetPrefix() & X86_Prefix_Rep) == X86_Prefix_Rep)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Cvtdq2pd);
      if (Operand__Vo_Woq(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse2 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Cvttpd2dq);
      if (Operand__Vo_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else
    {
      return false; /* INVALID */
    }
}

/** instructions
 * opcode: e7
 *
 * mnemonic: movntq
 * operand: ['Mq', 'Pq']
 * cpu_model: >= X86_Arch_Mmx_sse
 *
 * mnemonic: movntdq
 * operand: ['Mx', 'Vx']
 * prefix: 66
 * cpu_model: >= X86_Arch_Sse2
 *
**/
bool X86Architecture::Table_2_e7(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse2 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Movntdq);
      if (Operand__Mx_Vx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Mmx_sse)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Movntq);
      if (Operand__Mq_Pq(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    return false;
}

/** instructions
 * opcode: e8
 *
 * mnemonic: psubsb
 * operand: ['Pq', 'Qq']
 * cpu_model: >= X86_Arch_Mmx
 *
 * mnemonic: psubsb
 * operand: ['Vx', 'Wx']
 * prefix: 66
 * cpu_model: >= X86_Arch_Sse2
 *
**/
bool X86Architecture::Table_2_e8(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse2 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Psubsb);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Mmx)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Psubsb);
      if (Operand__Pq_Qq(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    return false;
}

/** instructions
 * opcode: e9
 *
 * mnemonic: psubsw
 * operand: ['Pq', 'Qq']
 * cpu_model: >= X86_Arch_Mmx
 *
 * mnemonic: psubsw
 * operand: ['Vx', 'Wx']
 * prefix: 66
 * cpu_model: >= X86_Arch_Sse2
 *
**/
bool X86Architecture::Table_2_e9(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse2 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Psubsw);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Mmx)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Psubsw);
      if (Operand__Pq_Qq(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    return false;
}

/** instructions
 * opcode: ea
 *
 * mnemonic: pminsw
 * operand: ['Pq', 'Qq']
 * cpu_model: >= X86_Arch_Mmx
 *
 * mnemonic: pminsw
 * operand: ['Vx', 'Wx']
 * prefix: 66
 * cpu_model: >= X86_Arch_Sse2
 *
**/
bool X86Architecture::Table_2_ea(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse2 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pminsw);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Mmx)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pminsw);
      if (Operand__Pq_Qq(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    return false;
}

/** instructions
 * opcode: eb
 *
 * mnemonic: por
 * operand: ['Pq', 'Qq']
 * cpu_model: >= X86_Arch_Mmx
 *
 * mnemonic: por
 * operand: ['Vx', 'Wx']
 * prefix: 66
 * cpu_model: >= X86_Arch_Sse2
 *
**/
bool X86Architecture::Table_2_eb(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse2 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Por);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Mmx)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Por);
      if (Operand__Pq_Qq(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    return false;
}

/** instructions
 * opcode: ec
 *
 * mnemonic: paddsb
 * operand: ['Pq', 'Qq']
 * cpu_model: >= X86_Arch_Mmx
 *
 * mnemonic: paddsb
 * operand: ['Vx', 'Wx']
 * prefix: 66
 * cpu_model: >= X86_Arch_Sse2
 *
**/
bool X86Architecture::Table_2_ec(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse2 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Paddsb);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Mmx)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Paddsb);
      if (Operand__Pq_Qq(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    return false;
}

/** instructions
 * opcode: ed
 *
 * mnemonic: paddsw
 * operand: ['Pq', 'Qq']
 * cpu_model: >= X86_Arch_Mmx
 *
 * mnemonic: paddsw
 * operand: ['Vx', 'Wx']
 * prefix: 66
 * cpu_model: >= X86_Arch_Sse2
 *
**/
bool X86Architecture::Table_2_ed(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse2 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Paddsw);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Mmx)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Paddsw);
      if (Operand__Pq_Qq(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    return false;
}

/** instructions
 * opcode: ee
 *
 * mnemonic: pmaxsw
 * operand: ['Pq', 'Qq']
 * cpu_model: >= X86_Arch_Mmx
 *
 * mnemonic: pmaxsw
 * operand: ['Vx', 'Wx']
 * prefix: 66
 * cpu_model: >= X86_Arch_Sse2
 *
**/
bool X86Architecture::Table_2_ee(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse2 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pmaxsw);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Mmx)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pmaxsw);
      if (Operand__Pq_Qq(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    return false;
}

/** instructions
 * opcode: ef
 *
 * mnemonic: pxor
 * operand: ['Pq', 'Qq']
 * cpu_model: >= X86_Arch_Mmx
 *
 * mnemonic: pxor
 * operand: ['Vx', 'Wx']
 * prefix: 66
 * cpu_model: >= X86_Arch_Sse2
 *
**/
bool X86Architecture::Table_2_ef(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse2 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pxor);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Mmx)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pxor);
      if (Operand__Pq_Qq(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    return false;
}

/** instructions
 * opcode: f0
 *
 * invalid
 *
 * mnemonic: lddqu
 * operand: ['Vx', 'Mx']
 * prefix: f2
 * cpu_model: >= X86_Arch_Sse3
 *
**/
bool X86Architecture::Table_2_f0(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse3 && (rInsn.GetPrefix() & X86_Prefix_RepNz) == X86_Prefix_RepNz)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Lddqu);
      if (Operand__Vx_Mx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else
    {
      return false; /* INVALID */
    }
}

/** instructions
 * opcode: f1
 *
 * mnemonic: psllw
 * operand: ['Pq', 'Qq']
 * cpu_model: >= X86_Arch_Mmx
 *
 * mnemonic: psllw
 * operand: ['Vx', 'Wx']
 * prefix: 66
 * cpu_model: >= X86_Arch_Sse2
 *
**/
bool X86Architecture::Table_2_f1(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse2 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Psllw);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Mmx)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Psllw);
      if (Operand__Pq_Qq(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    return false;
}

/** instructions
 * opcode: f2
 *
 * mnemonic: pslld
 * operand: ['Pq', 'Qq']
 * cpu_model: >= X86_Arch_Mmx
 *
 * mnemonic: splld
 * operand: ['Vx', 'Wx']
 * prefix: 66
 * cpu_model: >= X86_Arch_Sse2
 *
**/
bool X86Architecture::Table_2_f2(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse2 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Splld);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Mmx)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pslld);
      if (Operand__Pq_Qq(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    return false;
}

/** instructions
 * opcode: f3
 *
 * mnemonic: psllq
 * operand: ['Pq', 'Qq']
 * cpu_model: >= X86_Arch_Mmx
 *
 * mnemonic: spllq
 * operand: ['Vx', 'Wx']
 * prefix: 66
 * cpu_model: >= X86_Arch_Sse2
 *
**/
bool X86Architecture::Table_2_f3(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse2 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Spllq);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Mmx)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Psllq);
      if (Operand__Pq_Qq(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    return false;
}

/** instructions
 * opcode: f4
 *
 * mnemonic: pmuludq
 * operand: ['Pq', 'Qq']
 * cpu_model: >= X86_Arch_Mmx_sse2
 *
 * mnemonic: pmuludq
 * operand: ['Vx', 'Wx']
 * prefix: 66
 * cpu_model: >= X86_Arch_Sse2
 *
**/
bool X86Architecture::Table_2_f4(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse2 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pmuludq);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Mmx_sse2)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pmuludq);
      if (Operand__Pq_Qq(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    return false;
}

/** instructions
 * opcode: f5
 *
 * mnemonic: pmaddwd
 * operand: ['Pq', 'Qq']
 * cpu_model: >= X86_Arch_Mmx
 *
 * mnemonic: pmaddwd
 * operand: ['Vx', 'Wx']
 * prefix: 66
 * cpu_model: >= X86_Arch_Sse2
 *
**/
bool X86Architecture::Table_2_f5(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse2 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pmaddwd);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Mmx)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pmaddwd);
      if (Operand__Pq_Qq(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    return false;
}

/** instructions
 * opcode: f6
 *
 * mnemonic: psadbw
 * operand: ['Pq', 'Qq']
 * cpu_model: >= X86_Arch_Mmx_sse
 *
 * mnemonic: psadbw
 * operand: ['Vx', 'Wx']
 * prefix: 66
 * cpu_model: >= X86_Arch_Sse2
 *
**/
bool X86Architecture::Table_2_f6(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse2 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Psadbw);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Mmx_sse)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Psadbw);
      if (Operand__Pq_Qq(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    return false;
}

/** instructions
 * opcode: f7
 *
 * mnemonic: maskmovq
 * operand: ['Pq', 'Nq']
 * cpu_model: >= X86_Arch_Mmx_sse
 *
 * mnemonic: maskmovdqu
 * operand: ['Vo', 'Uo']
 * prefix: 66
 * cpu_model: >= X86_Arch_Sse2
 *
**/
bool X86Architecture::Table_2_f7(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse2 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Maskmovdqu);
      if (Operand__Vo_Uo(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Mmx_sse)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Maskmovq);
      if (Operand__Pq_Nq(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    return false;
}

/** instructions
 * opcode: f8
 *
 * mnemonic: psubb
 * operand: ['Pq', 'Qq']
 * cpu_model: >= X86_Arch_Mmx
 *
 * mnemonic: psubb
 * operand: ['Vx', 'Wx']
 * prefix: 66
 * cpu_model: >= X86_Arch_Sse2
 *
**/
bool X86Architecture::Table_2_f8(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse2 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Psubb);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Mmx)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Psubb);
      if (Operand__Pq_Qq(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    return false;
}

/** instructions
 * opcode: f9
 *
 * mnemonic: psubw
 * operand: ['Pq', 'Qq']
 * cpu_model: >= X86_Arch_Mmx
 *
 * mnemonic: psubw
 * operand: ['Vx', 'Wx']
 * prefix: 66
 * cpu_model: >= X86_Arch_Sse2
 *
**/
bool X86Architecture::Table_2_f9(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse2 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Psubw);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Mmx)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Psubw);
      if (Operand__Pq_Qq(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    return false;
}

/** instructions
 * opcode: fa
 *
 * mnemonic: psubd
 * operand: ['Pq', 'Qq']
 * cpu_model: >= X86_Arch_Mmx
 *
 * mnemonic: psubd
 * operand: ['Vx', 'Wx']
 * prefix: 66
 * cpu_model: >= X86_Arch_Sse2
 *
**/
bool X86Architecture::Table_2_fa(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse2 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Psubd);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Mmx)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Psubd);
      if (Operand__Pq_Qq(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    return false;
}

/** instructions
 * opcode: fb
 *
 * mnemonic: psubq
 * operand: ['Pq', 'Qq']
 * cpu_model: >= X86_Arch_Mmx
 *
 * mnemonic: psubq
 * operand: ['Vx', 'Wx']
 * prefix: 66
 * cpu_model: >= X86_Arch_Sse2
 *
**/
bool X86Architecture::Table_2_fb(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse2 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Psubq);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Mmx)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Psubq);
      if (Operand__Pq_Qq(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    return false;
}

/** instructions
 * opcode: fc
 *
 * mnemonic: paddb
 * operand: ['Pq', 'Qq']
 * cpu_model: >= X86_Arch_Mmx
 *
 * mnemonic: paddb
 * operand: ['Vx', 'Wx']
 * prefix: 66
 * cpu_model: >= X86_Arch_Sse2
 *
**/
bool X86Architecture::Table_2_fc(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse2 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Paddb);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Mmx)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Paddb);
      if (Operand__Pq_Qq(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    return false;
}

/** instructions
 * opcode: fd
 *
 * mnemonic: paddw
 * operand: ['Pq', 'Qq']
 * cpu_model: >= X86_Arch_Mmx
 *
 * mnemonic: paddw
 * operand: ['Vx', 'Wx']
 * prefix: 66
 * cpu_model: >= X86_Arch_Sse2
 *
**/
bool X86Architecture::Table_2_fd(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse2 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Paddw);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Mmx)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Paddw);
      if (Operand__Pq_Qq(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    return false;
}

/** instructions
 * opcode: fe
 *
 * mnemonic: paddd
 * operand: ['Pq', 'Qq']
 * cpu_model: >= X86_Arch_Mmx
 *
 * mnemonic: paddd
 * operand: ['Vx', 'Wx']
 * prefix: 66
 * cpu_model: >= X86_Arch_Sse2
 *
**/
bool X86Architecture::Table_2_fe(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse2 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Paddd);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Mmx)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Paddd);
      if (Operand__Pq_Qq(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    return false;
}

/** instructions
 * opcode: ff
 *
 * mnemonic: ud
 * attr: ['amd']
 *
**/
bool X86Architecture::Table_2_ff(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Vendor") == X86_ProcType_AMD)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Ud);
      return true;
    }
    return false;
}

/** instruction
 * opcode: 00
 * invalid
**/
bool X86Architecture::Table_3dnow1_00(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 01
 * invalid
**/
bool X86Architecture::Table_3dnow1_01(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 02
 * invalid
**/
bool X86Architecture::Table_3dnow1_02(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 03
 * invalid
**/
bool X86Architecture::Table_3dnow1_03(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 04
 * invalid
**/
bool X86Architecture::Table_3dnow1_04(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 05
 * invalid
**/
bool X86Architecture::Table_3dnow1_05(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 06
 * invalid
**/
bool X86Architecture::Table_3dnow1_06(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 07
 * invalid
**/
bool X86Architecture::Table_3dnow1_07(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 08
 * invalid
**/
bool X86Architecture::Table_3dnow1_08(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 09
 * invalid
**/
bool X86Architecture::Table_3dnow1_09(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 0a
 * invalid
**/
bool X86Architecture::Table_3dnow1_0a(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 0b
 * invalid
**/
bool X86Architecture::Table_3dnow1_0b(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * mnemonic: pi2fw
 * operand: ['Pq', 'Qq']
 * opcode: 0c
 * attr: ['amd']
**/
bool X86Architecture::Table_3dnow1_0c(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Vendor") == X86_ProcType_AMD)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pi2fw);
      if (Operand__Pq_Qq(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else
      return false;
}

/** instruction
 * mnemonic: pi2fd
 * operand: ['Pq', 'Qq']
 * opcode: 0d
 * attr: ['amd']
**/
bool X86Architecture::Table_3dnow1_0d(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Vendor") == X86_ProcType_AMD)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pi2fd);
      if (Operand__Pq_Qq(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else
      return false;
}

/** instruction
 * opcode: 0e
 * invalid
**/
bool X86Architecture::Table_3dnow1_0e(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 0f
 * invalid
**/
bool X86Architecture::Table_3dnow1_0f(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 10
 * invalid
**/
bool X86Architecture::Table_3dnow1_10(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 11
 * invalid
**/
bool X86Architecture::Table_3dnow1_11(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 12
 * invalid
**/
bool X86Architecture::Table_3dnow1_12(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 13
 * invalid
**/
bool X86Architecture::Table_3dnow1_13(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 14
 * invalid
**/
bool X86Architecture::Table_3dnow1_14(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 15
 * invalid
**/
bool X86Architecture::Table_3dnow1_15(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 16
 * invalid
**/
bool X86Architecture::Table_3dnow1_16(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 17
 * invalid
**/
bool X86Architecture::Table_3dnow1_17(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 18
 * invalid
**/
bool X86Architecture::Table_3dnow1_18(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 19
 * invalid
**/
bool X86Architecture::Table_3dnow1_19(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 1a
 * invalid
**/
bool X86Architecture::Table_3dnow1_1a(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 1b
 * invalid
**/
bool X86Architecture::Table_3dnow1_1b(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * mnemonic: pf2iw
 * operand: ['Pq', 'Qq']
 * opcode: 1c
 * attr: ['amd']
**/
bool X86Architecture::Table_3dnow1_1c(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Vendor") == X86_ProcType_AMD)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pf2iw);
      if (Operand__Pq_Qq(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else
      return false;
}

/** instruction
 * mnemonic: pd2id
 * operand: ['Pq', 'Qq']
 * opcode: 1d
 * attr: ['amd']
**/
bool X86Architecture::Table_3dnow1_1d(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Vendor") == X86_ProcType_AMD)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pd2id);
      if (Operand__Pq_Qq(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else
      return false;
}

/** instruction
 * opcode: 1e
 * invalid
**/
bool X86Architecture::Table_3dnow1_1e(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 1f
 * invalid
**/
bool X86Architecture::Table_3dnow1_1f(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 20
 * invalid
**/
bool X86Architecture::Table_3dnow1_20(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 21
 * invalid
**/
bool X86Architecture::Table_3dnow1_21(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 22
 * invalid
**/
bool X86Architecture::Table_3dnow1_22(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 23
 * invalid
**/
bool X86Architecture::Table_3dnow1_23(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 24
 * invalid
**/
bool X86Architecture::Table_3dnow1_24(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 25
 * invalid
**/
bool X86Architecture::Table_3dnow1_25(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 26
 * invalid
**/
bool X86Architecture::Table_3dnow1_26(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 27
 * invalid
**/
bool X86Architecture::Table_3dnow1_27(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 28
 * invalid
**/
bool X86Architecture::Table_3dnow1_28(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 29
 * invalid
**/
bool X86Architecture::Table_3dnow1_29(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 2a
 * invalid
**/
bool X86Architecture::Table_3dnow1_2a(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 2b
 * invalid
**/
bool X86Architecture::Table_3dnow1_2b(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 2c
 * invalid
**/
bool X86Architecture::Table_3dnow1_2c(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 2d
 * invalid
**/
bool X86Architecture::Table_3dnow1_2d(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 2e
 * invalid
**/
bool X86Architecture::Table_3dnow1_2e(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 2f
 * invalid
**/
bool X86Architecture::Table_3dnow1_2f(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 30
 * invalid
**/
bool X86Architecture::Table_3dnow1_30(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 31
 * invalid
**/
bool X86Architecture::Table_3dnow1_31(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 32
 * invalid
**/
bool X86Architecture::Table_3dnow1_32(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 33
 * invalid
**/
bool X86Architecture::Table_3dnow1_33(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 34
 * invalid
**/
bool X86Architecture::Table_3dnow1_34(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 35
 * invalid
**/
bool X86Architecture::Table_3dnow1_35(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 36
 * invalid
**/
bool X86Architecture::Table_3dnow1_36(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 37
 * invalid
**/
bool X86Architecture::Table_3dnow1_37(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 38
 * invalid
**/
bool X86Architecture::Table_3dnow1_38(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 39
 * invalid
**/
bool X86Architecture::Table_3dnow1_39(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 3a
 * invalid
**/
bool X86Architecture::Table_3dnow1_3a(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 3b
 * invalid
**/
bool X86Architecture::Table_3dnow1_3b(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 3c
 * invalid
**/
bool X86Architecture::Table_3dnow1_3c(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 3d
 * invalid
**/
bool X86Architecture::Table_3dnow1_3d(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 3e
 * invalid
**/
bool X86Architecture::Table_3dnow1_3e(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 3f
 * invalid
**/
bool X86Architecture::Table_3dnow1_3f(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 40
 * invalid
**/
bool X86Architecture::Table_3dnow1_40(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 41
 * invalid
**/
bool X86Architecture::Table_3dnow1_41(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 42
 * invalid
**/
bool X86Architecture::Table_3dnow1_42(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 43
 * invalid
**/
bool X86Architecture::Table_3dnow1_43(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 44
 * invalid
**/
bool X86Architecture::Table_3dnow1_44(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 45
 * invalid
**/
bool X86Architecture::Table_3dnow1_45(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 46
 * invalid
**/
bool X86Architecture::Table_3dnow1_46(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 47
 * invalid
**/
bool X86Architecture::Table_3dnow1_47(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 48
 * invalid
**/
bool X86Architecture::Table_3dnow1_48(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 49
 * invalid
**/
bool X86Architecture::Table_3dnow1_49(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 4a
 * invalid
**/
bool X86Architecture::Table_3dnow1_4a(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 4b
 * invalid
**/
bool X86Architecture::Table_3dnow1_4b(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 4c
 * invalid
**/
bool X86Architecture::Table_3dnow1_4c(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 4d
 * invalid
**/
bool X86Architecture::Table_3dnow1_4d(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 4e
 * invalid
**/
bool X86Architecture::Table_3dnow1_4e(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 4f
 * invalid
**/
bool X86Architecture::Table_3dnow1_4f(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 50
 * invalid
**/
bool X86Architecture::Table_3dnow1_50(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 51
 * invalid
**/
bool X86Architecture::Table_3dnow1_51(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 52
 * invalid
**/
bool X86Architecture::Table_3dnow1_52(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 53
 * invalid
**/
bool X86Architecture::Table_3dnow1_53(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 54
 * invalid
**/
bool X86Architecture::Table_3dnow1_54(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 55
 * invalid
**/
bool X86Architecture::Table_3dnow1_55(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 56
 * invalid
**/
bool X86Architecture::Table_3dnow1_56(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 57
 * invalid
**/
bool X86Architecture::Table_3dnow1_57(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 58
 * invalid
**/
bool X86Architecture::Table_3dnow1_58(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 59
 * invalid
**/
bool X86Architecture::Table_3dnow1_59(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 5a
 * invalid
**/
bool X86Architecture::Table_3dnow1_5a(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 5b
 * invalid
**/
bool X86Architecture::Table_3dnow1_5b(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 5c
 * invalid
**/
bool X86Architecture::Table_3dnow1_5c(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 5d
 * invalid
**/
bool X86Architecture::Table_3dnow1_5d(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 5e
 * invalid
**/
bool X86Architecture::Table_3dnow1_5e(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 5f
 * invalid
**/
bool X86Architecture::Table_3dnow1_5f(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 60
 * invalid
**/
bool X86Architecture::Table_3dnow1_60(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 61
 * invalid
**/
bool X86Architecture::Table_3dnow1_61(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 62
 * invalid
**/
bool X86Architecture::Table_3dnow1_62(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 63
 * invalid
**/
bool X86Architecture::Table_3dnow1_63(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 64
 * invalid
**/
bool X86Architecture::Table_3dnow1_64(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 65
 * invalid
**/
bool X86Architecture::Table_3dnow1_65(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 66
 * invalid
**/
bool X86Architecture::Table_3dnow1_66(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 67
 * invalid
**/
bool X86Architecture::Table_3dnow1_67(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 68
 * invalid
**/
bool X86Architecture::Table_3dnow1_68(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 69
 * invalid
**/
bool X86Architecture::Table_3dnow1_69(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 6a
 * invalid
**/
bool X86Architecture::Table_3dnow1_6a(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 6b
 * invalid
**/
bool X86Architecture::Table_3dnow1_6b(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 6c
 * invalid
**/
bool X86Architecture::Table_3dnow1_6c(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 6d
 * invalid
**/
bool X86Architecture::Table_3dnow1_6d(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 6e
 * invalid
**/
bool X86Architecture::Table_3dnow1_6e(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 6f
 * invalid
**/
bool X86Architecture::Table_3dnow1_6f(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 70
 * invalid
**/
bool X86Architecture::Table_3dnow1_70(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 71
 * invalid
**/
bool X86Architecture::Table_3dnow1_71(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 72
 * invalid
**/
bool X86Architecture::Table_3dnow1_72(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 73
 * invalid
**/
bool X86Architecture::Table_3dnow1_73(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 74
 * invalid
**/
bool X86Architecture::Table_3dnow1_74(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 75
 * invalid
**/
bool X86Architecture::Table_3dnow1_75(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 76
 * invalid
**/
bool X86Architecture::Table_3dnow1_76(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 77
 * invalid
**/
bool X86Architecture::Table_3dnow1_77(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 78
 * invalid
**/
bool X86Architecture::Table_3dnow1_78(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 79
 * invalid
**/
bool X86Architecture::Table_3dnow1_79(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 7a
 * invalid
**/
bool X86Architecture::Table_3dnow1_7a(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 7b
 * invalid
**/
bool X86Architecture::Table_3dnow1_7b(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 7c
 * invalid
**/
bool X86Architecture::Table_3dnow1_7c(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 7d
 * invalid
**/
bool X86Architecture::Table_3dnow1_7d(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 7e
 * invalid
**/
bool X86Architecture::Table_3dnow1_7e(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 7f
 * invalid
**/
bool X86Architecture::Table_3dnow1_7f(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 80
 * invalid
**/
bool X86Architecture::Table_3dnow1_80(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 81
 * invalid
**/
bool X86Architecture::Table_3dnow1_81(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 82
 * invalid
**/
bool X86Architecture::Table_3dnow1_82(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 83
 * invalid
**/
bool X86Architecture::Table_3dnow1_83(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 84
 * invalid
**/
bool X86Architecture::Table_3dnow1_84(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 85
 * invalid
**/
bool X86Architecture::Table_3dnow1_85(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * mnemonic: pfrcpv
 * operand: ['Pq', 'Qq']
 * opcode: 86
 * attr: ['cyrix']
 * cpu_model: >= X86_Arch_Geode_lx
**/
bool X86Architecture::Table_3dnow1_86(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Geode_lx && m_CfgMdl.GetEnum("Vendor") == X86_ProcType_CYRIX)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pfrcpv);
      if (Operand__Pq_Qq(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else
      return false;
}

/** instruction
 * mnemonic: pfrsqrtv
 * operand: ['Pq', 'Qq']
 * opcode: 87
 * attr: ['cyrix']
 * cpu_model: >= X86_Arch_Geode_lx
**/
bool X86Architecture::Table_3dnow1_87(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Geode_lx && m_CfgMdl.GetEnum("Vendor") == X86_ProcType_CYRIX)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pfrsqrtv);
      if (Operand__Pq_Qq(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else
      return false;
}

/** instruction
 * opcode: 88
 * invalid
**/
bool X86Architecture::Table_3dnow1_88(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 89
 * invalid
**/
bool X86Architecture::Table_3dnow1_89(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * mnemonic: pfnacc
 * operand: ['Pq', 'Qq']
 * opcode: 8a
 * attr: ['amd']
**/
bool X86Architecture::Table_3dnow1_8a(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Vendor") == X86_ProcType_AMD)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pfnacc);
      if (Operand__Pq_Qq(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else
      return false;
}

/** instruction
 * opcode: 8b
 * invalid
**/
bool X86Architecture::Table_3dnow1_8b(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 8c
 * invalid
**/
bool X86Architecture::Table_3dnow1_8c(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 8d
 * invalid
**/
bool X86Architecture::Table_3dnow1_8d(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * mnemonic: pfpnacc
 * operand: ['Pq', 'Qq']
 * opcode: 8e
 * attr: ['amd']
**/
bool X86Architecture::Table_3dnow1_8e(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Vendor") == X86_ProcType_AMD)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pfpnacc);
      if (Operand__Pq_Qq(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else
      return false;
}

/** instruction
 * opcode: 8f
 * invalid
**/
bool X86Architecture::Table_3dnow1_8f(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * mnemonic: pfcmge
 * operand: ['Pq', 'Qq']
 * opcode: 90
 * attr: ['amd']
**/
bool X86Architecture::Table_3dnow1_90(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Vendor") == X86_ProcType_AMD)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pfcmge);
      if (Operand__Pq_Qq(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else
      return false;
}

/** instruction
 * opcode: 91
 * invalid
**/
bool X86Architecture::Table_3dnow1_91(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 92
 * invalid
**/
bool X86Architecture::Table_3dnow1_92(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 93
 * invalid
**/
bool X86Architecture::Table_3dnow1_93(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * mnemonic: pfmin
 * operand: ['Pq', 'Qq']
 * opcode: 94
 * attr: ['amd']
**/
bool X86Architecture::Table_3dnow1_94(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Vendor") == X86_ProcType_AMD)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pfmin);
      if (Operand__Pq_Qq(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else
      return false;
}

/** instruction
 * opcode: 95
 * invalid
**/
bool X86Architecture::Table_3dnow1_95(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * mnemonic: pfrcp
 * operand: ['Pq', 'Qq']
 * opcode: 96
 * attr: ['amd']
**/
bool X86Architecture::Table_3dnow1_96(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Vendor") == X86_ProcType_AMD)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pfrcp);
      if (Operand__Pq_Qq(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else
      return false;
}

/** instruction
 * mnemonic: pfrsqrt
 * operand: ['Pq', 'Qq']
 * opcode: 97
 * attr: ['amd']
**/
bool X86Architecture::Table_3dnow1_97(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Vendor") == X86_ProcType_AMD)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pfrsqrt);
      if (Operand__Pq_Qq(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else
      return false;
}

/** instruction
 * opcode: 98
 * invalid
**/
bool X86Architecture::Table_3dnow1_98(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 99
 * invalid
**/
bool X86Architecture::Table_3dnow1_99(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * mnemonic: pfsub
 * operand: ['Pq', 'Qq']
 * opcode: 9a
 * attr: ['amd']
**/
bool X86Architecture::Table_3dnow1_9a(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Vendor") == X86_ProcType_AMD)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pfsub);
      if (Operand__Pq_Qq(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else
      return false;
}

/** instruction
 * opcode: 9b
 * invalid
**/
bool X86Architecture::Table_3dnow1_9b(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 9c
 * invalid
**/
bool X86Architecture::Table_3dnow1_9c(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 9d
 * invalid
**/
bool X86Architecture::Table_3dnow1_9d(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * mnemonic: pfadd
 * operand: ['Pq', 'Qq']
 * opcode: 9e
 * attr: ['amd']
**/
bool X86Architecture::Table_3dnow1_9e(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Vendor") == X86_ProcType_AMD)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pfadd);
      if (Operand__Pq_Qq(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else
      return false;
}

/** instruction
 * opcode: 9f
 * invalid
**/
bool X86Architecture::Table_3dnow1_9f(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * mnemonic: pfcmpgt
 * operand: ['Pq', 'Qq']
 * opcode: a0
 * attr: ['amd']
**/
bool X86Architecture::Table_3dnow1_a0(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Vendor") == X86_ProcType_AMD)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pfcmpgt);
      if (Operand__Pq_Qq(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else
      return false;
}

/** instruction
 * opcode: a1
 * invalid
**/
bool X86Architecture::Table_3dnow1_a1(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: a2
 * invalid
**/
bool X86Architecture::Table_3dnow1_a2(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: a3
 * invalid
**/
bool X86Architecture::Table_3dnow1_a3(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * mnemonic: pfmax
 * operand: ['Pq', 'Qq']
 * opcode: a4
 * attr: ['amd']
**/
bool X86Architecture::Table_3dnow1_a4(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Vendor") == X86_ProcType_AMD)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pfmax);
      if (Operand__Pq_Qq(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else
      return false;
}

/** instruction
 * opcode: a5
 * invalid
**/
bool X86Architecture::Table_3dnow1_a5(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * mnemonic: pfrcpit1
 * operand: ['Pq', 'Qq']
 * opcode: a6
 * attr: ['amd']
**/
bool X86Architecture::Table_3dnow1_a6(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Vendor") == X86_ProcType_AMD)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pfrcpit1);
      if (Operand__Pq_Qq(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else
      return false;
}

/** instruction
 * mnemonic: pfrsqit1
 * operand: ['Pq', 'Qq']
 * opcode: a7
 * attr: ['amd']
**/
bool X86Architecture::Table_3dnow1_a7(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Vendor") == X86_ProcType_AMD)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pfrsqit1);
      if (Operand__Pq_Qq(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else
      return false;
}

/** instruction
 * opcode: a8
 * invalid
**/
bool X86Architecture::Table_3dnow1_a8(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: a9
 * invalid
**/
bool X86Architecture::Table_3dnow1_a9(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * mnemonic: pfsubr
 * operand: ['Pq', 'Qq']
 * opcode: aa
 * attr: ['amd']
**/
bool X86Architecture::Table_3dnow1_aa(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Vendor") == X86_ProcType_AMD)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pfsubr);
      if (Operand__Pq_Qq(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else
      return false;
}

/** instruction
 * opcode: ab
 * invalid
**/
bool X86Architecture::Table_3dnow1_ab(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: ac
 * invalid
**/
bool X86Architecture::Table_3dnow1_ac(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: ad
 * invalid
**/
bool X86Architecture::Table_3dnow1_ad(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * mnemonic: pfacc
 * operand: ['Pq', 'Qq']
 * opcode: ae
 * attr: ['amd']
**/
bool X86Architecture::Table_3dnow1_ae(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Vendor") == X86_ProcType_AMD)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pfacc);
      if (Operand__Pq_Qq(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else
      return false;
}

/** instruction
 * opcode: af
 * invalid
**/
bool X86Architecture::Table_3dnow1_af(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * mnemonic: pfcmpeq
 * operand: ['Pq', 'Qq']
 * opcode: b0
 * attr: ['amd']
**/
bool X86Architecture::Table_3dnow1_b0(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Vendor") == X86_ProcType_AMD)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pfcmpeq);
      if (Operand__Pq_Qq(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else
      return false;
}

/** instruction
 * opcode: b1
 * invalid
**/
bool X86Architecture::Table_3dnow1_b1(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: b2
 * invalid
**/
bool X86Architecture::Table_3dnow1_b2(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: b3
 * invalid
**/
bool X86Architecture::Table_3dnow1_b3(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * mnemonic: pfmul
 * operand: ['Pq', 'Qq']
 * opcode: b4
 * attr: ['amd']
**/
bool X86Architecture::Table_3dnow1_b4(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Vendor") == X86_ProcType_AMD)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pfmul);
      if (Operand__Pq_Qq(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else
      return false;
}

/** instruction
 * opcode: b5
 * invalid
**/
bool X86Architecture::Table_3dnow1_b5(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * mnemonic: pfrcpit2
 * operand: ['Pq', 'Qq']
 * opcode: b6
 * attr: ['amd']
**/
bool X86Architecture::Table_3dnow1_b6(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Vendor") == X86_ProcType_AMD)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pfrcpit2);
      if (Operand__Pq_Qq(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else
      return false;
}

/** instruction
 * mnemonic: pmulhrw
 * operand: ['Pq', 'Qq']
 * opcode: b7
 * attr: ['amd']
**/
bool X86Architecture::Table_3dnow1_b7(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Vendor") == X86_ProcType_AMD)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pmulhrw);
      if (Operand__Pq_Qq(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else
      return false;
}

/** instruction
 * opcode: b8
 * invalid
**/
bool X86Architecture::Table_3dnow1_b8(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: b9
 * invalid
**/
bool X86Architecture::Table_3dnow1_b9(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: ba
 * invalid
**/
bool X86Architecture::Table_3dnow1_ba(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * mnemonic: pswapd
 * operand: ['Pq', 'Qq']
 * opcode: bb
 * attr: ['amd']
**/
bool X86Architecture::Table_3dnow1_bb(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Vendor") == X86_ProcType_AMD)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pswapd);
      if (Operand__Pq_Qq(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else
      return false;
}

/** instruction
 * opcode: bc
 * invalid
**/
bool X86Architecture::Table_3dnow1_bc(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: bd
 * invalid
**/
bool X86Architecture::Table_3dnow1_bd(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: be
 * invalid
**/
bool X86Architecture::Table_3dnow1_be(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * mnemonic: pavgusb
 * operand: ['Pq', 'Qq']
 * opcode: bf
 * attr: ['amd']
**/
bool X86Architecture::Table_3dnow1_bf(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Vendor") == X86_ProcType_AMD)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pavgusb);
      if (Operand__Pq_Qq(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else
      return false;
}

/** instruction
 * opcode: c0
 * invalid
**/
bool X86Architecture::Table_3dnow1_c0(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: c1
 * invalid
**/
bool X86Architecture::Table_3dnow1_c1(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: c2
 * invalid
**/
bool X86Architecture::Table_3dnow1_c2(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: c3
 * invalid
**/
bool X86Architecture::Table_3dnow1_c3(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: c4
 * invalid
**/
bool X86Architecture::Table_3dnow1_c4(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: c5
 * invalid
**/
bool X86Architecture::Table_3dnow1_c5(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: c6
 * invalid
**/
bool X86Architecture::Table_3dnow1_c6(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: c7
 * invalid
**/
bool X86Architecture::Table_3dnow1_c7(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: c8
 * invalid
**/
bool X86Architecture::Table_3dnow1_c8(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: c9
 * invalid
**/
bool X86Architecture::Table_3dnow1_c9(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: ca
 * invalid
**/
bool X86Architecture::Table_3dnow1_ca(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: cb
 * invalid
**/
bool X86Architecture::Table_3dnow1_cb(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: cc
 * invalid
**/
bool X86Architecture::Table_3dnow1_cc(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: cd
 * invalid
**/
bool X86Architecture::Table_3dnow1_cd(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: ce
 * invalid
**/
bool X86Architecture::Table_3dnow1_ce(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: cf
 * invalid
**/
bool X86Architecture::Table_3dnow1_cf(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: d0
 * invalid
**/
bool X86Architecture::Table_3dnow1_d0(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: d1
 * invalid
**/
bool X86Architecture::Table_3dnow1_d1(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: d2
 * invalid
**/
bool X86Architecture::Table_3dnow1_d2(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: d3
 * invalid
**/
bool X86Architecture::Table_3dnow1_d3(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: d4
 * invalid
**/
bool X86Architecture::Table_3dnow1_d4(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: d5
 * invalid
**/
bool X86Architecture::Table_3dnow1_d5(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: d6
 * invalid
**/
bool X86Architecture::Table_3dnow1_d6(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: d7
 * invalid
**/
bool X86Architecture::Table_3dnow1_d7(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: d8
 * invalid
**/
bool X86Architecture::Table_3dnow1_d8(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: d9
 * invalid
**/
bool X86Architecture::Table_3dnow1_d9(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: da
 * invalid
**/
bool X86Architecture::Table_3dnow1_da(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: db
 * invalid
**/
bool X86Architecture::Table_3dnow1_db(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: dc
 * invalid
**/
bool X86Architecture::Table_3dnow1_dc(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: dd
 * invalid
**/
bool X86Architecture::Table_3dnow1_dd(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: de
 * invalid
**/
bool X86Architecture::Table_3dnow1_de(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: df
 * invalid
**/
bool X86Architecture::Table_3dnow1_df(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: e0
 * invalid
**/
bool X86Architecture::Table_3dnow1_e0(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: e1
 * invalid
**/
bool X86Architecture::Table_3dnow1_e1(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: e2
 * invalid
**/
bool X86Architecture::Table_3dnow1_e2(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: e3
 * invalid
**/
bool X86Architecture::Table_3dnow1_e3(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: e4
 * invalid
**/
bool X86Architecture::Table_3dnow1_e4(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: e5
 * invalid
**/
bool X86Architecture::Table_3dnow1_e5(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: e6
 * invalid
**/
bool X86Architecture::Table_3dnow1_e6(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: e7
 * invalid
**/
bool X86Architecture::Table_3dnow1_e7(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: e8
 * invalid
**/
bool X86Architecture::Table_3dnow1_e8(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: e9
 * invalid
**/
bool X86Architecture::Table_3dnow1_e9(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: ea
 * invalid
**/
bool X86Architecture::Table_3dnow1_ea(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: eb
 * invalid
**/
bool X86Architecture::Table_3dnow1_eb(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: ec
 * invalid
**/
bool X86Architecture::Table_3dnow1_ec(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: ed
 * invalid
**/
bool X86Architecture::Table_3dnow1_ed(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: ee
 * invalid
**/
bool X86Architecture::Table_3dnow1_ee(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: ef
 * invalid
**/
bool X86Architecture::Table_3dnow1_ef(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: f0
 * invalid
**/
bool X86Architecture::Table_3dnow1_f0(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: f1
 * invalid
**/
bool X86Architecture::Table_3dnow1_f1(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: f2
 * invalid
**/
bool X86Architecture::Table_3dnow1_f2(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: f3
 * invalid
**/
bool X86Architecture::Table_3dnow1_f3(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: f4
 * invalid
**/
bool X86Architecture::Table_3dnow1_f4(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: f5
 * invalid
**/
bool X86Architecture::Table_3dnow1_f5(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: f6
 * invalid
**/
bool X86Architecture::Table_3dnow1_f6(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: f7
 * invalid
**/
bool X86Architecture::Table_3dnow1_f7(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: f8
 * invalid
**/
bool X86Architecture::Table_3dnow1_f8(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: f9
 * invalid
**/
bool X86Architecture::Table_3dnow1_f9(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: fa
 * invalid
**/
bool X86Architecture::Table_3dnow1_fa(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: fb
 * invalid
**/
bool X86Architecture::Table_3dnow1_fb(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: fc
 * invalid
**/
bool X86Architecture::Table_3dnow1_fc(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: fd
 * invalid
**/
bool X86Architecture::Table_3dnow1_fd(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: fe
 * invalid
**/
bool X86Architecture::Table_3dnow1_fe(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: ff
 * invalid
**/
bool X86Architecture::Table_3dnow1_ff(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instructions
 * opcode: 00
 *
 * mnemonic: pshufb
 * operand: ['Pq', 'Qq']
 * cpu_model: >= X86_Arch_Ssse3
 *
 * mnemonic: pshufb
 * operand: ['Vx', 'Wx']
 * prefix: 66
 * cpu_model: >= X86_Arch_Ssse3
 *
 * mnemonic: pshufb
 * operand: ['Vx', 'Wx']
 * prefix: 66
 * attr: ['ny']
 * cpu_model: >= X86_Arch_Avx
 *
 * mnemonic: pshufb
 * operand: ['Vx', 'Wx']
 * prefix: 66
 * cpu_model: >= X86_Arch_Avx2
 *
**/
bool X86Architecture::Table_3_38_00(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Avx2 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pshufb);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Avx && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pshufb);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Ssse3 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pshufb);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Ssse3)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pshufb);
      if (Operand__Pq_Qq(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    return false;
}

/** instructions
 * opcode: 01
 *
 * mnemonic: phaddw
 * operand: ['Pq', 'Qq']
 * cpu_model: >= X86_Arch_Ssse3
 *
 * mnemonic: phaddw
 * operand: ['Vx', 'Wx']
 * prefix: 66
 * cpu_model: >= X86_Arch_Ssse3
 *
 * mnemonic: phaddw
 * operand: ['Vx', 'Wx']
 * prefix: 66
 * attr: ['ny']
 * cpu_model: >= X86_Arch_Avx
 *
 * mnemonic: phaddw
 * operand: ['Vx', 'Wx']
 * prefix: 66
 * cpu_model: >= X86_Arch_Avx2
 *
**/
bool X86Architecture::Table_3_38_01(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Avx2 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Phaddw);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Avx && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Phaddw);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Ssse3 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Phaddw);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Ssse3)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Phaddw);
      if (Operand__Pq_Qq(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    return false;
}

/** instructions
 * opcode: 02
 *
 * mnemonic: phaddd
 * operand: ['Pq', 'Qq']
 * cpu_model: >= X86_Arch_Ssse3
 *
 * mnemonic: phaddd
 * operand: ['Vx', 'Wx']
 * prefix: 66
 * cpu_model: >= X86_Arch_Ssse3
 *
 * mnemonic: phaddd
 * operand: ['Vx', 'Wx']
 * prefix: 66
 * attr: ['ny']
 * cpu_model: >= X86_Arch_Avx
 *
 * mnemonic: phaddd
 * operand: ['Vx', 'Wx']
 * prefix: 66
 * cpu_model: >= X86_Arch_Avx2
 *
**/
bool X86Architecture::Table_3_38_02(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Avx2 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Phaddd);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Avx && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Phaddd);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Ssse3 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Phaddd);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Ssse3)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Phaddd);
      if (Operand__Pq_Qq(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    return false;
}

/** instructions
 * opcode: 03
 *
 * mnemonic: phaddsw
 * operand: ['Pq', 'Qq']
 * cpu_model: >= X86_Arch_Ssse3
 *
 * mnemonic: phaddsw
 * operand: ['Vx', 'Wx']
 * prefix: 66
 * cpu_model: >= X86_Arch_Ssse3
 *
 * mnemonic: phaddsw
 * operand: ['Vx', 'Wx']
 * prefix: 66
 * attr: ['ny']
 * cpu_model: >= X86_Arch_Avx
 *
 * mnemonic: phaddsw
 * operand: ['Vx', 'Wx']
 * prefix: 66
 * cpu_model: >= X86_Arch_Avx2
 *
**/
bool X86Architecture::Table_3_38_03(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Avx2 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Phaddsw);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Avx && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Phaddsw);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Ssse3 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Phaddsw);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Ssse3)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Phaddsw);
      if (Operand__Pq_Qq(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    return false;
}

/** instructions
 * opcode: 04
 *
 * mnemonic: pmaddubsw
 * operand: ['Pq', 'Qq']
 * cpu_model: >= X86_Arch_Ssse3
 *
 * mnemonic: pmaddubsw
 * operand: ['Vx', 'Wx']
 * prefix: 66
 * cpu_model: >= X86_Arch_Ssse3
 *
 * mnemonic: pmaddubsw
 * operand: ['Vx', 'Wx']
 * prefix: 66
 * attr: ['ny']
 * cpu_model: >= X86_Arch_Avx
 *
 * mnemonic: pmaddubsw
 * operand: ['Vx', 'Wx']
 * prefix: 66
 * cpu_model: >= X86_Arch_Avx2
 *
**/
bool X86Architecture::Table_3_38_04(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Avx2 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pmaddubsw);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Avx && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pmaddubsw);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Ssse3 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pmaddubsw);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Ssse3)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pmaddubsw);
      if (Operand__Pq_Qq(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    return false;
}

/** instructions
 * opcode: 05
 *
 * mnemonic: phsubw
 * operand: ['Pq', 'Qq']
 * cpu_model: >= X86_Arch_Ssse3
 *
 * mnemonic: phsubw
 * operand: ['Vx', 'Wx']
 * prefix: 66
 * cpu_model: >= X86_Arch_Ssse3
 *
 * mnemonic: phsubw
 * operand: ['Vx', 'Wx']
 * prefix: 66
 * attr: ['ny']
 * cpu_model: >= X86_Arch_Avx
 *
 * mnemonic: phsubw
 * operand: ['Vx', 'Wx']
 * prefix: 66
 * cpu_model: >= X86_Arch_Avx2
 *
**/
bool X86Architecture::Table_3_38_05(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Avx2 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Phsubw);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Avx && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Phsubw);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Ssse3 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Phsubw);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Ssse3)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Phsubw);
      if (Operand__Pq_Qq(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    return false;
}

/** instructions
 * opcode: 06
 *
 * mnemonic: phsubd
 * operand: ['Pq', 'Qq']
 * cpu_model: >= X86_Arch_Ssse3
 *
 * mnemonic: phsubd
 * operand: ['Vx', 'Wx']
 * prefix: 66
 * cpu_model: >= X86_Arch_Ssse3
 *
 * mnemonic: phsubd
 * operand: ['Vx', 'Wx']
 * prefix: 66
 * attr: ['ny']
 * cpu_model: >= X86_Arch_Avx
 *
 * mnemonic: phsubd
 * operand: ['Vx', 'Wx']
 * prefix: 66
 * cpu_model: >= X86_Arch_Avx2
 *
**/
bool X86Architecture::Table_3_38_06(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Avx2 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Phsubd);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Avx && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Phsubd);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Ssse3 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Phsubd);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Ssse3)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Phsubd);
      if (Operand__Pq_Qq(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    return false;
}

/** instructions
 * opcode: 07
 *
 * mnemonic: phsubsw
 * operand: ['Pq', 'Qq']
 * cpu_model: >= X86_Arch_Ssse3
 *
 * mnemonic: phsubsw
 * operand: ['Vx', 'Wx']
 * prefix: 66
 * cpu_model: >= X86_Arch_Ssse3
 *
 * mnemonic: phsubsw
 * operand: ['Vx', 'Wx']
 * prefix: 66
 * attr: ['ny']
 * cpu_model: >= X86_Arch_Avx
 *
 * mnemonic: phsubsw
 * operand: ['Vx', 'Wx']
 * prefix: 66
 * cpu_model: >= X86_Arch_Avx2
 *
**/
bool X86Architecture::Table_3_38_07(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Avx2 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Phsubsw);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Avx && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Phsubsw);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Ssse3 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Phsubsw);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Ssse3)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Phsubsw);
      if (Operand__Pq_Qq(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    return false;
}

/** instructions
 * opcode: 08
 *
 * mnemonic: psignb
 * operand: ['Pq', 'Qq']
 * cpu_model: >= X86_Arch_Ssse3
 *
 * mnemonic: psignb
 * operand: ['Vx', 'Wx']
 * prefix: 66
 * cpu_model: >= X86_Arch_Ssse3
 *
 * mnemonic: psignb
 * operand: ['Vx', 'Wx']
 * prefix: 66
 * attr: ['ny']
 * cpu_model: >= X86_Arch_Avx
 *
 * mnemonic: psignb
 * operand: ['Vx', 'Wx']
 * prefix: 66
 * cpu_model: >= X86_Arch_Avx2
 *
**/
bool X86Architecture::Table_3_38_08(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Avx2 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Psignb);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Avx && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Psignb);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Ssse3 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Psignb);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Ssse3)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Psignb);
      if (Operand__Pq_Qq(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    return false;
}

/** instructions
 * opcode: 09
 *
 * mnemonic: psignw
 * operand: ['Pq', 'Qq']
 * cpu_model: >= X86_Arch_Ssse3
 *
 * mnemonic: psignw
 * operand: ['Vx', 'Wx']
 * prefix: 66
 * cpu_model: >= X86_Arch_Ssse3
 *
 * mnemonic: psignw
 * operand: ['Vx', 'Wx']
 * prefix: 66
 * attr: ['ny']
 * cpu_model: >= X86_Arch_Avx
 *
 * mnemonic: psignw
 * operand: ['Vx', 'Wx']
 * prefix: 66
 * cpu_model: >= X86_Arch_Avx2
 *
**/
bool X86Architecture::Table_3_38_09(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Avx2 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Psignw);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Avx && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Psignw);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Ssse3 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Psignw);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Ssse3)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Psignw);
      if (Operand__Pq_Qq(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    return false;
}

/** instructions
 * opcode: 0a
 *
 * mnemonic: psignd
 * operand: ['Pq', 'Qq']
 * cpu_model: >= X86_Arch_Ssse3
 *
 * mnemonic: psignd
 * operand: ['Vx', 'Wx']
 * prefix: 66
 * cpu_model: >= X86_Arch_Ssse3
 *
 * mnemonic: psignd
 * operand: ['Vx', 'Wx']
 * prefix: 66
 * attr: ['ny']
 * cpu_model: >= X86_Arch_Avx
 *
 * mnemonic: psignd
 * operand: ['Vx', 'Wx']
 * prefix: 66
 * cpu_model: >= X86_Arch_Avx2
 *
**/
bool X86Architecture::Table_3_38_0a(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Avx2 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Psignd);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Avx && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Psignd);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Ssse3 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Psignd);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Ssse3)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Psignd);
      if (Operand__Pq_Qq(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    return false;
}

/** instructions
 * opcode: 0b
 *
 * mnemonic: pmulhrsw
 * operand: ['Pq', 'Qq']
 * cpu_model: >= X86_Arch_Ssse3
 *
 * mnemonic: pmulhrsw
 * operand: ['Vx', 'Wx']
 * prefix: 66
 * cpu_model: >= X86_Arch_Ssse3
 *
 * mnemonic: pmulhrsw
 * operand: ['Vx', 'Wx']
 * prefix: 66
 * attr: ['ny']
 * cpu_model: >= X86_Arch_Avx
 *
 * mnemonic: pmulhrsw
 * operand: ['Vx', 'Wx']
 * prefix: 66
 * cpu_model: >= X86_Arch_Avx2
 *
**/
bool X86Architecture::Table_3_38_0b(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Avx2 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pmulhrsw);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Avx && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pmulhrsw);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Ssse3 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pmulhrsw);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Ssse3)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pmulhrsw);
      if (Operand__Pq_Qq(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    return false;
}

/** instruction
 * mnemonic: permilps
 * prefix: 66
 * opcode: 0c
 * attr: ['w0']
 * operand: ['Vx', 'Wx']
 * cpu_model: >= X86_Arch_Avx
**/
bool X86Architecture::Table_3_38_0c(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Avx && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Permilps);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else
      return false;
}

/** instruction
 * mnemonic: permilpd
 * prefix: 66
 * opcode: 0d
 * attr: ['w0']
 * operand: ['Vx', 'Wx']
 * cpu_model: >= X86_Arch_Avx
**/
bool X86Architecture::Table_3_38_0d(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Avx && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Permilpd);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else
      return false;
}

/** instruction
 * mnemonic: testps
 * prefix: 66
 * opcode: 0e
 * attr: ['nv', 'w0']
 * operand: ['Vx', 'Wx']
 * cpu_model: >= X86_Arch_Avx
**/
bool X86Architecture::Table_3_38_0e(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Avx && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Testps);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else
      return false;
}

/** instruction
 * mnemonic: testpd
 * prefix: 66
 * opcode: 0f
 * attr: ['nv', 'w0']
 * operand: ['Vx', 'Wx']
 * cpu_model: >= X86_Arch_Avx
**/
bool X86Architecture::Table_3_38_0f(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Avx && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Testpd);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else
      return false;
}

/** instruction
 * mnemonic: pblendvb
 * operand: ['Vo', 'Wo']
 * prefix: 66
 * opcode: 10
 * cpu_model: >= X86_Arch_Sse41
**/
bool X86Architecture::Table_3_38_10(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse41 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pblendvb);
      if (Operand__Vo_Wo(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else
      return false;
}

/** instruction
 * opcode: 11
 * invalid
**/
bool X86Architecture::Table_3_38_11(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 12
 * invalid
**/
bool X86Architecture::Table_3_38_12(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instructions
 * opcode: 13
 *
 * mnemonic: cvtph2ps
 * operand: ['Vo', 'Woq']
 * prefix: 66
 * attr: ['vl0']
 * cpu_model: >= X86_Arch_F16c
 *
 * mnemonic: cvtph2ps
 * operand: ['Vy', 'Woo']
 * prefix: 66
 * attr: ['vl1']
 * cpu_model: >= X86_Arch_F16c
 *
**/
bool X86Architecture::Table_3_38_13(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_F16c && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Cvtph2ps);
      if (Operand__Vy_Woo(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_F16c && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Cvtph2ps);
      if (Operand__Vo_Woq(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    return false;
}

/** instruction
 * mnemonic: blendvps
 * operand: ['Vo', 'Wo']
 * prefix: 66
 * opcode: 14
 * cpu_model: >= X86_Arch_Sse41
**/
bool X86Architecture::Table_3_38_14(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse41 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Blendvps);
      if (Operand__Vo_Wo(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else
      return false;
}

/** instruction
 * mnemonic: blendvpd
 * operand: ['Vo', 'Wo']
 * prefix: 66
 * opcode: 15
 * cpu_model: >= X86_Arch_Sse41
**/
bool X86Architecture::Table_3_38_15(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse41 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Blendvpd);
      if (Operand__Vo_Wo(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else
      return false;
}

/** instruction
 * mnemonic: permps
 * operand: ['Vy', 'Hy', 'Wy']
 * prefix: 66
 * opcode: 16
 * cpu_model: >= X86_Arch_Avx2
**/
bool X86Architecture::Table_3_38_16(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Avx2 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Permps);
      if (Operand__Vy_Hy_Wy(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else
      return false;
}

/** instructions
 * opcode: 17
 *
 * mnemonic: ptest
 * operand: ['Vx', 'Wx']
 * prefix: 66
 * cpu_model: >= X86_Arch_Sse41
 *
 * mnemonic: ptest
 * operand: ['Vx', 'Wx']
 * prefix: 66
 * attr: ['nv']
 * cpu_model: >= X86_Arch_Avx
 *
**/
bool X86Architecture::Table_3_38_17(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Avx && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Ptest);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse41 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Ptest);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    return false;
}

/** instructions
 * opcode: 18
 *
 * mnemonic: broadcastss
 * operand: ['Vx', 'Uod']
 * prefix: 66
 * attr: ['nc', 'w0']
 * cpu_model: >= X86_Arch_Avx
 *
 * mnemonic: broadcastss
 * operand: ['Vx', 'Uo']
 * prefix: 66
 * attr: ['nc', 'w0']
 * cpu_model: >= X86_Arch_Avx2
 *
**/
bool X86Architecture::Table_3_38_18(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Avx2 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Broadcastss);
      if (Operand__Vx_Uo(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Avx && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Broadcastss);
      if (Operand__Vx_Uod(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    return false;
}

/** instructions
 * opcode: 19
 *
 * mnemonic: broadcastsd
 * operand: ['Vy', 'Woq']
 * prefix: 66
 * attr: ['nc', 'w0']
 * cpu_model: >= X86_Arch_Avx
 *
 * mnemonic: broadcastsd
 * operand: ['Vy', 'Uo']
 * prefix: 66
 * attr: ['nc', 'w0']
 * cpu_model: >= X86_Arch_Avx2
 *
**/
bool X86Architecture::Table_3_38_19(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Avx2 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Broadcastsd);
      if (Operand__Vy_Uo(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Avx && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Broadcastsd);
      if (Operand__Vy_Woq(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    return false;
}

/** instruction
 * mnemonic: broadcastf128
 * prefix: 66
 * opcode: 1a
 * attr: ['nv', 'w0']
 * operand: ['Vy', 'Uo']
 * cpu_model: >= X86_Arch_Avx
**/
bool X86Architecture::Table_3_38_1a(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Avx && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Broadcastf128);
      if (Operand__Vy_Uo(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else
      return false;
}

/** instruction
 * opcode: 1b
 * invalid
**/
bool X86Architecture::Table_3_38_1b(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instructions
 * opcode: 1c
 *
 * mnemonic: pabsb
 * operand: ['Pq', 'Qq']
 * cpu_model: >= X86_Arch_Ssse3
 *
 * mnemonic: pabsb
 * operand: ['Vx', 'Wx']
 * prefix: 66
 * cpu_model: >= X86_Arch_Ssse3
 *
 * mnemonic: pabsb
 * operand: ['Vx', 'Wx']
 * prefix: 66
 * attr: ['ny']
 * cpu_model: >= X86_Arch_Avx
 *
 * mnemonic: pabsb
 * operand: ['Vx', 'Wx']
 * prefix: 66
 * cpu_model: >= X86_Arch_Avx2
 *
**/
bool X86Architecture::Table_3_38_1c(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Avx2 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pabsb);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Avx && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pabsb);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Ssse3 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pabsb);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Ssse3)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pabsb);
      if (Operand__Pq_Qq(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    return false;
}

/** instructions
 * opcode: 1d
 *
 * mnemonic: pabsw
 * operand: ['Pq', 'Qq']
 * cpu_model: >= X86_Arch_Ssse3
 *
 * mnemonic: pabsw
 * operand: ['Vx', 'Wx']
 * prefix: 66
 * cpu_model: >= X86_Arch_Ssse3
 *
 * mnemonic: pabsw
 * operand: ['Vx', 'Wx']
 * prefix: 66
 * attr: ['ny']
 * cpu_model: >= X86_Arch_Avx
 *
 * mnemonic: pabsw
 * operand: ['Vx', 'Wx']
 * prefix: 66
 * cpu_model: >= X86_Arch_Avx2
 *
**/
bool X86Architecture::Table_3_38_1d(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Avx2 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pabsw);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Avx && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pabsw);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Ssse3 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pabsw);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Ssse3)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pabsw);
      if (Operand__Pq_Qq(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    return false;
}

/** instructions
 * opcode: 1e
 *
 * mnemonic: pabsd
 * operand: ['Pq', 'Qq']
 * cpu_model: >= X86_Arch_Ssse3
 *
 * mnemonic: pabsd
 * operand: ['Vx', 'Wx']
 * prefix: 66
 * cpu_model: >= X86_Arch_Ssse3
 *
 * mnemonic: pabsd
 * operand: ['Vx', 'Wx']
 * prefix: 66
 * attr: ['ny']
 * cpu_model: >= X86_Arch_Avx
 *
 * mnemonic: pabsd
 * operand: ['Vx', 'Wx']
 * prefix: 66
 * cpu_model: >= X86_Arch_Avx2
 *
**/
bool X86Architecture::Table_3_38_1e(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Avx2 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pabsd);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Avx && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pabsd);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Ssse3 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pabsd);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Ssse3)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pabsd);
      if (Operand__Pq_Qq(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    return false;
}

/** instruction
 * opcode: 1f
 * invalid
**/
bool X86Architecture::Table_3_38_1f(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instructions
 * opcode: 20
 *
 * mnemonic: pmovsxbw
 * operand: ['Vo', 'Woq']
 * prefix: 66
 * cpu_model: >= X86_Arch_Sse41
 *
 * mnemonic: pmovsxbw
 * operand: ['Vo', 'Woq']
 * prefix: 66
 * attr: ['ny', 'nv']
 * cpu_model: >= X86_Arch_Avx
 *
 * mnemonic: pmovsxbw
 * operand: ['Vy', 'Woo']
 * prefix: 66
 * cpu_model: >= X86_Arch_Avx2
 *
**/
bool X86Architecture::Table_3_38_20(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Avx2 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pmovsxbw);
      if (Operand__Vy_Woo(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Avx && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pmovsxbw);
      if (Operand__Vo_Woq(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse41 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pmovsxbw);
      if (Operand__Vo_Woq(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    return false;
}

/** instructions
 * opcode: 21
 *
 * mnemonic: pmovsxbd
 * operand: ['Vo', 'Wod']
 * prefix: 66
 * cpu_model: >= X86_Arch_Sse41
 *
 * mnemonic: pmovsxbd
 * operand: ['Vo', 'Wod']
 * prefix: 66
 * attr: ['ny', 'nv']
 * cpu_model: >= X86_Arch_Avx
 *
 * mnemonic: pmovsxbd
 * operand: ['Vy', 'Woq']
 * prefix: 66
 * cpu_model: >= X86_Arch_Avx2
 *
**/
bool X86Architecture::Table_3_38_21(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Avx2 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pmovsxbd);
      if (Operand__Vy_Woq(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Avx && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pmovsxbd);
      if (Operand__Vo_Wod(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse41 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pmovsxbd);
      if (Operand__Vo_Wod(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    return false;
}

/** instructions
 * opcode: 22
 *
 * mnemonic: pmovsxbq
 * operand: ['Vo', 'Wow']
 * prefix: 66
 * cpu_model: >= X86_Arch_Sse41
 *
 * mnemonic: pmovsxbq
 * operand: ['Vo', 'Wow']
 * prefix: 66
 * attr: ['ny', 'nv']
 * cpu_model: >= X86_Arch_Avx
 *
 * mnemonic: pmovsxbq
 * operand: ['Vy', 'Wod']
 * prefix: 66
 * cpu_model: >= X86_Arch_Avx2
 *
**/
bool X86Architecture::Table_3_38_22(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Avx2 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pmovsxbq);
      if (Operand__Vy_Wod(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Avx && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pmovsxbq);
      if (Operand__Vo_Wow(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse41 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pmovsxbq);
      if (Operand__Vo_Wow(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    return false;
}

/** instructions
 * opcode: 23
 *
 * mnemonic: pmovsxwd
 * operand: ['Vo', 'Woq']
 * prefix: 66
 * cpu_model: >= X86_Arch_Sse41
 *
 * mnemonic: pmovsxwd
 * operand: ['Vo', 'Woq']
 * prefix: 66
 * attr: ['ny', 'nv']
 * cpu_model: >= X86_Arch_Avx
 *
 * mnemonic: pmovsxwd
 * operand: ['Vy', 'Woo']
 * prefix: 66
 * cpu_model: >= X86_Arch_Avx2
 *
**/
bool X86Architecture::Table_3_38_23(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Avx2 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pmovsxwd);
      if (Operand__Vy_Woo(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Avx && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pmovsxwd);
      if (Operand__Vo_Woq(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse41 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pmovsxwd);
      if (Operand__Vo_Woq(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    return false;
}

/** instructions
 * opcode: 24
 *
 * mnemonic: pmovsxwq
 * operand: ['Vo', 'Wod']
 * prefix: 66
 * cpu_model: >= X86_Arch_Sse41
 *
 * mnemonic: pmovsxwq
 * operand: ['Vo', 'Wod']
 * prefix: 66
 * attr: ['ny', 'nv']
 * cpu_model: >= X86_Arch_Avx
 *
 * mnemonic: pmovsxwq
 * operand: ['Vy', 'Woq']
 * prefix: 66
 * cpu_model: >= X86_Arch_Avx2
 *
**/
bool X86Architecture::Table_3_38_24(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Avx2 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pmovsxwq);
      if (Operand__Vy_Woq(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Avx && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pmovsxwq);
      if (Operand__Vo_Wod(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse41 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pmovsxwq);
      if (Operand__Vo_Wod(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    return false;
}

/** instructions
 * opcode: 25
 *
 * mnemonic: pmovsxdq
 * operand: ['Vo', 'Wow']
 * prefix: 66
 * cpu_model: >= X86_Arch_Sse41
 *
 * mnemonic: pmovsxdq
 * operand: ['Vo', 'Wow']
 * prefix: 66
 * attr: ['ny', 'nv']
 * cpu_model: >= X86_Arch_Avx
 *
 * mnemonic: pmovsxdq
 * operand: ['Vy', 'Wod']
 * prefix: 66
 * cpu_model: >= X86_Arch_Avx2
 *
**/
bool X86Architecture::Table_3_38_25(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Avx2 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pmovsxdq);
      if (Operand__Vy_Wod(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Avx && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pmovsxdq);
      if (Operand__Vo_Wow(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse41 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pmovsxdq);
      if (Operand__Vo_Wow(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    return false;
}

/** instruction
 * opcode: 26
 * invalid
**/
bool X86Architecture::Table_3_38_26(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 27
 * invalid
**/
bool X86Architecture::Table_3_38_27(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instructions
 * opcode: 28
 *
 * mnemonic: pmuldq
 * operand: ['Vx', 'Wx']
 * prefix: 66
 * cpu_model: >= X86_Arch_Sse41
 *
 * mnemonic: pmuldq
 * operand: ['Vx', 'Wx']
 * prefix: 66
 * attr: ['ny']
 * cpu_model: >= X86_Arch_Avx
 *
 * mnemonic: pmuldq
 * operand: ['Vx', 'Wx']
 * prefix: 66
 * cpu_model: >= X86_Arch_Avx2
 *
**/
bool X86Architecture::Table_3_38_28(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Avx2 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pmuldq);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Avx && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pmuldq);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse41 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pmuldq);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    return false;
}

/** instructions
 * opcode: 29
 *
 * mnemonic: pcmpeqq
 * operand: ['Vx', 'Wx']
 * prefix: 66
 * cpu_model: >= X86_Arch_Sse41
 *
 * mnemonic: pcmpeqq
 * operand: ['Vx', 'Wx']
 * prefix: 66
 * attr: ['ny']
 * cpu_model: >= X86_Arch_Avx
 *
 * mnemonic: pcmpeqq
 * operand: ['Vx', 'Wx']
 * prefix: 66
 * cpu_model: >= X86_Arch_Avx2
 *
**/
bool X86Architecture::Table_3_38_29(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Avx2 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pcmpeqq);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Avx && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pcmpeqq);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse41 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pcmpeqq);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    return false;
}

/** instructions
 * opcode: 2a
 *
 * mnemonic: movntdqa
 * operand: ['Vx', 'Mx']
 * prefix: 66
 * cpu_model: >= X86_Arch_Sse41
 *
 * mnemonic: movntdqa
 * operand: ['Vx', 'Mx']
 * prefix: 66
 * attr: ['nv', 'ny']
 * cpu_model: >= X86_Arch_Avx
 *
 * mnemonic: movntdqa
 * operand: ['Vx', 'Mx']
 * prefix: 66
 * attr: ['nv']
 * cpu_model: >= X86_Arch_Avx2
 *
**/
bool X86Architecture::Table_3_38_2a(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Avx2 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Movntdqa);
      if (Operand__Vx_Mx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Avx && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Movntdqa);
      if (Operand__Vx_Mx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse41 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Movntdqa);
      if (Operand__Vx_Mx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    return false;
}

/** instructions
 * opcode: 2b
 *
 * mnemonic: packusdw
 * operand: ['Vx', 'Wx']
 * prefix: 66
 * cpu_model: >= X86_Arch_Sse41
 *
 * mnemonic: packusdw
 * operand: ['Vx', 'Wx']
 * prefix: 66
 * attr: ['ny']
 * cpu_model: >= X86_Arch_Avx
 *
 * mnemonic: packusdw
 * operand: ['Vx', 'Wx']
 * prefix: 66
 * cpu_model: >= X86_Arch_Avx2
 *
**/
bool X86Architecture::Table_3_38_2b(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Avx2 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Packusdw);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Avx && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Packusdw);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse41 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Packusdw);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    return false;
}

/** instruction
 * mnemonic: maskmovps
 * prefix: 66
 * opcode: 2c
 * attr: ['w0']
 * operand: ['Vx', 'Mx']
 * cpu_model: >= X86_Arch_Avx
**/
bool X86Architecture::Table_3_38_2c(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Avx && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Maskmovps);
      if (Operand__Vx_Mx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else
      return false;
}

/** instruction
 * mnemonic: maskmovpd
 * prefix: 66
 * opcode: 2d
 * attr: ['w0']
 * operand: ['Vx', 'Mx']
 * cpu_model: >= X86_Arch_Avx
**/
bool X86Architecture::Table_3_38_2d(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Avx && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Maskmovpd);
      if (Operand__Vx_Mx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else
      return false;
}

/** instruction
 * mnemonic: maskmovps
 * prefix: 66
 * opcode: 2e
 * attr: ['w0']
 * operand: ['Mx', 'Vx']
 * cpu_model: >= X86_Arch_Avx
**/
bool X86Architecture::Table_3_38_2e(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Avx && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Maskmovps);
      if (Operand__Mx_Vx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else
      return false;
}

/** instruction
 * mnemonic: maskmovpd
 * prefix: 66
 * opcode: 2f
 * attr: ['w0']
 * operand: ['Mx', 'Vx']
 * cpu_model: >= X86_Arch_Avx
**/
bool X86Architecture::Table_3_38_2f(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Avx && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Maskmovpd);
      if (Operand__Mx_Vx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else
      return false;
}

/** instructions
 * opcode: 30
 *
 * mnemonic: pmovzxbw
 * operand: ['Vo', 'Woq']
 * prefix: 66
 * cpu_model: >= X86_Arch_Sse41
 *
 * mnemonic: pmovzxbw
 * operand: ['Vo', 'Woq']
 * prefix: 66
 * attr: ['ny', 'nv']
 * cpu_model: >= X86_Arch_Avx
 *
 * mnemonic: pmovzxbw
 * operand: ['Vy', 'Woo']
 * prefix: 66
 * cpu_model: >= X86_Arch_Avx2
 *
**/
bool X86Architecture::Table_3_38_30(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Avx2 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pmovzxbw);
      if (Operand__Vy_Woo(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Avx && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pmovzxbw);
      if (Operand__Vo_Woq(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse41 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pmovzxbw);
      if (Operand__Vo_Woq(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    return false;
}

/** instructions
 * opcode: 31
 *
 * mnemonic: pmovzxbd
 * operand: ['Vo', 'Wod']
 * prefix: 66
 * cpu_model: >= X86_Arch_Sse41
 *
 * mnemonic: pmovzxbd
 * operand: ['Vo', 'Wod']
 * prefix: 66
 * attr: ['ny', 'nv']
 * cpu_model: >= X86_Arch_Avx
 *
 * mnemonic: pmovzxbd
 * operand: ['Vy', 'Woq']
 * prefix: 66
 * cpu_model: >= X86_Arch_Avx2
 *
**/
bool X86Architecture::Table_3_38_31(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Avx2 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pmovzxbd);
      if (Operand__Vy_Woq(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Avx && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pmovzxbd);
      if (Operand__Vo_Wod(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse41 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pmovzxbd);
      if (Operand__Vo_Wod(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    return false;
}

/** instructions
 * opcode: 32
 *
 * mnemonic: pmovzxbq
 * operand: ['Vo', 'Wow']
 * prefix: 66
 * cpu_model: >= X86_Arch_Sse41
 *
 * mnemonic: pmovzxbq
 * operand: ['Vo', 'Wow']
 * prefix: 66
 * attr: ['ny', 'nv']
 * cpu_model: >= X86_Arch_Avx
 *
 * mnemonic: pmovzxbq
 * operand: ['Vy', 'Wod']
 * prefix: 66
 * cpu_model: >= X86_Arch_Avx2
 *
**/
bool X86Architecture::Table_3_38_32(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Avx2 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pmovzxbq);
      if (Operand__Vy_Wod(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Avx && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pmovzxbq);
      if (Operand__Vo_Wow(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse41 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pmovzxbq);
      if (Operand__Vo_Wow(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    return false;
}

/** instructions
 * opcode: 33
 *
 * mnemonic: pmovzxwd
 * operand: ['Vo', 'Woq']
 * prefix: 66
 * cpu_model: >= X86_Arch_Sse41
 *
 * mnemonic: pmovzxwd
 * operand: ['Vo', 'Woq']
 * prefix: 66
 * attr: ['ny', 'nv']
 * cpu_model: >= X86_Arch_Avx
 *
 * mnemonic: pmovzxwd
 * operand: ['Vy', 'Woo']
 * prefix: 66
 * cpu_model: >= X86_Arch_Avx2
 *
**/
bool X86Architecture::Table_3_38_33(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Avx2 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pmovzxwd);
      if (Operand__Vy_Woo(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Avx && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pmovzxwd);
      if (Operand__Vo_Woq(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse41 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pmovzxwd);
      if (Operand__Vo_Woq(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    return false;
}

/** instructions
 * opcode: 34
 *
 * mnemonic: pmovzxwq
 * operand: ['Vo', 'Wod']
 * prefix: 66
 * cpu_model: >= X86_Arch_Sse41
 *
 * mnemonic: pmovzxwq
 * operand: ['Vo', 'Wod']
 * prefix: 66
 * attr: ['ny', 'nv']
 * cpu_model: >= X86_Arch_Avx
 *
 * mnemonic: pmovzxwq
 * operand: ['Vy', 'Woq']
 * prefix: 66
 * cpu_model: >= X86_Arch_Avx2
 *
**/
bool X86Architecture::Table_3_38_34(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Avx2 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pmovzxwq);
      if (Operand__Vy_Woq(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Avx && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pmovzxwq);
      if (Operand__Vo_Wod(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse41 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pmovzxwq);
      if (Operand__Vo_Wod(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    return false;
}

/** instructions
 * opcode: 35
 *
 * mnemonic: pmovzxdq
 * operand: ['Vo', 'Woq']
 * prefix: 66
 * cpu_model: >= X86_Arch_Sse41
 *
 * mnemonic: pmovzxdq
 * operand: ['Vo', 'Woq']
 * prefix: 66
 * attr: ['ny', 'nv']
 * cpu_model: >= X86_Arch_Avx
 *
 * mnemonic: pmovzxdq
 * operand: ['Vy', 'Woo']
 * prefix: 66
 * cpu_model: >= X86_Arch_Avx2
 *
**/
bool X86Architecture::Table_3_38_35(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Avx2 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pmovzxdq);
      if (Operand__Vy_Woo(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Avx && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pmovzxdq);
      if (Operand__Vo_Woq(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse41 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pmovzxdq);
      if (Operand__Vo_Woq(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    return false;
}

/** instruction
 * mnemonic: permd
 * operand: ['Vy', 'Hy', 'Wy']
 * prefix: 66
 * opcode: 36
 * cpu_model: >= X86_Arch_Avx2
**/
bool X86Architecture::Table_3_38_36(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Avx2 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Permd);
      if (Operand__Vy_Hy_Wy(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else
      return false;
}

/** instructions
 * opcode: 37
 *
 * mnemonic: pcmpgtq
 * operand: ['Vx', 'Wx']
 * prefix: 66
 * cpu_model: >= X86_Arch_Sse42
 *
 * mnemonic: pcmpgtq
 * operand: ['Vx', 'Wx']
 * prefix: 66
 * attr: ['ny']
 * cpu_model: >= X86_Arch_Avx
 *
**/
bool X86Architecture::Table_3_38_37(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Avx && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pcmpgtq);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse42 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pcmpgtq);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    return false;
}

/** instructions
 * opcode: 38
 *
 * mnemonic: pminsb
 * operand: ['Vx', 'Wx']
 * prefix: 66
 * cpu_model: >= X86_Arch_Sse41
 *
 * mnemonic: pminsb
 * operand: ['Vx', 'Wx']
 * prefix: 66
 * attr: ['ny']
 * cpu_model: >= X86_Arch_Avx
 *
 * mnemonic: pminsb
 * operand: ['Vx', 'Wx']
 * prefix: 66
 * cpu_model: >= X86_Arch_Avx2
 *
**/
bool X86Architecture::Table_3_38_38(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Avx2 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pminsb);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Avx && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pminsb);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse41 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pminsb);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    return false;
}

/** instructions
 * opcode: 39
 *
 * mnemonic: pminsd
 * operand: ['Vx', 'Wx']
 * prefix: 66
 * cpu_model: >= X86_Arch_Sse41
 *
 * mnemonic: pminsd
 * operand: ['Vx', 'Wx']
 * prefix: 66
 * attr: ['ny']
 * cpu_model: >= X86_Arch_Avx
 *
 * mnemonic: pminsd
 * operand: ['Vx', 'Wx']
 * prefix: 66
 * cpu_model: >= X86_Arch_Avx2
 *
**/
bool X86Architecture::Table_3_38_39(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Avx2 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pminsd);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Avx && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pminsd);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse41 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pminsd);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    return false;
}

/** instructions
 * opcode: 3a
 *
 * mnemonic: pminuw
 * operand: ['Vx', 'Wx']
 * prefix: 66
 * cpu_model: >= X86_Arch_Sse41
 *
 * mnemonic: pminuw
 * operand: ['Vx', 'Wx']
 * prefix: 66
 * attr: ['ny']
 * cpu_model: >= X86_Arch_Avx
 *
 * mnemonic: pminuw
 * operand: ['Vx', 'Wx']
 * prefix: 66
 * cpu_model: >= X86_Arch_Avx2
 *
**/
bool X86Architecture::Table_3_38_3a(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Avx2 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pminuw);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Avx && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pminuw);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse41 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pminuw);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    return false;
}

/** instructions
 * opcode: 3b
 *
 * mnemonic: pminud
 * operand: ['Vx', 'Wx']
 * prefix: 66
 * cpu_model: >= X86_Arch_Sse41
 *
 * mnemonic: pminud
 * operand: ['Vx', 'Wx']
 * prefix: 66
 * attr: ['ny']
 * cpu_model: >= X86_Arch_Avx
 *
 * mnemonic: pminud
 * operand: ['Vx', 'Wx']
 * prefix: 66
 * cpu_model: >= X86_Arch_Avx2
 *
**/
bool X86Architecture::Table_3_38_3b(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Avx2 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pminud);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Avx && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pminud);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse41 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pminud);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    return false;
}

/** instructions
 * opcode: 3c
 *
 * mnemonic: pmaxsb
 * operand: ['Vx', 'Wx']
 * prefix: 66
 * cpu_model: >= X86_Arch_Sse41
 *
 * mnemonic: pmaxsb
 * operand: ['Vx', 'Wx']
 * prefix: 66
 * attr: ['ny']
 * cpu_model: >= X86_Arch_Avx
 *
 * mnemonic: pmaxsb
 * operand: ['Vx', 'Wx']
 * prefix: 66
 * cpu_model: >= X86_Arch_Avx2
 *
**/
bool X86Architecture::Table_3_38_3c(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Avx2 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pmaxsb);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Avx && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pmaxsb);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse41 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pmaxsb);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    return false;
}

/** instructions
 * opcode: 3d
 *
 * mnemonic: pmaxsd
 * operand: ['Vx', 'Wx']
 * prefix: 66
 * cpu_model: >= X86_Arch_Sse41
 *
 * mnemonic: pmaxsd
 * operand: ['Vx', 'Wx']
 * prefix: 66
 * attr: ['ny']
 * cpu_model: >= X86_Arch_Avx
 *
 * mnemonic: pmaxsd
 * operand: ['Vx', 'Wx']
 * prefix: 66
 * cpu_model: >= X86_Arch_Avx2
 *
**/
bool X86Architecture::Table_3_38_3d(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Avx2 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pmaxsd);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Avx && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pmaxsd);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse41 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pmaxsd);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    return false;
}

/** instructions
 * opcode: 3e
 *
 * mnemonic: pmaxuw
 * operand: ['Vx', 'Wx']
 * prefix: 66
 * cpu_model: >= X86_Arch_Sse41
 *
 * mnemonic: pmaxuw
 * operand: ['Vx', 'Wx']
 * prefix: 66
 * attr: ['ny']
 * cpu_model: >= X86_Arch_Avx
 *
 * mnemonic: pmaxuw
 * operand: ['Vx', 'Wx']
 * prefix: 66
 * cpu_model: >= X86_Arch_Avx2
 *
**/
bool X86Architecture::Table_3_38_3e(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Avx2 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pmaxuw);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Avx && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pmaxuw);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse41 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pmaxuw);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    return false;
}

/** instructions
 * opcode: 3f
 *
 * mnemonic: pmaxud
 * operand: ['Vx', 'Wx']
 * prefix: 66
 * cpu_model: >= X86_Arch_Sse41
 *
 * mnemonic: pmaxud
 * operand: ['Vx', 'Wx']
 * prefix: 66
 * attr: ['ny']
 * cpu_model: >= X86_Arch_Avx
 *
 * mnemonic: pmaxud
 * operand: ['Vx', 'Wx']
 * prefix: 66
 * cpu_model: >= X86_Arch_Avx2
 *
**/
bool X86Architecture::Table_3_38_3f(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Avx2 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pmaxud);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Avx && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pmaxud);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse41 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pmaxud);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    return false;
}

/** instructions
 * opcode: 40
 *
 * mnemonic: pmulld
 * operand: ['Vx', 'Wx']
 * prefix: 66
 * cpu_model: >= X86_Arch_Sse41
 *
 * mnemonic: pmulld
 * operand: ['Vx', 'Wx']
 * prefix: 66
 * attr: ['ny']
 * cpu_model: >= X86_Arch_Avx
 *
 * mnemonic: pmulld
 * operand: ['Vx', 'Wx']
 * prefix: 66
 * cpu_model: >= X86_Arch_Avx2
 *
**/
bool X86Architecture::Table_3_38_40(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Avx2 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pmulld);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Avx && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pmulld);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse41 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pmulld);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    return false;
}

/** instructions
 * opcode: 41
 *
 * mnemonic: phminposuw
 * operand: ['Vo', 'Wo']
 * prefix: 66
 * cpu_model: >= X86_Arch_Sse41
 *
 * mnemonic: phminposuw
 * operand: ['Vo', 'Wo']
 * prefix: 66
 * attr: ['ny', 'nv']
 * cpu_model: >= X86_Arch_Avx
 *
**/
bool X86Architecture::Table_3_38_41(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Avx && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Phminposuw);
      if (Operand__Vo_Wo(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse41 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Phminposuw);
      if (Operand__Vo_Wo(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    return false;
}

/** instruction
 * opcode: 42
 * invalid
**/
bool X86Architecture::Table_3_38_42(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 43
 * invalid
**/
bool X86Architecture::Table_3_38_43(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 44
 * invalid
**/
bool X86Architecture::Table_3_38_44(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instructions
 * opcode: 45
 *
 * mnemonic: psrlvd
 * operand: ['Vx', 'Wx']
 * prefix: 66
 * attr: ['w0']
 * cpu_model: >= X86_Arch_Avx2
 *
 * mnemonic: psrlvq
 * operand: ['Vx', 'Wx']
 * prefix: 66
 * attr: ['w1']
 * cpu_model: >= X86_Arch_Avx2
 *
**/
bool X86Architecture::Table_3_38_45(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Avx2 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Psrlvq);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Avx2 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Psrlvd);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    return false;
}

/** instruction
 * mnemonic: psravd
 * prefix: 66
 * opcode: 46
 * attr: ['w0']
 * operand: ['Vx', 'Wx']
 * cpu_model: >= X86_Arch_Avx2
**/
bool X86Architecture::Table_3_38_46(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Avx2 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Psravd);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else
      return false;
}

/** instructions
 * opcode: 47
 *
 * mnemonic: psllvd
 * operand: ['Vx', 'Wx']
 * prefix: 66
 * attr: ['w0']
 * cpu_model: >= X86_Arch_Avx2
 *
 * mnemonic: psllvq
 * operand: ['Vx', 'Wx']
 * prefix: 66
 * attr: ['w0']
 * cpu_model: >= X86_Arch_Avx2
 *
**/
bool X86Architecture::Table_3_38_47(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Avx2 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Psllvq);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Avx2 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Psllvd);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    return false;
}

/** instruction
 * opcode: 48
 * invalid
**/
bool X86Architecture::Table_3_38_48(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 49
 * invalid
**/
bool X86Architecture::Table_3_38_49(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 4a
 * invalid
**/
bool X86Architecture::Table_3_38_4a(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 4b
 * invalid
**/
bool X86Architecture::Table_3_38_4b(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 4c
 * invalid
**/
bool X86Architecture::Table_3_38_4c(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 4d
 * invalid
**/
bool X86Architecture::Table_3_38_4d(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 4e
 * invalid
**/
bool X86Architecture::Table_3_38_4e(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 4f
 * invalid
**/
bool X86Architecture::Table_3_38_4f(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 50
 * invalid
**/
bool X86Architecture::Table_3_38_50(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 51
 * invalid
**/
bool X86Architecture::Table_3_38_51(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 52
 * invalid
**/
bool X86Architecture::Table_3_38_52(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 53
 * invalid
**/
bool X86Architecture::Table_3_38_53(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 54
 * invalid
**/
bool X86Architecture::Table_3_38_54(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 55
 * invalid
**/
bool X86Architecture::Table_3_38_55(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 56
 * invalid
**/
bool X86Architecture::Table_3_38_56(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 57
 * invalid
**/
bool X86Architecture::Table_3_38_57(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * mnemonic: pbroadcastd
 * prefix: 66
 * opcode: 58
 * attr: ['nv', 'w0']
 * operand: ['Vx', 'Uod']
 * cpu_model: >= X86_Arch_Avx2
**/
bool X86Architecture::Table_3_38_58(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Avx2 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pbroadcastd);
      if (Operand__Vx_Uod(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else
      return false;
}

/** instruction
 * mnemonic: pbroadcastq
 * prefix: 66
 * opcode: 59
 * attr: ['nv', 'w0']
 * operand: ['Vx', 'Woq']
 * cpu_model: >= X86_Arch_Avx2
**/
bool X86Architecture::Table_3_38_59(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Avx2 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pbroadcastq);
      if (Operand__Vx_Woq(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else
      return false;
}

/** instruction
 * mnemonic: broadcasti128
 * prefix: 66
 * opcode: 5a
 * attr: ['nv', 'w0']
 * operand: ['Vy', 'Uo']
 * cpu_model: >= X86_Arch_Avx2
**/
bool X86Architecture::Table_3_38_5a(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Avx2 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Broadcasti128);
      if (Operand__Vy_Uo(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else
      return false;
}

/** instruction
 * opcode: 5b
 * invalid
**/
bool X86Architecture::Table_3_38_5b(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 5c
 * invalid
**/
bool X86Architecture::Table_3_38_5c(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 5d
 * invalid
**/
bool X86Architecture::Table_3_38_5d(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 5e
 * invalid
**/
bool X86Architecture::Table_3_38_5e(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 5f
 * invalid
**/
bool X86Architecture::Table_3_38_5f(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 60
 * invalid
**/
bool X86Architecture::Table_3_38_60(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 61
 * invalid
**/
bool X86Architecture::Table_3_38_61(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 62
 * invalid
**/
bool X86Architecture::Table_3_38_62(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 63
 * invalid
**/
bool X86Architecture::Table_3_38_63(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 64
 * invalid
**/
bool X86Architecture::Table_3_38_64(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 65
 * invalid
**/
bool X86Architecture::Table_3_38_65(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 66
 * invalid
**/
bool X86Architecture::Table_3_38_66(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 67
 * invalid
**/
bool X86Architecture::Table_3_38_67(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 68
 * invalid
**/
bool X86Architecture::Table_3_38_68(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 69
 * invalid
**/
bool X86Architecture::Table_3_38_69(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 6a
 * invalid
**/
bool X86Architecture::Table_3_38_6a(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 6b
 * invalid
**/
bool X86Architecture::Table_3_38_6b(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 6c
 * invalid
**/
bool X86Architecture::Table_3_38_6c(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 6d
 * invalid
**/
bool X86Architecture::Table_3_38_6d(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 6e
 * invalid
**/
bool X86Architecture::Table_3_38_6e(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 6f
 * invalid
**/
bool X86Architecture::Table_3_38_6f(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 70
 * invalid
**/
bool X86Architecture::Table_3_38_70(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 71
 * invalid
**/
bool X86Architecture::Table_3_38_71(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 72
 * invalid
**/
bool X86Architecture::Table_3_38_72(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 73
 * invalid
**/
bool X86Architecture::Table_3_38_73(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 74
 * invalid
**/
bool X86Architecture::Table_3_38_74(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 75
 * invalid
**/
bool X86Architecture::Table_3_38_75(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 76
 * invalid
**/
bool X86Architecture::Table_3_38_76(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 77
 * invalid
**/
bool X86Architecture::Table_3_38_77(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * mnemonic: pbroadcastb
 * prefix: 66
 * opcode: 78
 * attr: ['nv']
 * operand: ['Vx', 'Uo', 'b']
 * cpu_model: >= X86_Arch_Avx2
**/
bool X86Architecture::Table_3_38_78(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Avx2 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pbroadcastb);
      if (Operand__Vx_Uo_b(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else
      return false;
}

/** instruction
 * mnemonic: pbroadcastw
 * prefix: 66
 * opcode: 79
 * attr: ['nv']
 * operand: ['Vx', 'Uo', 'w']
 * cpu_model: >= X86_Arch_Avx2
**/
bool X86Architecture::Table_3_38_79(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Avx2 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pbroadcastw);
      if (Operand__Vx_Uo_w(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else
      return false;
}

/** instruction
 * opcode: 7a
 * invalid
**/
bool X86Architecture::Table_3_38_7a(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 7b
 * invalid
**/
bool X86Architecture::Table_3_38_7b(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 7c
 * invalid
**/
bool X86Architecture::Table_3_38_7c(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 7d
 * invalid
**/
bool X86Architecture::Table_3_38_7d(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 7e
 * invalid
**/
bool X86Architecture::Table_3_38_7e(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 7f
 * invalid
**/
bool X86Architecture::Table_3_38_7f(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * mnemonic: invept
 * operand: ['Gy', 'Uo']
 * prefix: 66
 * opcode: 80
 * cpu_model: >= X86_Arch_Vmx
**/
bool X86Architecture::Table_3_38_80(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Vmx && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Invept);
      if (Operand__Gy_Uo(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else
      return false;
}

/** instruction
 * mnemonic: invvpid
 * operand: ['Gy', 'Uo']
 * prefix: 66
 * opcode: 81
 * cpu_model: >= X86_Arch_Vmx
**/
bool X86Architecture::Table_3_38_81(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Vmx && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Invvpid);
      if (Operand__Gy_Uo(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else
      return false;
}

/** instruction
 * mnemonic: invpcid
 * operand: ['Gy', 'Uo']
 * prefix: 66
 * opcode: 82
 * cpu_model: >= X86_Arch_Invpcid
**/
bool X86Architecture::Table_3_38_82(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Invpcid && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Invpcid);
      if (Operand__Gy_Uo(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else
      return false;
}

/** instruction
 * opcode: 83
 * invalid
**/
bool X86Architecture::Table_3_38_83(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 84
 * invalid
**/
bool X86Architecture::Table_3_38_84(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 85
 * invalid
**/
bool X86Architecture::Table_3_38_85(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 86
 * invalid
**/
bool X86Architecture::Table_3_38_86(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 87
 * invalid
**/
bool X86Architecture::Table_3_38_87(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 88
 * invalid
**/
bool X86Architecture::Table_3_38_88(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 89
 * invalid
**/
bool X86Architecture::Table_3_38_89(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 8a
 * invalid
**/
bool X86Architecture::Table_3_38_8a(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 8b
 * invalid
**/
bool X86Architecture::Table_3_38_8b(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instructions
 * opcode: 8c
 *
 * mnemonic: pmaskmovd
 * operand: ['Vx', 'Mx']
 * prefix: 66
 * attr: ['w0']
 * cpu_model: >= X86_Arch_Avx2
 *
 * mnemonic: pmaskmovq
 * operand: ['Vx', 'Mx']
 * prefix: 66
 * attr: ['w1']
 * cpu_model: >= X86_Arch_Avx2
 *
**/
bool X86Architecture::Table_3_38_8c(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Avx2 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pmaskmovq);
      if (Operand__Vx_Mx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Avx2 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pmaskmovd);
      if (Operand__Vx_Mx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    return false;
}

/** instruction
 * opcode: 8d
 * invalid
**/
bool X86Architecture::Table_3_38_8d(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instructions
 * opcode: 8e
 *
 * mnemonic: pmaskmovd
 * operand: ['Mx', 'Vx']
 * prefix: 66
 * attr: ['w0']
 * cpu_model: >= X86_Arch_Avx2
 *
 * mnemonic: pmaskmovq
 * operand: ['Mx', 'Vx']
 * prefix: 66
 * attr: ['w1']
 * cpu_model: >= X86_Arch_Avx2
 *
**/
bool X86Architecture::Table_3_38_8e(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Avx2 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pmaskmovq);
      if (Operand__Mx_Vx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Avx2 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pmaskmovd);
      if (Operand__Mx_Vx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    return false;
}

/** instruction
 * opcode: 8f
 * invalid
**/
bool X86Architecture::Table_3_38_8f(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instructions
 * opcode: 90
 *
 * mnemonic: pgatherdd
 * operand: ['Vx', 'Md', 'x', 'Hx']
 * prefix: 66
 * attr: ['w0']
 * cpu_model: >= X86_Arch_Avx2
 *
 * mnemonic: pgatherdq
 * operand: ['Vx', 'Mqo', 'Hx']
 * prefix: 66
 * attr: ['w1']
 * cpu_model: >= X86_Arch_Avx2
 *
**/
bool X86Architecture::Table_3_38_90(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Avx2 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pgatherdq);
      if (Operand__Vx_Mqo_Hx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Avx2 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pgatherdd);
      if (Operand__Vx_Md_x_Hx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    return false;
}

/** instructions
 * opcode: 91
 *
 * mnemonic: pgatherqd
 * operand: ['Vo', 'Md', 'x', 'Ho']
 * prefix: 66
 * attr: ['w0']
 * cpu_model: >= X86_Arch_Avx2
 *
 * mnemonic: pgatherqq
 * operand: ['Vx', 'Mq', 'x', 'Hx']
 * prefix: 66
 * attr: ['w1']
 * cpu_model: >= X86_Arch_Avx2
 *
**/
bool X86Architecture::Table_3_38_91(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Avx2 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pgatherqq);
      if (Operand__Vx_Mq_x_Hx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Avx2 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pgatherqd);
      if (Operand__Vo_Md_x_Ho(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    return false;
}

/** instructions
 * opcode: 92
 *
 * mnemonic: pgatherdps
 * operand: ['Vx', 'Md', 'x', 'Hx']
 * prefix: 66
 * attr: ['w0']
 * cpu_model: >= X86_Arch_Avx2
 *
 * mnemonic: pgatherdpd
 * operand: ['Vx', 'Mqo', 'Hx']
 * prefix: 66
 * attr: ['w1']
 * cpu_model: >= X86_Arch_Avx2
 *
**/
bool X86Architecture::Table_3_38_92(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Avx2 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pgatherdpd);
      if (Operand__Vx_Mqo_Hx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Avx2 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pgatherdps);
      if (Operand__Vx_Md_x_Hx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    return false;
}

/** instructions
 * opcode: 93
 *
 * mnemonic: pgatherqps
 * operand: ['Vo', 'Md', 'x', 'Ho']
 * prefix: 66
 * attr: ['w0']
 * cpu_model: >= X86_Arch_Avx2
 *
 * mnemonic: pgatherqpd
 * operand: ['Vx', 'Mq', 'x', 'Hx']
 * prefix: 66
 * attr: ['w1']
 * cpu_model: >= X86_Arch_Avx2
 *
**/
bool X86Architecture::Table_3_38_93(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Avx2 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pgatherqpd);
      if (Operand__Vx_Mq_x_Hx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Avx2 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pgatherqps);
      if (Operand__Vo_Md_x_Ho(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    return false;
}

/** instruction
 * opcode: 94
 * invalid
**/
bool X86Architecture::Table_3_38_94(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 95
 * invalid
**/
bool X86Architecture::Table_3_38_95(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instructions
 * opcode: 96
 *
 * mnemonic: fmaddsub132ps
 * operand: ['Vx', 'Wx']
 * prefix: 66
 * attr: ['w0']
 * cpu_model: >= X86_Arch_Fma
 *
 * mnemonic: fmaddsub132pd
 * operand: ['Vx', 'Wx']
 * prefix: 66
 * attr: ['w1']
 * cpu_model: >= X86_Arch_Fma
 *
**/
bool X86Architecture::Table_3_38_96(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Fma && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Fmaddsub132pd);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Fma && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Fmaddsub132ps);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    return false;
}

/** instructions
 * opcode: 97
 *
 * mnemonic: fmsubadd132ps
 * operand: ['Vx', 'Wx']
 * prefix: 66
 * attr: ['w0']
 * cpu_model: >= X86_Arch_Fma
 *
 * mnemonic: fmsubadd132pd
 * operand: ['Vx', 'Wx']
 * prefix: 66
 * attr: ['w1']
 * cpu_model: >= X86_Arch_Fma
 *
**/
bool X86Architecture::Table_3_38_97(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Fma && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Fmsubadd132pd);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Fma && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Fmsubadd132ps);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    return false;
}

/** instructions
 * opcode: 98
 *
 * mnemonic: fmadd132ps
 * operand: ['Vx', 'Wx']
 * prefix: 66
 * attr: ['w0']
 * cpu_model: >= X86_Arch_Fma
 *
 * mnemonic: fmadd132pd
 * operand: ['Vx', 'Wx']
 * prefix: 66
 * attr: ['w1']
 * cpu_model: >= X86_Arch_Fma
 *
**/
bool X86Architecture::Table_3_38_98(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Fma && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Fmadd132pd);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Fma && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Fmadd132ps);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    return false;
}

/** instructions
 * opcode: 99
 *
 * mnemonic: fmadd132ss
 * operand: ['Vo', 'Ho', 'Wd']
 * prefix: 66
 * attr: ['w0']
 * cpu_model: >= X86_Arch_Fma
 *
 * mnemonic: fmadd132sd
 * operand: ['Vo', 'Ho', 'Wq']
 * prefix: 66
 * attr: ['w1']
 * cpu_model: >= X86_Arch_Fma
 *
**/
bool X86Architecture::Table_3_38_99(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Fma && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Fmadd132sd);
      if (Operand__Vo_Ho_Wq(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Fma && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Fmadd132ss);
      if (Operand__Vo_Ho_Wd(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    return false;
}

/** instructions
 * opcode: 9a
 *
 * mnemonic: fmsub132ps
 * operand: ['Vx', 'Wx']
 * prefix: 66
 * attr: ['w0']
 * cpu_model: >= X86_Arch_Fma
 *
 * mnemonic: fmsub132pd
 * operand: ['Vx', 'Wx']
 * prefix: 66
 * attr: ['w1']
 * cpu_model: >= X86_Arch_Fma
 *
**/
bool X86Architecture::Table_3_38_9a(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Fma && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Fmsub132pd);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Fma && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Fmsub132ps);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    return false;
}

/** instructions
 * opcode: 9b
 *
 * mnemonic: fmsub132ss
 * operand: ['Vo', 'Ho', 'Wd']
 * prefix: 66
 * attr: ['w0']
 * cpu_model: >= X86_Arch_Fma
 *
 * mnemonic: fmsub132sd
 * operand: ['Vo', 'Ho', 'Wq']
 * prefix: 66
 * attr: ['w1']
 * cpu_model: >= X86_Arch_Fma
 *
**/
bool X86Architecture::Table_3_38_9b(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Fma && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Fmsub132sd);
      if (Operand__Vo_Ho_Wq(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Fma && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Fmsub132ss);
      if (Operand__Vo_Ho_Wd(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    return false;
}

/** instructions
 * opcode: 9c
 *
 * mnemonic: fnmadd132ps
 * operand: ['Vx', 'Wx']
 * prefix: 66
 * attr: ['w0']
 * cpu_model: >= X86_Arch_Fma
 *
 * mnemonic: fnmadd132pd
 * operand: ['Vx', 'Wx']
 * prefix: 66
 * attr: ['w1']
 * cpu_model: >= X86_Arch_Fma
 *
**/
bool X86Architecture::Table_3_38_9c(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Fma && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Fnmadd132pd);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Fma && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Fnmadd132ps);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    return false;
}

/** instructions
 * opcode: 9d
 *
 * mnemonic: fnmadd132ss
 * operand: ['Vo', 'Ho', 'Wd']
 * prefix: 66
 * attr: ['w0']
 * cpu_model: >= X86_Arch_Fma
 *
 * mnemonic: fnmadd132sd
 * operand: ['Vo', 'Ho', 'Wq']
 * prefix: 66
 * attr: ['w1']
 * cpu_model: >= X86_Arch_Fma
 *
**/
bool X86Architecture::Table_3_38_9d(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Fma && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Fnmadd132sd);
      if (Operand__Vo_Ho_Wq(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Fma && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Fnmadd132ss);
      if (Operand__Vo_Ho_Wd(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    return false;
}

/** instructions
 * opcode: 9e
 *
 * mnemonic: fnmsub132ps
 * operand: ['Vx', 'Wx']
 * prefix: 66
 * attr: ['w0']
 * cpu_model: >= X86_Arch_Fma
 *
 * mnemonic: fnmsub132pd
 * operand: ['Vx', 'Wx']
 * prefix: 66
 * attr: ['w1']
 * cpu_model: >= X86_Arch_Fma
 *
**/
bool X86Architecture::Table_3_38_9e(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Fma && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Fnmsub132pd);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Fma && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Fnmsub132ps);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    return false;
}

/** instructions
 * opcode: 9f
 *
 * mnemonic: fnmsub132ss
 * operand: ['Vo', 'Ho', 'Wd']
 * prefix: 66
 * attr: ['w0']
 * cpu_model: >= X86_Arch_Fma
 *
 * mnemonic: fnmsub132sd
 * operand: ['Vo', 'Ho', 'Wq']
 * prefix: 66
 * attr: ['w1']
 * cpu_model: >= X86_Arch_Fma
 *
**/
bool X86Architecture::Table_3_38_9f(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Fma && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Fnmsub132sd);
      if (Operand__Vo_Ho_Wq(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Fma && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Fnmsub132ss);
      if (Operand__Vo_Ho_Wd(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    return false;
}

/** instruction
 * opcode: a0
 * invalid
**/
bool X86Architecture::Table_3_38_a0(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: a1
 * invalid
**/
bool X86Architecture::Table_3_38_a1(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: a2
 * invalid
**/
bool X86Architecture::Table_3_38_a2(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: a3
 * invalid
**/
bool X86Architecture::Table_3_38_a3(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: a4
 * invalid
**/
bool X86Architecture::Table_3_38_a4(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: a5
 * invalid
**/
bool X86Architecture::Table_3_38_a5(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instructions
 * opcode: a6
 *
 * mnemonic: fmaddsub213ps
 * operand: ['Vx', 'Wx']
 * prefix: 66
 * attr: ['w0']
 * cpu_model: >= X86_Arch_Fma
 *
 * mnemonic: fmaddsub213pd
 * operand: ['Vx', 'Wx']
 * prefix: 66
 * attr: ['w1']
 * cpu_model: >= X86_Arch_Fma
 *
**/
bool X86Architecture::Table_3_38_a6(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Fma && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Fmaddsub213pd);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Fma && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Fmaddsub213ps);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    return false;
}

/** instructions
 * opcode: a7
 *
 * mnemonic: fmsubadd213ps
 * operand: ['Vx', 'Wx']
 * prefix: 66
 * attr: ['w0']
 * cpu_model: >= X86_Arch_Fma
 *
 * mnemonic: fmsubadd213pd
 * operand: ['Vx', 'Wx']
 * prefix: 66
 * attr: ['w1']
 * cpu_model: >= X86_Arch_Fma
 *
**/
bool X86Architecture::Table_3_38_a7(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Fma && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Fmsubadd213pd);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Fma && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Fmsubadd213ps);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    return false;
}

/** instructions
 * opcode: a8
 *
 * mnemonic: fmadd213ps
 * operand: ['Vx', 'Wx']
 * prefix: 66
 * attr: ['w0']
 * cpu_model: >= X86_Arch_Fma
 *
 * mnemonic: fmadd213pd
 * operand: ['Vx', 'Wx']
 * prefix: 66
 * attr: ['w1']
 * cpu_model: >= X86_Arch_Fma
 *
**/
bool X86Architecture::Table_3_38_a8(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Fma && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Fmadd213pd);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Fma && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Fmadd213ps);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    return false;
}

/** instructions
 * opcode: a9
 *
 * mnemonic: fmadd213ss
 * operand: ['Vo', 'Ho', 'Wd']
 * prefix: 66
 * attr: ['w0']
 * cpu_model: >= X86_Arch_Fma
 *
 * mnemonic: fmadd213sd
 * operand: ['Vo', 'Ho', 'Wq']
 * prefix: 66
 * attr: ['w1']
 * cpu_model: >= X86_Arch_Fma
 *
**/
bool X86Architecture::Table_3_38_a9(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Fma && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Fmadd213sd);
      if (Operand__Vo_Ho_Wq(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Fma && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Fmadd213ss);
      if (Operand__Vo_Ho_Wd(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    return false;
}

/** instructions
 * opcode: aa
 *
 * mnemonic: fmsub213ps
 * operand: ['Vx', 'Wx']
 * prefix: 66
 * attr: ['w0']
 * cpu_model: >= X86_Arch_Fma
 *
 * mnemonic: fmsub213pd
 * operand: ['Vx', 'Wx']
 * prefix: 66
 * attr: ['w1']
 * cpu_model: >= X86_Arch_Fma
 *
**/
bool X86Architecture::Table_3_38_aa(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Fma && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Fmsub213pd);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Fma && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Fmsub213ps);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    return false;
}

/** instructions
 * opcode: ab
 *
 * mnemonic: fmsub213ss
 * operand: ['Vo', 'Ho', 'Wd']
 * prefix: 66
 * attr: ['w0']
 * cpu_model: >= X86_Arch_Fma
 *
 * mnemonic: fmsub213sd
 * operand: ['Vo', 'Ho', 'Wq']
 * prefix: 66
 * attr: ['w1']
 * cpu_model: >= X86_Arch_Fma
 *
**/
bool X86Architecture::Table_3_38_ab(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Fma && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Fmsub213sd);
      if (Operand__Vo_Ho_Wq(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Fma && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Fmsub213ss);
      if (Operand__Vo_Ho_Wd(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    return false;
}

/** instructions
 * opcode: ac
 *
 * mnemonic: fnmadd213ps
 * operand: ['Vx', 'Wx']
 * prefix: 66
 * attr: ['w0']
 * cpu_model: >= X86_Arch_Fma
 *
 * mnemonic: fnmadd213pd
 * operand: ['Vx', 'Wx']
 * prefix: 66
 * attr: ['w1']
 * cpu_model: >= X86_Arch_Fma
 *
**/
bool X86Architecture::Table_3_38_ac(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Fma && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Fnmadd213pd);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Fma && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Fnmadd213ps);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    return false;
}

/** instructions
 * opcode: ad
 *
 * mnemonic: fnmadd213ss
 * operand: ['Vo', 'Ho', 'Wd']
 * prefix: 66
 * attr: ['w0']
 * cpu_model: >= X86_Arch_Fma
 *
 * mnemonic: fnmadd213sd
 * operand: ['Vo', 'Ho', 'Wq']
 * prefix: 66
 * attr: ['w1']
 * cpu_model: >= X86_Arch_Fma
 *
**/
bool X86Architecture::Table_3_38_ad(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Fma && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Fnmadd213sd);
      if (Operand__Vo_Ho_Wq(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Fma && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Fnmadd213ss);
      if (Operand__Vo_Ho_Wd(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    return false;
}

/** instructions
 * opcode: ae
 *
 * mnemonic: fnmsub213ps
 * operand: ['Vx', 'Wx']
 * prefix: 66
 * attr: ['w0']
 * cpu_model: >= X86_Arch_Fma
 *
 * mnemonic: fnmsub213pd
 * operand: ['Vx', 'Wx']
 * prefix: 66
 * attr: ['w1']
 * cpu_model: >= X86_Arch_Fma
 *
**/
bool X86Architecture::Table_3_38_ae(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Fma && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Fnmsub213pd);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Fma && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Fnmsub213ps);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    return false;
}

/** instructions
 * opcode: af
 *
 * mnemonic: fnmsub213ss
 * operand: ['Vo', 'Ho', 'Wd']
 * prefix: 66
 * attr: ['w0']
 * cpu_model: >= X86_Arch_Fma
 *
 * mnemonic: fnmsub213sd
 * operand: ['Vo', 'Ho', 'Wq']
 * prefix: 66
 * attr: ['w1']
 * cpu_model: >= X86_Arch_Fma
 *
**/
bool X86Architecture::Table_3_38_af(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Fma && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Fnmsub213sd);
      if (Operand__Vo_Ho_Wq(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Fma && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Fnmsub213ss);
      if (Operand__Vo_Ho_Wd(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    return false;
}

/** instruction
 * opcode: b0
 * invalid
**/
bool X86Architecture::Table_3_38_b0(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: b1
 * invalid
**/
bool X86Architecture::Table_3_38_b1(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: b2
 * invalid
**/
bool X86Architecture::Table_3_38_b2(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: b3
 * invalid
**/
bool X86Architecture::Table_3_38_b3(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: b4
 * invalid
**/
bool X86Architecture::Table_3_38_b4(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: b5
 * invalid
**/
bool X86Architecture::Table_3_38_b5(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instructions
 * opcode: b6
 *
 * mnemonic: fmaddsub231ps
 * operand: ['Vx', 'Wx']
 * prefix: 66
 * attr: ['w0']
 * cpu_model: >= X86_Arch_Fma
 *
 * mnemonic: fmaddsub231pd
 * operand: ['Vx', 'Wx']
 * prefix: 66
 * attr: ['w1']
 * cpu_model: >= X86_Arch_Fma
 *
**/
bool X86Architecture::Table_3_38_b6(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Fma && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Fmaddsub231pd);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Fma && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Fmaddsub231ps);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    return false;
}

/** instructions
 * opcode: b7
 *
 * mnemonic: fmsubadd231ps
 * operand: ['Vx', 'Wx']
 * prefix: 66
 * attr: ['w0']
 * cpu_model: >= X86_Arch_Fma
 *
 * mnemonic: fmsubadd231pd
 * operand: ['Vx', 'Wx']
 * prefix: 66
 * attr: ['w1']
 * cpu_model: >= X86_Arch_Fma
 *
**/
bool X86Architecture::Table_3_38_b7(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Fma && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Fmsubadd231pd);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Fma && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Fmsubadd231ps);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    return false;
}

/** instructions
 * opcode: b8
 *
 * mnemonic: fmadd231ps
 * operand: ['Vx', 'Wx']
 * prefix: 66
 * attr: ['w0']
 * cpu_model: >= X86_Arch_Fma
 *
 * mnemonic: fmadd231pd
 * operand: ['Vx', 'Wx']
 * prefix: 66
 * attr: ['w1']
 * cpu_model: >= X86_Arch_Fma
 *
**/
bool X86Architecture::Table_3_38_b8(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Fma && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Fmadd231pd);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Fma && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Fmadd231ps);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    return false;
}

/** instructions
 * opcode: b9
 *
 * mnemonic: fmadd231ss
 * operand: ['Vo', 'Ho', 'Wd']
 * prefix: 66
 * attr: ['w0']
 * cpu_model: >= X86_Arch_Fma
 *
 * mnemonic: fmadd231sd
 * operand: ['Vo', 'Ho', 'Wq']
 * prefix: 66
 * attr: ['w1']
 * cpu_model: >= X86_Arch_Fma
 *
**/
bool X86Architecture::Table_3_38_b9(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Fma && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Fmadd231sd);
      if (Operand__Vo_Ho_Wq(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Fma && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Fmadd231ss);
      if (Operand__Vo_Ho_Wd(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    return false;
}

/** instructions
 * opcode: ba
 *
 * mnemonic: fmsub231ps
 * operand: ['Vx', 'Wx']
 * prefix: 66
 * attr: ['w0']
 * cpu_model: >= X86_Arch_Fma
 *
 * mnemonic: fmsub231pd
 * operand: ['Vx', 'Wx']
 * prefix: 66
 * attr: ['w1']
 * cpu_model: >= X86_Arch_Fma
 *
**/
bool X86Architecture::Table_3_38_ba(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Fma && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Fmsub231pd);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Fma && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Fmsub231ps);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    return false;
}

/** instructions
 * opcode: bb
 *
 * mnemonic: fmsub231ss
 * operand: ['Vo', 'Ho', 'Wd']
 * prefix: 66
 * attr: ['w0']
 * cpu_model: >= X86_Arch_Fma
 *
 * mnemonic: fmsub231sd
 * operand: ['Vo', 'Ho', 'Wq']
 * prefix: 66
 * attr: ['w1']
 * cpu_model: >= X86_Arch_Fma
 *
**/
bool X86Architecture::Table_3_38_bb(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Fma && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Fmsub231sd);
      if (Operand__Vo_Ho_Wq(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Fma && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Fmsub231ss);
      if (Operand__Vo_Ho_Wd(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    return false;
}

/** instructions
 * opcode: bc
 *
 * mnemonic: fnmadd231ps
 * operand: ['Vx', 'Wx']
 * prefix: 66
 * attr: ['w0']
 * cpu_model: >= X86_Arch_Fma
 *
 * mnemonic: fnmadd231pd
 * operand: ['Vx', 'Wx']
 * prefix: 66
 * attr: ['w1']
 * cpu_model: >= X86_Arch_Fma
 *
**/
bool X86Architecture::Table_3_38_bc(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Fma && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Fnmadd231pd);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Fma && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Fnmadd231ps);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    return false;
}

/** instructions
 * opcode: bd
 *
 * mnemonic: fnmadd231ss
 * operand: ['Vo', 'Ho', 'Wd']
 * prefix: 66
 * attr: ['w0']
 * cpu_model: >= X86_Arch_Fma
 *
 * mnemonic: fnmadd231sd
 * operand: ['Vo', 'Ho', 'Wq']
 * prefix: 66
 * attr: ['w1']
 * cpu_model: >= X86_Arch_Fma
 *
**/
bool X86Architecture::Table_3_38_bd(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Fma && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Fnmadd231sd);
      if (Operand__Vo_Ho_Wq(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Fma && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Fnmadd231ss);
      if (Operand__Vo_Ho_Wd(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    return false;
}

/** instructions
 * opcode: be
 *
 * mnemonic: fnmsub231ps
 * operand: ['Vx', 'Wx']
 * prefix: 66
 * attr: ['w0']
 * cpu_model: >= X86_Arch_Fma
 *
 * mnemonic: fnmsub231pd
 * operand: ['Vx', 'Wx']
 * prefix: 66
 * attr: ['w1']
 * cpu_model: >= X86_Arch_Fma
 *
**/
bool X86Architecture::Table_3_38_be(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Fma && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Fnmsub231pd);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Fma && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Fnmsub231ps);
      if (Operand__Vx_Wx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    return false;
}

/** instructions
 * opcode: bf
 *
 * mnemonic: fnmsub231ss
 * operand: ['Vo', 'Ho', 'Wd']
 * prefix: 66
 * attr: ['w0']
 * cpu_model: >= X86_Arch_Fma
 *
 * mnemonic: fnmsub231sd
 * operand: ['Vo', 'Ho', 'Wq']
 * prefix: 66
 * attr: ['w1']
 * cpu_model: >= X86_Arch_Fma
 *
**/
bool X86Architecture::Table_3_38_bf(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Fma && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Fnmsub231sd);
      if (Operand__Vo_Ho_Wq(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Fma && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Fnmsub231ss);
      if (Operand__Vo_Ho_Wd(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    return false;
}

/** instruction
 * opcode: c0
 * invalid
**/
bool X86Architecture::Table_3_38_c0(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: c1
 * invalid
**/
bool X86Architecture::Table_3_38_c1(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: c2
 * invalid
**/
bool X86Architecture::Table_3_38_c2(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: c3
 * invalid
**/
bool X86Architecture::Table_3_38_c3(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: c4
 * invalid
**/
bool X86Architecture::Table_3_38_c4(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: c5
 * invalid
**/
bool X86Architecture::Table_3_38_c5(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: c6
 * invalid
**/
bool X86Architecture::Table_3_38_c6(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: c7
 * invalid
**/
bool X86Architecture::Table_3_38_c7(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: c8
 * invalid
**/
bool X86Architecture::Table_3_38_c8(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: c9
 * invalid
**/
bool X86Architecture::Table_3_38_c9(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: ca
 * invalid
**/
bool X86Architecture::Table_3_38_ca(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: cb
 * invalid
**/
bool X86Architecture::Table_3_38_cb(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: cc
 * invalid
**/
bool X86Architecture::Table_3_38_cc(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: cd
 * invalid
**/
bool X86Architecture::Table_3_38_cd(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: ce
 * invalid
**/
bool X86Architecture::Table_3_38_ce(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: cf
 * invalid
**/
bool X86Architecture::Table_3_38_cf(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: d0
 * invalid
**/
bool X86Architecture::Table_3_38_d0(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: d1
 * invalid
**/
bool X86Architecture::Table_3_38_d1(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: d2
 * invalid
**/
bool X86Architecture::Table_3_38_d2(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: d3
 * invalid
**/
bool X86Architecture::Table_3_38_d3(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: d4
 * invalid
**/
bool X86Architecture::Table_3_38_d4(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: d5
 * invalid
**/
bool X86Architecture::Table_3_38_d5(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: d6
 * invalid
**/
bool X86Architecture::Table_3_38_d6(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: d7
 * invalid
**/
bool X86Architecture::Table_3_38_d7(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: d8
 * invalid
**/
bool X86Architecture::Table_3_38_d8(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: d9
 * invalid
**/
bool X86Architecture::Table_3_38_d9(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: da
 * invalid
**/
bool X86Architecture::Table_3_38_da(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instructions
 * opcode: db
 *
 * mnemonic: aesimc
 * operand: ['Vo', 'Wo']
 * prefix: 66
 * attr: ['nv', 'ny']
 * cpu_model: >= X86_Arch_Aes
 *
 * mnemonic: aesimc
 * operand: ['Vo', 'Wo']
 * prefix: 66
 * attr: ['nv', 'ny']
 * cpu_model: >= X86_Arch_Avx
 *
**/
bool X86Architecture::Table_3_38_db(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Avx && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Aesimc);
      if (Operand__Vo_Wo(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Aes && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Aesimc);
      if (Operand__Vo_Wo(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    return false;
}

/** instructions
 * opcode: dc
 *
 * mnemonic: aesenc
 * operand: ['Vo', 'Wo']
 * prefix: 66
 * attr: ['nv', 'ny']
 * cpu_model: >= X86_Arch_Aes
 *
 * mnemonic: aesenc
 * operand: ['Vo', 'Ho', 'Wo']
 * prefix: 66
 * attr: ['ny']
 * cpu_model: >= X86_Arch_Avx
 *
**/
bool X86Architecture::Table_3_38_dc(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Avx && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Aesenc);
      if (Operand__Vo_Ho_Wo(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Aes && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Aesenc);
      if (Operand__Vo_Wo(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    return false;
}

/** instructions
 * opcode: dd
 *
 * mnemonic: aesenclast
 * operand: ['Vo', 'Wo']
 * prefix: 66
 * attr: ['nv', 'ny']
 * cpu_model: >= X86_Arch_Aes
 *
 * mnemonic: aesenclast
 * operand: ['Vo', 'Ho', 'Wo']
 * prefix: 66
 * attr: ['ny']
 * cpu_model: >= X86_Arch_Avx
 *
**/
bool X86Architecture::Table_3_38_dd(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Avx && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Aesenclast);
      if (Operand__Vo_Ho_Wo(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Aes && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Aesenclast);
      if (Operand__Vo_Wo(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    return false;
}

/** instructions
 * opcode: de
 *
 * mnemonic: aesdec
 * operand: ['Vo', 'Wo']
 * prefix: 66
 * attr: ['nv', 'ny']
 * cpu_model: >= X86_Arch_Aes
 *
 * mnemonic: aesdec
 * operand: ['Vo', 'Ho', 'Wo']
 * prefix: 66
 * attr: ['ny']
 * cpu_model: >= X86_Arch_Avx
 *
**/
bool X86Architecture::Table_3_38_de(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Avx && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Aesdec);
      if (Operand__Vo_Ho_Wo(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Aes && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Aesdec);
      if (Operand__Vo_Wo(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    return false;
}

/** instructions
 * opcode: df
 *
 * mnemonic: aesdeclast
 * operand: ['Vo', 'Wo']
 * prefix: 66
 * attr: ['nv', 'ny']
 * cpu_model: >= X86_Arch_Aes
 *
 * mnemonic: aesdeclast
 * operand: ['Vo', 'Ho', 'Wo']
 * prefix: 66
 * attr: ['ny']
 * cpu_model: >= X86_Arch_Avx
 *
**/
bool X86Architecture::Table_3_38_df(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Avx && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Aesdeclast);
      if (Operand__Vo_Ho_Wo(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Aes && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Aesdeclast);
      if (Operand__Vo_Wo(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    return false;
}

/** instruction
 * opcode: e0
 * invalid
**/
bool X86Architecture::Table_3_38_e0(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: e1
 * invalid
**/
bool X86Architecture::Table_3_38_e1(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: e2
 * invalid
**/
bool X86Architecture::Table_3_38_e2(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: e3
 * invalid
**/
bool X86Architecture::Table_3_38_e3(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: e4
 * invalid
**/
bool X86Architecture::Table_3_38_e4(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: e5
 * invalid
**/
bool X86Architecture::Table_3_38_e5(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: e6
 * invalid
**/
bool X86Architecture::Table_3_38_e6(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: e7
 * invalid
**/
bool X86Architecture::Table_3_38_e7(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: e8
 * invalid
**/
bool X86Architecture::Table_3_38_e8(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: e9
 * invalid
**/
bool X86Architecture::Table_3_38_e9(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: ea
 * invalid
**/
bool X86Architecture::Table_3_38_ea(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: eb
 * invalid
**/
bool X86Architecture::Table_3_38_eb(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: ec
 * invalid
**/
bool X86Architecture::Table_3_38_ec(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: ed
 * invalid
**/
bool X86Architecture::Table_3_38_ed(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: ee
 * invalid
**/
bool X86Architecture::Table_3_38_ee(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: ef
 * invalid
**/
bool X86Architecture::Table_3_38_ef(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instructions
 * opcode: f0
 *
 * mnemonic: movbe
 * operand: ['Gv', 'Mv']
 * cpu_model: >= X86_Arch_Movbe
 *
 * mnemonic: movbe
 * operand: ['Gv', 'Mv']
 * prefix: 66
 * cpu_model: >= X86_Arch_Movbe
 *
 * mnemonic: crc32
 * operand: ['Gy', 'Eb']
 * prefix: f2
 * cpu_model: >= X86_Arch_Sse42
 *
 * mnemonic: crc32
 * operand: ['Gy', 'Eb']
 * prefix: [102, 242]
 * cpu_model: >= X86_Arch_Sse42
 *
**/
bool X86Architecture::Table_3_38_f0(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse42 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize && (rInsn.GetPrefix() & X86_Prefix_RepNz) == X86_Prefix_RepNz)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Crc32);
      if (Operand__Gy_Eb(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse42 && (rInsn.GetPrefix() & X86_Prefix_RepNz) == X86_Prefix_RepNz)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Crc32);
      if (Operand__Gy_Eb(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Movbe && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Movbe);
      if (Operand__Gv_Mv(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Movbe)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Movbe);
      if (Operand__Gv_Mv(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    return false;
}

/** instructions
 * opcode: f1
 *
 * mnemonic: movbe
 * operand: ['Mv', 'Gv']
 * cpu_model: >= X86_Arch_Movbe
 *
 * mnemonic: movbe
 * operand: ['Mv', 'Gv']
 * prefix: 66
 * cpu_model: >= X86_Arch_Movbe
 *
 * mnemonic: crc32
 * operand: ['Gy', 'Ev']
 * prefix: f2
 * cpu_model: >= X86_Arch_Sse42
 *
 * mnemonic: crc32
 * operand: ['Gy', 'Ev']
 * prefix: [102, 242]
 * cpu_model: >= X86_Arch_Sse42
 *
**/
bool X86Architecture::Table_3_38_f1(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse42 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize && (rInsn.GetPrefix() & X86_Prefix_RepNz) == X86_Prefix_RepNz)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Crc32);
      if (Operand__Gy_Ev(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse42 && (rInsn.GetPrefix() & X86_Prefix_RepNz) == X86_Prefix_RepNz)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Crc32);
      if (Operand__Gy_Ev(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Movbe && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Movbe);
      if (Operand__Mv_Gv(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Movbe)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Movbe);
      if (Operand__Mv_Gv(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    return false;
}

/** instruction
 * mnemonic: andn
 * operand: ['Gy', 'By', 'Ey']
 * opcode: f2
 * cpu_model: >= X86_Arch_Bmi
**/
bool X86Architecture::Table_3_38_f2(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Bmi)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Andn);
      if (Operand__Gy_By_Ey(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else
      return false;
}

/** instructions
 * opcode: f3
 *
 * reference: group_17
 *
 * prefix: 66
 * reference: group_17
 *
 * prefix: f3
 * reference: group_17
 *
 * prefix: f2
 * reference: group_17
 *
 * prefix: [102, 242]
 * reference: group_17
 *
**/
bool X86Architecture::Table_3_38_f3(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if ((rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize && (rInsn.GetPrefix() & X86_Prefix_RepNz) == X86_Prefix_RepNz)
    {
      rInsn.Length()++;
      return true;
    }
    else if ((rInsn.GetPrefix() & X86_Prefix_RepNz) == X86_Prefix_RepNz)
    {
      rInsn.Length()++;
      return true;
    }
    else if ((rInsn.GetPrefix() & X86_Prefix_Rep) == X86_Prefix_Rep)
    {
      rInsn.Length()++;
      return true;
    }
    else if ((rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      return true;
    }
    else
    {
      u8 ModRmByte;
      if (!rBinStrm.Read(Offset, ModRmByte))
        return false;

      x86::ModRM ModRm(ModRmByte);
      switch (ModRm.Reg())
      {
      case 0x0:
        return false;
      case 0x1:
        if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Bmi)
        {
          rInsn.Length()++;
          rInsn.SetOpcode(X86_Opcode_Blsr);
          if (Operand__By_Ey(rBinStrm, Offset, rInsn, Mode) == false)
          {
            return false;
          }
          return true;
        }
        else
          return false;
      case 0x2:
        if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Bmi)
        {
          rInsn.Length()++;
          rInsn.SetOpcode(X86_Opcode_Blsmsk);
          if (Operand__By_Ey(rBinStrm, Offset, rInsn, Mode) == false)
          {
            return false;
          }
          return true;
        }
        else
          return false;
      case 0x3:
        if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Bmi)
        {
          rInsn.Length()++;
          rInsn.SetOpcode(X86_Opcode_Blsi);
          if (Operand__By_Ey(rBinStrm, Offset, rInsn, Mode) == false)
          {
            return false;
          }
          return true;
        }
        else
          return false;
      case 0x4:
        return false;
      case 0x5:
        return false;
      case 0x6:
        return false;
      case 0x7:
        return false;
      default:
        return false;
      }
    }
}

/** instruction
 * opcode: f4
 * invalid
**/
bool X86Architecture::Table_3_38_f4(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instructions
 * opcode: f5
 *
 * mnemonic: bzhi
 * operand: ['Gy', 'Ey', 'By']
 * cpu_model: >= X86_Arch_Bmi2
 *
 * mnemonic: pext
 * operand: ['Gy', 'By', 'Ey']
 * prefix: f3
 * cpu_model: >= X86_Arch_Bmi2
 *
 * mnemonic: pdep
 * operand: ['Gy', 'By', 'Ey']
 * prefix: f2
 * cpu_model: >= X86_Arch_Bmi2
 *
**/
bool X86Architecture::Table_3_38_f5(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Bmi2 && (rInsn.GetPrefix() & X86_Prefix_RepNz) == X86_Prefix_RepNz)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pdep);
      if (Operand__Gy_By_Ey(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Bmi2 && (rInsn.GetPrefix() & X86_Prefix_Rep) == X86_Prefix_Rep)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pext);
      if (Operand__Gy_By_Ey(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Bmi2)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Bzhi);
      if (Operand__Gy_Ey_By(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    return false;
}

/** instruction
 * mnemonic: mulx
 * operand: ['Gy', 'Ey', 'By']
 * prefix: f2
 * opcode: f6
 * cpu_model: >= X86_Arch_Bmi2
**/
bool X86Architecture::Table_3_38_f6(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Bmi2 && (rInsn.GetPrefix() & X86_Prefix_RepNz) == X86_Prefix_RepNz)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Mulx);
      if (Operand__Gy_Ey_By(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else
      return false;
}

/** instructions
 * opcode: f7
 *
 * mnemonic: bextr
 * operand: ['Gy', 'Ey', 'By']
 * cpu_model: >= X86_Arch_Bmi
 *
 * mnemonic: shlx
 * operand: ['Gy', 'Ey', 'By']
 * prefix: 66
 * cpu_model: >= X86_Arch_Bmi2
 *
 * mnemonic: sarx
 * operand: ['Gy', 'Ey', 'By']
 * prefix: f3
 * cpu_model: >= X86_Arch_Bmi2
 *
 * mnemonic: shrx
 * operand: ['Gy', 'Ey', 'By']
 * prefix: f2
 * cpu_model: >= X86_Arch_Bmi2
 *
**/
bool X86Architecture::Table_3_38_f7(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Bmi2 && (rInsn.GetPrefix() & X86_Prefix_RepNz) == X86_Prefix_RepNz)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Shrx);
      if (Operand__Gy_Ey_By(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Bmi2 && (rInsn.GetPrefix() & X86_Prefix_Rep) == X86_Prefix_Rep)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Sarx);
      if (Operand__Gy_Ey_By(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Bmi2 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Shlx);
      if (Operand__Gy_Ey_By(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Bmi)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Bextr);
      if (Operand__Gy_Ey_By(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    return false;
}

/** instruction
 * opcode: f8
 * invalid
**/
bool X86Architecture::Table_3_38_f8(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: f9
 * invalid
**/
bool X86Architecture::Table_3_38_f9(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: fa
 * invalid
**/
bool X86Architecture::Table_3_38_fa(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: fb
 * invalid
**/
bool X86Architecture::Table_3_38_fb(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: fc
 * invalid
**/
bool X86Architecture::Table_3_38_fc(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: fd
 * invalid
**/
bool X86Architecture::Table_3_38_fd(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: fe
 * invalid
**/
bool X86Architecture::Table_3_38_fe(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: ff
 * invalid
**/
bool X86Architecture::Table_3_38_ff(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * mnemonic: permq
 * operand: ['Vy', 'Wy', 'Ib']
 * prefix: 66
 * opcode: 00
 * cpu_model: >= X86_Arch_Avx2
**/
bool X86Architecture::Table_3_3a_00(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Avx2 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Permq);
      if (Operand__Vy_Wy_Ib(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else
      return false;
}

/** instruction
 * mnemonic: permd
 * operand: ['Vy', 'Wy', 'Ib']
 * prefix: 66
 * opcode: 01
 * cpu_model: >= X86_Arch_Avx2
**/
bool X86Architecture::Table_3_3a_01(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Avx2 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Permd);
      if (Operand__Vy_Wy_Ib(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else
      return false;
}

/** instruction
 * mnemonic: pblendd
 * operand: ['Vx', 'Wx', 'Ib']
 * prefix: 66
 * opcode: 02
 * cpu_model: >= X86_Arch_Avx2
**/
bool X86Architecture::Table_3_3a_02(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Avx2 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pblendd);
      if (Operand__Vx_Wx_Ib(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else
      return false;
}

/** instruction
 * opcode: 03
 * invalid
**/
bool X86Architecture::Table_3_3a_03(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * mnemonic: permilps
 * operand: ['Vx', 'Wx', 'Ib']
 * prefix: 66
 * opcode: 04
 * cpu_model: >= X86_Arch_Avx
**/
bool X86Architecture::Table_3_3a_04(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Avx && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Permilps);
      if (Operand__Vx_Wx_Ib(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else
      return false;
}

/** instruction
 * mnemonic: permilpd
 * operand: ['Vx', 'Wx', 'Ib']
 * prefix: 66
 * opcode: 05
 * cpu_model: >= X86_Arch_Avx
**/
bool X86Architecture::Table_3_3a_05(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Avx && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Permilpd);
      if (Operand__Vx_Wx_Ib(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else
      return false;
}

/** instruction
 * mnemonic: perm2f128
 * operand: ['Vy', 'Hy', 'Wy', 'Ib']
 * prefix: 66
 * opcode: 06
 * cpu_model: >= X86_Arch_Avx
**/
bool X86Architecture::Table_3_3a_06(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Avx && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Perm2f128);
      if (Operand__Vy_Hy_Wy_Ib(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else
      return false;
}

/** instruction
 * opcode: 07
 * invalid
**/
bool X86Architecture::Table_3_3a_07(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instructions
 * opcode: 08
 *
 * mnemonic: roundps
 * operand: ['Vx', 'Wx', 'Ib']
 * prefix: 66
 * cpu_model: >= X86_Arch_Sse41
 *
 * mnemonic: roundps
 * operand: ['Vx', 'Wx', 'Ib']
 * prefix: 66
 * attr: ['nv']
 * cpu_model: >= X86_Arch_Avx
 *
**/
bool X86Architecture::Table_3_3a_08(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Avx && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Roundps);
      if (Operand__Vx_Wx_Ib(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse41 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Roundps);
      if (Operand__Vx_Wx_Ib(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    return false;
}

/** instructions
 * opcode: 09
 *
 * mnemonic: roundpd
 * operand: ['Vx', 'Wx', 'Ib']
 * prefix: 66
 * cpu_model: >= X86_Arch_Sse41
 *
 * mnemonic: roundpd
 * operand: ['Vx', 'Wx', 'Ib']
 * prefix: 66
 * attr: ['nv']
 * cpu_model: >= X86_Arch_Avx
 *
**/
bool X86Architecture::Table_3_3a_09(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Avx && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Roundpd);
      if (Operand__Vx_Wx_Ib(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse41 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Roundpd);
      if (Operand__Vx_Wx_Ib(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    return false;
}

/** instructions
 * opcode: 0a
 *
 * mnemonic: roundss
 * operand: ['Vo', 'Woq', 'Ib']
 * prefix: 66
 * cpu_model: >= X86_Arch_Sse41
 *
 * mnemonic: roundss
 * operand: ['Vo', 'Ho', 'Woq', 'Ib']
 * prefix: 66
 * attr: ['ny']
 * cpu_model: >= X86_Arch_Avx
 *
**/
bool X86Architecture::Table_3_3a_0a(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Avx && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Roundss);
      if (Operand__Vo_Ho_Woq_Ib(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse41 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Roundss);
      if (Operand__Vo_Woq_Ib(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    return false;
}

/** instructions
 * opcode: 0b
 *
 * mnemonic: roundsd
 * operand: ['Vo', 'Woq', 'Ib']
 * prefix: 66
 * cpu_model: >= X86_Arch_Sse41
 *
 * mnemonic: roundsd
 * operand: ['Vo', 'Ho', 'Woq', 'Ib']
 * prefix: 66
 * attr: ['ny']
 * cpu_model: >= X86_Arch_Avx
 *
**/
bool X86Architecture::Table_3_3a_0b(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Avx && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Roundsd);
      if (Operand__Vo_Ho_Woq_Ib(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse41 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Roundsd);
      if (Operand__Vo_Woq_Ib(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    return false;
}

/** instructions
 * opcode: 0c
 *
 * mnemonic: blendps
 * operand: ['Vx', 'Wx', 'Ib']
 * prefix: 66
 * cpu_model: >= X86_Arch_Sse41
 *
 * mnemonic: blendps
 * operand: ['Vx', 'Wx', 'Ib']
 * prefix: 66
 * cpu_model: >= X86_Arch_Avx
 *
**/
bool X86Architecture::Table_3_3a_0c(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Avx && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Blendps);
      if (Operand__Vx_Wx_Ib(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse41 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Blendps);
      if (Operand__Vx_Wx_Ib(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    return false;
}

/** instructions
 * opcode: 0d
 *
 * mnemonic: blendpd
 * operand: ['Vx', 'Wx', 'Ib']
 * prefix: 66
 * cpu_model: >= X86_Arch_Sse41
 *
 * mnemonic: blendpd
 * operand: ['Vx', 'Wx', 'Ib']
 * prefix: 66
 * cpu_model: >= X86_Arch_Avx
 *
**/
bool X86Architecture::Table_3_3a_0d(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Avx && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Blendpd);
      if (Operand__Vx_Wx_Ib(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse41 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Blendpd);
      if (Operand__Vx_Wx_Ib(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    return false;
}

/** instructions
 * opcode: 0e
 *
 * mnemonic: blendw
 * operand: ['Vx', 'Wx', 'Ib']
 * prefix: 66
 * cpu_model: >= X86_Arch_Sse41
 *
 * mnemonic: blendw
 * operand: ['Vx', 'Wx', 'Ib']
 * prefix: 66
 * attr: ['ny']
 * cpu_model: >= X86_Arch_Avx
 *
 * mnemonic: blendw
 * operand: ['Vx', 'Wx', 'Ib']
 * prefix: 66
 * cpu_model: >= X86_Arch_Avx2
 *
**/
bool X86Architecture::Table_3_3a_0e(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Avx2 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Blendw);
      if (Operand__Vx_Wx_Ib(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Avx && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Blendw);
      if (Operand__Vx_Wx_Ib(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse41 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Blendw);
      if (Operand__Vx_Wx_Ib(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    return false;
}

/** instructions
 * opcode: 0f
 *
 * mnemonic: palignr
 * operand: ['Pq', 'Qq', 'Ib']
 * cpu_model: >= X86_Arch_Ssse3
 *
 * mnemonic: palignr
 * operand: ['Vx', 'Wx', 'Ib']
 * prefix: 66
 * cpu_model: >= X86_Arch_Ssse3
 *
 * mnemonic: palignr
 * operand: ['Vx', 'Wx', 'Ib']
 * prefix: 66
 * attr: ['ny']
 * cpu_model: >= X86_Arch_Avx
 *
 * mnemonic: palignr
 * operand: ['Vx', 'Wx', 'Ib']
 * prefix: 66
 * cpu_model: >= X86_Arch_Avx2
 *
**/
bool X86Architecture::Table_3_3a_0f(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Avx2 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Palignr);
      if (Operand__Vx_Wx_Ib(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Avx && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Palignr);
      if (Operand__Vx_Wx_Ib(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Ssse3 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Palignr);
      if (Operand__Vx_Wx_Ib(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Ssse3)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Palignr);
      if (Operand__Pq_Qq_Ib(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    return false;
}

/** instruction
 * opcode: 10
 * invalid
**/
bool X86Architecture::Table_3_3a_10(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 11
 * invalid
**/
bool X86Architecture::Table_3_3a_11(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 12
 * invalid
**/
bool X86Architecture::Table_3_3a_12(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 13
 * invalid
**/
bool X86Architecture::Table_3_3a_13(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instructions
 * opcode: 14
 *
 * mnemonic: pextrb
 * operand: ['Eyb', 'Vo', 'Ib']
 * prefix: 66
 * cpu_model: >= X86_Arch_Sse41
 *
 * mnemonic: pextrb
 * operand: ['Wob', 'Vo', 'Ib']
 * prefix: 66
 * attr: ['ny', 'nv']
 * cpu_model: >= X86_Arch_Avx
 *
**/
bool X86Architecture::Table_3_3a_14(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Avx && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pextrb);
      if (Operand__Wob_Vo_Ib(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse41 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pextrb);
      if (Operand__Eyb_Vo_Ib(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    return false;
}

/** instructions
 * opcode: 15
 *
 * mnemonic: pextrw
 * operand: ['Eyw', 'Vo', 'Ib']
 * prefix: 66
 * cpu_model: >= X86_Arch_Sse41
 *
 * mnemonic: pextrw
 * operand: ['Wow', 'Vo', 'Ib']
 * prefix: 66
 * attr: ['ny', 'nv']
 * cpu_model: >= X86_Arch_Avx
 *
**/
bool X86Architecture::Table_3_3a_15(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Avx && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pextrw);
      if (Operand__Wow_Vo_Ib(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse41 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pextrw);
      if (Operand__Eyw_Vo_Ib(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    return false;
}

/** instructions
 * opcode: 16
 *
 * mnemonic: pextrd
 * operand: ['Ey', 'Vo', 'Ib']
 * prefix: 66
 * cpu_model: >= X86_Arch_Sse41
 * constraint: f64
 *
 * mnemonic: pextrd
 * prefix: 66
 * attr: ['ny', 'nv']
 * constraint: f64
 * operand: ['Ey', 'Vo', 'Ib']
 * cpu_model: >= X86_Arch_Avx
 *
**/
bool X86Architecture::Table_3_3a_16(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Avx && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pextrd);
      if (Operand__Ey_Vo_Ib(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse41 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pextrd);
      if (Operand__Ey_Vo_Ib(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    return false;
}

/** instructions
 * opcode: 17
 *
 * mnemonic: extractps
 * operand: ['Ey', 'Vo', 'Ib']
 * prefix: 66
 * cpu_model: >= X86_Arch_Sse41
 *
 * mnemonic: extractps
 * operand: ['Ey', 'Vo', 'Ib']
 * prefix: 66
 * attr: ['ny', 'nv']
 * cpu_model: >= X86_Arch_Avx
 *
**/
bool X86Architecture::Table_3_3a_17(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Avx && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Extractps);
      if (Operand__Ey_Vo_Ib(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse41 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Extractps);
      if (Operand__Ey_Vo_Ib(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    return false;
}

/** instruction
 * mnemonic: insertf128
 * operand: ['Vy', 'Hy', 'Wo', 'Ib']
 * prefix: 66
 * opcode: 18
 * cpu_model: >= X86_Arch_Avx
**/
bool X86Architecture::Table_3_3a_18(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Avx && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Insertf128);
      if (Operand__Vy_Hy_Wo_Ib(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else
      return false;
}

/** instruction
 * mnemonic: extractf128
 * operand: ['Wo', 'Vy', 'Ib']
 * prefix: 66
 * opcode: 19
 * cpu_model: >= X86_Arch_Avx
**/
bool X86Architecture::Table_3_3a_19(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Avx && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Extractf128);
      if (Operand__Wo_Vy_Ib(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else
      return false;
}

/** instruction
 * opcode: 1a
 * invalid
**/
bool X86Architecture::Table_3_3a_1a(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 1b
 * invalid
**/
bool X86Architecture::Table_3_3a_1b(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 1c
 * invalid
**/
bool X86Architecture::Table_3_3a_1c(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * mnemonic: cvtps2ph
 * operand: ['Woqo', 'Vx', 'Ib']
 * prefix: 66
 * opcode: 1d
 * cpu_model: >= X86_Arch_F16c
**/
bool X86Architecture::Table_3_3a_1d(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_F16c && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Cvtps2ph);
      if (Operand__Woqo_Vx_Ib(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else
      return false;
}

/** instruction
 * opcode: 1e
 * invalid
**/
bool X86Architecture::Table_3_3a_1e(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 1f
 * invalid
**/
bool X86Architecture::Table_3_3a_1f(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instructions
 * opcode: 20
 *
 * mnemonic: pinsrb
 * operand: ['Vo', 'Edb', 'Ib']
 * prefix: 66
 * cpu_model: >= X86_Arch_Sse41
 *
 * mnemonic: pinsrb
 * operand: ['Vo', 'Ho', 'Edb', 'Ib']
 * prefix: 66
 * attr: ['ny']
 * cpu_model: >= X86_Arch_Avx
 *
**/
bool X86Architecture::Table_3_3a_20(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Avx && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pinsrb);
      if (Operand__Vo_Ho_Edb_Ib(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse41 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pinsrb);
      if (Operand__Vo_Edb_Ib(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    return false;
}

/** instructions
 * opcode: 21
 *
 * mnemonic: insertps
 * operand: ['Vo', 'Uod', 'Ib']
 * prefix: 66
 * cpu_model: >= X86_Arch_Sse41
 *
 * mnemonic: insertps
 * operand: ['Vo', 'Ho', 'Uod', 'Ib']
 * prefix: 66
 * attr: ['ny']
 * cpu_model: >= X86_Arch_Avx
 *
**/
bool X86Architecture::Table_3_3a_21(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Avx && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Insertps);
      if (Operand__Vo_Ho_Uod_Ib(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse41 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Insertps);
      if (Operand__Vo_Uod_Ib(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    return false;
}

/** instructions
 * opcode: 22
 *
 * mnemonic: pinsrd
 * operand: ['Vo', 'Ey', 'Ib']
 * prefix: 66
 * cpu_model: >= X86_Arch_Sse41
 *
 * mnemonic: pinsrd
 * operand: ['Vo', 'Ho', 'Ey', 'Ib']
 * prefix: 66
 * attr: ['ny']
 * cpu_model: >= X86_Arch_Avx
 *
**/
bool X86Architecture::Table_3_3a_22(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Avx && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pinsrd);
      if (Operand__Vo_Ho_Ey_Ib(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse41 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pinsrd);
      if (Operand__Vo_Ey_Ib(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    return false;
}

/** instruction
 * opcode: 23
 * invalid
**/
bool X86Architecture::Table_3_3a_23(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 24
 * invalid
**/
bool X86Architecture::Table_3_3a_24(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 25
 * invalid
**/
bool X86Architecture::Table_3_3a_25(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 26
 * invalid
**/
bool X86Architecture::Table_3_3a_26(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 27
 * invalid
**/
bool X86Architecture::Table_3_3a_27(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 28
 * invalid
**/
bool X86Architecture::Table_3_3a_28(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 29
 * invalid
**/
bool X86Architecture::Table_3_3a_29(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 2a
 * invalid
**/
bool X86Architecture::Table_3_3a_2a(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 2b
 * invalid
**/
bool X86Architecture::Table_3_3a_2b(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 2c
 * invalid
**/
bool X86Architecture::Table_3_3a_2c(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 2d
 * invalid
**/
bool X86Architecture::Table_3_3a_2d(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 2e
 * invalid
**/
bool X86Architecture::Table_3_3a_2e(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 2f
 * invalid
**/
bool X86Architecture::Table_3_3a_2f(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 30
 * invalid
**/
bool X86Architecture::Table_3_3a_30(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 31
 * invalid
**/
bool X86Architecture::Table_3_3a_31(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 32
 * invalid
**/
bool X86Architecture::Table_3_3a_32(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 33
 * invalid
**/
bool X86Architecture::Table_3_3a_33(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 34
 * invalid
**/
bool X86Architecture::Table_3_3a_34(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 35
 * invalid
**/
bool X86Architecture::Table_3_3a_35(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 36
 * invalid
**/
bool X86Architecture::Table_3_3a_36(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 37
 * invalid
**/
bool X86Architecture::Table_3_3a_37(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * mnemonic: inserti128
 * operand: ['Vy', 'Hy', 'Wo', 'Ib']
 * prefix: 66
 * opcode: 38
 * cpu_model: >= X86_Arch_Avx2
**/
bool X86Architecture::Table_3_3a_38(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Avx2 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Inserti128);
      if (Operand__Vy_Hy_Wo_Ib(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else
      return false;
}

/** instruction
 * mnemonic: extracti128
 * prefix: 66
 * opcode: 39
 * attr: ['nv']
 * operand: ['Wo', 'Vy', 'Ib']
 * cpu_model: >= X86_Arch_Avx2
**/
bool X86Architecture::Table_3_3a_39(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Avx2 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Extracti128);
      if (Operand__Wo_Vy_Ib(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else
      return false;
}

/** instruction
 * opcode: 3a
 * invalid
**/
bool X86Architecture::Table_3_3a_3a(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 3b
 * invalid
**/
bool X86Architecture::Table_3_3a_3b(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 3c
 * invalid
**/
bool X86Architecture::Table_3_3a_3c(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 3d
 * invalid
**/
bool X86Architecture::Table_3_3a_3d(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 3e
 * invalid
**/
bool X86Architecture::Table_3_3a_3e(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 3f
 * invalid
**/
bool X86Architecture::Table_3_3a_3f(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instructions
 * opcode: 40
 *
 * mnemonic: dpps
 * operand: ['Vx', 'Wx', 'Ib']
 * prefix: 66
 * cpu_model: >= X86_Arch_Sse41
 *
 * mnemonic: dpps
 * operand: ['Vx', 'Wx', 'Ib']
 * prefix: 66
 * cpu_model: >= X86_Arch_Avx
 *
**/
bool X86Architecture::Table_3_3a_40(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Avx && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Dpps);
      if (Operand__Vx_Wx_Ib(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse41 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Dpps);
      if (Operand__Vx_Wx_Ib(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    return false;
}

/** instructions
 * opcode: 41
 *
 * mnemonic: dppd
 * operand: ['Vo', 'Wo', 'Ib']
 * prefix: 66
 * cpu_model: >= X86_Arch_Sse41
 *
 * mnemonic: dppd
 * operand: ['Vo', 'Ho', 'Wo', 'Ib']
 * prefix: 66
 * attr: ['ny']
 * cpu_model: >= X86_Arch_Avx
 *
**/
bool X86Architecture::Table_3_3a_41(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Avx && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Dppd);
      if (Operand__Vo_Ho_Wo_Ib(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse41 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Dppd);
      if (Operand__Vo_Wo_Ib(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    return false;
}

/** instructions
 * opcode: 42
 *
 * mnemonic: mpsadbw
 * operand: ['Vx', 'Wx', 'Ib']
 * prefix: 66
 * cpu_model: >= X86_Arch_Sse41
 *
 * mnemonic: mpsadbw
 * operand: ['Vx', 'Wx', 'Ib']
 * prefix: 66
 * attr: ['ny']
 * cpu_model: >= X86_Arch_Avx
 *
 * mnemonic: mpsadbw
 * operand: ['Vx', 'Wx', 'Ib']
 * prefix: 66
 * cpu_model: >= X86_Arch_Avx2
 *
**/
bool X86Architecture::Table_3_3a_42(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Avx2 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Mpsadbw);
      if (Operand__Vx_Wx_Ib(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Avx && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Mpsadbw);
      if (Operand__Vx_Wx_Ib(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse41 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Mpsadbw);
      if (Operand__Vx_Wx_Ib(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    return false;
}

/** instruction
 * opcode: 43
 * invalid
**/
bool X86Architecture::Table_3_3a_43(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instructions
 * opcode: 44
 *
 * mnemonic: pclmulqdq
 * operand: ['Vo', 'Wo', 'Ib']
 * prefix: 66
 * cpu_model: >= X86_Arch_Clmul
 *
 * mnemonic: pclmulqdq
 * operand: ['Vo', 'Ho', 'Wo', 'Ib']
 * prefix: 66
 * attr: ['ny']
 * cpu_model: >= X86_Arch_Avx
 *
**/
bool X86Architecture::Table_3_3a_44(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Avx && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pclmulqdq);
      if (Operand__Vo_Ho_Wo_Ib(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Clmul && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pclmulqdq);
      if (Operand__Vo_Wo_Ib(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    return false;
}

/** instruction
 * opcode: 45
 * invalid
**/
bool X86Architecture::Table_3_3a_45(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * mnemonic: perm2i128
 * operand: ['Vy', 'Hy', 'Wy', 'Ib']
 * prefix: 66
 * opcode: 46
 * cpu_model: >= X86_Arch_Avx2
**/
bool X86Architecture::Table_3_3a_46(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Avx2 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Perm2i128);
      if (Operand__Vy_Hy_Wy_Ib(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else
      return false;
}

/** instruction
 * opcode: 47
 * invalid
**/
bool X86Architecture::Table_3_3a_47(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 48
 * invalid
**/
bool X86Architecture::Table_3_3a_48(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 49
 * invalid
**/
bool X86Architecture::Table_3_3a_49(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * mnemonic: blendvps
 * operand: ['Vx', 'Hx', 'Wx', 'Lx']
 * prefix: 66
 * opcode: 4a
 * cpu_model: >= X86_Arch_Avx
**/
bool X86Architecture::Table_3_3a_4a(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Avx && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Blendvps);
      if (Operand__Vx_Hx_Wx_Lx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else
      return false;
}

/** instruction
 * mnemonic: blendvpd
 * operand: ['Vx', 'Hx', 'Wx', 'Lx']
 * prefix: 66
 * opcode: 4b
 * cpu_model: >= X86_Arch_Avx
**/
bool X86Architecture::Table_3_3a_4b(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Avx && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Blendvpd);
      if (Operand__Vx_Hx_Wx_Lx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else
      return false;
}

/** instructions
 * opcode: 4c
 *
 * mnemonic: pblendvp
 * operand: ['Vx', 'Hx', 'Wx', 'Lx']
 * prefix: 66
 * attr: ['ny']
 * cpu_model: >= X86_Arch_Avx
 *
 * mnemonic: pblendvp
 * operand: ['Vx', 'Hx', 'Wx', 'Lx']
 * prefix: 66
 * cpu_model: >= X86_Arch_Avx2
 *
**/
bool X86Architecture::Table_3_3a_4c(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Avx2 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pblendvp);
      if (Operand__Vx_Hx_Wx_Lx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Avx && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pblendvp);
      if (Operand__Vx_Hx_Wx_Lx(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    return false;
}

/** instruction
 * opcode: 4d
 * invalid
**/
bool X86Architecture::Table_3_3a_4d(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 4e
 * invalid
**/
bool X86Architecture::Table_3_3a_4e(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 4f
 * invalid
**/
bool X86Architecture::Table_3_3a_4f(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 50
 * invalid
**/
bool X86Architecture::Table_3_3a_50(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 51
 * invalid
**/
bool X86Architecture::Table_3_3a_51(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 52
 * invalid
**/
bool X86Architecture::Table_3_3a_52(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 53
 * invalid
**/
bool X86Architecture::Table_3_3a_53(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 54
 * invalid
**/
bool X86Architecture::Table_3_3a_54(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 55
 * invalid
**/
bool X86Architecture::Table_3_3a_55(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 56
 * invalid
**/
bool X86Architecture::Table_3_3a_56(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 57
 * invalid
**/
bool X86Architecture::Table_3_3a_57(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 58
 * invalid
**/
bool X86Architecture::Table_3_3a_58(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 59
 * invalid
**/
bool X86Architecture::Table_3_3a_59(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 5a
 * invalid
**/
bool X86Architecture::Table_3_3a_5a(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 5b
 * invalid
**/
bool X86Architecture::Table_3_3a_5b(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 5c
 * invalid
**/
bool X86Architecture::Table_3_3a_5c(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 5d
 * invalid
**/
bool X86Architecture::Table_3_3a_5d(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 5e
 * invalid
**/
bool X86Architecture::Table_3_3a_5e(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 5f
 * invalid
**/
bool X86Architecture::Table_3_3a_5f(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instructions
 * opcode: 60
 *
 * mnemonic: pcmpestrm
 * operand: ['Vo', 'Wo', 'Ib']
 * prefix: 66
 * cpu_model: >= X86_Arch_Sse42
 *
 * mnemonic: pcmpestrm
 * operand: ['Vo', 'Wo', 'Ib']
 * prefix: 66
 * attr: ['ny', 'nv']
 * cpu_model: >= X86_Arch_Avx
 *
**/
bool X86Architecture::Table_3_3a_60(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Avx && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pcmpestrm);
      if (Operand__Vo_Wo_Ib(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse42 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pcmpestrm);
      if (Operand__Vo_Wo_Ib(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    return false;
}

/** instructions
 * opcode: 61
 *
 * mnemonic: pcmpestri
 * operand: ['Vo', 'Wo', 'Ib']
 * prefix: 66
 * cpu_model: >= X86_Arch_Sse42
 *
 * mnemonic: pcmpestri
 * operand: ['Vo', 'Wo', 'Ib']
 * prefix: 66
 * attr: ['ny', 'nv']
 * cpu_model: >= X86_Arch_Avx
 *
**/
bool X86Architecture::Table_3_3a_61(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Avx && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pcmpestri);
      if (Operand__Vo_Wo_Ib(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse42 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pcmpestri);
      if (Operand__Vo_Wo_Ib(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    return false;
}

/** instructions
 * opcode: 62
 *
 * mnemonic: pcmpistrm
 * operand: ['Vo', 'Wo', 'Ib']
 * prefix: 66
 * cpu_model: >= X86_Arch_Sse42
 *
 * mnemonic: pcmpistrm
 * operand: ['Vo', 'Wo', 'Ib']
 * prefix: 66
 * attr: ['ny', 'nv']
 * cpu_model: >= X86_Arch_Avx
 *
**/
bool X86Architecture::Table_3_3a_62(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Avx && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pcmpistrm);
      if (Operand__Vo_Wo_Ib(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse42 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pcmpistrm);
      if (Operand__Vo_Wo_Ib(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    return false;
}

/** instructions
 * opcode: 63
 *
 * mnemonic: pcmpistri
 * operand: ['Vo', 'Wo', 'Ib']
 * prefix: 66
 * cpu_model: >= X86_Arch_Sse42
 *
 * mnemonic: pcmpistri
 * operand: ['Vo', 'Wo', 'Ib']
 * prefix: 66
 * attr: ['ny', 'nv']
 * cpu_model: >= X86_Arch_Avx
 *
**/
bool X86Architecture::Table_3_3a_63(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Avx && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pcmpistri);
      if (Operand__Vo_Wo_Ib(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Sse42 && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Pcmpistri);
      if (Operand__Vo_Wo_Ib(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    return false;
}

/** instruction
 * opcode: 64
 * invalid
**/
bool X86Architecture::Table_3_3a_64(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 65
 * invalid
**/
bool X86Architecture::Table_3_3a_65(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 66
 * invalid
**/
bool X86Architecture::Table_3_3a_66(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 67
 * invalid
**/
bool X86Architecture::Table_3_3a_67(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 68
 * invalid
**/
bool X86Architecture::Table_3_3a_68(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 69
 * invalid
**/
bool X86Architecture::Table_3_3a_69(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 6a
 * invalid
**/
bool X86Architecture::Table_3_3a_6a(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 6b
 * invalid
**/
bool X86Architecture::Table_3_3a_6b(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 6c
 * invalid
**/
bool X86Architecture::Table_3_3a_6c(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 6d
 * invalid
**/
bool X86Architecture::Table_3_3a_6d(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 6e
 * invalid
**/
bool X86Architecture::Table_3_3a_6e(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 6f
 * invalid
**/
bool X86Architecture::Table_3_3a_6f(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 70
 * invalid
**/
bool X86Architecture::Table_3_3a_70(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 71
 * invalid
**/
bool X86Architecture::Table_3_3a_71(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 72
 * invalid
**/
bool X86Architecture::Table_3_3a_72(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 73
 * invalid
**/
bool X86Architecture::Table_3_3a_73(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 74
 * invalid
**/
bool X86Architecture::Table_3_3a_74(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 75
 * invalid
**/
bool X86Architecture::Table_3_3a_75(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 76
 * invalid
**/
bool X86Architecture::Table_3_3a_76(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 77
 * invalid
**/
bool X86Architecture::Table_3_3a_77(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 78
 * invalid
**/
bool X86Architecture::Table_3_3a_78(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 79
 * invalid
**/
bool X86Architecture::Table_3_3a_79(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 7a
 * invalid
**/
bool X86Architecture::Table_3_3a_7a(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 7b
 * invalid
**/
bool X86Architecture::Table_3_3a_7b(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 7c
 * invalid
**/
bool X86Architecture::Table_3_3a_7c(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 7d
 * invalid
**/
bool X86Architecture::Table_3_3a_7d(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 7e
 * invalid
**/
bool X86Architecture::Table_3_3a_7e(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 7f
 * invalid
**/
bool X86Architecture::Table_3_3a_7f(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 80
 * invalid
**/
bool X86Architecture::Table_3_3a_80(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 81
 * invalid
**/
bool X86Architecture::Table_3_3a_81(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 82
 * invalid
**/
bool X86Architecture::Table_3_3a_82(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 83
 * invalid
**/
bool X86Architecture::Table_3_3a_83(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 84
 * invalid
**/
bool X86Architecture::Table_3_3a_84(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 85
 * invalid
**/
bool X86Architecture::Table_3_3a_85(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 86
 * invalid
**/
bool X86Architecture::Table_3_3a_86(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 87
 * invalid
**/
bool X86Architecture::Table_3_3a_87(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 88
 * invalid
**/
bool X86Architecture::Table_3_3a_88(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 89
 * invalid
**/
bool X86Architecture::Table_3_3a_89(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 8a
 * invalid
**/
bool X86Architecture::Table_3_3a_8a(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 8b
 * invalid
**/
bool X86Architecture::Table_3_3a_8b(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 8c
 * invalid
**/
bool X86Architecture::Table_3_3a_8c(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 8d
 * invalid
**/
bool X86Architecture::Table_3_3a_8d(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 8e
 * invalid
**/
bool X86Architecture::Table_3_3a_8e(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 8f
 * invalid
**/
bool X86Architecture::Table_3_3a_8f(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 90
 * invalid
**/
bool X86Architecture::Table_3_3a_90(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 91
 * invalid
**/
bool X86Architecture::Table_3_3a_91(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 92
 * invalid
**/
bool X86Architecture::Table_3_3a_92(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 93
 * invalid
**/
bool X86Architecture::Table_3_3a_93(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 94
 * invalid
**/
bool X86Architecture::Table_3_3a_94(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 95
 * invalid
**/
bool X86Architecture::Table_3_3a_95(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 96
 * invalid
**/
bool X86Architecture::Table_3_3a_96(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 97
 * invalid
**/
bool X86Architecture::Table_3_3a_97(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 98
 * invalid
**/
bool X86Architecture::Table_3_3a_98(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 99
 * invalid
**/
bool X86Architecture::Table_3_3a_99(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 9a
 * invalid
**/
bool X86Architecture::Table_3_3a_9a(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 9b
 * invalid
**/
bool X86Architecture::Table_3_3a_9b(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 9c
 * invalid
**/
bool X86Architecture::Table_3_3a_9c(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 9d
 * invalid
**/
bool X86Architecture::Table_3_3a_9d(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 9e
 * invalid
**/
bool X86Architecture::Table_3_3a_9e(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 9f
 * invalid
**/
bool X86Architecture::Table_3_3a_9f(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: a0
 * invalid
**/
bool X86Architecture::Table_3_3a_a0(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: a1
 * invalid
**/
bool X86Architecture::Table_3_3a_a1(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: a2
 * invalid
**/
bool X86Architecture::Table_3_3a_a2(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: a3
 * invalid
**/
bool X86Architecture::Table_3_3a_a3(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: a4
 * invalid
**/
bool X86Architecture::Table_3_3a_a4(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: a5
 * invalid
**/
bool X86Architecture::Table_3_3a_a5(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: a6
 * invalid
**/
bool X86Architecture::Table_3_3a_a6(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: a7
 * invalid
**/
bool X86Architecture::Table_3_3a_a7(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: a8
 * invalid
**/
bool X86Architecture::Table_3_3a_a8(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: a9
 * invalid
**/
bool X86Architecture::Table_3_3a_a9(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: aa
 * invalid
**/
bool X86Architecture::Table_3_3a_aa(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: ab
 * invalid
**/
bool X86Architecture::Table_3_3a_ab(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: ac
 * invalid
**/
bool X86Architecture::Table_3_3a_ac(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: ad
 * invalid
**/
bool X86Architecture::Table_3_3a_ad(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: ae
 * invalid
**/
bool X86Architecture::Table_3_3a_ae(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: af
 * invalid
**/
bool X86Architecture::Table_3_3a_af(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: b0
 * invalid
**/
bool X86Architecture::Table_3_3a_b0(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: b1
 * invalid
**/
bool X86Architecture::Table_3_3a_b1(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: b2
 * invalid
**/
bool X86Architecture::Table_3_3a_b2(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: b3
 * invalid
**/
bool X86Architecture::Table_3_3a_b3(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: b4
 * invalid
**/
bool X86Architecture::Table_3_3a_b4(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: b5
 * invalid
**/
bool X86Architecture::Table_3_3a_b5(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: b6
 * invalid
**/
bool X86Architecture::Table_3_3a_b6(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: b7
 * invalid
**/
bool X86Architecture::Table_3_3a_b7(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: b8
 * invalid
**/
bool X86Architecture::Table_3_3a_b8(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: b9
 * invalid
**/
bool X86Architecture::Table_3_3a_b9(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: ba
 * invalid
**/
bool X86Architecture::Table_3_3a_ba(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: bb
 * invalid
**/
bool X86Architecture::Table_3_3a_bb(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: bc
 * invalid
**/
bool X86Architecture::Table_3_3a_bc(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: bd
 * invalid
**/
bool X86Architecture::Table_3_3a_bd(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: be
 * invalid
**/
bool X86Architecture::Table_3_3a_be(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: bf
 * invalid
**/
bool X86Architecture::Table_3_3a_bf(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: c0
 * invalid
**/
bool X86Architecture::Table_3_3a_c0(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: c1
 * invalid
**/
bool X86Architecture::Table_3_3a_c1(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: c2
 * invalid
**/
bool X86Architecture::Table_3_3a_c2(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: c3
 * invalid
**/
bool X86Architecture::Table_3_3a_c3(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: c4
 * invalid
**/
bool X86Architecture::Table_3_3a_c4(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: c5
 * invalid
**/
bool X86Architecture::Table_3_3a_c5(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: c6
 * invalid
**/
bool X86Architecture::Table_3_3a_c6(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: c7
 * invalid
**/
bool X86Architecture::Table_3_3a_c7(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: c8
 * invalid
**/
bool X86Architecture::Table_3_3a_c8(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: c9
 * invalid
**/
bool X86Architecture::Table_3_3a_c9(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: ca
 * invalid
**/
bool X86Architecture::Table_3_3a_ca(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: cb
 * invalid
**/
bool X86Architecture::Table_3_3a_cb(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: cc
 * invalid
**/
bool X86Architecture::Table_3_3a_cc(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: cd
 * invalid
**/
bool X86Architecture::Table_3_3a_cd(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: ce
 * invalid
**/
bool X86Architecture::Table_3_3a_ce(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: cf
 * invalid
**/
bool X86Architecture::Table_3_3a_cf(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: d0
 * invalid
**/
bool X86Architecture::Table_3_3a_d0(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: d1
 * invalid
**/
bool X86Architecture::Table_3_3a_d1(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: d2
 * invalid
**/
bool X86Architecture::Table_3_3a_d2(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: d3
 * invalid
**/
bool X86Architecture::Table_3_3a_d3(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: d4
 * invalid
**/
bool X86Architecture::Table_3_3a_d4(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: d5
 * invalid
**/
bool X86Architecture::Table_3_3a_d5(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: d6
 * invalid
**/
bool X86Architecture::Table_3_3a_d6(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: d7
 * invalid
**/
bool X86Architecture::Table_3_3a_d7(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: d8
 * invalid
**/
bool X86Architecture::Table_3_3a_d8(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: d9
 * invalid
**/
bool X86Architecture::Table_3_3a_d9(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: da
 * invalid
**/
bool X86Architecture::Table_3_3a_da(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: db
 * invalid
**/
bool X86Architecture::Table_3_3a_db(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: dc
 * invalid
**/
bool X86Architecture::Table_3_3a_dc(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: dd
 * invalid
**/
bool X86Architecture::Table_3_3a_dd(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: de
 * invalid
**/
bool X86Architecture::Table_3_3a_de(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instructions
 * opcode: df
 *
 * mnemonic: aeskeygenassist
 * operand: ['Vo', 'Wo', 'Ib']
 * prefix: 66
 * cpu_model: >= X86_Arch_Aes
 *
 * mnemonic: aeskeygenassist
 * operand: ['Vo', 'Wo', 'Ib']
 * prefix: 66
 * attr: ['ny', 'nc']
 * cpu_model: >= X86_Arch_Avx
 *
**/
bool X86Architecture::Table_3_3a_df(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Avx && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Aeskeygenassist);
      if (Operand__Vo_Wo_Ib(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Aes && (rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Aeskeygenassist);
      if (Operand__Vo_Wo_Ib(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    return false;
}

/** instruction
 * opcode: e0
 * invalid
**/
bool X86Architecture::Table_3_3a_e0(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: e1
 * invalid
**/
bool X86Architecture::Table_3_3a_e1(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: e2
 * invalid
**/
bool X86Architecture::Table_3_3a_e2(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: e3
 * invalid
**/
bool X86Architecture::Table_3_3a_e3(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: e4
 * invalid
**/
bool X86Architecture::Table_3_3a_e4(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: e5
 * invalid
**/
bool X86Architecture::Table_3_3a_e5(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: e6
 * invalid
**/
bool X86Architecture::Table_3_3a_e6(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: e7
 * invalid
**/
bool X86Architecture::Table_3_3a_e7(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: e8
 * invalid
**/
bool X86Architecture::Table_3_3a_e8(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: e9
 * invalid
**/
bool X86Architecture::Table_3_3a_e9(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: ea
 * invalid
**/
bool X86Architecture::Table_3_3a_ea(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: eb
 * invalid
**/
bool X86Architecture::Table_3_3a_eb(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: ec
 * invalid
**/
bool X86Architecture::Table_3_3a_ec(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: ed
 * invalid
**/
bool X86Architecture::Table_3_3a_ed(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: ee
 * invalid
**/
bool X86Architecture::Table_3_3a_ee(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: ef
 * invalid
**/
bool X86Architecture::Table_3_3a_ef(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * mnemonic: rorx
 * prefix: f2
 * opcode: f0
 * attr: ['ny', 'nv']
 * operand: ['By', 'Ey', 'Ib']
 * cpu_model: >= X86_Arch_Bmi2
**/
bool X86Architecture::Table_3_3a_f0(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_Bmi2 && (rInsn.GetPrefix() & X86_Prefix_RepNz) == X86_Prefix_RepNz)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Rorx);
      if (Operand__By_Ey_Ib(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else
      return false;
}

/** instruction
 * opcode: f1
 * invalid
**/
bool X86Architecture::Table_3_3a_f1(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: f2
 * invalid
**/
bool X86Architecture::Table_3_3a_f2(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: f3
 * invalid
**/
bool X86Architecture::Table_3_3a_f3(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: f4
 * invalid
**/
bool X86Architecture::Table_3_3a_f4(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: f5
 * invalid
**/
bool X86Architecture::Table_3_3a_f5(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: f6
 * invalid
**/
bool X86Architecture::Table_3_3a_f6(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: f7
 * invalid
**/
bool X86Architecture::Table_3_3a_f7(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: f8
 * invalid
**/
bool X86Architecture::Table_3_3a_f8(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: f9
 * invalid
**/
bool X86Architecture::Table_3_3a_f9(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: fa
 * invalid
**/
bool X86Architecture::Table_3_3a_fa(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: fb
 * invalid
**/
bool X86Architecture::Table_3_3a_fb(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: fc
 * invalid
**/
bool X86Architecture::Table_3_3a_fc(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: fd
 * invalid
**/
bool X86Architecture::Table_3_3a_fd(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: fe
 * invalid
**/
bool X86Architecture::Table_3_3a_fe(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: ff
 * invalid
**/
bool X86Architecture::Table_3_3a_ff(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * mnemonic: fadd
 * operand: ['ST0', 'ST0']
 * opcode: 00
**/
bool X86Architecture::Table_fp1_c0(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fadd);
    if (Operand__ST0_ST0(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fadd
 * operand: ['ST0', 'ST1']
 * opcode: 01
**/
bool X86Architecture::Table_fp1_c1(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fadd);
    if (Operand__ST0_ST1(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fadd
 * operand: ['ST0', 'ST2']
 * opcode: 02
**/
bool X86Architecture::Table_fp1_c2(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fadd);
    if (Operand__ST0_ST2(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fadd
 * operand: ['ST0', 'ST3']
 * opcode: 03
**/
bool X86Architecture::Table_fp1_c3(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fadd);
    if (Operand__ST0_ST3(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fadd
 * operand: ['ST0', 'ST4']
 * opcode: 04
**/
bool X86Architecture::Table_fp1_c4(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fadd);
    if (Operand__ST0_ST4(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fadd
 * operand: ['ST0', 'ST5']
 * opcode: 05
**/
bool X86Architecture::Table_fp1_c5(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fadd);
    if (Operand__ST0_ST5(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fadd
 * operand: ['ST0', 'ST6']
 * opcode: 06
**/
bool X86Architecture::Table_fp1_c6(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fadd);
    if (Operand__ST0_ST6(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fadd
 * operand: ['ST0', 'ST7']
 * opcode: 07
**/
bool X86Architecture::Table_fp1_c7(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fadd);
    if (Operand__ST0_ST7(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fmul
 * operand: ['ST0', 'ST0']
 * opcode: 08
**/
bool X86Architecture::Table_fp1_c8(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fmul);
    if (Operand__ST0_ST0(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fmul
 * operand: ['ST0', 'ST1']
 * opcode: 09
**/
bool X86Architecture::Table_fp1_c9(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fmul);
    if (Operand__ST0_ST1(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fmul
 * operand: ['ST0', 'ST2']
 * opcode: 0a
**/
bool X86Architecture::Table_fp1_ca(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fmul);
    if (Operand__ST0_ST2(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fmul
 * operand: ['ST0', 'ST3']
 * opcode: 0b
**/
bool X86Architecture::Table_fp1_cb(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fmul);
    if (Operand__ST0_ST3(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fmul
 * operand: ['ST0', 'ST4']
 * opcode: 0c
**/
bool X86Architecture::Table_fp1_cc(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fmul);
    if (Operand__ST0_ST4(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fmul
 * operand: ['ST0', 'ST5']
 * opcode: 0d
**/
bool X86Architecture::Table_fp1_cd(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fmul);
    if (Operand__ST0_ST5(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fmul
 * operand: ['ST0', 'ST6']
 * opcode: 0e
**/
bool X86Architecture::Table_fp1_ce(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fmul);
    if (Operand__ST0_ST6(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fmul
 * operand: ['ST0', 'ST7']
 * opcode: 0f
**/
bool X86Architecture::Table_fp1_cf(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fmul);
    if (Operand__ST0_ST7(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fcom
 * operand: ['ST0', 'ST0']
 * opcode: 10
**/
bool X86Architecture::Table_fp1_d0(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fcom);
    if (Operand__ST0_ST0(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fcom
 * operand: ['ST0', 'ST1']
 * opcode: 11
**/
bool X86Architecture::Table_fp1_d1(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fcom);
    if (Operand__ST0_ST1(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fcom
 * operand: ['ST0', 'ST2']
 * opcode: 12
**/
bool X86Architecture::Table_fp1_d2(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fcom);
    if (Operand__ST0_ST2(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fcom
 * operand: ['ST0', 'ST3']
 * opcode: 13
**/
bool X86Architecture::Table_fp1_d3(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fcom);
    if (Operand__ST0_ST3(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fcom
 * operand: ['ST0', 'ST4']
 * opcode: 14
**/
bool X86Architecture::Table_fp1_d4(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fcom);
    if (Operand__ST0_ST4(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fcom
 * operand: ['ST0', 'ST5']
 * opcode: 15
**/
bool X86Architecture::Table_fp1_d5(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fcom);
    if (Operand__ST0_ST5(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fcom
 * operand: ['ST0', 'ST6']
 * opcode: 16
**/
bool X86Architecture::Table_fp1_d6(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fcom);
    if (Operand__ST0_ST6(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fcom
 * operand: ['ST0', 'ST7']
 * opcode: 17
**/
bool X86Architecture::Table_fp1_d7(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fcom);
    if (Operand__ST0_ST7(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fcomp
 * operand: ['ST0', 'ST0']
 * opcode: 18
**/
bool X86Architecture::Table_fp1_d8(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fcomp);
    if (Operand__ST0_ST0(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fcomp
 * operand: ['ST0', 'ST1']
 * opcode: 19
**/
bool X86Architecture::Table_fp1_d9(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fcomp);
    if (Operand__ST0_ST1(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fcomp
 * operand: ['ST0', 'ST2']
 * opcode: 1a
**/
bool X86Architecture::Table_fp1_da(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fcomp);
    if (Operand__ST0_ST2(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fcomp
 * operand: ['ST0', 'ST3']
 * opcode: 1b
**/
bool X86Architecture::Table_fp1_db(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fcomp);
    if (Operand__ST0_ST3(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fcomp
 * operand: ['ST0', 'ST4']
 * opcode: 1c
**/
bool X86Architecture::Table_fp1_dc(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fcomp);
    if (Operand__ST0_ST4(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fcomp
 * operand: ['ST0', 'ST5']
 * opcode: 1d
**/
bool X86Architecture::Table_fp1_dd(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fcomp);
    if (Operand__ST0_ST5(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fcomp
 * operand: ['ST0', 'ST6']
 * opcode: 1e
**/
bool X86Architecture::Table_fp1_de(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fcomp);
    if (Operand__ST0_ST6(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fcomp
 * operand: ['ST0', 'ST7']
 * opcode: 1f
**/
bool X86Architecture::Table_fp1_df(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fcomp);
    if (Operand__ST0_ST7(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fsub
 * operand: ['ST0', 'ST0']
 * opcode: 20
**/
bool X86Architecture::Table_fp1_e0(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fsub);
    if (Operand__ST0_ST0(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fsub
 * operand: ['ST0', 'ST1']
 * opcode: 21
**/
bool X86Architecture::Table_fp1_e1(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fsub);
    if (Operand__ST0_ST1(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fsub
 * operand: ['ST0', 'ST2']
 * opcode: 22
**/
bool X86Architecture::Table_fp1_e2(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fsub);
    if (Operand__ST0_ST2(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fsub
 * operand: ['ST0', 'ST3']
 * opcode: 23
**/
bool X86Architecture::Table_fp1_e3(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fsub);
    if (Operand__ST0_ST3(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fsub
 * operand: ['ST0', 'ST4']
 * opcode: 24
**/
bool X86Architecture::Table_fp1_e4(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fsub);
    if (Operand__ST0_ST4(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fsub
 * operand: ['ST0', 'ST5']
 * opcode: 25
**/
bool X86Architecture::Table_fp1_e5(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fsub);
    if (Operand__ST0_ST5(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fsub
 * operand: ['ST0', 'ST6']
 * opcode: 26
**/
bool X86Architecture::Table_fp1_e6(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fsub);
    if (Operand__ST0_ST6(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fsub
 * operand: ['ST0', 'ST7']
 * opcode: 27
**/
bool X86Architecture::Table_fp1_e7(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fsub);
    if (Operand__ST0_ST7(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fsubr
 * operand: ['ST0', 'ST0']
 * opcode: 28
**/
bool X86Architecture::Table_fp1_e8(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fsubr);
    if (Operand__ST0_ST0(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fsubr
 * operand: ['ST0', 'ST1']
 * opcode: 29
**/
bool X86Architecture::Table_fp1_e9(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fsubr);
    if (Operand__ST0_ST1(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fsubr
 * operand: ['ST0', 'ST2']
 * opcode: 2a
**/
bool X86Architecture::Table_fp1_ea(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fsubr);
    if (Operand__ST0_ST2(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fsubr
 * operand: ['ST0', 'ST3']
 * opcode: 2b
**/
bool X86Architecture::Table_fp1_eb(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fsubr);
    if (Operand__ST0_ST3(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fsubr
 * operand: ['ST0', 'ST4']
 * opcode: 2c
**/
bool X86Architecture::Table_fp1_ec(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fsubr);
    if (Operand__ST0_ST4(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fsubr
 * operand: ['ST0', 'ST5']
 * opcode: 2d
**/
bool X86Architecture::Table_fp1_ed(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fsubr);
    if (Operand__ST0_ST5(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fsubr
 * operand: ['ST0', 'ST6']
 * opcode: 2e
**/
bool X86Architecture::Table_fp1_ee(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fsubr);
    if (Operand__ST0_ST6(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fsubr
 * operand: ['ST0', 'ST7']
 * opcode: 2f
**/
bool X86Architecture::Table_fp1_ef(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fsubr);
    if (Operand__ST0_ST7(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fdiv
 * operand: ['ST0', 'ST0']
 * opcode: 30
**/
bool X86Architecture::Table_fp1_f0(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fdiv);
    if (Operand__ST0_ST0(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fdiv
 * operand: ['ST0', 'ST1']
 * opcode: 31
**/
bool X86Architecture::Table_fp1_f1(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fdiv);
    if (Operand__ST0_ST1(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fdiv
 * operand: ['ST0', 'ST2']
 * opcode: 32
**/
bool X86Architecture::Table_fp1_f2(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fdiv);
    if (Operand__ST0_ST2(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fdiv
 * operand: ['ST0', 'ST3']
 * opcode: 33
**/
bool X86Architecture::Table_fp1_f3(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fdiv);
    if (Operand__ST0_ST3(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fdiv
 * operand: ['ST0', 'ST4']
 * opcode: 34
**/
bool X86Architecture::Table_fp1_f4(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fdiv);
    if (Operand__ST0_ST4(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fdiv
 * operand: ['ST0', 'ST5']
 * opcode: 35
**/
bool X86Architecture::Table_fp1_f5(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fdiv);
    if (Operand__ST0_ST5(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fdiv
 * operand: ['ST0', 'ST6']
 * opcode: 36
**/
bool X86Architecture::Table_fp1_f6(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fdiv);
    if (Operand__ST0_ST6(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fdiv
 * operand: ['ST0', 'ST7']
 * opcode: 37
**/
bool X86Architecture::Table_fp1_f7(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fdiv);
    if (Operand__ST0_ST7(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fdivr
 * operand: ['ST0', 'ST0']
 * opcode: 38
**/
bool X86Architecture::Table_fp1_f8(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fdivr);
    if (Operand__ST0_ST0(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fdivr
 * operand: ['ST0', 'ST1']
 * opcode: 39
**/
bool X86Architecture::Table_fp1_f9(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fdivr);
    if (Operand__ST0_ST1(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fdivr
 * operand: ['ST0', 'ST2']
 * opcode: 3a
**/
bool X86Architecture::Table_fp1_fa(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fdivr);
    if (Operand__ST0_ST2(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fdivr
 * operand: ['ST0', 'ST3']
 * opcode: 3b
**/
bool X86Architecture::Table_fp1_fb(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fdivr);
    if (Operand__ST0_ST3(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fdivr
 * operand: ['ST0', 'ST4']
 * opcode: 3c
**/
bool X86Architecture::Table_fp1_fc(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fdivr);
    if (Operand__ST0_ST4(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fdivr
 * operand: ['ST0', 'ST5']
 * opcode: 3d
**/
bool X86Architecture::Table_fp1_fd(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fdivr);
    if (Operand__ST0_ST5(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fdivr
 * operand: ['ST0', 'ST6']
 * opcode: 3e
**/
bool X86Architecture::Table_fp1_fe(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fdivr);
    if (Operand__ST0_ST6(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fdivr
 * operand: ['ST0', 'ST7']
 * opcode: 3f
**/
bool X86Architecture::Table_fp1_ff(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fdivr);
    if (Operand__ST0_ST7(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fld
 * operand: ['ST0', 'ST0']
 * opcode: 00
**/
bool X86Architecture::Table_fp2_c0(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fld);
    if (Operand__ST0_ST0(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fld
 * operand: ['ST0', 'ST1']
 * opcode: 01
**/
bool X86Architecture::Table_fp2_c1(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fld);
    if (Operand__ST0_ST1(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fld
 * operand: ['ST0', 'ST2']
 * opcode: 02
**/
bool X86Architecture::Table_fp2_c2(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fld);
    if (Operand__ST0_ST2(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fld
 * operand: ['ST0', 'ST3']
 * opcode: 03
**/
bool X86Architecture::Table_fp2_c3(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fld);
    if (Operand__ST0_ST3(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fld
 * operand: ['ST0', 'ST4']
 * opcode: 04
**/
bool X86Architecture::Table_fp2_c4(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fld);
    if (Operand__ST0_ST4(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fld
 * operand: ['ST0', 'ST5']
 * opcode: 05
**/
bool X86Architecture::Table_fp2_c5(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fld);
    if (Operand__ST0_ST5(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fld
 * operand: ['ST0', 'ST6']
 * opcode: 06
**/
bool X86Architecture::Table_fp2_c6(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fld);
    if (Operand__ST0_ST6(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fld
 * operand: ['ST0', 'ST7']
 * opcode: 07
**/
bool X86Architecture::Table_fp2_c7(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fld);
    if (Operand__ST0_ST7(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fxch
 * operand: ['ST0', 'ST0']
 * opcode: 08
**/
bool X86Architecture::Table_fp2_c8(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fxch);
    if (Operand__ST0_ST0(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fxch
 * operand: ['ST0', 'ST1']
 * opcode: 09
**/
bool X86Architecture::Table_fp2_c9(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fxch);
    if (Operand__ST0_ST1(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fxch
 * operand: ['ST0', 'ST2']
 * opcode: 0a
**/
bool X86Architecture::Table_fp2_ca(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fxch);
    if (Operand__ST0_ST2(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fxch
 * operand: ['ST0', 'ST3']
 * opcode: 0b
**/
bool X86Architecture::Table_fp2_cb(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fxch);
    if (Operand__ST0_ST3(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fxch
 * operand: ['ST0', 'ST4']
 * opcode: 0c
**/
bool X86Architecture::Table_fp2_cc(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fxch);
    if (Operand__ST0_ST4(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fxch
 * operand: ['ST0', 'ST5']
 * opcode: 0d
**/
bool X86Architecture::Table_fp2_cd(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fxch);
    if (Operand__ST0_ST5(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fxch
 * operand: ['ST0', 'ST6']
 * opcode: 0e
**/
bool X86Architecture::Table_fp2_ce(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fxch);
    if (Operand__ST0_ST6(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fxch
 * operand: ['ST0', 'ST7']
 * opcode: 0f
**/
bool X86Architecture::Table_fp2_cf(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fxch);
    if (Operand__ST0_ST7(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fnop
 * opcode: 10
**/
bool X86Architecture::Table_fp2_d0(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fnop);
    return true;
}

/** instruction
 * opcode: 11
 * invalid
**/
bool X86Architecture::Table_fp2_d1(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 12
 * invalid
**/
bool X86Architecture::Table_fp2_d2(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 13
 * invalid
**/
bool X86Architecture::Table_fp2_d3(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 14
 * invalid
**/
bool X86Architecture::Table_fp2_d4(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 15
 * invalid
**/
bool X86Architecture::Table_fp2_d5(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 16
 * invalid
**/
bool X86Architecture::Table_fp2_d6(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 17
 * invalid
**/
bool X86Architecture::Table_fp2_d7(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * mnemonic: fstp
 * operand: ['ST0']
 * opcode: 18
**/
bool X86Architecture::Table_fp2_d8(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fstp);
    if (Operand__ST0(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fstp
 * operand: ['ST1']
 * opcode: 19
**/
bool X86Architecture::Table_fp2_d9(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fstp);
    if (Operand__ST1(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fstp
 * operand: ['ST2']
 * opcode: 1a
**/
bool X86Architecture::Table_fp2_da(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fstp);
    if (Operand__ST2(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fstp
 * operand: ['ST3']
 * opcode: 1b
**/
bool X86Architecture::Table_fp2_db(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fstp);
    if (Operand__ST3(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fstp
 * operand: ['ST4']
 * opcode: 1c
**/
bool X86Architecture::Table_fp2_dc(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fstp);
    if (Operand__ST4(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fstp
 * operand: ['ST5']
 * opcode: 1d
**/
bool X86Architecture::Table_fp2_dd(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fstp);
    if (Operand__ST5(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fstp
 * operand: ['ST6']
 * opcode: 1e
**/
bool X86Architecture::Table_fp2_de(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fstp);
    if (Operand__ST6(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fstp
 * operand: ['ST7']
 * opcode: 1f
**/
bool X86Architecture::Table_fp2_df(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fstp);
    if (Operand__ST7(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fchs
 * opcode: 20
**/
bool X86Architecture::Table_fp2_e0(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fchs);
    return true;
}

/** instruction
 * mnemonic: fabs
 * opcode: 21
**/
bool X86Architecture::Table_fp2_e1(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fabs);
    return true;
}

/** instruction
 * opcode: 22
 * invalid
**/
bool X86Architecture::Table_fp2_e2(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 23
 * invalid
**/
bool X86Architecture::Table_fp2_e3(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * mnemonic: ftst
 * opcode: 24
**/
bool X86Architecture::Table_fp2_e4(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Ftst);
    return true;
}

/** instruction
 * mnemonic: fxam
 * opcode: 25
**/
bool X86Architecture::Table_fp2_e5(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fxam);
    return true;
}

/** instructions
 * opcode: 26
 *
 * invalid
 *
 * mnemonic: ftstp
 * attr: ['cyrix']
 *
**/
bool X86Architecture::Table_fp2_e6(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Vendor") == X86_ProcType_CYRIX)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Ftstp);
      return true;
    }
    else
    {
      return false; /* INVALID */
    }
}

/** instruction
 * opcode: 27
 * invalid
**/
bool X86Architecture::Table_fp2_e7(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * mnemonic: fld1
 * opcode: 28
**/
bool X86Architecture::Table_fp2_e8(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fld1);
    return true;
}

/** instruction
 * mnemonic: fldl2t
 * opcode: 29
**/
bool X86Architecture::Table_fp2_e9(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fldl2t);
    return true;
}

/** instruction
 * mnemonic: fldl2e
 * opcode: 2a
**/
bool X86Architecture::Table_fp2_ea(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fldl2e);
    return true;
}

/** instruction
 * mnemonic: fldpi
 * opcode: 2b
**/
bool X86Architecture::Table_fp2_eb(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fldpi);
    return true;
}

/** instruction
 * mnemonic: fldlg2
 * opcode: 2c
**/
bool X86Architecture::Table_fp2_ec(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fldlg2);
    return true;
}

/** instruction
 * mnemonic: fldln2
 * opcode: 2d
**/
bool X86Architecture::Table_fp2_ed(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fldln2);
    return true;
}

/** instruction
 * mnemonic: fldz
 * opcode: 2e
**/
bool X86Architecture::Table_fp2_ee(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fldz);
    return true;
}

/** instruction
 * opcode: 2f
 * invalid
**/
bool X86Architecture::Table_fp2_ef(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * mnemonic: f2xm1
 * opcode: 30
**/
bool X86Architecture::Table_fp2_f0(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_F2xm1);
    return true;
}

/** instruction
 * mnemonic: fyl2x
 * opcode: 31
**/
bool X86Architecture::Table_fp2_f1(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fyl2x);
    return true;
}

/** instruction
 * mnemonic: fptan
 * opcode: 32
**/
bool X86Architecture::Table_fp2_f2(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fptan);
    return true;
}

/** instruction
 * mnemonic: fpatan
 * opcode: 33
**/
bool X86Architecture::Table_fp2_f3(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fpatan);
    return true;
}

/** instruction
 * mnemonic: fxtract
 * opcode: 34
**/
bool X86Architecture::Table_fp2_f4(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fxtract);
    return true;
}

/** instruction
 * mnemonic: fprem1
 * opcode: 35
 * cpu_model: >= X86_Arch_80387
**/
bool X86Architecture::Table_fp2_f5(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_80387)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Fprem1);
      return true;
    }
    else
      return false;
}

/** instruction
 * mnemonic: fdecstp
 * opcode: 36
**/
bool X86Architecture::Table_fp2_f6(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fdecstp);
    return true;
}

/** instruction
 * mnemonic: fincstp
 * opcode: 37
**/
bool X86Architecture::Table_fp2_f7(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fincstp);
    return true;
}

/** instruction
 * mnemonic: fprem
 * opcode: 38
**/
bool X86Architecture::Table_fp2_f8(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fprem);
    return true;
}

/** instruction
 * mnemonic: fyl2xp1
 * opcode: 39
**/
bool X86Architecture::Table_fp2_f9(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fyl2xp1);
    return true;
}

/** instruction
 * mnemonic: fsqrt
 * opcode: 3a
**/
bool X86Architecture::Table_fp2_fa(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fsqrt);
    return true;
}

/** instruction
 * mnemonic: fsincos
 * opcode: 3b
 * cpu_model: >= X86_Arch_80387
**/
bool X86Architecture::Table_fp2_fb(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_80387)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Fsincos);
      return true;
    }
    else
      return false;
}

/** instruction
 * mnemonic: frndint
 * opcode: 3c
**/
bool X86Architecture::Table_fp2_fc(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Frndint);
    return true;
}

/** instruction
 * mnemonic: fscale
 * opcode: 3d
**/
bool X86Architecture::Table_fp2_fd(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fscale);
    return true;
}

/** instruction
 * mnemonic: fsin
 * opcode: 3e
 * cpu_model: >= X86_Arch_80387
**/
bool X86Architecture::Table_fp2_fe(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_80387)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Fsin);
      return true;
    }
    else
      return false;
}

/** instruction
 * mnemonic: fcos
 * opcode: 3f
 * cpu_model: >= X86_Arch_80387
**/
bool X86Architecture::Table_fp2_ff(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_80387)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Fcos);
      return true;
    }
    else
      return false;
}

/** instruction
 * mnemonic: fcmovb
 * operand: ['ST0', 'ST0']
 * opcode: 00
**/
bool X86Architecture::Table_fp3_c0(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fcmovb);
    if (Operand__ST0_ST0(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fcmovb
 * operand: ['ST0', 'ST1']
 * opcode: 01
**/
bool X86Architecture::Table_fp3_c1(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fcmovb);
    if (Operand__ST0_ST1(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fcmovb
 * operand: ['ST0', 'ST2']
 * opcode: 02
**/
bool X86Architecture::Table_fp3_c2(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fcmovb);
    if (Operand__ST0_ST2(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fcmovb
 * operand: ['ST0', 'ST3']
 * opcode: 03
**/
bool X86Architecture::Table_fp3_c3(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fcmovb);
    if (Operand__ST0_ST3(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fcmovb
 * operand: ['ST0', 'ST4']
 * opcode: 04
**/
bool X86Architecture::Table_fp3_c4(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fcmovb);
    if (Operand__ST0_ST4(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fcmovb
 * operand: ['ST0', 'ST5']
 * opcode: 05
**/
bool X86Architecture::Table_fp3_c5(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fcmovb);
    if (Operand__ST0_ST5(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fcmovb
 * operand: ['ST0', 'ST6']
 * opcode: 06
**/
bool X86Architecture::Table_fp3_c6(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fcmovb);
    if (Operand__ST0_ST6(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fcmovb
 * operand: ['ST0', 'ST7']
 * opcode: 07
**/
bool X86Architecture::Table_fp3_c7(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fcmovb);
    if (Operand__ST0_ST7(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fcmove
 * operand: ['ST0', 'ST0']
 * opcode: 08
**/
bool X86Architecture::Table_fp3_c8(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fcmove);
    if (Operand__ST0_ST0(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fcmove
 * operand: ['ST0', 'ST1']
 * opcode: 09
**/
bool X86Architecture::Table_fp3_c9(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fcmove);
    if (Operand__ST0_ST1(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fcmove
 * operand: ['ST0', 'ST2']
 * opcode: 0a
**/
bool X86Architecture::Table_fp3_ca(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fcmove);
    if (Operand__ST0_ST2(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fcmove
 * operand: ['ST0', 'ST3']
 * opcode: 0b
**/
bool X86Architecture::Table_fp3_cb(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fcmove);
    if (Operand__ST0_ST3(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fcmove
 * operand: ['ST0', 'ST4']
 * opcode: 0c
**/
bool X86Architecture::Table_fp3_cc(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fcmove);
    if (Operand__ST0_ST4(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fcmove
 * operand: ['ST0', 'ST5']
 * opcode: 0d
**/
bool X86Architecture::Table_fp3_cd(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fcmove);
    if (Operand__ST0_ST5(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fcmove
 * operand: ['ST0', 'ST6']
 * opcode: 0e
**/
bool X86Architecture::Table_fp3_ce(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fcmove);
    if (Operand__ST0_ST6(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fcmove
 * operand: ['ST0', 'ST7']
 * opcode: 0f
**/
bool X86Architecture::Table_fp3_cf(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fcmove);
    if (Operand__ST0_ST7(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fcmovbe
 * operand: ['ST0', 'ST0']
 * opcode: 10
**/
bool X86Architecture::Table_fp3_d0(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fcmovbe);
    if (Operand__ST0_ST0(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fcmovbe
 * operand: ['ST0', 'ST1']
 * opcode: 11
**/
bool X86Architecture::Table_fp3_d1(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fcmovbe);
    if (Operand__ST0_ST1(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fcmovbe
 * operand: ['ST0', 'ST2']
 * opcode: 12
**/
bool X86Architecture::Table_fp3_d2(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fcmovbe);
    if (Operand__ST0_ST2(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fcmovbe
 * operand: ['ST0', 'ST3']
 * opcode: 13
**/
bool X86Architecture::Table_fp3_d3(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fcmovbe);
    if (Operand__ST0_ST3(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fcmovbe
 * operand: ['ST0', 'ST4']
 * opcode: 14
**/
bool X86Architecture::Table_fp3_d4(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fcmovbe);
    if (Operand__ST0_ST4(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fcmovbe
 * operand: ['ST0', 'ST5']
 * opcode: 15
**/
bool X86Architecture::Table_fp3_d5(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fcmovbe);
    if (Operand__ST0_ST5(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fcmovbe
 * operand: ['ST0', 'ST6']
 * opcode: 16
**/
bool X86Architecture::Table_fp3_d6(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fcmovbe);
    if (Operand__ST0_ST6(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fcmovbe
 * operand: ['ST0', 'ST7']
 * opcode: 17
**/
bool X86Architecture::Table_fp3_d7(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fcmovbe);
    if (Operand__ST0_ST7(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fcmovu
 * operand: ['ST0', 'ST0']
 * opcode: 18
**/
bool X86Architecture::Table_fp3_d8(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fcmovu);
    if (Operand__ST0_ST0(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fcmovu
 * operand: ['ST0', 'ST1']
 * opcode: 19
**/
bool X86Architecture::Table_fp3_d9(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fcmovu);
    if (Operand__ST0_ST1(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fcmovu
 * operand: ['ST0', 'ST2']
 * opcode: 1a
**/
bool X86Architecture::Table_fp3_da(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fcmovu);
    if (Operand__ST0_ST2(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fcmovu
 * operand: ['ST0', 'ST3']
 * opcode: 1b
**/
bool X86Architecture::Table_fp3_db(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fcmovu);
    if (Operand__ST0_ST3(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fcmovu
 * operand: ['ST0', 'ST4']
 * opcode: 1c
**/
bool X86Architecture::Table_fp3_dc(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fcmovu);
    if (Operand__ST0_ST4(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fcmovu
 * operand: ['ST0', 'ST5']
 * opcode: 1d
**/
bool X86Architecture::Table_fp3_dd(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fcmovu);
    if (Operand__ST0_ST5(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fcmovu
 * operand: ['ST0', 'ST6']
 * opcode: 1e
**/
bool X86Architecture::Table_fp3_de(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fcmovu);
    if (Operand__ST0_ST6(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fcmovu
 * operand: ['ST0', 'ST7']
 * opcode: 1f
**/
bool X86Architecture::Table_fp3_df(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fcmovu);
    if (Operand__ST0_ST7(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * opcode: 20
 * invalid
**/
bool X86Architecture::Table_fp3_e0(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 21
 * invalid
**/
bool X86Architecture::Table_fp3_e1(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 22
 * invalid
**/
bool X86Architecture::Table_fp3_e2(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 23
 * invalid
**/
bool X86Architecture::Table_fp3_e3(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 24
 * invalid
**/
bool X86Architecture::Table_fp3_e4(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 25
 * invalid
**/
bool X86Architecture::Table_fp3_e5(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 26
 * invalid
**/
bool X86Architecture::Table_fp3_e6(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 27
 * invalid
**/
bool X86Architecture::Table_fp3_e7(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 28
 * invalid
**/
bool X86Architecture::Table_fp3_e8(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * mnemonic: fucompp
 * opcode: 29
 * cpu_model: >= X86_Arch_80387
**/
bool X86Architecture::Table_fp3_e9(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_80387)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Fucompp);
      return true;
    }
    else
      return false;
}

/** instruction
 * opcode: 2a
 * invalid
**/
bool X86Architecture::Table_fp3_ea(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 2b
 * invalid
**/
bool X86Architecture::Table_fp3_eb(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 2c
 * invalid
**/
bool X86Architecture::Table_fp3_ec(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 2d
 * invalid
**/
bool X86Architecture::Table_fp3_ed(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 2e
 * invalid
**/
bool X86Architecture::Table_fp3_ee(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 2f
 * invalid
**/
bool X86Architecture::Table_fp3_ef(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 30
 * invalid
**/
bool X86Architecture::Table_fp3_f0(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 31
 * invalid
**/
bool X86Architecture::Table_fp3_f1(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 32
 * invalid
**/
bool X86Architecture::Table_fp3_f2(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 33
 * invalid
**/
bool X86Architecture::Table_fp3_f3(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 34
 * invalid
**/
bool X86Architecture::Table_fp3_f4(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 35
 * invalid
**/
bool X86Architecture::Table_fp3_f5(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 36
 * invalid
**/
bool X86Architecture::Table_fp3_f6(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 37
 * invalid
**/
bool X86Architecture::Table_fp3_f7(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 38
 * invalid
**/
bool X86Architecture::Table_fp3_f8(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 39
 * invalid
**/
bool X86Architecture::Table_fp3_f9(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 3a
 * invalid
**/
bool X86Architecture::Table_fp3_fa(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 3b
 * invalid
**/
bool X86Architecture::Table_fp3_fb(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 3c
 * invalid
**/
bool X86Architecture::Table_fp3_fc(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 3d
 * invalid
**/
bool X86Architecture::Table_fp3_fd(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 3e
 * invalid
**/
bool X86Architecture::Table_fp3_fe(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 3f
 * invalid
**/
bool X86Architecture::Table_fp3_ff(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * mnemonic: fcmovnb
 * operand: ['ST0', 'ST0']
 * opcode: 00
**/
bool X86Architecture::Table_fp4_c0(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fcmovnb);
    if (Operand__ST0_ST0(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fcmovnb
 * operand: ['ST0', 'ST1']
 * opcode: 01
**/
bool X86Architecture::Table_fp4_c1(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fcmovnb);
    if (Operand__ST0_ST1(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fcmovnb
 * operand: ['ST0', 'ST2']
 * opcode: 02
**/
bool X86Architecture::Table_fp4_c2(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fcmovnb);
    if (Operand__ST0_ST2(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fcmovnb
 * operand: ['ST0', 'ST3']
 * opcode: 03
**/
bool X86Architecture::Table_fp4_c3(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fcmovnb);
    if (Operand__ST0_ST3(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fcmovnb
 * operand: ['ST0', 'ST4']
 * opcode: 04
**/
bool X86Architecture::Table_fp4_c4(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fcmovnb);
    if (Operand__ST0_ST4(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fcmovnb
 * operand: ['ST0', 'ST5']
 * opcode: 05
**/
bool X86Architecture::Table_fp4_c5(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fcmovnb);
    if (Operand__ST0_ST5(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fcmovnb
 * operand: ['ST0', 'ST6']
 * opcode: 06
**/
bool X86Architecture::Table_fp4_c6(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fcmovnb);
    if (Operand__ST0_ST6(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fcmovnb
 * operand: ['ST0', 'ST7']
 * opcode: 07
**/
bool X86Architecture::Table_fp4_c7(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fcmovnb);
    if (Operand__ST0_ST7(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fcmovne
 * operand: ['ST0', 'ST0']
 * opcode: 08
**/
bool X86Architecture::Table_fp4_c8(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fcmovne);
    if (Operand__ST0_ST0(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fcmovne
 * operand: ['ST0', 'ST1']
 * opcode: 09
**/
bool X86Architecture::Table_fp4_c9(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fcmovne);
    if (Operand__ST0_ST1(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fcmovne
 * operand: ['ST0', 'ST2']
 * opcode: 0a
**/
bool X86Architecture::Table_fp4_ca(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fcmovne);
    if (Operand__ST0_ST2(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fcmovne
 * operand: ['ST0', 'ST3']
 * opcode: 0b
**/
bool X86Architecture::Table_fp4_cb(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fcmovne);
    if (Operand__ST0_ST3(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fcmovne
 * operand: ['ST0', 'ST4']
 * opcode: 0c
**/
bool X86Architecture::Table_fp4_cc(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fcmovne);
    if (Operand__ST0_ST4(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fcmovne
 * operand: ['ST0', 'ST5']
 * opcode: 0d
**/
bool X86Architecture::Table_fp4_cd(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fcmovne);
    if (Operand__ST0_ST5(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fcmovne
 * operand: ['ST0', 'ST6']
 * opcode: 0e
**/
bool X86Architecture::Table_fp4_ce(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fcmovne);
    if (Operand__ST0_ST6(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fcmovne
 * operand: ['ST0', 'ST7']
 * opcode: 0f
**/
bool X86Architecture::Table_fp4_cf(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fcmovne);
    if (Operand__ST0_ST7(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fcmovnbe
 * operand: ['ST0', 'ST0']
 * opcode: 10
**/
bool X86Architecture::Table_fp4_d0(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fcmovnbe);
    if (Operand__ST0_ST0(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fcmovnbe
 * operand: ['ST0', 'ST1']
 * opcode: 11
**/
bool X86Architecture::Table_fp4_d1(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fcmovnbe);
    if (Operand__ST0_ST1(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fcmovnbe
 * operand: ['ST0', 'ST2']
 * opcode: 12
**/
bool X86Architecture::Table_fp4_d2(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fcmovnbe);
    if (Operand__ST0_ST2(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fcmovnbe
 * operand: ['ST0', 'ST3']
 * opcode: 13
**/
bool X86Architecture::Table_fp4_d3(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fcmovnbe);
    if (Operand__ST0_ST3(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fcmovnbe
 * operand: ['ST0', 'ST4']
 * opcode: 14
**/
bool X86Architecture::Table_fp4_d4(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fcmovnbe);
    if (Operand__ST0_ST4(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fcmovnbe
 * operand: ['ST0', 'ST5']
 * opcode: 15
**/
bool X86Architecture::Table_fp4_d5(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fcmovnbe);
    if (Operand__ST0_ST5(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fcmovnbe
 * operand: ['ST0', 'ST6']
 * opcode: 16
**/
bool X86Architecture::Table_fp4_d6(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fcmovnbe);
    if (Operand__ST0_ST6(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fcmovnbe
 * operand: ['ST0', 'ST7']
 * opcode: 17
**/
bool X86Architecture::Table_fp4_d7(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fcmovnbe);
    if (Operand__ST0_ST7(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fcmovnu
 * operand: ['ST0', 'ST0']
 * opcode: 18
**/
bool X86Architecture::Table_fp4_d8(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fcmovnu);
    if (Operand__ST0_ST0(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fcmovnu
 * operand: ['ST0', 'ST1']
 * opcode: 19
**/
bool X86Architecture::Table_fp4_d9(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fcmovnu);
    if (Operand__ST0_ST1(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fcmovnu
 * operand: ['ST0', 'ST2']
 * opcode: 1a
**/
bool X86Architecture::Table_fp4_da(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fcmovnu);
    if (Operand__ST0_ST2(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fcmovnu
 * operand: ['ST0', 'ST3']
 * opcode: 1b
**/
bool X86Architecture::Table_fp4_db(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fcmovnu);
    if (Operand__ST0_ST3(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fcmovnu
 * operand: ['ST0', 'ST4']
 * opcode: 1c
**/
bool X86Architecture::Table_fp4_dc(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fcmovnu);
    if (Operand__ST0_ST4(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fcmovnu
 * operand: ['ST0', 'ST5']
 * opcode: 1d
**/
bool X86Architecture::Table_fp4_dd(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fcmovnu);
    if (Operand__ST0_ST5(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fcmovnu
 * operand: ['ST0', 'ST6']
 * opcode: 1e
**/
bool X86Architecture::Table_fp4_de(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fcmovnu);
    if (Operand__ST0_ST6(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fcmovnu
 * operand: ['ST0', 'ST7']
 * opcode: 1f
**/
bool X86Architecture::Table_fp4_df(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fcmovnu);
    if (Operand__ST0_ST7(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instructions
 * opcode: 20
 *
 * invalid
 *
 * mnemonic: fneni
 * cpu_model: == X86_Arch_8087
 *
**/
bool X86Architecture::Table_fp4_e0(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") == X86_Arch_8087)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Fneni);
      return true;
    }
    else
    {
      return false; /* INVALID */
    }
}

/** instructions
 * opcode: 21
 *
 * invalid
 *
 * mnemonic: fndisi
 * cpu_model: == X86_Arch_8087
 *
**/
bool X86Architecture::Table_fp4_e1(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") == X86_Arch_8087)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Fndisi);
      return true;
    }
    else
    {
      return false; /* INVALID */
    }
}

/** instruction
 * mnemonic: fnclex
 * opcode: 22
**/
bool X86Architecture::Table_fp4_e2(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fnclex);
    return true;
}

/** instruction
 * mnemonic: fninit
 * opcode: 23
 * semantic: ['program.id = program.id']
**/
bool X86Architecture::Table_fp4_e3(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fninit);
    {
      Expression::LSPType AllExpr;
      /* semantic: program.id = program.id */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::ProgramPointerRegister, rInsn.GetMode()), &m_CpuInfo),
        Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::ProgramPointerRegister, rInsn.GetMode()), &m_CpuInfo)));
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instructions
 * opcode: 24
 *
 * invalid
 *
 * mnemonic: fnsetpm
 * cpu_model: == X86_Arch_80287
 *
**/
bool X86Architecture::Table_fp4_e4(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") == X86_Arch_80287)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Fnsetpm);
      return true;
    }
    else
    {
      return false; /* INVALID */
    }
}

/** instructions
 * opcode: 25
 *
 * invalid
 *
 * mnemonic: frstpm
 * cpu_model: == X86_Arch_80287xl
 *
**/
bool X86Architecture::Table_fp4_e5(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") == X86_Arch_80287xl)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Frstpm);
      return true;
    }
    else
    {
      return false; /* INVALID */
    }
}

/** instruction
 * opcode: 26
 * invalid
**/
bool X86Architecture::Table_fp4_e6(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 27
 * invalid
**/
bool X86Architecture::Table_fp4_e7(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instructions
 * opcode: 28
 *
 * mnemonic: fucomi
 * operand: ['ST0', 'ST0']
 *
 * mnemonic: fsbp0
 * attr: ['iit']
 *
**/
bool X86Architecture::Table_fp4_e8(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Vendor") == X86_ProcType_IIT)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Fsbp0);
      return true;
    }
    else
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Fucomi);
      if (Operand__ST0_ST0(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
}

/** instruction
 * mnemonic: fucomi
 * operand: ['ST0', 'ST1']
 * opcode: 29
**/
bool X86Architecture::Table_fp4_e9(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fucomi);
    if (Operand__ST0_ST1(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instructions
 * opcode: 2a
 *
 * mnemonic: fucomi
 * operand: ['ST0', 'ST2']
 *
 * mnemonic: fsbp2
 * attr: ['iit']
 *
**/
bool X86Architecture::Table_fp4_ea(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Vendor") == X86_ProcType_IIT)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Fsbp2);
      return true;
    }
    else
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Fucomi);
      if (Operand__ST0_ST2(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
}

/** instructions
 * opcode: 2b
 *
 * mnemonic: fucomi
 * operand: ['ST0', 'ST3']
 *
 * mnemonic: fsbp1
 * attr: ['iit']
 *
**/
bool X86Architecture::Table_fp4_eb(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Vendor") == X86_ProcType_IIT)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Fsbp1);
      return true;
    }
    else
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Fucomi);
      if (Operand__ST0_ST3(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
}

/** instruction
 * mnemonic: fucomi
 * operand: ['ST0', 'ST4']
 * opcode: 2c
**/
bool X86Architecture::Table_fp4_ec(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fucomi);
    if (Operand__ST0_ST4(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fucomi
 * operand: ['ST0', 'ST5']
 * opcode: 2d
**/
bool X86Architecture::Table_fp4_ed(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fucomi);
    if (Operand__ST0_ST5(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fucomi
 * operand: ['ST0', 'ST6']
 * opcode: 2e
**/
bool X86Architecture::Table_fp4_ee(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fucomi);
    if (Operand__ST0_ST6(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fucomi
 * operand: ['ST0', 'ST7']
 * opcode: 2f
**/
bool X86Architecture::Table_fp4_ef(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fucomi);
    if (Operand__ST0_ST7(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fcomi
 * operand: ['ST0', 'ST0']
 * opcode: 30
**/
bool X86Architecture::Table_fp4_f0(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fcomi);
    if (Operand__ST0_ST0(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instructions
 * opcode: 31
 *
 * mnemonic: fcomi
 * operand: ['ST0', 'ST1']
 *
 * mnemonic: f4x4
 * attr: ['iit']
 *
**/
bool X86Architecture::Table_fp4_f1(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Vendor") == X86_ProcType_IIT)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_F4x4);
      return true;
    }
    else
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Fcomi);
      if (Operand__ST0_ST1(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
}

/** instruction
 * mnemonic: fcomi
 * operand: ['ST0', 'ST2']
 * opcode: 32
**/
bool X86Architecture::Table_fp4_f2(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fcomi);
    if (Operand__ST0_ST2(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fcomi
 * operand: ['ST0', 'ST3']
 * opcode: 33
**/
bool X86Architecture::Table_fp4_f3(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fcomi);
    if (Operand__ST0_ST3(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fcomi
 * operand: ['ST0', 'ST4']
 * opcode: 34
**/
bool X86Architecture::Table_fp4_f4(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fcomi);
    if (Operand__ST0_ST4(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fcomi
 * operand: ['ST0', 'ST5']
 * opcode: 35
**/
bool X86Architecture::Table_fp4_f5(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fcomi);
    if (Operand__ST0_ST5(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fcomi
 * operand: ['ST0', 'ST6']
 * opcode: 36
**/
bool X86Architecture::Table_fp4_f6(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fcomi);
    if (Operand__ST0_ST6(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fcomi
 * operand: ['ST0', 'ST7']
 * opcode: 37
**/
bool X86Architecture::Table_fp4_f7(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fcomi);
    if (Operand__ST0_ST7(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instructions
 * opcode: 38
 *
 * invalid
 *
 * mnemonic: frint2
 * attr: ['cyrix']
 *
**/
bool X86Architecture::Table_fp4_f8(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Vendor") == X86_ProcType_CYRIX)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Frint2);
      return true;
    }
    else
    {
      return false; /* INVALID */
    }
}

/** instruction
 * opcode: 39
 * invalid
**/
bool X86Architecture::Table_fp4_f9(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 3a
 * invalid
**/
bool X86Architecture::Table_fp4_fa(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 3b
 * invalid
**/
bool X86Architecture::Table_fp4_fb(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 3c
 * invalid
**/
bool X86Architecture::Table_fp4_fc(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 3d
 * invalid
**/
bool X86Architecture::Table_fp4_fd(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 3e
 * invalid
**/
bool X86Architecture::Table_fp4_fe(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 3f
 * invalid
**/
bool X86Architecture::Table_fp4_ff(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * mnemonic: fadd
 * operand: ['ST0', 'ST0']
 * opcode: 00
**/
bool X86Architecture::Table_fp5_c0(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fadd);
    if (Operand__ST0_ST0(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fadd
 * operand: ['ST1', 'ST0']
 * opcode: 01
**/
bool X86Architecture::Table_fp5_c1(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fadd);
    if (Operand__ST1_ST0(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fadd
 * operand: ['ST2', 'ST0']
 * opcode: 02
**/
bool X86Architecture::Table_fp5_c2(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fadd);
    if (Operand__ST2_ST0(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fadd
 * operand: ['ST3', 'ST0']
 * opcode: 03
**/
bool X86Architecture::Table_fp5_c3(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fadd);
    if (Operand__ST3_ST0(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fadd
 * operand: ['ST4', 'ST0']
 * opcode: 04
**/
bool X86Architecture::Table_fp5_c4(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fadd);
    if (Operand__ST4_ST0(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fadd
 * operand: ['ST5', 'ST0']
 * opcode: 05
**/
bool X86Architecture::Table_fp5_c5(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fadd);
    if (Operand__ST5_ST0(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fadd
 * operand: ['ST6', 'ST0']
 * opcode: 06
**/
bool X86Architecture::Table_fp5_c6(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fadd);
    if (Operand__ST6_ST0(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fadd
 * operand: ['ST7', 'ST0']
 * opcode: 07
**/
bool X86Architecture::Table_fp5_c7(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fadd);
    if (Operand__ST7_ST0(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fmul
 * operand: ['ST0', 'ST0']
 * opcode: 08
**/
bool X86Architecture::Table_fp5_c8(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fmul);
    if (Operand__ST0_ST0(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fmul
 * operand: ['ST1', 'ST0']
 * opcode: 09
**/
bool X86Architecture::Table_fp5_c9(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fmul);
    if (Operand__ST1_ST0(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fmul
 * operand: ['ST2', 'ST0']
 * opcode: 0a
**/
bool X86Architecture::Table_fp5_ca(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fmul);
    if (Operand__ST2_ST0(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fmul
 * operand: ['ST3', 'ST0']
 * opcode: 0b
**/
bool X86Architecture::Table_fp5_cb(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fmul);
    if (Operand__ST3_ST0(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fmul
 * operand: ['ST4', 'ST0']
 * opcode: 0c
**/
bool X86Architecture::Table_fp5_cc(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fmul);
    if (Operand__ST4_ST0(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fmul
 * operand: ['ST5', 'ST0']
 * opcode: 0d
**/
bool X86Architecture::Table_fp5_cd(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fmul);
    if (Operand__ST5_ST0(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fmul
 * operand: ['ST6', 'ST0']
 * opcode: 0e
**/
bool X86Architecture::Table_fp5_ce(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fmul);
    if (Operand__ST6_ST0(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fmul
 * operand: ['ST7', 'ST0']
 * opcode: 0f
**/
bool X86Architecture::Table_fp5_cf(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fmul);
    if (Operand__ST7_ST0(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fcom
 * operand: ['ST0']
 * opcode: 10
**/
bool X86Architecture::Table_fp5_d0(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fcom);
    if (Operand__ST0(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fcom
 * operand: ['ST1']
 * opcode: 11
**/
bool X86Architecture::Table_fp5_d1(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fcom);
    if (Operand__ST1(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fcom
 * operand: ['ST2']
 * opcode: 12
**/
bool X86Architecture::Table_fp5_d2(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fcom);
    if (Operand__ST2(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fcom
 * operand: ['ST3']
 * opcode: 13
**/
bool X86Architecture::Table_fp5_d3(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fcom);
    if (Operand__ST3(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fcom
 * operand: ['ST4']
 * opcode: 14
**/
bool X86Architecture::Table_fp5_d4(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fcom);
    if (Operand__ST4(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fcom
 * operand: ['ST5']
 * opcode: 15
**/
bool X86Architecture::Table_fp5_d5(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fcom);
    if (Operand__ST5(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fcom
 * operand: ['ST6']
 * opcode: 16
**/
bool X86Architecture::Table_fp5_d6(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fcom);
    if (Operand__ST6(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fcom
 * operand: ['ST7']
 * opcode: 17
**/
bool X86Architecture::Table_fp5_d7(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fcom);
    if (Operand__ST7(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fcomp
 * operand: ['ST0']
 * opcode: 18
**/
bool X86Architecture::Table_fp5_d8(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fcomp);
    if (Operand__ST0(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fcomp
 * operand: ['ST1']
 * opcode: 19
**/
bool X86Architecture::Table_fp5_d9(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fcomp);
    if (Operand__ST1(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fcomp
 * operand: ['ST2']
 * opcode: 1a
**/
bool X86Architecture::Table_fp5_da(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fcomp);
    if (Operand__ST2(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fcomp
 * operand: ['ST3']
 * opcode: 1b
**/
bool X86Architecture::Table_fp5_db(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fcomp);
    if (Operand__ST3(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fcomp
 * operand: ['ST4']
 * opcode: 1c
**/
bool X86Architecture::Table_fp5_dc(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fcomp);
    if (Operand__ST4(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fcomp
 * operand: ['ST5']
 * opcode: 1d
**/
bool X86Architecture::Table_fp5_dd(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fcomp);
    if (Operand__ST5(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fcomp
 * operand: ['ST6']
 * opcode: 1e
**/
bool X86Architecture::Table_fp5_de(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fcomp);
    if (Operand__ST6(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fcomp
 * operand: ['ST7']
 * opcode: 1f
**/
bool X86Architecture::Table_fp5_df(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fcomp);
    if (Operand__ST7(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fsubr
 * operand: ['ST0', 'ST0']
 * opcode: 20
**/
bool X86Architecture::Table_fp5_e0(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fsubr);
    if (Operand__ST0_ST0(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fsubr
 * operand: ['ST1', 'ST0']
 * opcode: 21
**/
bool X86Architecture::Table_fp5_e1(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fsubr);
    if (Operand__ST1_ST0(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fsubr
 * operand: ['ST2', 'ST0']
 * opcode: 22
**/
bool X86Architecture::Table_fp5_e2(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fsubr);
    if (Operand__ST2_ST0(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fsubr
 * operand: ['ST3', 'ST0']
 * opcode: 23
**/
bool X86Architecture::Table_fp5_e3(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fsubr);
    if (Operand__ST3_ST0(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fsubr
 * operand: ['ST4', 'ST0']
 * opcode: 24
**/
bool X86Architecture::Table_fp5_e4(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fsubr);
    if (Operand__ST4_ST0(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fsubr
 * operand: ['ST5', 'ST0']
 * opcode: 25
**/
bool X86Architecture::Table_fp5_e5(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fsubr);
    if (Operand__ST5_ST0(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fsubr
 * operand: ['ST6', 'ST0']
 * opcode: 26
**/
bool X86Architecture::Table_fp5_e6(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fsubr);
    if (Operand__ST6_ST0(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fsubr
 * operand: ['ST7', 'ST0']
 * opcode: 27
**/
bool X86Architecture::Table_fp5_e7(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fsubr);
    if (Operand__ST7_ST0(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fsub
 * operand: ['ST0', 'ST0']
 * opcode: 28
**/
bool X86Architecture::Table_fp5_e8(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fsub);
    if (Operand__ST0_ST0(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fsub
 * operand: ['ST1', 'ST0']
 * opcode: 29
**/
bool X86Architecture::Table_fp5_e9(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fsub);
    if (Operand__ST1_ST0(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fsub
 * operand: ['ST2', 'ST0']
 * opcode: 2a
**/
bool X86Architecture::Table_fp5_ea(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fsub);
    if (Operand__ST2_ST0(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fsub
 * operand: ['ST3', 'ST0']
 * opcode: 2b
**/
bool X86Architecture::Table_fp5_eb(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fsub);
    if (Operand__ST3_ST0(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fsub
 * operand: ['ST4', 'ST0']
 * opcode: 2c
**/
bool X86Architecture::Table_fp5_ec(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fsub);
    if (Operand__ST4_ST0(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fsub
 * operand: ['ST5', 'ST0']
 * opcode: 2d
**/
bool X86Architecture::Table_fp5_ed(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fsub);
    if (Operand__ST5_ST0(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fsub
 * operand: ['ST6', 'ST0']
 * opcode: 2e
**/
bool X86Architecture::Table_fp5_ee(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fsub);
    if (Operand__ST6_ST0(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fsub
 * operand: ['ST7', 'ST0']
 * opcode: 2f
**/
bool X86Architecture::Table_fp5_ef(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fsub);
    if (Operand__ST7_ST0(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fdivr
 * operand: ['ST0', 'ST0']
 * opcode: 30
**/
bool X86Architecture::Table_fp5_f0(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fdivr);
    if (Operand__ST0_ST0(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fdivr
 * operand: ['ST1', 'ST0']
 * opcode: 31
**/
bool X86Architecture::Table_fp5_f1(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fdivr);
    if (Operand__ST1_ST0(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fdivr
 * operand: ['ST2', 'ST0']
 * opcode: 32
**/
bool X86Architecture::Table_fp5_f2(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fdivr);
    if (Operand__ST2_ST0(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fdivr
 * operand: ['ST3', 'ST0']
 * opcode: 33
**/
bool X86Architecture::Table_fp5_f3(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fdivr);
    if (Operand__ST3_ST0(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fdivr
 * operand: ['ST4', 'ST0']
 * opcode: 34
**/
bool X86Architecture::Table_fp5_f4(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fdivr);
    if (Operand__ST4_ST0(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fdivr
 * operand: ['ST5', 'ST0']
 * opcode: 35
**/
bool X86Architecture::Table_fp5_f5(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fdivr);
    if (Operand__ST5_ST0(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fdivr
 * operand: ['ST6', 'ST0']
 * opcode: 36
**/
bool X86Architecture::Table_fp5_f6(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fdivr);
    if (Operand__ST6_ST0(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fdivr
 * operand: ['ST7', 'ST0']
 * opcode: 37
**/
bool X86Architecture::Table_fp5_f7(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fdivr);
    if (Operand__ST7_ST0(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fdiv
 * operand: ['ST0', 'ST0']
 * opcode: 38
**/
bool X86Architecture::Table_fp5_f8(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fdiv);
    if (Operand__ST0_ST0(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fdiv
 * operand: ['ST1', 'ST0']
 * opcode: 39
**/
bool X86Architecture::Table_fp5_f9(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fdiv);
    if (Operand__ST1_ST0(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fdiv
 * operand: ['ST2', 'ST0']
 * opcode: 3a
**/
bool X86Architecture::Table_fp5_fa(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fdiv);
    if (Operand__ST2_ST0(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fdiv
 * operand: ['ST3', 'ST0']
 * opcode: 3b
**/
bool X86Architecture::Table_fp5_fb(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fdiv);
    if (Operand__ST3_ST0(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fdiv
 * operand: ['ST4', 'ST0']
 * opcode: 3c
**/
bool X86Architecture::Table_fp5_fc(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fdiv);
    if (Operand__ST4_ST0(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fdiv
 * operand: ['ST5', 'ST0']
 * opcode: 3d
**/
bool X86Architecture::Table_fp5_fd(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fdiv);
    if (Operand__ST5_ST0(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fdiv
 * operand: ['ST6', 'ST0']
 * opcode: 3e
**/
bool X86Architecture::Table_fp5_fe(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fdiv);
    if (Operand__ST6_ST0(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fdiv
 * operand: ['ST7', 'ST0']
 * opcode: 3f
**/
bool X86Architecture::Table_fp5_ff(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fdiv);
    if (Operand__ST7_ST0(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: ffree
 * operand: ['ST0']
 * opcode: 00
**/
bool X86Architecture::Table_fp6_c0(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Ffree);
    if (Operand__ST0(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: ffree
 * operand: ['ST1']
 * opcode: 01
**/
bool X86Architecture::Table_fp6_c1(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Ffree);
    if (Operand__ST1(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: ffree
 * operand: ['ST2']
 * opcode: 02
**/
bool X86Architecture::Table_fp6_c2(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Ffree);
    if (Operand__ST2(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: ffree
 * operand: ['ST3']
 * opcode: 03
**/
bool X86Architecture::Table_fp6_c3(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Ffree);
    if (Operand__ST3(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: ffree
 * operand: ['ST4']
 * opcode: 04
**/
bool X86Architecture::Table_fp6_c4(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Ffree);
    if (Operand__ST4(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: ffree
 * operand: ['ST5']
 * opcode: 05
**/
bool X86Architecture::Table_fp6_c5(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Ffree);
    if (Operand__ST5(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: ffree
 * operand: ['ST6']
 * opcode: 06
**/
bool X86Architecture::Table_fp6_c6(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Ffree);
    if (Operand__ST6(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: ffree
 * operand: ['ST7']
 * opcode: 07
**/
bool X86Architecture::Table_fp6_c7(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Ffree);
    if (Operand__ST7(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fxch
 * operand: ['ST0']
 * opcode: 08
**/
bool X86Architecture::Table_fp6_c8(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fxch);
    if (Operand__ST0(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fxch
 * operand: ['ST1']
 * opcode: 09
**/
bool X86Architecture::Table_fp6_c9(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fxch);
    if (Operand__ST1(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fxch
 * operand: ['ST2']
 * opcode: 0a
**/
bool X86Architecture::Table_fp6_ca(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fxch);
    if (Operand__ST2(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fxch
 * operand: ['ST3']
 * opcode: 0b
**/
bool X86Architecture::Table_fp6_cb(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fxch);
    if (Operand__ST3(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fxch
 * operand: ['ST4']
 * opcode: 0c
**/
bool X86Architecture::Table_fp6_cc(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fxch);
    if (Operand__ST4(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fxch
 * operand: ['ST5']
 * opcode: 0d
**/
bool X86Architecture::Table_fp6_cd(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fxch);
    if (Operand__ST5(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fxch
 * operand: ['ST6']
 * opcode: 0e
**/
bool X86Architecture::Table_fp6_ce(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fxch);
    if (Operand__ST6(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fxch
 * operand: ['ST7']
 * opcode: 0f
**/
bool X86Architecture::Table_fp6_cf(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fxch);
    if (Operand__ST7(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fst
 * operand: ['ST0']
 * opcode: 10
**/
bool X86Architecture::Table_fp6_d0(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fst);
    if (Operand__ST0(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fst
 * operand: ['ST1']
 * opcode: 11
**/
bool X86Architecture::Table_fp6_d1(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fst);
    if (Operand__ST1(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fst
 * operand: ['ST2']
 * opcode: 12
**/
bool X86Architecture::Table_fp6_d2(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fst);
    if (Operand__ST2(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fst
 * operand: ['ST3']
 * opcode: 13
**/
bool X86Architecture::Table_fp6_d3(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fst);
    if (Operand__ST3(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fst
 * operand: ['ST4']
 * opcode: 14
**/
bool X86Architecture::Table_fp6_d4(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fst);
    if (Operand__ST4(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fst
 * operand: ['ST5']
 * opcode: 15
**/
bool X86Architecture::Table_fp6_d5(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fst);
    if (Operand__ST5(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fst
 * operand: ['ST6']
 * opcode: 16
**/
bool X86Architecture::Table_fp6_d6(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fst);
    if (Operand__ST6(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fst
 * operand: ['ST7']
 * opcode: 17
**/
bool X86Architecture::Table_fp6_d7(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fst);
    if (Operand__ST7(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fstp
 * operand: ['ST0']
 * opcode: 18
**/
bool X86Architecture::Table_fp6_d8(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fstp);
    if (Operand__ST0(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fstp
 * operand: ['ST1']
 * opcode: 19
**/
bool X86Architecture::Table_fp6_d9(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fstp);
    if (Operand__ST1(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fstp
 * operand: ['ST2']
 * opcode: 1a
**/
bool X86Architecture::Table_fp6_da(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fstp);
    if (Operand__ST2(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fstp
 * operand: ['ST3']
 * opcode: 1b
**/
bool X86Architecture::Table_fp6_db(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fstp);
    if (Operand__ST3(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fstp
 * operand: ['ST4']
 * opcode: 1c
**/
bool X86Architecture::Table_fp6_dc(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fstp);
    if (Operand__ST4(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fstp
 * operand: ['ST5']
 * opcode: 1d
**/
bool X86Architecture::Table_fp6_dd(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fstp);
    if (Operand__ST5(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fstp
 * operand: ['ST6']
 * opcode: 1e
**/
bool X86Architecture::Table_fp6_de(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fstp);
    if (Operand__ST6(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fstp
 * operand: ['ST7']
 * opcode: 1f
**/
bool X86Architecture::Table_fp6_df(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fstp);
    if (Operand__ST7(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fucom
 * operand: ['ST0', 'ST0']
 * opcode: 20
 * cpu_model: >= X86_Arch_80387
**/
bool X86Architecture::Table_fp6_e0(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_80387)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Fucom);
      if (Operand__ST0_ST0(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else
      return false;
}

/** instruction
 * mnemonic: fucom
 * operand: ['ST1', 'ST0']
 * opcode: 21
 * cpu_model: >= X86_Arch_80387
**/
bool X86Architecture::Table_fp6_e1(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_80387)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Fucom);
      if (Operand__ST1_ST0(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else
      return false;
}

/** instruction
 * mnemonic: fucom
 * operand: ['ST2', 'ST0']
 * opcode: 22
 * cpu_model: >= X86_Arch_80387
**/
bool X86Architecture::Table_fp6_e2(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_80387)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Fucom);
      if (Operand__ST2_ST0(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else
      return false;
}

/** instruction
 * mnemonic: fucom
 * operand: ['ST3', 'ST0']
 * opcode: 23
 * cpu_model: >= X86_Arch_80387
**/
bool X86Architecture::Table_fp6_e3(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_80387)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Fucom);
      if (Operand__ST3_ST0(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else
      return false;
}

/** instruction
 * mnemonic: fucom
 * operand: ['ST4', 'ST0']
 * opcode: 24
 * cpu_model: >= X86_Arch_80387
**/
bool X86Architecture::Table_fp6_e4(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_80387)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Fucom);
      if (Operand__ST4_ST0(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else
      return false;
}

/** instruction
 * mnemonic: fucom
 * operand: ['ST5', 'ST0']
 * opcode: 25
 * cpu_model: >= X86_Arch_80387
**/
bool X86Architecture::Table_fp6_e5(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_80387)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Fucom);
      if (Operand__ST5_ST0(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else
      return false;
}

/** instruction
 * mnemonic: fucom
 * operand: ['ST6', 'ST0']
 * opcode: 26
 * cpu_model: >= X86_Arch_80387
**/
bool X86Architecture::Table_fp6_e6(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_80387)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Fucom);
      if (Operand__ST6_ST0(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else
      return false;
}

/** instruction
 * mnemonic: fucom
 * operand: ['ST7', 'ST0']
 * opcode: 27
 * cpu_model: >= X86_Arch_80387
**/
bool X86Architecture::Table_fp6_e7(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_80387)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Fucom);
      if (Operand__ST7_ST0(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else
      return false;
}

/** instruction
 * mnemonic: fucomp
 * operand: ['ST0']
 * opcode: 28
 * cpu_model: >= X86_Arch_80387
**/
bool X86Architecture::Table_fp6_e8(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_80387)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Fucomp);
      if (Operand__ST0(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else
      return false;
}

/** instruction
 * mnemonic: fucomp
 * operand: ['ST1']
 * opcode: 29
 * cpu_model: >= X86_Arch_80387
**/
bool X86Architecture::Table_fp6_e9(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_80387)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Fucomp);
      if (Operand__ST1(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else
      return false;
}

/** instruction
 * mnemonic: fucomp
 * operand: ['ST2']
 * opcode: 2a
 * cpu_model: >= X86_Arch_80387
**/
bool X86Architecture::Table_fp6_ea(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_80387)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Fucomp);
      if (Operand__ST2(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else
      return false;
}

/** instruction
 * mnemonic: fucomp
 * operand: ['ST3']
 * opcode: 2b
 * cpu_model: >= X86_Arch_80387
**/
bool X86Architecture::Table_fp6_eb(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_80387)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Fucomp);
      if (Operand__ST3(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else
      return false;
}

/** instruction
 * mnemonic: fucomp
 * operand: ['ST4']
 * opcode: 2c
 * cpu_model: >= X86_Arch_80387
**/
bool X86Architecture::Table_fp6_ec(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_80387)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Fucomp);
      if (Operand__ST4(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else
      return false;
}

/** instruction
 * mnemonic: fucomp
 * operand: ['ST5']
 * opcode: 2d
 * cpu_model: >= X86_Arch_80387
**/
bool X86Architecture::Table_fp6_ed(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_80387)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Fucomp);
      if (Operand__ST5(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else
      return false;
}

/** instruction
 * mnemonic: fucomp
 * operand: ['ST6']
 * opcode: 2e
 * cpu_model: >= X86_Arch_80387
**/
bool X86Architecture::Table_fp6_ee(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_80387)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Fucomp);
      if (Operand__ST6(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else
      return false;
}

/** instruction
 * mnemonic: fucomp
 * operand: ['ST7']
 * opcode: 2f
 * cpu_model: >= X86_Arch_80387
**/
bool X86Architecture::Table_fp6_ef(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_80387)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Fucomp);
      if (Operand__ST7(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else
      return false;
}

/** instruction
 * opcode: 30
 * invalid
**/
bool X86Architecture::Table_fp6_f0(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 31
 * invalid
**/
bool X86Architecture::Table_fp6_f1(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 32
 * invalid
**/
bool X86Architecture::Table_fp6_f2(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 33
 * invalid
**/
bool X86Architecture::Table_fp6_f3(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 34
 * invalid
**/
bool X86Architecture::Table_fp6_f4(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 35
 * invalid
**/
bool X86Architecture::Table_fp6_f5(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 36
 * invalid
**/
bool X86Architecture::Table_fp6_f6(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 37
 * invalid
**/
bool X86Architecture::Table_fp6_f7(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 38
 * invalid
**/
bool X86Architecture::Table_fp6_f8(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 39
 * invalid
**/
bool X86Architecture::Table_fp6_f9(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 3a
 * invalid
**/
bool X86Architecture::Table_fp6_fa(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 3b
 * invalid
**/
bool X86Architecture::Table_fp6_fb(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instructions
 * opcode: 3c
 *
 * invalid
 *
 * mnemonic: frichop
 * attr: ['cyrix']
 *
**/
bool X86Architecture::Table_fp6_fc(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Vendor") == X86_ProcType_CYRIX)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Frichop);
      return true;
    }
    else
    {
      return false; /* INVALID */
    }
}

/** instruction
 * opcode: 3d
 * invalid
**/
bool X86Architecture::Table_fp6_fd(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 3e
 * invalid
**/
bool X86Architecture::Table_fp6_fe(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 3f
 * invalid
**/
bool X86Architecture::Table_fp6_ff(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * mnemonic: faddp
 * operand: ['ST0', 'ST0']
 * opcode: 00
**/
bool X86Architecture::Table_fp7_c0(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Faddp);
    if (Operand__ST0_ST0(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: faddp
 * operand: ['ST1', 'ST0']
 * opcode: 01
**/
bool X86Architecture::Table_fp7_c1(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Faddp);
    if (Operand__ST1_ST0(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: faddp
 * operand: ['ST2', 'ST0']
 * opcode: 02
**/
bool X86Architecture::Table_fp7_c2(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Faddp);
    if (Operand__ST2_ST0(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: faddp
 * operand: ['ST3', 'ST0']
 * opcode: 03
**/
bool X86Architecture::Table_fp7_c3(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Faddp);
    if (Operand__ST3_ST0(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: faddp
 * operand: ['ST4', 'ST0']
 * opcode: 04
**/
bool X86Architecture::Table_fp7_c4(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Faddp);
    if (Operand__ST4_ST0(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: faddp
 * operand: ['ST5', 'ST0']
 * opcode: 05
**/
bool X86Architecture::Table_fp7_c5(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Faddp);
    if (Operand__ST5_ST0(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: faddp
 * operand: ['ST6', 'ST0']
 * opcode: 06
**/
bool X86Architecture::Table_fp7_c6(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Faddp);
    if (Operand__ST6_ST0(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: faddp
 * operand: ['ST7', 'ST0']
 * opcode: 07
**/
bool X86Architecture::Table_fp7_c7(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Faddp);
    if (Operand__ST7_ST0(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fmulp
 * operand: ['ST0', 'ST0']
 * opcode: 08
**/
bool X86Architecture::Table_fp7_c8(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fmulp);
    if (Operand__ST0_ST0(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fmulp
 * operand: ['ST1', 'ST0']
 * opcode: 09
**/
bool X86Architecture::Table_fp7_c9(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fmulp);
    if (Operand__ST1_ST0(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fmulp
 * operand: ['ST2', 'ST0']
 * opcode: 0a
**/
bool X86Architecture::Table_fp7_ca(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fmulp);
    if (Operand__ST2_ST0(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fmulp
 * operand: ['ST3', 'ST0']
 * opcode: 0b
**/
bool X86Architecture::Table_fp7_cb(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fmulp);
    if (Operand__ST3_ST0(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fmulp
 * operand: ['ST4', 'ST0']
 * opcode: 0c
**/
bool X86Architecture::Table_fp7_cc(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fmulp);
    if (Operand__ST4_ST0(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fmulp
 * operand: ['ST5', 'ST0']
 * opcode: 0d
**/
bool X86Architecture::Table_fp7_cd(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fmulp);
    if (Operand__ST5_ST0(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fmulp
 * operand: ['ST6', 'ST0']
 * opcode: 0e
**/
bool X86Architecture::Table_fp7_ce(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fmulp);
    if (Operand__ST6_ST0(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fmulp
 * operand: ['ST7', 'ST0']
 * opcode: 0f
**/
bool X86Architecture::Table_fp7_cf(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fmulp);
    if (Operand__ST7_ST0(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fcomp
 * operand: ['ST0']
 * opcode: 10
**/
bool X86Architecture::Table_fp7_d0(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fcomp);
    if (Operand__ST0(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fcomp
 * operand: ['ST1']
 * opcode: 11
**/
bool X86Architecture::Table_fp7_d1(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fcomp);
    if (Operand__ST1(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fcomp
 * operand: ['ST2']
 * opcode: 12
**/
bool X86Architecture::Table_fp7_d2(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fcomp);
    if (Operand__ST2(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fcomp
 * operand: ['ST3']
 * opcode: 13
**/
bool X86Architecture::Table_fp7_d3(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fcomp);
    if (Operand__ST3(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fcomp
 * operand: ['ST4']
 * opcode: 14
**/
bool X86Architecture::Table_fp7_d4(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fcomp);
    if (Operand__ST4(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fcomp
 * operand: ['ST5']
 * opcode: 15
**/
bool X86Architecture::Table_fp7_d5(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fcomp);
    if (Operand__ST5(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fcomp
 * operand: ['ST6']
 * opcode: 16
**/
bool X86Architecture::Table_fp7_d6(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fcomp);
    if (Operand__ST6(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fcomp
 * operand: ['ST7']
 * opcode: 17
**/
bool X86Architecture::Table_fp7_d7(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fcomp);
    if (Operand__ST7(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * opcode: 18
 * invalid
**/
bool X86Architecture::Table_fp7_d8(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * mnemonic: fcompp
 * opcode: 19
**/
bool X86Architecture::Table_fp7_d9(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fcompp);
    return true;
}

/** instruction
 * opcode: 1a
 * invalid
**/
bool X86Architecture::Table_fp7_da(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 1b
 * invalid
**/
bool X86Architecture::Table_fp7_db(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 1c
 * invalid
**/
bool X86Architecture::Table_fp7_dc(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 1d
 * invalid
**/
bool X86Architecture::Table_fp7_dd(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 1e
 * invalid
**/
bool X86Architecture::Table_fp7_de(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 1f
 * invalid
**/
bool X86Architecture::Table_fp7_df(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * mnemonic: fsubrp
 * operand: ['ST0', 'ST0']
 * opcode: 20
**/
bool X86Architecture::Table_fp7_e0(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fsubrp);
    if (Operand__ST0_ST0(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fsubrp
 * operand: ['ST1', 'ST0']
 * opcode: 21
**/
bool X86Architecture::Table_fp7_e1(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fsubrp);
    if (Operand__ST1_ST0(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fsubrp
 * operand: ['ST2', 'ST0']
 * opcode: 22
**/
bool X86Architecture::Table_fp7_e2(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fsubrp);
    if (Operand__ST2_ST0(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fsubrp
 * operand: ['ST3', 'ST0']
 * opcode: 23
**/
bool X86Architecture::Table_fp7_e3(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fsubrp);
    if (Operand__ST3_ST0(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fsubrp
 * operand: ['ST4', 'ST0']
 * opcode: 24
**/
bool X86Architecture::Table_fp7_e4(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fsubrp);
    if (Operand__ST4_ST0(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fsubrp
 * operand: ['ST5', 'ST0']
 * opcode: 25
**/
bool X86Architecture::Table_fp7_e5(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fsubrp);
    if (Operand__ST5_ST0(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fsubrp
 * operand: ['ST6', 'ST0']
 * opcode: 26
**/
bool X86Architecture::Table_fp7_e6(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fsubrp);
    if (Operand__ST6_ST0(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fsubrp
 * operand: ['ST7', 'ST0']
 * opcode: 27
**/
bool X86Architecture::Table_fp7_e7(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fsubrp);
    if (Operand__ST7_ST0(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fsubp
 * operand: ['ST0', 'ST0']
 * opcode: 28
**/
bool X86Architecture::Table_fp7_e8(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fsubp);
    if (Operand__ST0_ST0(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fsubp
 * operand: ['ST1', 'ST0']
 * opcode: 29
**/
bool X86Architecture::Table_fp7_e9(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fsubp);
    if (Operand__ST1_ST0(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fsubp
 * operand: ['ST2', 'ST0']
 * opcode: 2a
**/
bool X86Architecture::Table_fp7_ea(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fsubp);
    if (Operand__ST2_ST0(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fsubp
 * operand: ['ST3', 'ST0']
 * opcode: 2b
**/
bool X86Architecture::Table_fp7_eb(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fsubp);
    if (Operand__ST3_ST0(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fsubp
 * operand: ['ST4', 'ST0']
 * opcode: 2c
**/
bool X86Architecture::Table_fp7_ec(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fsubp);
    if (Operand__ST4_ST0(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fsubp
 * operand: ['ST5', 'ST0']
 * opcode: 2d
**/
bool X86Architecture::Table_fp7_ed(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fsubp);
    if (Operand__ST5_ST0(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fsubp
 * operand: ['ST6', 'ST0']
 * opcode: 2e
**/
bool X86Architecture::Table_fp7_ee(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fsubp);
    if (Operand__ST6_ST0(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fsubp
 * operand: ['ST7', 'ST0']
 * opcode: 2f
**/
bool X86Architecture::Table_fp7_ef(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fsubp);
    if (Operand__ST7_ST0(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fdivrp
 * operand: ['ST0', 'ST0']
 * opcode: 30
**/
bool X86Architecture::Table_fp7_f0(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fdivrp);
    if (Operand__ST0_ST0(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fdivrp
 * operand: ['ST1', 'ST0']
 * opcode: 31
**/
bool X86Architecture::Table_fp7_f1(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fdivrp);
    if (Operand__ST1_ST0(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fdivrp
 * operand: ['ST2', 'ST0']
 * opcode: 32
**/
bool X86Architecture::Table_fp7_f2(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fdivrp);
    if (Operand__ST2_ST0(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fdivrp
 * operand: ['ST3', 'ST0']
 * opcode: 33
**/
bool X86Architecture::Table_fp7_f3(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fdivrp);
    if (Operand__ST3_ST0(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fdivrp
 * operand: ['ST4', 'ST0']
 * opcode: 34
**/
bool X86Architecture::Table_fp7_f4(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fdivrp);
    if (Operand__ST4_ST0(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fdivrp
 * operand: ['ST5', 'ST0']
 * opcode: 35
**/
bool X86Architecture::Table_fp7_f5(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fdivrp);
    if (Operand__ST5_ST0(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fdivrp
 * operand: ['ST6', 'ST0']
 * opcode: 36
**/
bool X86Architecture::Table_fp7_f6(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fdivrp);
    if (Operand__ST6_ST0(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fdivrp
 * operand: ['ST7', 'ST0']
 * opcode: 37
**/
bool X86Architecture::Table_fp7_f7(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fdivrp);
    if (Operand__ST7_ST0(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fdivp
 * operand: ['ST0', 'ST0']
 * opcode: 38
**/
bool X86Architecture::Table_fp7_f8(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fdivp);
    if (Operand__ST0_ST0(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fdivp
 * operand: ['ST1', 'ST0']
 * opcode: 39
**/
bool X86Architecture::Table_fp7_f9(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fdivp);
    if (Operand__ST1_ST0(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fdivp
 * operand: ['ST2', 'ST0']
 * opcode: 3a
**/
bool X86Architecture::Table_fp7_fa(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fdivp);
    if (Operand__ST2_ST0(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fdivp
 * operand: ['ST3', 'ST0']
 * opcode: 3b
**/
bool X86Architecture::Table_fp7_fb(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fdivp);
    if (Operand__ST3_ST0(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fdivp
 * operand: ['ST4', 'ST0']
 * opcode: 3c
**/
bool X86Architecture::Table_fp7_fc(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fdivp);
    if (Operand__ST4_ST0(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fdivp
 * operand: ['ST5', 'ST0']
 * opcode: 3d
**/
bool X86Architecture::Table_fp7_fd(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fdivp);
    if (Operand__ST5_ST0(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fdivp
 * operand: ['ST6', 'ST0']
 * opcode: 3e
**/
bool X86Architecture::Table_fp7_fe(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fdivp);
    if (Operand__ST6_ST0(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fdivp
 * operand: ['ST7', 'ST0']
 * opcode: 3f
**/
bool X86Architecture::Table_fp7_ff(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fdivp);
    if (Operand__ST7_ST0(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: ffreep
 * operand: ['ST0']
 * opcode: 00
**/
bool X86Architecture::Table_fp8_c0(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Ffreep);
    if (Operand__ST0(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: ffreep
 * operand: ['ST1']
 * opcode: 01
**/
bool X86Architecture::Table_fp8_c1(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Ffreep);
    if (Operand__ST1(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: ffreep
 * operand: ['ST2']
 * opcode: 02
**/
bool X86Architecture::Table_fp8_c2(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Ffreep);
    if (Operand__ST2(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: ffreep
 * operand: ['ST3']
 * opcode: 03
**/
bool X86Architecture::Table_fp8_c3(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Ffreep);
    if (Operand__ST3(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: ffreep
 * operand: ['ST4']
 * opcode: 04
**/
bool X86Architecture::Table_fp8_c4(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Ffreep);
    if (Operand__ST4(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: ffreep
 * operand: ['ST5']
 * opcode: 05
**/
bool X86Architecture::Table_fp8_c5(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Ffreep);
    if (Operand__ST5(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: ffreep
 * operand: ['ST6']
 * opcode: 06
**/
bool X86Architecture::Table_fp8_c6(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Ffreep);
    if (Operand__ST6(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: ffreep
 * operand: ['ST7']
 * opcode: 07
**/
bool X86Architecture::Table_fp8_c7(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Ffreep);
    if (Operand__ST7(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fxch
 * operand: ['ST0']
 * opcode: 08
**/
bool X86Architecture::Table_fp8_c8(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fxch);
    if (Operand__ST0(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fxch
 * operand: ['ST1']
 * opcode: 09
**/
bool X86Architecture::Table_fp8_c9(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fxch);
    if (Operand__ST1(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fxch
 * operand: ['ST2']
 * opcode: 0a
**/
bool X86Architecture::Table_fp8_ca(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fxch);
    if (Operand__ST2(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fxch
 * operand: ['ST3']
 * opcode: 0b
**/
bool X86Architecture::Table_fp8_cb(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fxch);
    if (Operand__ST3(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fxch
 * operand: ['ST4']
 * opcode: 0c
**/
bool X86Architecture::Table_fp8_cc(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fxch);
    if (Operand__ST4(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fxch
 * operand: ['ST5']
 * opcode: 0d
**/
bool X86Architecture::Table_fp8_cd(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fxch);
    if (Operand__ST5(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fxch
 * operand: ['ST6']
 * opcode: 0e
**/
bool X86Architecture::Table_fp8_ce(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fxch);
    if (Operand__ST6(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fxch
 * operand: ['ST7']
 * opcode: 0f
**/
bool X86Architecture::Table_fp8_cf(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fxch);
    if (Operand__ST7(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fstp
 * operand: ['ST0']
 * opcode: 10
**/
bool X86Architecture::Table_fp8_d0(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fstp);
    if (Operand__ST0(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fstp
 * operand: ['ST1']
 * opcode: 11
**/
bool X86Architecture::Table_fp8_d1(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fstp);
    if (Operand__ST1(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fstp
 * operand: ['ST2']
 * opcode: 12
**/
bool X86Architecture::Table_fp8_d2(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fstp);
    if (Operand__ST2(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fstp
 * operand: ['ST3']
 * opcode: 13
**/
bool X86Architecture::Table_fp8_d3(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fstp);
    if (Operand__ST3(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fstp
 * operand: ['ST4']
 * opcode: 14
**/
bool X86Architecture::Table_fp8_d4(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fstp);
    if (Operand__ST4(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fstp
 * operand: ['ST5']
 * opcode: 15
**/
bool X86Architecture::Table_fp8_d5(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fstp);
    if (Operand__ST5(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fstp
 * operand: ['ST6']
 * opcode: 16
**/
bool X86Architecture::Table_fp8_d6(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fstp);
    if (Operand__ST6(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fstp
 * operand: ['ST7']
 * opcode: 17
**/
bool X86Architecture::Table_fp8_d7(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fstp);
    if (Operand__ST7(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fstp
 * operand: ['ST0']
 * opcode: 18
**/
bool X86Architecture::Table_fp8_d8(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fstp);
    if (Operand__ST0(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fstp
 * operand: ['ST1']
 * opcode: 19
**/
bool X86Architecture::Table_fp8_d9(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fstp);
    if (Operand__ST1(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fstp
 * operand: ['ST2']
 * opcode: 1a
**/
bool X86Architecture::Table_fp8_da(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fstp);
    if (Operand__ST2(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fstp
 * operand: ['ST3']
 * opcode: 1b
**/
bool X86Architecture::Table_fp8_db(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fstp);
    if (Operand__ST3(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fstp
 * operand: ['ST4']
 * opcode: 1c
**/
bool X86Architecture::Table_fp8_dc(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fstp);
    if (Operand__ST4(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fstp
 * operand: ['ST5']
 * opcode: 1d
**/
bool X86Architecture::Table_fp8_dd(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fstp);
    if (Operand__ST5(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fstp
 * operand: ['ST6']
 * opcode: 1e
**/
bool X86Architecture::Table_fp8_de(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fstp);
    if (Operand__ST6(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fstp
 * operand: ['ST7']
 * opcode: 1f
**/
bool X86Architecture::Table_fp8_df(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fstp);
    if (Operand__ST7(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fnstsw
 * operand: ['AX']
 * opcode: 20
 * cpu_model: >= X86_Arch_80287
**/
bool X86Architecture::Table_fp8_e0(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_80287)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Fnstsw);
      if (Operand__AX(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else
      return false;
}

/** instructions
 * opcode: 21
 *
 * invalid
 *
 * mnemonic: fstdw
 * operand: ['AX']
 * cpu_model: == X86_Arch_80387sl
 *
**/
bool X86Architecture::Table_fp8_e1(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") == X86_Arch_80387sl)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Fstdw);
      if (Operand__AX(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else
    {
      return false; /* INVALID */
    }
}

/** instructions
 * opcode: 22
 *
 * invalid
 *
 * mnemonic: fstsg
 * operand: ['AX']
 * cpu_model: == X86_Arch_80387sl
 *
**/
bool X86Architecture::Table_fp8_e2(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") == X86_Arch_80387sl)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Fstsg);
      if (Operand__AX(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else
    {
      return false; /* INVALID */
    }
}

/** instruction
 * opcode: 23
 * invalid
**/
bool X86Architecture::Table_fp8_e3(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 24
 * invalid
**/
bool X86Architecture::Table_fp8_e4(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 25
 * invalid
**/
bool X86Architecture::Table_fp8_e5(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 26
 * invalid
**/
bool X86Architecture::Table_fp8_e6(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 27
 * invalid
**/
bool X86Architecture::Table_fp8_e7(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * mnemonic: fucomip
 * operand: ['ST0', 'ST0']
 * opcode: 28
**/
bool X86Architecture::Table_fp8_e8(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fucomip);
    if (Operand__ST0_ST0(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fucomip
 * operand: ['ST0', 'ST1']
 * opcode: 29
**/
bool X86Architecture::Table_fp8_e9(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fucomip);
    if (Operand__ST0_ST1(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fucomip
 * operand: ['ST0', 'ST2']
 * opcode: 2a
**/
bool X86Architecture::Table_fp8_ea(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fucomip);
    if (Operand__ST0_ST2(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fucomip
 * operand: ['ST0', 'ST3']
 * opcode: 2b
**/
bool X86Architecture::Table_fp8_eb(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fucomip);
    if (Operand__ST0_ST3(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fucomip
 * operand: ['ST0', 'ST4']
 * opcode: 2c
**/
bool X86Architecture::Table_fp8_ec(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fucomip);
    if (Operand__ST0_ST4(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fucomip
 * operand: ['ST0', 'ST5']
 * opcode: 2d
**/
bool X86Architecture::Table_fp8_ed(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fucomip);
    if (Operand__ST0_ST5(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fucomip
 * operand: ['ST0', 'ST6']
 * opcode: 2e
**/
bool X86Architecture::Table_fp8_ee(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fucomip);
    if (Operand__ST0_ST6(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fucomip
 * operand: ['ST0', 'ST7']
 * opcode: 2f
**/
bool X86Architecture::Table_fp8_ef(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fucomip);
    if (Operand__ST0_ST7(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fcomip
 * operand: ['ST0', 'ST0']
 * opcode: 30
**/
bool X86Architecture::Table_fp8_f0(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fcomip);
    if (Operand__ST0_ST0(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fcomip
 * operand: ['ST0', 'ST1']
 * opcode: 31
**/
bool X86Architecture::Table_fp8_f1(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fcomip);
    if (Operand__ST0_ST1(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fcomip
 * operand: ['ST0', 'ST2']
 * opcode: 32
**/
bool X86Architecture::Table_fp8_f2(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fcomip);
    if (Operand__ST0_ST2(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fcomip
 * operand: ['ST0', 'ST3']
 * opcode: 33
**/
bool X86Architecture::Table_fp8_f3(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fcomip);
    if (Operand__ST0_ST3(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fcomip
 * operand: ['ST0', 'ST4']
 * opcode: 34
**/
bool X86Architecture::Table_fp8_f4(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fcomip);
    if (Operand__ST0_ST4(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fcomip
 * operand: ['ST0', 'ST5']
 * opcode: 35
**/
bool X86Architecture::Table_fp8_f5(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fcomip);
    if (Operand__ST0_ST5(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fcomip
 * operand: ['ST0', 'ST6']
 * opcode: 36
**/
bool X86Architecture::Table_fp8_f6(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fcomip);
    if (Operand__ST0_ST6(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: fcomip
 * operand: ['ST0', 'ST7']
 * opcode: 37
**/
bool X86Architecture::Table_fp8_f7(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Length()++;
    rInsn.SetOpcode(X86_Opcode_Fcomip);
    if (Operand__ST0_ST7(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * opcode: 38
 * invalid
**/
bool X86Architecture::Table_fp8_f8(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 39
 * invalid
**/
bool X86Architecture::Table_fp8_f9(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 3a
 * invalid
**/
bool X86Architecture::Table_fp8_fa(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 3b
 * invalid
**/
bool X86Architecture::Table_fp8_fb(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instructions
 * opcode: 3c
 *
 * invalid
 *
 * mnemonic: frinear
 * attr: ['cyrix']
 *
**/
bool X86Architecture::Table_fp8_fc(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Vendor") == X86_ProcType_CYRIX)
    {
      rInsn.Length()++;
      rInsn.SetOpcode(X86_Opcode_Frinear);
      return true;
    }
    else
    {
      return false; /* INVALID */
    }
}

/** instruction
 * opcode: 3d
 * invalid
**/
bool X86Architecture::Table_fp8_fd(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 3e
 * invalid
**/
bool X86Architecture::Table_fp8_fe(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 3f
 * invalid
**/
bool X86Architecture::Table_fp8_ff(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 00
 * invalid
**/
bool X86Architecture::Table_sse5a_00(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 01
 * invalid
**/
bool X86Architecture::Table_sse5a_01(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 02
 * invalid
**/
bool X86Architecture::Table_sse5a_02(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 03
 * invalid
**/
bool X86Architecture::Table_sse5a_03(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 04
 * invalid
**/
bool X86Architecture::Table_sse5a_04(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 05
 * invalid
**/
bool X86Architecture::Table_sse5a_05(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 06
 * invalid
**/
bool X86Architecture::Table_sse5a_06(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 07
 * invalid
**/
bool X86Architecture::Table_sse5a_07(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 08
 * invalid
**/
bool X86Architecture::Table_sse5a_08(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 09
 * invalid
**/
bool X86Architecture::Table_sse5a_09(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 0a
 * invalid
**/
bool X86Architecture::Table_sse5a_0a(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 0b
 * invalid
**/
bool X86Architecture::Table_sse5a_0b(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 0c
 * invalid
**/
bool X86Architecture::Table_sse5a_0c(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 0d
 * invalid
**/
bool X86Architecture::Table_sse5a_0d(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 0e
 * invalid
**/
bool X86Architecture::Table_sse5a_0e(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 0f
 * invalid
**/
bool X86Architecture::Table_sse5a_0f(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 10
 * invalid
**/
bool X86Architecture::Table_sse5a_10(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 11
 * invalid
**/
bool X86Architecture::Table_sse5a_11(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 12
 * invalid
**/
bool X86Architecture::Table_sse5a_12(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 13
 * invalid
**/
bool X86Architecture::Table_sse5a_13(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 14
 * invalid
**/
bool X86Architecture::Table_sse5a_14(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 15
 * invalid
**/
bool X86Architecture::Table_sse5a_15(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 16
 * invalid
**/
bool X86Architecture::Table_sse5a_16(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 17
 * invalid
**/
bool X86Architecture::Table_sse5a_17(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 18
 * invalid
**/
bool X86Architecture::Table_sse5a_18(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 19
 * invalid
**/
bool X86Architecture::Table_sse5a_19(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 1a
 * invalid
**/
bool X86Architecture::Table_sse5a_1a(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 1b
 * invalid
**/
bool X86Architecture::Table_sse5a_1b(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 1c
 * invalid
**/
bool X86Architecture::Table_sse5a_1c(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 1d
 * invalid
**/
bool X86Architecture::Table_sse5a_1d(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 1e
 * invalid
**/
bool X86Architecture::Table_sse5a_1e(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 1f
 * invalid
**/
bool X86Architecture::Table_sse5a_1f(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 20
 * invalid
**/
bool X86Architecture::Table_sse5a_20(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 21
 * invalid
**/
bool X86Architecture::Table_sse5a_21(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 22
 * invalid
**/
bool X86Architecture::Table_sse5a_22(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 23
 * invalid
**/
bool X86Architecture::Table_sse5a_23(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 24
 * invalid
**/
bool X86Architecture::Table_sse5a_24(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 25
 * invalid
**/
bool X86Architecture::Table_sse5a_25(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 26
 * invalid
**/
bool X86Architecture::Table_sse5a_26(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 27
 * invalid
**/
bool X86Architecture::Table_sse5a_27(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 28
 * invalid
**/
bool X86Architecture::Table_sse5a_28(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 29
 * invalid
**/
bool X86Architecture::Table_sse5a_29(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 2a
 * invalid
**/
bool X86Architecture::Table_sse5a_2a(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 2b
 * invalid
**/
bool X86Architecture::Table_sse5a_2b(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 2c
 * invalid
**/
bool X86Architecture::Table_sse5a_2c(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 2d
 * invalid
**/
bool X86Architecture::Table_sse5a_2d(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 2e
 * invalid
**/
bool X86Architecture::Table_sse5a_2e(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 2f
 * invalid
**/
bool X86Architecture::Table_sse5a_2f(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 30
 * invalid
**/
bool X86Architecture::Table_sse5a_30(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 31
 * invalid
**/
bool X86Architecture::Table_sse5a_31(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 32
 * invalid
**/
bool X86Architecture::Table_sse5a_32(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 33
 * invalid
**/
bool X86Architecture::Table_sse5a_33(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 34
 * invalid
**/
bool X86Architecture::Table_sse5a_34(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 35
 * invalid
**/
bool X86Architecture::Table_sse5a_35(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 36
 * invalid
**/
bool X86Architecture::Table_sse5a_36(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 37
 * invalid
**/
bool X86Architecture::Table_sse5a_37(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 38
 * invalid
**/
bool X86Architecture::Table_sse5a_38(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 39
 * invalid
**/
bool X86Architecture::Table_sse5a_39(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 3a
 * invalid
**/
bool X86Architecture::Table_sse5a_3a(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 3b
 * invalid
**/
bool X86Architecture::Table_sse5a_3b(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 3c
 * invalid
**/
bool X86Architecture::Table_sse5a_3c(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 3d
 * invalid
**/
bool X86Architecture::Table_sse5a_3d(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 3e
 * invalid
**/
bool X86Architecture::Table_sse5a_3e(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 3f
 * invalid
**/
bool X86Architecture::Table_sse5a_3f(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 40
 * invalid
**/
bool X86Architecture::Table_sse5a_40(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 41
 * invalid
**/
bool X86Architecture::Table_sse5a_41(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 42
 * invalid
**/
bool X86Architecture::Table_sse5a_42(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 43
 * invalid
**/
bool X86Architecture::Table_sse5a_43(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 44
 * invalid
**/
bool X86Architecture::Table_sse5a_44(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 45
 * invalid
**/
bool X86Architecture::Table_sse5a_45(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 46
 * invalid
**/
bool X86Architecture::Table_sse5a_46(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 47
 * invalid
**/
bool X86Architecture::Table_sse5a_47(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 48
 * invalid
**/
bool X86Architecture::Table_sse5a_48(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 49
 * invalid
**/
bool X86Architecture::Table_sse5a_49(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 4a
 * invalid
**/
bool X86Architecture::Table_sse5a_4a(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 4b
 * invalid
**/
bool X86Architecture::Table_sse5a_4b(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 4c
 * invalid
**/
bool X86Architecture::Table_sse5a_4c(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 4d
 * invalid
**/
bool X86Architecture::Table_sse5a_4d(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 4e
 * invalid
**/
bool X86Architecture::Table_sse5a_4e(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 4f
 * invalid
**/
bool X86Architecture::Table_sse5a_4f(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 50
 * invalid
**/
bool X86Architecture::Table_sse5a_50(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 51
 * invalid
**/
bool X86Architecture::Table_sse5a_51(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 52
 * invalid
**/
bool X86Architecture::Table_sse5a_52(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 53
 * invalid
**/
bool X86Architecture::Table_sse5a_53(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 54
 * invalid
**/
bool X86Architecture::Table_sse5a_54(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 55
 * invalid
**/
bool X86Architecture::Table_sse5a_55(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 56
 * invalid
**/
bool X86Architecture::Table_sse5a_56(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 57
 * invalid
**/
bool X86Architecture::Table_sse5a_57(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 58
 * invalid
**/
bool X86Architecture::Table_sse5a_58(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 59
 * invalid
**/
bool X86Architecture::Table_sse5a_59(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 5a
 * invalid
**/
bool X86Architecture::Table_sse5a_5a(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 5b
 * invalid
**/
bool X86Architecture::Table_sse5a_5b(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 5c
 * invalid
**/
bool X86Architecture::Table_sse5a_5c(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 5d
 * invalid
**/
bool X86Architecture::Table_sse5a_5d(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 5e
 * invalid
**/
bool X86Architecture::Table_sse5a_5e(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 5f
 * invalid
**/
bool X86Architecture::Table_sse5a_5f(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 60
 * invalid
**/
bool X86Architecture::Table_sse5a_60(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 61
 * invalid
**/
bool X86Architecture::Table_sse5a_61(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 62
 * invalid
**/
bool X86Architecture::Table_sse5a_62(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 63
 * invalid
**/
bool X86Architecture::Table_sse5a_63(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 64
 * invalid
**/
bool X86Architecture::Table_sse5a_64(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 65
 * invalid
**/
bool X86Architecture::Table_sse5a_65(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 66
 * invalid
**/
bool X86Architecture::Table_sse5a_66(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 67
 * invalid
**/
bool X86Architecture::Table_sse5a_67(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 68
 * invalid
**/
bool X86Architecture::Table_sse5a_68(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 69
 * invalid
**/
bool X86Architecture::Table_sse5a_69(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 6a
 * invalid
**/
bool X86Architecture::Table_sse5a_6a(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 6b
 * invalid
**/
bool X86Architecture::Table_sse5a_6b(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 6c
 * invalid
**/
bool X86Architecture::Table_sse5a_6c(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 6d
 * invalid
**/
bool X86Architecture::Table_sse5a_6d(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 6e
 * invalid
**/
bool X86Architecture::Table_sse5a_6e(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 6f
 * invalid
**/
bool X86Architecture::Table_sse5a_6f(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 70
 * invalid
**/
bool X86Architecture::Table_sse5a_70(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 71
 * invalid
**/
bool X86Architecture::Table_sse5a_71(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 72
 * invalid
**/
bool X86Architecture::Table_sse5a_72(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 73
 * invalid
**/
bool X86Architecture::Table_sse5a_73(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 74
 * invalid
**/
bool X86Architecture::Table_sse5a_74(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 75
 * invalid
**/
bool X86Architecture::Table_sse5a_75(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 76
 * invalid
**/
bool X86Architecture::Table_sse5a_76(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 77
 * invalid
**/
bool X86Architecture::Table_sse5a_77(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 78
 * invalid
**/
bool X86Architecture::Table_sse5a_78(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 79
 * invalid
**/
bool X86Architecture::Table_sse5a_79(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 7a
 * invalid
**/
bool X86Architecture::Table_sse5a_7a(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 7b
 * invalid
**/
bool X86Architecture::Table_sse5a_7b(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 7c
 * invalid
**/
bool X86Architecture::Table_sse5a_7c(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 7d
 * invalid
**/
bool X86Architecture::Table_sse5a_7d(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 7e
 * invalid
**/
bool X86Architecture::Table_sse5a_7e(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 7f
 * invalid
**/
bool X86Architecture::Table_sse5a_7f(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 80
 * invalid
**/
bool X86Architecture::Table_sse5a_80(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 81
 * invalid
**/
bool X86Architecture::Table_sse5a_81(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 82
 * invalid
**/
bool X86Architecture::Table_sse5a_82(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 83
 * invalid
**/
bool X86Architecture::Table_sse5a_83(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 84
 * invalid
**/
bool X86Architecture::Table_sse5a_84(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 85
 * invalid
**/
bool X86Architecture::Table_sse5a_85(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 86
 * invalid
**/
bool X86Architecture::Table_sse5a_86(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 87
 * invalid
**/
bool X86Architecture::Table_sse5a_87(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 88
 * invalid
**/
bool X86Architecture::Table_sse5a_88(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 89
 * invalid
**/
bool X86Architecture::Table_sse5a_89(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 8a
 * invalid
**/
bool X86Architecture::Table_sse5a_8a(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 8b
 * invalid
**/
bool X86Architecture::Table_sse5a_8b(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 8c
 * invalid
**/
bool X86Architecture::Table_sse5a_8c(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 8d
 * invalid
**/
bool X86Architecture::Table_sse5a_8d(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 8e
 * invalid
**/
bool X86Architecture::Table_sse5a_8e(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 8f
 * invalid
**/
bool X86Architecture::Table_sse5a_8f(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 90
 * invalid
**/
bool X86Architecture::Table_sse5a_90(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 91
 * invalid
**/
bool X86Architecture::Table_sse5a_91(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 92
 * invalid
**/
bool X86Architecture::Table_sse5a_92(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 93
 * invalid
**/
bool X86Architecture::Table_sse5a_93(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 94
 * invalid
**/
bool X86Architecture::Table_sse5a_94(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 95
 * invalid
**/
bool X86Architecture::Table_sse5a_95(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 96
 * invalid
**/
bool X86Architecture::Table_sse5a_96(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 97
 * invalid
**/
bool X86Architecture::Table_sse5a_97(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 98
 * invalid
**/
bool X86Architecture::Table_sse5a_98(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 99
 * invalid
**/
bool X86Architecture::Table_sse5a_99(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 9a
 * invalid
**/
bool X86Architecture::Table_sse5a_9a(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 9b
 * invalid
**/
bool X86Architecture::Table_sse5a_9b(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 9c
 * invalid
**/
bool X86Architecture::Table_sse5a_9c(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 9d
 * invalid
**/
bool X86Architecture::Table_sse5a_9d(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 9e
 * invalid
**/
bool X86Architecture::Table_sse5a_9e(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: 9f
 * invalid
**/
bool X86Architecture::Table_sse5a_9f(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: a0
 * invalid
**/
bool X86Architecture::Table_sse5a_a0(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: a1
 * invalid
**/
bool X86Architecture::Table_sse5a_a1(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: a2
 * invalid
**/
bool X86Architecture::Table_sse5a_a2(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: a3
 * invalid
**/
bool X86Architecture::Table_sse5a_a3(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: a4
 * invalid
**/
bool X86Architecture::Table_sse5a_a4(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: a5
 * invalid
**/
bool X86Architecture::Table_sse5a_a5(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: a6
 * invalid
**/
bool X86Architecture::Table_sse5a_a6(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: a7
 * invalid
**/
bool X86Architecture::Table_sse5a_a7(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: a8
 * invalid
**/
bool X86Architecture::Table_sse5a_a8(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: a9
 * invalid
**/
bool X86Architecture::Table_sse5a_a9(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: aa
 * invalid
**/
bool X86Architecture::Table_sse5a_aa(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: ab
 * invalid
**/
bool X86Architecture::Table_sse5a_ab(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: ac
 * invalid
**/
bool X86Architecture::Table_sse5a_ac(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: ad
 * invalid
**/
bool X86Architecture::Table_sse5a_ad(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: ae
 * invalid
**/
bool X86Architecture::Table_sse5a_ae(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: af
 * invalid
**/
bool X86Architecture::Table_sse5a_af(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: b0
 * invalid
**/
bool X86Architecture::Table_sse5a_b0(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: b1
 * invalid
**/
bool X86Architecture::Table_sse5a_b1(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: b2
 * invalid
**/
bool X86Architecture::Table_sse5a_b2(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: b3
 * invalid
**/
bool X86Architecture::Table_sse5a_b3(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: b4
 * invalid
**/
bool X86Architecture::Table_sse5a_b4(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: b5
 * invalid
**/
bool X86Architecture::Table_sse5a_b5(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: b6
 * invalid
**/
bool X86Architecture::Table_sse5a_b6(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: b7
 * invalid
**/
bool X86Architecture::Table_sse5a_b7(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: b8
 * invalid
**/
bool X86Architecture::Table_sse5a_b8(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: b9
 * invalid
**/
bool X86Architecture::Table_sse5a_b9(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: ba
 * invalid
**/
bool X86Architecture::Table_sse5a_ba(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: bb
 * invalid
**/
bool X86Architecture::Table_sse5a_bb(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: bc
 * invalid
**/
bool X86Architecture::Table_sse5a_bc(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: bd
 * invalid
**/
bool X86Architecture::Table_sse5a_bd(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: be
 * invalid
**/
bool X86Architecture::Table_sse5a_be(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: bf
 * invalid
**/
bool X86Architecture::Table_sse5a_bf(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: c0
 * invalid
**/
bool X86Architecture::Table_sse5a_c0(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: c1
 * invalid
**/
bool X86Architecture::Table_sse5a_c1(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: c2
 * invalid
**/
bool X86Architecture::Table_sse5a_c2(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: c3
 * invalid
**/
bool X86Architecture::Table_sse5a_c3(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: c4
 * invalid
**/
bool X86Architecture::Table_sse5a_c4(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: c5
 * invalid
**/
bool X86Architecture::Table_sse5a_c5(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: c6
 * invalid
**/
bool X86Architecture::Table_sse5a_c6(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: c7
 * invalid
**/
bool X86Architecture::Table_sse5a_c7(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: c8
 * invalid
**/
bool X86Architecture::Table_sse5a_c8(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: c9
 * invalid
**/
bool X86Architecture::Table_sse5a_c9(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: ca
 * invalid
**/
bool X86Architecture::Table_sse5a_ca(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: cb
 * invalid
**/
bool X86Architecture::Table_sse5a_cb(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: cc
 * invalid
**/
bool X86Architecture::Table_sse5a_cc(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: cd
 * invalid
**/
bool X86Architecture::Table_sse5a_cd(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: ce
 * invalid
**/
bool X86Architecture::Table_sse5a_ce(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: cf
 * invalid
**/
bool X86Architecture::Table_sse5a_cf(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: d0
 * invalid
**/
bool X86Architecture::Table_sse5a_d0(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: d1
 * invalid
**/
bool X86Architecture::Table_sse5a_d1(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: d2
 * invalid
**/
bool X86Architecture::Table_sse5a_d2(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: d3
 * invalid
**/
bool X86Architecture::Table_sse5a_d3(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: d4
 * invalid
**/
bool X86Architecture::Table_sse5a_d4(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: d5
 * invalid
**/
bool X86Architecture::Table_sse5a_d5(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: d6
 * invalid
**/
bool X86Architecture::Table_sse5a_d6(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: d7
 * invalid
**/
bool X86Architecture::Table_sse5a_d7(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: d8
 * invalid
**/
bool X86Architecture::Table_sse5a_d8(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: d9
 * invalid
**/
bool X86Architecture::Table_sse5a_d9(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: da
 * invalid
**/
bool X86Architecture::Table_sse5a_da(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: db
 * invalid
**/
bool X86Architecture::Table_sse5a_db(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: dc
 * invalid
**/
bool X86Architecture::Table_sse5a_dc(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: dd
 * invalid
**/
bool X86Architecture::Table_sse5a_dd(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: de
 * invalid
**/
bool X86Architecture::Table_sse5a_de(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: df
 * invalid
**/
bool X86Architecture::Table_sse5a_df(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: e0
 * invalid
**/
bool X86Architecture::Table_sse5a_e0(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: e1
 * invalid
**/
bool X86Architecture::Table_sse5a_e1(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: e2
 * invalid
**/
bool X86Architecture::Table_sse5a_e2(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: e3
 * invalid
**/
bool X86Architecture::Table_sse5a_e3(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: e4
 * invalid
**/
bool X86Architecture::Table_sse5a_e4(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: e5
 * invalid
**/
bool X86Architecture::Table_sse5a_e5(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: e6
 * invalid
**/
bool X86Architecture::Table_sse5a_e6(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: e7
 * invalid
**/
bool X86Architecture::Table_sse5a_e7(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: e8
 * invalid
**/
bool X86Architecture::Table_sse5a_e8(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: e9
 * invalid
**/
bool X86Architecture::Table_sse5a_e9(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: ea
 * invalid
**/
bool X86Architecture::Table_sse5a_ea(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: eb
 * invalid
**/
bool X86Architecture::Table_sse5a_eb(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: ec
 * invalid
**/
bool X86Architecture::Table_sse5a_ec(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: ed
 * invalid
**/
bool X86Architecture::Table_sse5a_ed(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: ee
 * invalid
**/
bool X86Architecture::Table_sse5a_ee(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: ef
 * invalid
**/
bool X86Architecture::Table_sse5a_ef(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: f0
 * invalid
**/
bool X86Architecture::Table_sse5a_f0(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: f1
 * invalid
**/
bool X86Architecture::Table_sse5a_f1(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: f2
 * invalid
**/
bool X86Architecture::Table_sse5a_f2(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: f3
 * invalid
**/
bool X86Architecture::Table_sse5a_f3(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: f4
 * invalid
**/
bool X86Architecture::Table_sse5a_f4(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: f5
 * invalid
**/
bool X86Architecture::Table_sse5a_f5(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: f6
 * invalid
**/
bool X86Architecture::Table_sse5a_f6(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: f7
 * invalid
**/
bool X86Architecture::Table_sse5a_f7(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: f8
 * invalid
**/
bool X86Architecture::Table_sse5a_f8(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: f9
 * invalid
**/
bool X86Architecture::Table_sse5a_f9(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: fa
 * invalid
**/
bool X86Architecture::Table_sse5a_fa(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: fb
 * invalid
**/
bool X86Architecture::Table_sse5a_fb(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: fc
 * invalid
**/
bool X86Architecture::Table_sse5a_fc(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: fd
 * invalid
**/
bool X86Architecture::Table_sse5a_fd(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: fe
 * invalid
**/
bool X86Architecture::Table_sse5a_fe(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/** instruction
 * opcode: ff
 * invalid
**/
bool X86Architecture::Table_sse5a_ff(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
    return false; /* INVALID */
}

/* operand ['op0 = decode_3'] */
bool X86Architecture::Operand__3(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_3
  auto spOprd0 = Decode_3(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  return true;
}

/* operand ['op0 = decode_AH', 'op1 = decode_Ib'] */
bool X86Architecture::Operand__AH_Ib(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_AH
  auto spOprd0 = Decode_AH(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  // operand1: op1 = decode_Ib
  auto spOprd1 = Decode_Ib(rBinStrm, Offset, rInsn, Mode);
  if (spOprd1 == nullptr)
    return false;
  rInsn.AddOperand(spOprd1);

  return true;
}

/* operand ['op0 = decode_AL', 'op1 = decode_DX'] */
bool X86Architecture::Operand__AL_DX(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_AL
  auto spOprd0 = Decode_AL(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  // operand1: op1 = decode_DX
  auto spOprd1 = Decode_DX(rBinStrm, Offset, rInsn, Mode);
  if (spOprd1 == nullptr)
    return false;
  rInsn.AddOperand(spOprd1);

  return true;
}

/* operand ['op0 = decode_AL', 'op1 = decode_Ib'] */
bool X86Architecture::Operand__AL_Ib(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_AL
  auto spOprd0 = Decode_AL(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  // operand1: op1 = decode_Ib
  auto spOprd1 = Decode_Ib(rBinStrm, Offset, rInsn, Mode);
  if (spOprd1 == nullptr)
    return false;
  rInsn.AddOperand(spOprd1);

  return true;
}

/* operand ['op0 = decode_AL', 'op1 = decode_Ob'] */
bool X86Architecture::Operand__AL_Ob(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_AL
  auto spOprd0 = Decode_AL(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  // operand1: op1 = decode_Ob
  auto spOprd1 = Decode_Ob(rBinStrm, Offset, rInsn, Mode);
  if (spOprd1 == nullptr)
    return false;
  rInsn.AddOperand(spOprd1);

  return true;
}

/* operand ['op0 = decode_AL', 'op1 = decode_Xb'] */
bool X86Architecture::Operand__AL_Xb(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_AL
  auto spOprd0 = Decode_AL(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  // operand1: op1 = decode_Xb
  auto spOprd1 = Decode_Xb(rBinStrm, Offset, rInsn, Mode);
  if (spOprd1 == nullptr)
    return false;
  rInsn.AddOperand(spOprd1);

  return true;
}

/* operand ['op0 = decode_AL', 'op1 = decode_Yb'] */
bool X86Architecture::Operand__AL_Yb(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_AL
  auto spOprd0 = Decode_AL(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  // operand1: op1 = decode_Yb
  auto spOprd1 = Decode_Yb(rBinStrm, Offset, rInsn, Mode);
  if (spOprd1 == nullptr)
    return false;
  rInsn.AddOperand(spOprd1);

  return true;
}

/* operand ['op0 = decode_AX'] */
bool X86Architecture::Operand__AX(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_AX
  auto spOprd0 = Decode_AX(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  return true;
}

/* operand ['op0 = decode_Ap'] */
bool X86Architecture::Operand__Ap(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_Ap
  auto spOprd0 = Decode_Ap(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  return true;
}

/* operand ['op0 = decode_BH', 'op1 = decode_Ib'] */
bool X86Architecture::Operand__BH_Ib(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_BH
  auto spOprd0 = Decode_BH(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  // operand1: op1 = decode_Ib
  auto spOprd1 = Decode_Ib(rBinStrm, Offset, rInsn, Mode);
  if (spOprd1 == nullptr)
    return false;
  rInsn.AddOperand(spOprd1);

  return true;
}

/* operand ['op0 = decode_BL', 'op1 = decode_Ib'] */
bool X86Architecture::Operand__BL_Ib(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_BL
  auto spOprd0 = Decode_BL(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  // operand1: op1 = decode_Ib
  auto spOprd1 = Decode_Ib(rBinStrm, Offset, rInsn, Mode);
  if (spOprd1 == nullptr)
    return false;
  rInsn.AddOperand(spOprd1);

  return true;
}

/* operand ['op0 = decode_By', 'op1 = decode_Ey'] */
bool X86Architecture::Operand__By_Ey(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_By
  auto spOprd0 = Decode_By(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  // operand1: op1 = decode_Ey
  auto spOprd1 = Decode_Ey(rBinStrm, Offset, rInsn, Mode);
  if (spOprd1 == nullptr)
    return false;
  rInsn.AddOperand(spOprd1);

  return true;
}

/* operand ['op0 = decode_By', 'op1 = decode_Ey', 'op2 = decode_Ib'] */
bool X86Architecture::Operand__By_Ey_Ib(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_By
  auto spOprd0 = Decode_By(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  // operand1: op1 = decode_Ey
  auto spOprd1 = Decode_Ey(rBinStrm, Offset, rInsn, Mode);
  if (spOprd1 == nullptr)
    return false;
  rInsn.AddOperand(spOprd1);

  // operand2: op2 = decode_Ib
  auto spOprd2 = Decode_Ib(rBinStrm, Offset, rInsn, Mode);
  if (spOprd2 == nullptr)
    return false;
  rInsn.AddOperand(spOprd2);

  return true;
}

/* operand ['op0 = decode_CH', 'op1 = decode_Ib'] */
bool X86Architecture::Operand__CH_Ib(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_CH
  auto spOprd0 = Decode_CH(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  // operand1: op1 = decode_Ib
  auto spOprd1 = Decode_Ib(rBinStrm, Offset, rInsn, Mode);
  if (spOprd1 == nullptr)
    return false;
  rInsn.AddOperand(spOprd1);

  return true;
}

/* operand ['op0 = decode_CL', 'op1 = decode_Ib'] */
bool X86Architecture::Operand__CL_Ib(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_CL
  auto spOprd0 = Decode_CL(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  // operand1: op1 = decode_Ib
  auto spOprd1 = Decode_Ib(rBinStrm, Offset, rInsn, Mode);
  if (spOprd1 == nullptr)
    return false;
  rInsn.AddOperand(spOprd1);

  return true;
}

/* operand ['op0 = decode_CS'] */
bool X86Architecture::Operand__CS(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_CS
  auto spOprd0 = Decode_CS(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  return true;
}

/* operand ['op0 = decode_DH', 'op1 = decode_Ib'] */
bool X86Architecture::Operand__DH_Ib(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_DH
  auto spOprd0 = Decode_DH(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  // operand1: op1 = decode_Ib
  auto spOprd1 = Decode_Ib(rBinStrm, Offset, rInsn, Mode);
  if (spOprd1 == nullptr)
    return false;
  rInsn.AddOperand(spOprd1);

  return true;
}

/* operand ['op0 = decode_DL', 'op1 = decode_Ib'] */
bool X86Architecture::Operand__DL_Ib(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_DL
  auto spOprd0 = Decode_DL(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  // operand1: op1 = decode_Ib
  auto spOprd1 = Decode_Ib(rBinStrm, Offset, rInsn, Mode);
  if (spOprd1 == nullptr)
    return false;
  rInsn.AddOperand(spOprd1);

  return true;
}

/* operand ['op0 = decode_DS'] */
bool X86Architecture::Operand__DS(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_DS
  auto spOprd0 = Decode_DS(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  return true;
}

/* operand ['op0 = decode_DX', 'op1 = decode_AL'] */
bool X86Architecture::Operand__DX_AL(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_DX
  auto spOprd0 = Decode_DX(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  // operand1: op1 = decode_AL
  auto spOprd1 = Decode_AL(rBinStrm, Offset, rInsn, Mode);
  if (spOprd1 == nullptr)
    return false;
  rInsn.AddOperand(spOprd1);

  return true;
}

/* operand ['op0 = decode_DX', 'op1 = decode_Xb'] */
bool X86Architecture::Operand__DX_Xb(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_DX
  auto spOprd0 = Decode_DX(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  // operand1: op1 = decode_Xb
  auto spOprd1 = Decode_Xb(rBinStrm, Offset, rInsn, Mode);
  if (spOprd1 == nullptr)
    return false;
  rInsn.AddOperand(spOprd1);

  return true;
}

/* operand ['op0 = decode_DX', 'op1 = decode_Xz'] */
bool X86Architecture::Operand__DX_Xz(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_DX
  auto spOprd0 = Decode_DX(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  // operand1: op1 = decode_Xz
  auto spOprd1 = Decode_Xz(rBinStrm, Offset, rInsn, Mode);
  if (spOprd1 == nullptr)
    return false;
  rInsn.AddOperand(spOprd1);

  return true;
}

/* operand ['op0 = decode_DX', 'op1 = decode_eAX'] */
bool X86Architecture::Operand__DX_eAX(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_DX
  auto spOprd0 = Decode_DX(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  // operand1: op1 = decode_eAX
  auto spOprd1 = Decode_eAX(rBinStrm, Offset, rInsn, Mode);
  if (spOprd1 == nullptr)
    return false;
  rInsn.AddOperand(spOprd1);

  return true;
}

/* operand ['op0 = decode_Dy', 'op1 = decode_Ry'] */
bool X86Architecture::Operand__Dy_Ry(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_Dy
  auto spOprd0 = Decode_Dy(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  // operand1: op1 = decode_Ry
  auto spOprd1 = Decode_Ry(rBinStrm, Offset, rInsn, Mode);
  if (spOprd1 == nullptr)
    return false;
  rInsn.AddOperand(spOprd1);

  return true;
}

/* operand ['op0 = decode_ES'] */
bool X86Architecture::Operand__ES(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_ES
  auto spOprd0 = Decode_ES(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  return true;
}

/* operand ['op0 = decode_Eb'] */
bool X86Architecture::Operand__Eb(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_Eb
  auto spOprd0 = Decode_Eb(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  return true;
}

/* operand ['op0 = decode_Eb', 'op1 = decode_1'] */
bool X86Architecture::Operand__Eb_1(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_Eb
  auto spOprd0 = Decode_Eb(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  // operand1: op1 = decode_1
  auto spOprd1 = Decode_1(rBinStrm, Offset, rInsn, Mode);
  if (spOprd1 == nullptr)
    return false;
  rInsn.AddOperand(spOprd1);

  return true;
}

/* operand ['op0 = decode_Eb', 'op1 = decode_CL'] */
bool X86Architecture::Operand__Eb_CL(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_Eb
  auto spOprd0 = Decode_Eb(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  // operand1: op1 = decode_CL
  auto spOprd1 = Decode_CL(rBinStrm, Offset, rInsn, Mode);
  if (spOprd1 == nullptr)
    return false;
  rInsn.AddOperand(spOprd1);

  return true;
}

/* operand ['op0 = decode_Eb', 'op1 = decode_Gb'] */
bool X86Architecture::Operand__Eb_Gb(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_Eb
  auto spOprd0 = Decode_Eb(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  // operand1: op1 = decode_Gb
  auto spOprd1 = Decode_Gb(rBinStrm, Offset, rInsn, Mode);
  if (spOprd1 == nullptr)
    return false;
  rInsn.AddOperand(spOprd1);

  return true;
}

/* operand ['last_len', 'op0 = decode_Eb', 'move_decode_offset(next_operand)', 'op1 = decode_Ib'] */
bool X86Architecture::Operand__Eb_Ib(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: last_len
  auto LastLen = rInsn.GetLength();
  // operand0: op0 = decode_Eb
  auto spOprd0 = Decode_Eb(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  // operand1: move_decode_offset(next_operand)
  Offset += (rInsn.GetLength() - LastLen);
  // operand1: op1 = decode_Ib
  auto spOprd1 = Decode_Ib(rBinStrm, Offset, rInsn, Mode);
  if (spOprd1 == nullptr)
    return false;
  rInsn.AddOperand(spOprd1);

  return true;
}

/* operand ['op0 = decode_Ed'] */
bool X86Architecture::Operand__Ed(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_Ed
  auto spOprd0 = Decode_Ed(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  return true;
}

/* operand ['op0 = decode_Ed', 'op1 = decode_Vo'] */
bool X86Architecture::Operand__Ed_Vo(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_Ed
  auto spOprd0 = Decode_Ed(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  // operand1: op1 = decode_Vo
  auto spOprd1 = Decode_Vo(rBinStrm, Offset, rInsn, Mode);
  if (spOprd1 == nullptr)
    return false;
  rInsn.AddOperand(spOprd1);

  return true;
}

/* operand ['op0 = decode_Ev'] */
bool X86Architecture::Operand__Ev(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_Ev
  auto spOprd0 = Decode_Ev(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  return true;
}

/* operand ['op0 = decode_Ev', 'op1 = decode_1'] */
bool X86Architecture::Operand__Ev_1(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_Ev
  auto spOprd0 = Decode_Ev(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  // operand1: op1 = decode_1
  auto spOprd1 = Decode_1(rBinStrm, Offset, rInsn, Mode);
  if (spOprd1 == nullptr)
    return false;
  rInsn.AddOperand(spOprd1);

  return true;
}

/* operand ['op0 = decode_Ev', 'op1 = decode_CL'] */
bool X86Architecture::Operand__Ev_CL(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_Ev
  auto spOprd0 = Decode_Ev(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  // operand1: op1 = decode_CL
  auto spOprd1 = Decode_CL(rBinStrm, Offset, rInsn, Mode);
  if (spOprd1 == nullptr)
    return false;
  rInsn.AddOperand(spOprd1);

  return true;
}

/* operand ['op0 = decode_Ev', 'op1 = decode_Gv'] */
bool X86Architecture::Operand__Ev_Gv(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_Ev
  auto spOprd0 = Decode_Ev(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  // operand1: op1 = decode_Gv
  auto spOprd1 = Decode_Gv(rBinStrm, Offset, rInsn, Mode);
  if (spOprd1 == nullptr)
    return false;
  rInsn.AddOperand(spOprd1);

  return true;
}

/* operand ['op0 = decode_Ev', 'op1 = decode_Gv', 'op2 = decode_CL'] */
bool X86Architecture::Operand__Ev_Gv_CL(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_Ev
  auto spOprd0 = Decode_Ev(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  // operand1: op1 = decode_Gv
  auto spOprd1 = Decode_Gv(rBinStrm, Offset, rInsn, Mode);
  if (spOprd1 == nullptr)
    return false;
  rInsn.AddOperand(spOprd1);

  // operand2: op2 = decode_CL
  auto spOprd2 = Decode_CL(rBinStrm, Offset, rInsn, Mode);
  if (spOprd2 == nullptr)
    return false;
  rInsn.AddOperand(spOprd2);

  return true;
}

/* operand ['last_len', 'op0 = decode_Ev', 'op1 = decode_Gv', 'move_decode_offset(next_operand)', 'op2 = decode_Ib'] */
bool X86Architecture::Operand__Ev_Gv_Ib(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: last_len
  auto LastLen = rInsn.GetLength();
  // operand0: op0 = decode_Ev
  auto spOprd0 = Decode_Ev(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  // operand1: op1 = decode_Gv
  auto spOprd1 = Decode_Gv(rBinStrm, Offset, rInsn, Mode);
  if (spOprd1 == nullptr)
    return false;
  rInsn.AddOperand(spOprd1);

  // operand2: move_decode_offset(next_operand)
  Offset += (rInsn.GetLength() - LastLen);
  // operand2: op2 = decode_Ib
  auto spOprd2 = Decode_Ib(rBinStrm, Offset, rInsn, Mode);
  if (spOprd2 == nullptr)
    return false;
  rInsn.AddOperand(spOprd2);

  return true;
}

/* operand ['last_len', 'op0 = decode_Ev', 'move_decode_offset(next_operand)', 'op1 = decode_Ib'] */
bool X86Architecture::Operand__Ev_Ib(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: last_len
  auto LastLen = rInsn.GetLength();
  // operand0: op0 = decode_Ev
  auto spOprd0 = Decode_Ev(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  // operand1: move_decode_offset(next_operand)
  Offset += (rInsn.GetLength() - LastLen);
  // operand1: op1 = decode_Ib
  auto spOprd1 = Decode_Ib(rBinStrm, Offset, rInsn, Mode);
  if (spOprd1 == nullptr)
    return false;
  rInsn.AddOperand(spOprd1);

  return true;
}

/* operand ['last_len', 'op0 = decode_Ev', 'move_decode_offset(next_operand)', 'op1 = decode_Ibs'] */
bool X86Architecture::Operand__Ev_Ibs(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: last_len
  auto LastLen = rInsn.GetLength();
  // operand0: op0 = decode_Ev
  auto spOprd0 = Decode_Ev(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  // operand1: move_decode_offset(next_operand)
  Offset += (rInsn.GetLength() - LastLen);
  // operand1: op1 = decode_Ibs
  auto spOprd1 = Decode_Ibs(rBinStrm, Offset, rInsn, Mode);
  if (spOprd1 == nullptr)
    return false;
  rInsn.AddOperand(spOprd1);

  return true;
}

/* operand ['last_len', 'op0 = decode_Ev', 'move_decode_offset(next_operand)', 'op1 = decode_Iz'] */
bool X86Architecture::Operand__Ev_Iz(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: last_len
  auto LastLen = rInsn.GetLength();
  // operand0: op0 = decode_Ev
  auto spOprd0 = Decode_Ev(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  // operand1: move_decode_offset(next_operand)
  Offset += (rInsn.GetLength() - LastLen);
  // operand1: op1 = decode_Iz
  auto spOprd1 = Decode_Iz(rBinStrm, Offset, rInsn, Mode);
  if (spOprd1 == nullptr)
    return false;
  rInsn.AddOperand(spOprd1);

  return true;
}

/* operand ['op0 = decode_Ew', 'op1 = decode_Gw'] */
bool X86Architecture::Operand__Ew_Gw(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_Ew
  auto spOprd0 = Decode_Ew(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  // operand1: op1 = decode_Gw
  auto spOprd1 = Decode_Gw(rBinStrm, Offset, rInsn, Mode);
  if (spOprd1 == nullptr)
    return false;
  rInsn.AddOperand(spOprd1);

  return true;
}

/* operand ['op0 = decode_Ew', 'op1 = decode_Sw'] */
bool X86Architecture::Operand__Ew_Sw(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_Ew
  auto spOprd0 = Decode_Ew(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  // operand1: op1 = decode_Sw
  auto spOprd1 = Decode_Sw(rBinStrm, Offset, rInsn, Mode);
  if (spOprd1 == nullptr)
    return false;
  rInsn.AddOperand(spOprd1);

  return true;
}

/* operand ['op0 = decode_Ey', 'op1 = decode_Gy'] */
bool X86Architecture::Operand__Ey_Gy(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_Ey
  auto spOprd0 = Decode_Ey(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  // operand1: op1 = decode_Gy
  auto spOprd1 = Decode_Gy(rBinStrm, Offset, rInsn, Mode);
  if (spOprd1 == nullptr)
    return false;
  rInsn.AddOperand(spOprd1);

  return true;
}

/* operand ['op0 = decode_Ey', 'op1 = decode_Pq'] */
bool X86Architecture::Operand__Ey_Pq(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_Ey
  auto spOprd0 = Decode_Ey(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  // operand1: op1 = decode_Pq
  auto spOprd1 = Decode_Pq(rBinStrm, Offset, rInsn, Mode);
  if (spOprd1 == nullptr)
    return false;
  rInsn.AddOperand(spOprd1);

  return true;
}

/* operand ['op0 = decode_Ey', 'op1 = decode_Vo'] */
bool X86Architecture::Operand__Ey_Vo(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_Ey
  auto spOprd0 = Decode_Ey(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  // operand1: op1 = decode_Vo
  auto spOprd1 = Decode_Vo(rBinStrm, Offset, rInsn, Mode);
  if (spOprd1 == nullptr)
    return false;
  rInsn.AddOperand(spOprd1);

  return true;
}

/* operand ['op0 = decode_Ey', 'op1 = decode_Vo', 'op2 = decode_Ib'] */
bool X86Architecture::Operand__Ey_Vo_Ib(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_Ey
  auto spOprd0 = Decode_Ey(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  // operand1: op1 = decode_Vo
  auto spOprd1 = Decode_Vo(rBinStrm, Offset, rInsn, Mode);
  if (spOprd1 == nullptr)
    return false;
  rInsn.AddOperand(spOprd1);

  // operand2: op2 = decode_Ib
  auto spOprd2 = Decode_Ib(rBinStrm, Offset, rInsn, Mode);
  if (spOprd2 == nullptr)
    return false;
  rInsn.AddOperand(spOprd2);

  return true;
}

/* operand ['op0 = decode_Eyb', 'op1 = decode_Vo', 'op2 = decode_Ib'] */
bool X86Architecture::Operand__Eyb_Vo_Ib(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_Eyb
  auto spOprd0 = Decode_Eyb(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  // operand1: op1 = decode_Vo
  auto spOprd1 = Decode_Vo(rBinStrm, Offset, rInsn, Mode);
  if (spOprd1 == nullptr)
    return false;
  rInsn.AddOperand(spOprd1);

  // operand2: op2 = decode_Ib
  auto spOprd2 = Decode_Ib(rBinStrm, Offset, rInsn, Mode);
  if (spOprd2 == nullptr)
    return false;
  rInsn.AddOperand(spOprd2);

  return true;
}

/* operand ['op0 = decode_Eyw', 'op1 = decode_Vo', 'op2 = decode_Ib'] */
bool X86Architecture::Operand__Eyw_Vo_Ib(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_Eyw
  auto spOprd0 = Decode_Eyw(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  // operand1: op1 = decode_Vo
  auto spOprd1 = Decode_Vo(rBinStrm, Offset, rInsn, Mode);
  if (spOprd1 == nullptr)
    return false;
  rInsn.AddOperand(spOprd1);

  // operand2: op2 = decode_Ib
  auto spOprd2 = Decode_Ib(rBinStrm, Offset, rInsn, Mode);
  if (spOprd2 == nullptr)
    return false;
  rInsn.AddOperand(spOprd2);

  return true;
}

/* operand ['op0 = decode_FS'] */
bool X86Architecture::Operand__FS(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_FS
  auto spOprd0 = Decode_FS(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  return true;
}

/* operand ['op0 = decode_GS'] */
bool X86Architecture::Operand__GS(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_GS
  auto spOprd0 = Decode_GS(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  return true;
}

/* operand ['op0 = decode_Gb', 'op1 = decode_Eb'] */
bool X86Architecture::Operand__Gb_Eb(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_Gb
  auto spOprd0 = Decode_Gb(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  // operand1: op1 = decode_Eb
  auto spOprd1 = Decode_Eb(rBinStrm, Offset, rInsn, Mode);
  if (spOprd1 == nullptr)
    return false;
  rInsn.AddOperand(spOprd1);

  return true;
}

/* operand ['op0 = decode_Gb', 'op1 = decode_Ev'] */
bool X86Architecture::Operand__Gb_Ev(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_Gb
  auto spOprd0 = Decode_Gb(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  // operand1: op1 = decode_Ev
  auto spOprd1 = Decode_Ev(rBinStrm, Offset, rInsn, Mode);
  if (spOprd1 == nullptr)
    return false;
  rInsn.AddOperand(spOprd1);

  return true;
}

/* operand ['op0 = decode_Gv', 'op1 = decode_Eb'] */
bool X86Architecture::Operand__Gv_Eb(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_Gv
  auto spOprd0 = Decode_Gv(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  // operand1: op1 = decode_Eb
  auto spOprd1 = Decode_Eb(rBinStrm, Offset, rInsn, Mode);
  if (spOprd1 == nullptr)
    return false;
  rInsn.AddOperand(spOprd1);

  return true;
}

/* operand ['op0 = decode_Gv', 'op1 = decode_Ed'] */
bool X86Architecture::Operand__Gv_Ed(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_Gv
  auto spOprd0 = Decode_Gv(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  // operand1: op1 = decode_Ed
  auto spOprd1 = Decode_Ed(rBinStrm, Offset, rInsn, Mode);
  if (spOprd1 == nullptr)
    return false;
  rInsn.AddOperand(spOprd1);

  return true;
}

/* operand ['op0 = decode_Gv', 'op1 = decode_Ev'] */
bool X86Architecture::Operand__Gv_Ev(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_Gv
  auto spOprd0 = Decode_Gv(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  // operand1: op1 = decode_Ev
  auto spOprd1 = Decode_Ev(rBinStrm, Offset, rInsn, Mode);
  if (spOprd1 == nullptr)
    return false;
  rInsn.AddOperand(spOprd1);

  return true;
}

/* operand ['last_len', 'op0 = decode_Gv', 'op1 = decode_Ev', 'move_decode_offset(next_operand)', 'op2 = decode_Ibs'] */
bool X86Architecture::Operand__Gv_Ev_Ibs(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: last_len
  auto LastLen = rInsn.GetLength();
  // operand0: op0 = decode_Gv
  auto spOprd0 = Decode_Gv(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  // operand1: op1 = decode_Ev
  auto spOprd1 = Decode_Ev(rBinStrm, Offset, rInsn, Mode);
  if (spOprd1 == nullptr)
    return false;
  rInsn.AddOperand(spOprd1);

  // operand2: move_decode_offset(next_operand)
  Offset += (rInsn.GetLength() - LastLen);
  // operand2: op2 = decode_Ibs
  auto spOprd2 = Decode_Ibs(rBinStrm, Offset, rInsn, Mode);
  if (spOprd2 == nullptr)
    return false;
  rInsn.AddOperand(spOprd2);

  return true;
}

/* operand ['last_len', 'op0 = decode_Gv', 'op1 = decode_Ev', 'move_decode_offset(next_operand)', 'op2 = decode_Iz'] */
bool X86Architecture::Operand__Gv_Ev_Iz(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: last_len
  auto LastLen = rInsn.GetLength();
  // operand0: op0 = decode_Gv
  auto spOprd0 = Decode_Gv(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  // operand1: op1 = decode_Ev
  auto spOprd1 = Decode_Ev(rBinStrm, Offset, rInsn, Mode);
  if (spOprd1 == nullptr)
    return false;
  rInsn.AddOperand(spOprd1);

  // operand2: move_decode_offset(next_operand)
  Offset += (rInsn.GetLength() - LastLen);
  // operand2: op2 = decode_Iz
  auto spOprd2 = Decode_Iz(rBinStrm, Offset, rInsn, Mode);
  if (spOprd2 == nullptr)
    return false;
  rInsn.AddOperand(spOprd2);

  return true;
}

/* operand ['op0 = decode_Gv', 'op1 = decode_Ew'] */
bool X86Architecture::Operand__Gv_Ew(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_Gv
  auto spOprd0 = Decode_Gv(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  // operand1: op1 = decode_Ew
  auto spOprd1 = Decode_Ew(rBinStrm, Offset, rInsn, Mode);
  if (spOprd1 == nullptr)
    return false;
  rInsn.AddOperand(spOprd1);

  return true;
}

/* operand ['op0 = decode_Gv', 'op1 = decode_M'] */
bool X86Architecture::Operand__Gv_M(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_Gv
  auto spOprd0 = Decode_Gv(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  // operand1: op1 = decode_M
  auto spOprd1 = Decode_M(rBinStrm, Offset, rInsn, Mode);
  if (spOprd1 == nullptr)
    return false;
  rInsn.AddOperand(spOprd1);

  return true;
}

/* operand ['op0 = decode_Gv', 'op1 = decode_Ma'] */
bool X86Architecture::Operand__Gv_Ma(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_Gv
  auto spOprd0 = Decode_Gv(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  // operand1: op1 = decode_Ma
  auto spOprd1 = Decode_Ma(rBinStrm, Offset, rInsn, Mode);
  if (spOprd1 == nullptr)
    return false;
  rInsn.AddOperand(spOprd1);

  return true;
}

/* operand ['op0 = decode_Gv', 'op1 = decode_Mp'] */
bool X86Architecture::Operand__Gv_Mp(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_Gv
  auto spOprd0 = Decode_Gv(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  // operand1: op1 = decode_Mp
  auto spOprd1 = Decode_Mp(rBinStrm, Offset, rInsn, Mode);
  if (spOprd1 == nullptr)
    return false;
  rInsn.AddOperand(spOprd1);

  return true;
}

/* operand ['op0 = decode_Gv', 'op1 = decode_Mv'] */
bool X86Architecture::Operand__Gv_Mv(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_Gv
  auto spOprd0 = Decode_Gv(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  // operand1: op1 = decode_Mv
  auto spOprd1 = Decode_Mv(rBinStrm, Offset, rInsn, Mode);
  if (spOprd1 == nullptr)
    return false;
  rInsn.AddOperand(spOprd1);

  return true;
}

/* operand ['op0 = decode_Gy', 'op1 = decode_By', 'op2 = decode_Ey'] */
bool X86Architecture::Operand__Gy_By_Ey(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_Gy
  auto spOprd0 = Decode_Gy(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  // operand1: op1 = decode_By
  auto spOprd1 = Decode_By(rBinStrm, Offset, rInsn, Mode);
  if (spOprd1 == nullptr)
    return false;
  rInsn.AddOperand(spOprd1);

  // operand2: op2 = decode_Ey
  auto spOprd2 = Decode_Ey(rBinStrm, Offset, rInsn, Mode);
  if (spOprd2 == nullptr)
    return false;
  rInsn.AddOperand(spOprd2);

  return true;
}

/* operand ['op0 = decode_Gy', 'op1 = decode_Eb'] */
bool X86Architecture::Operand__Gy_Eb(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_Gy
  auto spOprd0 = Decode_Gy(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  // operand1: op1 = decode_Eb
  auto spOprd1 = Decode_Eb(rBinStrm, Offset, rInsn, Mode);
  if (spOprd1 == nullptr)
    return false;
  rInsn.AddOperand(spOprd1);

  return true;
}

/* operand ['op0 = decode_Gy', 'op1 = decode_Ev'] */
bool X86Architecture::Operand__Gy_Ev(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_Gy
  auto spOprd0 = Decode_Gy(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  // operand1: op1 = decode_Ev
  auto spOprd1 = Decode_Ev(rBinStrm, Offset, rInsn, Mode);
  if (spOprd1 == nullptr)
    return false;
  rInsn.AddOperand(spOprd1);

  return true;
}

/* operand ['op0 = decode_Gy', 'op1 = decode_Ey'] */
bool X86Architecture::Operand__Gy_Ey(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_Gy
  auto spOprd0 = Decode_Gy(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  // operand1: op1 = decode_Ey
  auto spOprd1 = Decode_Ey(rBinStrm, Offset, rInsn, Mode);
  if (spOprd1 == nullptr)
    return false;
  rInsn.AddOperand(spOprd1);

  return true;
}

/* operand ['op0 = decode_Gy', 'op1 = decode_Ey', 'op2 = decode_By'] */
bool X86Architecture::Operand__Gy_Ey_By(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_Gy
  auto spOprd0 = Decode_Gy(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  // operand1: op1 = decode_Ey
  auto spOprd1 = Decode_Ey(rBinStrm, Offset, rInsn, Mode);
  if (spOprd1 == nullptr)
    return false;
  rInsn.AddOperand(spOprd1);

  // operand2: op2 = decode_By
  auto spOprd2 = Decode_By(rBinStrm, Offset, rInsn, Mode);
  if (spOprd2 == nullptr)
    return false;
  rInsn.AddOperand(spOprd2);

  return true;
}

/* operand ['op0 = decode_Gy', 'op1 = decode_Nq'] */
bool X86Architecture::Operand__Gy_Nq(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_Gy
  auto spOprd0 = Decode_Gy(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  // operand1: op1 = decode_Nq
  auto spOprd1 = Decode_Nq(rBinStrm, Offset, rInsn, Mode);
  if (spOprd1 == nullptr)
    return false;
  rInsn.AddOperand(spOprd1);

  return true;
}

/* operand ['op0 = decode_Gy', 'op1 = decode_Nq', 'op2 = decode_Ib'] */
bool X86Architecture::Operand__Gy_Nq_Ib(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_Gy
  auto spOprd0 = Decode_Gy(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  // operand1: op1 = decode_Nq
  auto spOprd1 = Decode_Nq(rBinStrm, Offset, rInsn, Mode);
  if (spOprd1 == nullptr)
    return false;
  rInsn.AddOperand(spOprd1);

  // operand2: op2 = decode_Ib
  auto spOprd2 = Decode_Ib(rBinStrm, Offset, rInsn, Mode);
  if (spOprd2 == nullptr)
    return false;
  rInsn.AddOperand(spOprd2);

  return true;
}

/* operand ['op0 = decode_Gy', 'op1 = decode_Uo'] */
bool X86Architecture::Operand__Gy_Uo(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_Gy
  auto spOprd0 = Decode_Gy(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  // operand1: op1 = decode_Uo
  auto spOprd1 = Decode_Uo(rBinStrm, Offset, rInsn, Mode);
  if (spOprd1 == nullptr)
    return false;
  rInsn.AddOperand(spOprd1);

  return true;
}

/* operand ['op0 = decode_Gy', 'op1 = decode_Uo', 'op2 = decode_Ib'] */
bool X86Architecture::Operand__Gy_Uo_Ib(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_Gy
  auto spOprd0 = Decode_Gy(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  // operand1: op1 = decode_Uo
  auto spOprd1 = Decode_Uo(rBinStrm, Offset, rInsn, Mode);
  if (spOprd1 == nullptr)
    return false;
  rInsn.AddOperand(spOprd1);

  // operand2: op2 = decode_Ib
  auto spOprd2 = Decode_Ib(rBinStrm, Offset, rInsn, Mode);
  if (spOprd2 == nullptr)
    return false;
  rInsn.AddOperand(spOprd2);

  return true;
}

/* operand ['op0 = decode_Gy', 'op1 = decode_Ux'] */
bool X86Architecture::Operand__Gy_Ux(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_Gy
  auto spOprd0 = Decode_Gy(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  // operand1: op1 = decode_Ux
  auto spOprd1 = Decode_Ux(rBinStrm, Offset, rInsn, Mode);
  if (spOprd1 == nullptr)
    return false;
  rInsn.AddOperand(spOprd1);

  return true;
}

/* operand ['op0 = decode_Gy', 'op1 = decode_Wod'] */
bool X86Architecture::Operand__Gy_Wod(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_Gy
  auto spOprd0 = Decode_Gy(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  // operand1: op1 = decode_Wod
  auto spOprd1 = Decode_Wod(rBinStrm, Offset, rInsn, Mode);
  if (spOprd1 == nullptr)
    return false;
  rInsn.AddOperand(spOprd1);

  return true;
}

/* operand ['op0 = decode_Gy', 'op1 = decode_Woq'] */
bool X86Architecture::Operand__Gy_Woq(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_Gy
  auto spOprd0 = Decode_Gy(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  // operand1: op1 = decode_Woq
  auto spOprd1 = Decode_Woq(rBinStrm, Offset, rInsn, Mode);
  if (spOprd1 == nullptr)
    return false;
  rInsn.AddOperand(spOprd1);

  return true;
}

/* operand ['op0 = decode_Hx', 'op1 = decode_Hx', 'op2 = decode_Wx'] */
bool X86Architecture::Operand__Hx_Hx_Wx(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_Hx
  auto spOprd0 = Decode_Hx(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  // operand1: op1 = decode_Hx
  auto spOprd1 = Decode_Hx(rBinStrm, Offset, rInsn, Mode);
  if (spOprd1 == nullptr)
    return false;
  rInsn.AddOperand(spOprd1);

  // operand2: op2 = decode_Wx
  auto spOprd2 = Decode_Wx(rBinStrm, Offset, rInsn, Mode);
  if (spOprd2 == nullptr)
    return false;
  rInsn.AddOperand(spOprd2);

  return true;
}

/* operand ['last_len', 'op0 = decode_Hx', 'op1 = decode_Ux', 'move_decode_offset(next_operand)', 'op2 = decode_Ib'] */
bool X86Architecture::Operand__Hx_Ux_Ib(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: last_len
  auto LastLen = rInsn.GetLength();
  // operand0: op0 = decode_Hx
  auto spOprd0 = Decode_Hx(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  // operand1: op1 = decode_Ux
  auto spOprd1 = Decode_Ux(rBinStrm, Offset, rInsn, Mode);
  if (spOprd1 == nullptr)
    return false;
  rInsn.AddOperand(spOprd1);

  // operand2: move_decode_offset(next_operand)
  Offset += (rInsn.GetLength() - LastLen);
  // operand2: op2 = decode_Ib
  auto spOprd2 = Decode_Ib(rBinStrm, Offset, rInsn, Mode);
  if (spOprd2 == nullptr)
    return false;
  rInsn.AddOperand(spOprd2);

  return true;
}

/* operand ['op0 = decode_Ib'] */
bool X86Architecture::Operand__Ib(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_Ib
  auto spOprd0 = Decode_Ib(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  return true;
}

/* operand ['op0 = decode_Ib', 'op1 = decode_AL'] */
bool X86Architecture::Operand__Ib_AL(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_Ib
  auto spOprd0 = Decode_Ib(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  // operand1: op1 = decode_AL
  auto spOprd1 = Decode_AL(rBinStrm, Offset, rInsn, Mode);
  if (spOprd1 == nullptr)
    return false;
  rInsn.AddOperand(spOprd1);

  return true;
}

/* operand ['op0 = decode_Ib', 'op1 = decode_eAX'] */
bool X86Architecture::Operand__Ib_eAX(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_Ib
  auto spOprd0 = Decode_Ib(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  // operand1: op1 = decode_eAX
  auto spOprd1 = Decode_eAX(rBinStrm, Offset, rInsn, Mode);
  if (spOprd1 == nullptr)
    return false;
  rInsn.AddOperand(spOprd1);

  return true;
}

/* operand ['op0 = decode_Iw'] */
bool X86Architecture::Operand__Iw(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_Iw
  auto spOprd0 = Decode_Iw(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  return true;
}

/* operand ['op0 = decode_Iw', 'op1 = decode_Ib'] */
bool X86Architecture::Operand__Iw_Ib(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_Iw
  auto spOprd0 = Decode_Iw(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  // operand1: op1 = decode_Ib
  auto spOprd1 = Decode_Ib(rBinStrm, Offset, rInsn, Mode);
  if (spOprd1 == nullptr)
    return false;
  rInsn.AddOperand(spOprd1);

  return true;
}

/* operand ['op0 = decode_Iz'] */
bool X86Architecture::Operand__Iz(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_Iz
  auto spOprd0 = Decode_Iz(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  return true;
}

/* operand ['op0 = decode_Jb'] */
bool X86Architecture::Operand__Jb(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_Jb
  auto spOprd0 = Decode_Jb(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  return true;
}

/* operand ['op0 = decode_Jz'] */
bool X86Architecture::Operand__Jz(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_Jz
  auto spOprd0 = Decode_Jz(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  return true;
}

/* operand ['op0 = decode_M'] */
bool X86Architecture::Operand__M(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_M
  auto spOprd0 = Decode_M(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  return true;
}

/* operand ['op0 = decode_Md'] */
bool X86Architecture::Operand__Md(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_Md
  auto spOprd0 = Decode_Md(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  return true;
}

/* operand ['op0 = decode_Md', 'op1 = decode_Vo'] */
bool X86Architecture::Operand__Md_Vo(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_Md
  auto spOprd0 = Decode_Md(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  // operand1: op1 = decode_Vo
  auto spOprd1 = Decode_Vo(rBinStrm, Offset, rInsn, Mode);
  if (spOprd1 == nullptr)
    return false;
  rInsn.AddOperand(spOprd1);

  return true;
}

/* operand ['op0 = decode_Mp'] */
bool X86Architecture::Operand__Mp(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_Mp
  auto spOprd0 = Decode_Mp(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  return true;
}

/* operand ['op0 = decode_Mq'] */
bool X86Architecture::Operand__Mq(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_Mq
  auto spOprd0 = Decode_Mq(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  return true;
}

/* operand ['op0 = decode_Mq', 'op1 = decode_Pq'] */
bool X86Architecture::Operand__Mq_Pq(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_Mq
  auto spOprd0 = Decode_Mq(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  // operand1: op1 = decode_Pq
  auto spOprd1 = Decode_Pq(rBinStrm, Offset, rInsn, Mode);
  if (spOprd1 == nullptr)
    return false;
  rInsn.AddOperand(spOprd1);

  return true;
}

/* operand ['op0 = decode_Mq', 'op1 = decode_Vo'] */
bool X86Architecture::Operand__Mq_Vo(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_Mq
  auto spOprd0 = Decode_Mq(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  // operand1: op1 = decode_Vo
  auto spOprd1 = Decode_Vo(rBinStrm, Offset, rInsn, Mode);
  if (spOprd1 == nullptr)
    return false;
  rInsn.AddOperand(spOprd1);

  return true;
}

/* operand ['op0 = decode_Mv', 'op1 = decode_Gv'] */
bool X86Architecture::Operand__Mv_Gv(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_Mv
  auto spOprd0 = Decode_Mv(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  // operand1: op1 = decode_Gv
  auto spOprd1 = Decode_Gv(rBinStrm, Offset, rInsn, Mode);
  if (spOprd1 == nullptr)
    return false;
  rInsn.AddOperand(spOprd1);

  return true;
}

/* operand ['op0 = decode_Mw'] */
bool X86Architecture::Operand__Mw(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_Mw
  auto spOprd0 = Decode_Mw(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  return true;
}

/* operand ['op0 = decode_Mx', 'op1 = decode_Hx', 'op2 = decode_Vx'] */
bool X86Architecture::Operand__Mx_Hx_Vx(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_Mx
  auto spOprd0 = Decode_Mx(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  // operand1: op1 = decode_Hx
  auto spOprd1 = Decode_Hx(rBinStrm, Offset, rInsn, Mode);
  if (spOprd1 == nullptr)
    return false;
  rInsn.AddOperand(spOprd1);

  // operand2: op2 = decode_Vx
  auto spOprd2 = Decode_Vx(rBinStrm, Offset, rInsn, Mode);
  if (spOprd2 == nullptr)
    return false;
  rInsn.AddOperand(spOprd2);

  return true;
}

/* operand ['op0 = decode_Mx', 'op1 = decode_Vx'] */
bool X86Architecture::Operand__Mx_Vx(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_Mx
  auto spOprd0 = Decode_Mx(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  // operand1: op1 = decode_Vx
  auto spOprd1 = Decode_Vx(rBinStrm, Offset, rInsn, Mode);
  if (spOprd1 == nullptr)
    return false;
  rInsn.AddOperand(spOprd1);

  return true;
}

/* operand ['op0 = decode_My', 'op1 = decode_Gy'] */
bool X86Architecture::Operand__My_Gy(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_My
  auto spOprd0 = Decode_My(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  // operand1: op1 = decode_Gy
  auto spOprd1 = Decode_Gy(rBinStrm, Offset, rInsn, Mode);
  if (spOprd1 == nullptr)
    return false;
  rInsn.AddOperand(spOprd1);

  return true;
}

/* operand ['op0 = decode_Nq', 'op1 = decode_Ib'] */
bool X86Architecture::Operand__Nq_Ib(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_Nq
  auto spOprd0 = Decode_Nq(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  // operand1: op1 = decode_Ib
  auto spOprd1 = Decode_Ib(rBinStrm, Offset, rInsn, Mode);
  if (spOprd1 == nullptr)
    return false;
  rInsn.AddOperand(spOprd1);

  return true;
}

/* operand ['op0 = decode_Ob', 'op1 = decode_AL'] */
bool X86Architecture::Operand__Ob_AL(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_Ob
  auto spOprd0 = Decode_Ob(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  // operand1: op1 = decode_AL
  auto spOprd1 = Decode_AL(rBinStrm, Offset, rInsn, Mode);
  if (spOprd1 == nullptr)
    return false;
  rInsn.AddOperand(spOprd1);

  return true;
}

/* operand ['op0 = decode_Ov', 'op1 = decode_rAX'] */
bool X86Architecture::Operand__Ov_rAX(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_Ov
  auto spOprd0 = Decode_Ov(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  // operand1: op1 = decode_rAX
  auto spOprd1 = Decode_rAX(rBinStrm, Offset, rInsn, Mode);
  if (spOprd1 == nullptr)
    return false;
  rInsn.AddOperand(spOprd1);

  return true;
}

/* operand ['op0 = decode_Pq', 'op1 = decode_Ey'] */
bool X86Architecture::Operand__Pq_Ey(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_Pq
  auto spOprd0 = Decode_Pq(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  // operand1: op1 = decode_Ey
  auto spOprd1 = Decode_Ey(rBinStrm, Offset, rInsn, Mode);
  if (spOprd1 == nullptr)
    return false;
  rInsn.AddOperand(spOprd1);

  return true;
}

/* operand ['op0 = decode_Pq', 'op1 = decode_Mw', 'op2 = decode_Ib'] */
bool X86Architecture::Operand__Pq_Mw_Ib(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_Pq
  auto spOprd0 = Decode_Pq(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  // operand1: op1 = decode_Mw
  auto spOprd1 = Decode_Mw(rBinStrm, Offset, rInsn, Mode);
  if (spOprd1 == nullptr)
    return false;
  rInsn.AddOperand(spOprd1);

  // operand2: op2 = decode_Ib
  auto spOprd2 = Decode_Ib(rBinStrm, Offset, rInsn, Mode);
  if (spOprd2 == nullptr)
    return false;
  rInsn.AddOperand(spOprd2);

  return true;
}

/* operand ['op0 = decode_Pq', 'op1 = decode_Nq'] */
bool X86Architecture::Operand__Pq_Nq(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_Pq
  auto spOprd0 = Decode_Pq(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  // operand1: op1 = decode_Nq
  auto spOprd1 = Decode_Nq(rBinStrm, Offset, rInsn, Mode);
  if (spOprd1 == nullptr)
    return false;
  rInsn.AddOperand(spOprd1);

  return true;
}

/* operand ['op0 = decode_Pq', 'op1 = decode_Qd'] */
bool X86Architecture::Operand__Pq_Qd(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_Pq
  auto spOprd0 = Decode_Pq(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  // operand1: op1 = decode_Qd
  auto spOprd1 = Decode_Qd(rBinStrm, Offset, rInsn, Mode);
  if (spOprd1 == nullptr)
    return false;
  rInsn.AddOperand(spOprd1);

  return true;
}

/* operand ['op0 = decode_Pq', 'op1 = decode_Qq'] */
bool X86Architecture::Operand__Pq_Qq(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_Pq
  auto spOprd0 = Decode_Pq(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  // operand1: op1 = decode_Qq
  auto spOprd1 = Decode_Qq(rBinStrm, Offset, rInsn, Mode);
  if (spOprd1 == nullptr)
    return false;
  rInsn.AddOperand(spOprd1);

  return true;
}

/* operand ['op0 = decode_Pq', 'op1 = decode_Qq', 'op2 = decode_Ib'] */
bool X86Architecture::Operand__Pq_Qq_Ib(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_Pq
  auto spOprd0 = Decode_Pq(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  // operand1: op1 = decode_Qq
  auto spOprd1 = Decode_Qq(rBinStrm, Offset, rInsn, Mode);
  if (spOprd1 == nullptr)
    return false;
  rInsn.AddOperand(spOprd1);

  // operand2: op2 = decode_Ib
  auto spOprd2 = Decode_Ib(rBinStrm, Offset, rInsn, Mode);
  if (spOprd2 == nullptr)
    return false;
  rInsn.AddOperand(spOprd2);

  return true;
}

/* operand ['op0 = decode_Pq', 'op1 = decode_Uq'] */
bool X86Architecture::Operand__Pq_Uq(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_Pq
  auto spOprd0 = Decode_Pq(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  // operand1: op1 = decode_Uq
  auto spOprd1 = Decode_Uq(rBinStrm, Offset, rInsn, Mode);
  if (spOprd1 == nullptr)
    return false;
  rInsn.AddOperand(spOprd1);

  return true;
}

/* operand ['op0 = decode_Pq', 'op1 = decode_Wo'] */
bool X86Architecture::Operand__Pq_Wo(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_Pq
  auto spOprd0 = Decode_Pq(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  // operand1: op1 = decode_Wo
  auto spOprd1 = Decode_Wo(rBinStrm, Offset, rInsn, Mode);
  if (spOprd1 == nullptr)
    return false;
  rInsn.AddOperand(spOprd1);

  return true;
}

/* operand ['op0 = decode_Pq', 'op1 = decode_Woq'] */
bool X86Architecture::Operand__Pq_Woq(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_Pq
  auto spOprd0 = Decode_Pq(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  // operand1: op1 = decode_Woq
  auto spOprd1 = Decode_Woq(rBinStrm, Offset, rInsn, Mode);
  if (spOprd1 == nullptr)
    return false;
  rInsn.AddOperand(spOprd1);

  return true;
}

/* operand ['op0 = decode_Qq', 'op1 = decode_Pq'] */
bool X86Architecture::Operand__Qq_Pq(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_Qq
  auto spOprd0 = Decode_Qq(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  // operand1: op1 = decode_Pq
  auto spOprd1 = Decode_Pq(rBinStrm, Offset, rInsn, Mode);
  if (spOprd1 == nullptr)
    return false;
  rInsn.AddOperand(spOprd1);

  return true;
}

/* operand ['op0 = decode_Rv'] */
bool X86Architecture::Operand__Rv(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_Rv
  auto spOprd0 = Decode_Rv(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  return true;
}

/* operand ['op0 = decode_Ry'] */
bool X86Architecture::Operand__Ry(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_Ry
  auto spOprd0 = Decode_Ry(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  return true;
}

/* operand ['op0 = decode_Ry', 'op1 = decode_Cy'] */
bool X86Architecture::Operand__Ry_Cy(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_Ry
  auto spOprd0 = Decode_Ry(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  // operand1: op1 = decode_Cy
  auto spOprd1 = Decode_Cy(rBinStrm, Offset, rInsn, Mode);
  if (spOprd1 == nullptr)
    return false;
  rInsn.AddOperand(spOprd1);

  return true;
}

/* operand ['op0 = decode_Ry', 'op1 = decode_Dy'] */
bool X86Architecture::Operand__Ry_Dy(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_Ry
  auto spOprd0 = Decode_Ry(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  // operand1: op1 = decode_Dy
  auto spOprd1 = Decode_Dy(rBinStrm, Offset, rInsn, Mode);
  if (spOprd1 == nullptr)
    return false;
  rInsn.AddOperand(spOprd1);

  return true;
}

/* operand ['op0 = decode_Ry', 'op1 = decode_Ty'] */
bool X86Architecture::Operand__Ry_Ty(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_Ry
  auto spOprd0 = Decode_Ry(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  // operand1: op1 = decode_Ty
  auto spOprd1 = Decode_Ty(rBinStrm, Offset, rInsn, Mode);
  if (spOprd1 == nullptr)
    return false;
  rInsn.AddOperand(spOprd1);

  return true;
}

/* operand ['op0 = decode_SS'] */
bool X86Architecture::Operand__SS(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_SS
  auto spOprd0 = Decode_SS(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  return true;
}

/* operand ['op0 = decode_ST0'] */
bool X86Architecture::Operand__ST0(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_ST0
  auto spOprd0 = Decode_ST0(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  return true;
}

/* operand ['op0 = decode_ST0', 'op1 = decode_ST0'] */
bool X86Architecture::Operand__ST0_ST0(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_ST0
  auto spOprd0 = Decode_ST0(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  // operand1: op1 = decode_ST0
  auto spOprd1 = Decode_ST0(rBinStrm, Offset, rInsn, Mode);
  if (spOprd1 == nullptr)
    return false;
  rInsn.AddOperand(spOprd1);

  return true;
}

/* operand ['op0 = decode_ST0', 'op1 = decode_ST1'] */
bool X86Architecture::Operand__ST0_ST1(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_ST0
  auto spOprd0 = Decode_ST0(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  // operand1: op1 = decode_ST1
  auto spOprd1 = Decode_ST1(rBinStrm, Offset, rInsn, Mode);
  if (spOprd1 == nullptr)
    return false;
  rInsn.AddOperand(spOprd1);

  return true;
}

/* operand ['op0 = decode_ST0', 'op1 = decode_ST2'] */
bool X86Architecture::Operand__ST0_ST2(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_ST0
  auto spOprd0 = Decode_ST0(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  // operand1: op1 = decode_ST2
  auto spOprd1 = Decode_ST2(rBinStrm, Offset, rInsn, Mode);
  if (spOprd1 == nullptr)
    return false;
  rInsn.AddOperand(spOprd1);

  return true;
}

/* operand ['op0 = decode_ST0', 'op1 = decode_ST3'] */
bool X86Architecture::Operand__ST0_ST3(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_ST0
  auto spOprd0 = Decode_ST0(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  // operand1: op1 = decode_ST3
  auto spOprd1 = Decode_ST3(rBinStrm, Offset, rInsn, Mode);
  if (spOprd1 == nullptr)
    return false;
  rInsn.AddOperand(spOprd1);

  return true;
}

/* operand ['op0 = decode_ST0', 'op1 = decode_ST4'] */
bool X86Architecture::Operand__ST0_ST4(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_ST0
  auto spOprd0 = Decode_ST0(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  // operand1: op1 = decode_ST4
  auto spOprd1 = Decode_ST4(rBinStrm, Offset, rInsn, Mode);
  if (spOprd1 == nullptr)
    return false;
  rInsn.AddOperand(spOprd1);

  return true;
}

/* operand ['op0 = decode_ST0', 'op1 = decode_ST5'] */
bool X86Architecture::Operand__ST0_ST5(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_ST0
  auto spOprd0 = Decode_ST0(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  // operand1: op1 = decode_ST5
  auto spOprd1 = Decode_ST5(rBinStrm, Offset, rInsn, Mode);
  if (spOprd1 == nullptr)
    return false;
  rInsn.AddOperand(spOprd1);

  return true;
}

/* operand ['op0 = decode_ST0', 'op1 = decode_ST6'] */
bool X86Architecture::Operand__ST0_ST6(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_ST0
  auto spOprd0 = Decode_ST0(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  // operand1: op1 = decode_ST6
  auto spOprd1 = Decode_ST6(rBinStrm, Offset, rInsn, Mode);
  if (spOprd1 == nullptr)
    return false;
  rInsn.AddOperand(spOprd1);

  return true;
}

/* operand ['op0 = decode_ST0', 'op1 = decode_ST7'] */
bool X86Architecture::Operand__ST0_ST7(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_ST0
  auto spOprd0 = Decode_ST0(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  // operand1: op1 = decode_ST7
  auto spOprd1 = Decode_ST7(rBinStrm, Offset, rInsn, Mode);
  if (spOprd1 == nullptr)
    return false;
  rInsn.AddOperand(spOprd1);

  return true;
}

/* operand ['op0 = decode_ST1'] */
bool X86Architecture::Operand__ST1(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_ST1
  auto spOprd0 = Decode_ST1(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  return true;
}

/* operand ['op0 = decode_ST1', 'op1 = decode_ST0'] */
bool X86Architecture::Operand__ST1_ST0(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_ST1
  auto spOprd0 = Decode_ST1(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  // operand1: op1 = decode_ST0
  auto spOprd1 = Decode_ST0(rBinStrm, Offset, rInsn, Mode);
  if (spOprd1 == nullptr)
    return false;
  rInsn.AddOperand(spOprd1);

  return true;
}

/* operand ['op0 = decode_ST2'] */
bool X86Architecture::Operand__ST2(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_ST2
  auto spOprd0 = Decode_ST2(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  return true;
}

/* operand ['op0 = decode_ST2', 'op1 = decode_ST0'] */
bool X86Architecture::Operand__ST2_ST0(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_ST2
  auto spOprd0 = Decode_ST2(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  // operand1: op1 = decode_ST0
  auto spOprd1 = Decode_ST0(rBinStrm, Offset, rInsn, Mode);
  if (spOprd1 == nullptr)
    return false;
  rInsn.AddOperand(spOprd1);

  return true;
}

/* operand ['op0 = decode_ST3'] */
bool X86Architecture::Operand__ST3(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_ST3
  auto spOprd0 = Decode_ST3(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  return true;
}

/* operand ['op0 = decode_ST3', 'op1 = decode_ST0'] */
bool X86Architecture::Operand__ST3_ST0(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_ST3
  auto spOprd0 = Decode_ST3(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  // operand1: op1 = decode_ST0
  auto spOprd1 = Decode_ST0(rBinStrm, Offset, rInsn, Mode);
  if (spOprd1 == nullptr)
    return false;
  rInsn.AddOperand(spOprd1);

  return true;
}

/* operand ['op0 = decode_ST4'] */
bool X86Architecture::Operand__ST4(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_ST4
  auto spOprd0 = Decode_ST4(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  return true;
}

/* operand ['op0 = decode_ST4', 'op1 = decode_ST0'] */
bool X86Architecture::Operand__ST4_ST0(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_ST4
  auto spOprd0 = Decode_ST4(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  // operand1: op1 = decode_ST0
  auto spOprd1 = Decode_ST0(rBinStrm, Offset, rInsn, Mode);
  if (spOprd1 == nullptr)
    return false;
  rInsn.AddOperand(spOprd1);

  return true;
}

/* operand ['op0 = decode_ST5'] */
bool X86Architecture::Operand__ST5(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_ST5
  auto spOprd0 = Decode_ST5(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  return true;
}

/* operand ['op0 = decode_ST5', 'op1 = decode_ST0'] */
bool X86Architecture::Operand__ST5_ST0(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_ST5
  auto spOprd0 = Decode_ST5(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  // operand1: op1 = decode_ST0
  auto spOprd1 = Decode_ST0(rBinStrm, Offset, rInsn, Mode);
  if (spOprd1 == nullptr)
    return false;
  rInsn.AddOperand(spOprd1);

  return true;
}

/* operand ['op0 = decode_ST6'] */
bool X86Architecture::Operand__ST6(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_ST6
  auto spOprd0 = Decode_ST6(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  return true;
}

/* operand ['op0 = decode_ST6', 'op1 = decode_ST0'] */
bool X86Architecture::Operand__ST6_ST0(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_ST6
  auto spOprd0 = Decode_ST6(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  // operand1: op1 = decode_ST0
  auto spOprd1 = Decode_ST0(rBinStrm, Offset, rInsn, Mode);
  if (spOprd1 == nullptr)
    return false;
  rInsn.AddOperand(spOprd1);

  return true;
}

/* operand ['op0 = decode_ST7'] */
bool X86Architecture::Operand__ST7(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_ST7
  auto spOprd0 = Decode_ST7(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  return true;
}

/* operand ['op0 = decode_ST7', 'op1 = decode_ST0'] */
bool X86Architecture::Operand__ST7_ST0(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_ST7
  auto spOprd0 = Decode_ST7(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  // operand1: op1 = decode_ST0
  auto spOprd1 = Decode_ST0(rBinStrm, Offset, rInsn, Mode);
  if (spOprd1 == nullptr)
    return false;
  rInsn.AddOperand(spOprd1);

  return true;
}

/* operand ['op0 = decode_Sw', 'op1 = decode_Ew'] */
bool X86Architecture::Operand__Sw_Ew(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_Sw
  auto spOprd0 = Decode_Sw(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  // operand1: op1 = decode_Ew
  auto spOprd1 = Decode_Ew(rBinStrm, Offset, rInsn, Mode);
  if (spOprd1 == nullptr)
    return false;
  rInsn.AddOperand(spOprd1);

  return true;
}

/* operand ['op0 = decode_Ty', 'op1 = decode_Ry'] */
bool X86Architecture::Operand__Ty_Ry(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_Ty
  auto spOprd0 = Decode_Ty(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  // operand1: op1 = decode_Ry
  auto spOprd1 = Decode_Ry(rBinStrm, Offset, rInsn, Mode);
  if (spOprd1 == nullptr)
    return false;
  rInsn.AddOperand(spOprd1);

  return true;
}

/* operand ['op0 = decode_Uo'] */
bool X86Architecture::Operand__Uo(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_Uo
  auto spOprd0 = Decode_Uo(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  return true;
}

/* operand ['op0 = decode_Uo', 'op1 = decode_Ib', 'op2 = decode_Ib'] */
bool X86Architecture::Operand__Uo_Ib_Ib(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_Uo
  auto spOprd0 = Decode_Uo(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  // operand1: op1 = decode_Ib
  auto spOprd1 = Decode_Ib(rBinStrm, Offset, rInsn, Mode);
  if (spOprd1 == nullptr)
    return false;
  rInsn.AddOperand(spOprd1);

  // operand2: op2 = decode_Ib
  auto spOprd2 = Decode_Ib(rBinStrm, Offset, rInsn, Mode);
  if (spOprd2 == nullptr)
    return false;
  rInsn.AddOperand(spOprd2);

  return true;
}

/* operand ['op0 = decode_Uo', 'op1 = decode_Vod'] */
bool X86Architecture::Operand__Uo_Vod(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_Uo
  auto spOprd0 = Decode_Uo(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  // operand1: op1 = decode_Vod
  auto spOprd1 = Decode_Vod(rBinStrm, Offset, rInsn, Mode);
  if (spOprd1 == nullptr)
    return false;
  rInsn.AddOperand(spOprd1);

  return true;
}

/* operand ['op0 = decode_Uo', 'op1 = decode_Voq'] */
bool X86Architecture::Operand__Uo_Voq(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_Uo
  auto spOprd0 = Decode_Uo(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  // operand1: op1 = decode_Voq
  auto spOprd1 = Decode_Voq(rBinStrm, Offset, rInsn, Mode);
  if (spOprd1 == nullptr)
    return false;
  rInsn.AddOperand(spOprd1);

  return true;
}

/* operand ['op0 = decode_Uoq', 'op1 = decode_Vo'] */
bool X86Architecture::Operand__Uoq_Vo(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_Uoq
  auto spOprd0 = Decode_Uoq(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  // operand1: op1 = decode_Vo
  auto spOprd1 = Decode_Vo(rBinStrm, Offset, rInsn, Mode);
  if (spOprd1 == nullptr)
    return false;
  rInsn.AddOperand(spOprd1);

  return true;
}

/* operand ['last_len', 'op0 = decode_Ux', 'move_decode_offset(next_operand)', 'op1 = decode_Ib'] */
bool X86Architecture::Operand__Ux_Ib(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: last_len
  auto LastLen = rInsn.GetLength();
  // operand0: op0 = decode_Ux
  auto spOprd0 = Decode_Ux(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  // operand1: move_decode_offset(next_operand)
  Offset += (rInsn.GetLength() - LastLen);
  // operand1: op1 = decode_Ib
  auto spOprd1 = Decode_Ib(rBinStrm, Offset, rInsn, Mode);
  if (spOprd1 == nullptr)
    return false;
  rInsn.AddOperand(spOprd1);

  return true;
}

/* operand ['op0 = decode_Vo', 'op1 = decode_Ed'] */
bool X86Architecture::Operand__Vo_Ed(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_Vo
  auto spOprd0 = Decode_Vo(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  // operand1: op1 = decode_Ed
  auto spOprd1 = Decode_Ed(rBinStrm, Offset, rInsn, Mode);
  if (spOprd1 == nullptr)
    return false;
  rInsn.AddOperand(spOprd1);

  return true;
}

/* operand ['op0 = decode_Vo', 'op1 = decode_Edb', 'op2 = decode_Ib'] */
bool X86Architecture::Operand__Vo_Edb_Ib(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_Vo
  auto spOprd0 = Decode_Vo(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  // operand1: op1 = decode_Edb
  auto spOprd1 = Decode_Edb(rBinStrm, Offset, rInsn, Mode);
  if (spOprd1 == nullptr)
    return false;
  rInsn.AddOperand(spOprd1);

  // operand2: op2 = decode_Ib
  auto spOprd2 = Decode_Ib(rBinStrm, Offset, rInsn, Mode);
  if (spOprd2 == nullptr)
    return false;
  rInsn.AddOperand(spOprd2);

  return true;
}

/* operand ['op0 = decode_Vo', 'op1 = decode_Ey'] */
bool X86Architecture::Operand__Vo_Ey(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_Vo
  auto spOprd0 = Decode_Vo(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  // operand1: op1 = decode_Ey
  auto spOprd1 = Decode_Ey(rBinStrm, Offset, rInsn, Mode);
  if (spOprd1 == nullptr)
    return false;
  rInsn.AddOperand(spOprd1);

  return true;
}

/* operand ['op0 = decode_Vo', 'op1 = decode_Ey', 'op2 = decode_Ib'] */
bool X86Architecture::Operand__Vo_Ey_Ib(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_Vo
  auto spOprd0 = Decode_Vo(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  // operand1: op1 = decode_Ey
  auto spOprd1 = Decode_Ey(rBinStrm, Offset, rInsn, Mode);
  if (spOprd1 == nullptr)
    return false;
  rInsn.AddOperand(spOprd1);

  // operand2: op2 = decode_Ib
  auto spOprd2 = Decode_Ib(rBinStrm, Offset, rInsn, Mode);
  if (spOprd2 == nullptr)
    return false;
  rInsn.AddOperand(spOprd2);

  return true;
}

/* operand ['op0 = decode_Vo', 'op1 = decode_Ho', 'op2 = decode_Edb', 'op3 = decode_Ib'] */
bool X86Architecture::Operand__Vo_Ho_Edb_Ib(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_Vo
  auto spOprd0 = Decode_Vo(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  // operand1: op1 = decode_Ho
  auto spOprd1 = Decode_Ho(rBinStrm, Offset, rInsn, Mode);
  if (spOprd1 == nullptr)
    return false;
  rInsn.AddOperand(spOprd1);

  // operand2: op2 = decode_Edb
  auto spOprd2 = Decode_Edb(rBinStrm, Offset, rInsn, Mode);
  if (spOprd2 == nullptr)
    return false;
  rInsn.AddOperand(spOprd2);

  // operand3: op3 = decode_Ib
  auto spOprd3 = Decode_Ib(rBinStrm, Offset, rInsn, Mode);
  if (spOprd3 == nullptr)
    return false;
  rInsn.AddOperand(spOprd3);

  return true;
}

/* operand ['op0 = decode_Vo', 'op1 = decode_Ho', 'op2 = decode_Ey'] */
bool X86Architecture::Operand__Vo_Ho_Ey(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_Vo
  auto spOprd0 = Decode_Vo(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  // operand1: op1 = decode_Ho
  auto spOprd1 = Decode_Ho(rBinStrm, Offset, rInsn, Mode);
  if (spOprd1 == nullptr)
    return false;
  rInsn.AddOperand(spOprd1);

  // operand2: op2 = decode_Ey
  auto spOprd2 = Decode_Ey(rBinStrm, Offset, rInsn, Mode);
  if (spOprd2 == nullptr)
    return false;
  rInsn.AddOperand(spOprd2);

  return true;
}

/* operand ['op0 = decode_Vo', 'op1 = decode_Ho', 'op2 = decode_Ey', 'op3 = decode_Ib'] */
bool X86Architecture::Operand__Vo_Ho_Ey_Ib(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_Vo
  auto spOprd0 = Decode_Vo(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  // operand1: op1 = decode_Ho
  auto spOprd1 = Decode_Ho(rBinStrm, Offset, rInsn, Mode);
  if (spOprd1 == nullptr)
    return false;
  rInsn.AddOperand(spOprd1);

  // operand2: op2 = decode_Ey
  auto spOprd2 = Decode_Ey(rBinStrm, Offset, rInsn, Mode);
  if (spOprd2 == nullptr)
    return false;
  rInsn.AddOperand(spOprd2);

  // operand3: op3 = decode_Ib
  auto spOprd3 = Decode_Ib(rBinStrm, Offset, rInsn, Mode);
  if (spOprd3 == nullptr)
    return false;
  rInsn.AddOperand(spOprd3);

  return true;
}

/* operand ['op0 = decode_Vo', 'op1 = decode_Ho', 'op2 = decode_Mw', 'op3 = decode_Ib'] */
bool X86Architecture::Operand__Vo_Ho_Mw_Ib(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_Vo
  auto spOprd0 = Decode_Vo(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  // operand1: op1 = decode_Ho
  auto spOprd1 = Decode_Ho(rBinStrm, Offset, rInsn, Mode);
  if (spOprd1 == nullptr)
    return false;
  rInsn.AddOperand(spOprd1);

  // operand2: op2 = decode_Mw
  auto spOprd2 = Decode_Mw(rBinStrm, Offset, rInsn, Mode);
  if (spOprd2 == nullptr)
    return false;
  rInsn.AddOperand(spOprd2);

  // operand3: op3 = decode_Ib
  auto spOprd3 = Decode_Ib(rBinStrm, Offset, rInsn, Mode);
  if (spOprd3 == nullptr)
    return false;
  rInsn.AddOperand(spOprd3);

  return true;
}

/* operand ['op0 = decode_Vo', 'op1 = decode_Ho', 'op2 = decode_Uod', 'op3 = decode_Ib'] */
bool X86Architecture::Operand__Vo_Ho_Uod_Ib(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_Vo
  auto spOprd0 = Decode_Vo(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  // operand1: op1 = decode_Ho
  auto spOprd1 = Decode_Ho(rBinStrm, Offset, rInsn, Mode);
  if (spOprd1 == nullptr)
    return false;
  rInsn.AddOperand(spOprd1);

  // operand2: op2 = decode_Uod
  auto spOprd2 = Decode_Uod(rBinStrm, Offset, rInsn, Mode);
  if (spOprd2 == nullptr)
    return false;
  rInsn.AddOperand(spOprd2);

  // operand3: op3 = decode_Ib
  auto spOprd3 = Decode_Ib(rBinStrm, Offset, rInsn, Mode);
  if (spOprd3 == nullptr)
    return false;
  rInsn.AddOperand(spOprd3);

  return true;
}

/* operand ['op0 = decode_Vo', 'op1 = decode_Ho', 'op2 = decode_Uoq'] */
bool X86Architecture::Operand__Vo_Ho_Uoq(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_Vo
  auto spOprd0 = Decode_Vo(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  // operand1: op1 = decode_Ho
  auto spOprd1 = Decode_Ho(rBinStrm, Offset, rInsn, Mode);
  if (spOprd1 == nullptr)
    return false;
  rInsn.AddOperand(spOprd1);

  // operand2: op2 = decode_Uoq
  auto spOprd2 = Decode_Uoq(rBinStrm, Offset, rInsn, Mode);
  if (spOprd2 == nullptr)
    return false;
  rInsn.AddOperand(spOprd2);

  return true;
}

/* operand ['op0 = decode_Vo', 'op1 = decode_Ho', 'op2 = decode_Wd'] */
bool X86Architecture::Operand__Vo_Ho_Wd(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_Vo
  auto spOprd0 = Decode_Vo(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  // operand1: op1 = decode_Ho
  auto spOprd1 = Decode_Ho(rBinStrm, Offset, rInsn, Mode);
  if (spOprd1 == nullptr)
    return false;
  rInsn.AddOperand(spOprd1);

  // operand2: op2 = decode_Wd
  auto spOprd2 = Decode_Wd(rBinStrm, Offset, rInsn, Mode);
  if (spOprd2 == nullptr)
    return false;
  rInsn.AddOperand(spOprd2);

  return true;
}

/* operand ['op0 = decode_Vo', 'op1 = decode_Ho', 'op2 = decode_Wo'] */
bool X86Architecture::Operand__Vo_Ho_Wo(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_Vo
  auto spOprd0 = Decode_Vo(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  // operand1: op1 = decode_Ho
  auto spOprd1 = Decode_Ho(rBinStrm, Offset, rInsn, Mode);
  if (spOprd1 == nullptr)
    return false;
  rInsn.AddOperand(spOprd1);

  // operand2: op2 = decode_Wo
  auto spOprd2 = Decode_Wo(rBinStrm, Offset, rInsn, Mode);
  if (spOprd2 == nullptr)
    return false;
  rInsn.AddOperand(spOprd2);

  return true;
}

/* operand ['op0 = decode_Vo', 'op1 = decode_Ho', 'op2 = decode_Wo', 'op3 = decode_Ib'] */
bool X86Architecture::Operand__Vo_Ho_Wo_Ib(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_Vo
  auto spOprd0 = Decode_Vo(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  // operand1: op1 = decode_Ho
  auto spOprd1 = Decode_Ho(rBinStrm, Offset, rInsn, Mode);
  if (spOprd1 == nullptr)
    return false;
  rInsn.AddOperand(spOprd1);

  // operand2: op2 = decode_Wo
  auto spOprd2 = Decode_Wo(rBinStrm, Offset, rInsn, Mode);
  if (spOprd2 == nullptr)
    return false;
  rInsn.AddOperand(spOprd2);

  // operand3: op3 = decode_Ib
  auto spOprd3 = Decode_Ib(rBinStrm, Offset, rInsn, Mode);
  if (spOprd3 == nullptr)
    return false;
  rInsn.AddOperand(spOprd3);

  return true;
}

/* operand ['op0 = decode_Vo', 'op1 = decode_Ho', 'op2 = decode_Wod'] */
bool X86Architecture::Operand__Vo_Ho_Wod(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_Vo
  auto spOprd0 = Decode_Vo(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  // operand1: op1 = decode_Ho
  auto spOprd1 = Decode_Ho(rBinStrm, Offset, rInsn, Mode);
  if (spOprd1 == nullptr)
    return false;
  rInsn.AddOperand(spOprd1);

  // operand2: op2 = decode_Wod
  auto spOprd2 = Decode_Wod(rBinStrm, Offset, rInsn, Mode);
  if (spOprd2 == nullptr)
    return false;
  rInsn.AddOperand(spOprd2);

  return true;
}

/* operand ['op0 = decode_Vo', 'op1 = decode_Ho', 'op2 = decode_Woq'] */
bool X86Architecture::Operand__Vo_Ho_Woq(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_Vo
  auto spOprd0 = Decode_Vo(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  // operand1: op1 = decode_Ho
  auto spOprd1 = Decode_Ho(rBinStrm, Offset, rInsn, Mode);
  if (spOprd1 == nullptr)
    return false;
  rInsn.AddOperand(spOprd1);

  // operand2: op2 = decode_Woq
  auto spOprd2 = Decode_Woq(rBinStrm, Offset, rInsn, Mode);
  if (spOprd2 == nullptr)
    return false;
  rInsn.AddOperand(spOprd2);

  return true;
}

/* operand ['op0 = decode_Vo', 'op1 = decode_Ho', 'op2 = decode_Woq', 'op3 = decode_Ib'] */
bool X86Architecture::Operand__Vo_Ho_Woq_Ib(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_Vo
  auto spOprd0 = Decode_Vo(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  // operand1: op1 = decode_Ho
  auto spOprd1 = Decode_Ho(rBinStrm, Offset, rInsn, Mode);
  if (spOprd1 == nullptr)
    return false;
  rInsn.AddOperand(spOprd1);

  // operand2: op2 = decode_Woq
  auto spOprd2 = Decode_Woq(rBinStrm, Offset, rInsn, Mode);
  if (spOprd2 == nullptr)
    return false;
  rInsn.AddOperand(spOprd2);

  // operand3: op3 = decode_Ib
  auto spOprd3 = Decode_Ib(rBinStrm, Offset, rInsn, Mode);
  if (spOprd3 == nullptr)
    return false;
  rInsn.AddOperand(spOprd3);

  return true;
}

/* operand ['op0 = decode_Vo', 'op1 = decode_Ho', 'op2 = decode_Wq'] */
bool X86Architecture::Operand__Vo_Ho_Wq(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_Vo
  auto spOprd0 = Decode_Vo(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  // operand1: op1 = decode_Ho
  auto spOprd1 = Decode_Ho(rBinStrm, Offset, rInsn, Mode);
  if (spOprd1 == nullptr)
    return false;
  rInsn.AddOperand(spOprd1);

  // operand2: op2 = decode_Wq
  auto spOprd2 = Decode_Wq(rBinStrm, Offset, rInsn, Mode);
  if (spOprd2 == nullptr)
    return false;
  rInsn.AddOperand(spOprd2);

  return true;
}

/* operand ['op0 = decode_Vo', 'op1 = decode_Md', 'op2 = decode_x', 'op3 = decode_Ho'] */
bool X86Architecture::Operand__Vo_Md_x_Ho(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_Vo
  auto spOprd0 = Decode_Vo(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  // operand1: op1 = decode_Md
  auto spOprd1 = Decode_Md(rBinStrm, Offset, rInsn, Mode);
  if (spOprd1 == nullptr)
    return false;
  rInsn.AddOperand(spOprd1);

  // operand2: op2 = decode_x
  auto spOprd2 = Decode_x(rBinStrm, Offset, rInsn, Mode);
  if (spOprd2 == nullptr)
    return false;
  rInsn.AddOperand(spOprd2);

  // operand3: op3 = decode_Ho
  auto spOprd3 = Decode_Ho(rBinStrm, Offset, rInsn, Mode);
  if (spOprd3 == nullptr)
    return false;
  rInsn.AddOperand(spOprd3);

  return true;
}

/* operand ['op0 = decode_Vo', 'op1 = decode_Mq'] */
bool X86Architecture::Operand__Vo_Mq(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_Vo
  auto spOprd0 = Decode_Vo(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  // operand1: op1 = decode_Mq
  auto spOprd1 = Decode_Mq(rBinStrm, Offset, rInsn, Mode);
  if (spOprd1 == nullptr)
    return false;
  rInsn.AddOperand(spOprd1);

  return true;
}

/* operand ['op0 = decode_Vo', 'op1 = decode_Mw', 'op2 = decode_Ib'] */
bool X86Architecture::Operand__Vo_Mw_Ib(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_Vo
  auto spOprd0 = Decode_Vo(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  // operand1: op1 = decode_Mw
  auto spOprd1 = Decode_Mw(rBinStrm, Offset, rInsn, Mode);
  if (spOprd1 == nullptr)
    return false;
  rInsn.AddOperand(spOprd1);

  // operand2: op2 = decode_Ib
  auto spOprd2 = Decode_Ib(rBinStrm, Offset, rInsn, Mode);
  if (spOprd2 == nullptr)
    return false;
  rInsn.AddOperand(spOprd2);

  return true;
}

/* operand ['op0 = decode_Vo', 'op1 = decode_Nq'] */
bool X86Architecture::Operand__Vo_Nq(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_Vo
  auto spOprd0 = Decode_Vo(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  // operand1: op1 = decode_Nq
  auto spOprd1 = Decode_Nq(rBinStrm, Offset, rInsn, Mode);
  if (spOprd1 == nullptr)
    return false;
  rInsn.AddOperand(spOprd1);

  return true;
}

/* operand ['op0 = decode_Vo', 'op1 = decode_Uo'] */
bool X86Architecture::Operand__Vo_Uo(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_Vo
  auto spOprd0 = Decode_Vo(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  // operand1: op1 = decode_Uo
  auto spOprd1 = Decode_Uo(rBinStrm, Offset, rInsn, Mode);
  if (spOprd1 == nullptr)
    return false;
  rInsn.AddOperand(spOprd1);

  return true;
}

/* operand ['op0 = decode_Vo', 'op1 = decode_Uod'] */
bool X86Architecture::Operand__Vo_Uod(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_Vo
  auto spOprd0 = Decode_Vo(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  // operand1: op1 = decode_Uod
  auto spOprd1 = Decode_Uod(rBinStrm, Offset, rInsn, Mode);
  if (spOprd1 == nullptr)
    return false;
  rInsn.AddOperand(spOprd1);

  return true;
}

/* operand ['op0 = decode_Vo', 'op1 = decode_Uod', 'op2 = decode_Ib'] */
bool X86Architecture::Operand__Vo_Uod_Ib(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_Vo
  auto spOprd0 = Decode_Vo(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  // operand1: op1 = decode_Uod
  auto spOprd1 = Decode_Uod(rBinStrm, Offset, rInsn, Mode);
  if (spOprd1 == nullptr)
    return false;
  rInsn.AddOperand(spOprd1);

  // operand2: op2 = decode_Ib
  auto spOprd2 = Decode_Ib(rBinStrm, Offset, rInsn, Mode);
  if (spOprd2 == nullptr)
    return false;
  rInsn.AddOperand(spOprd2);

  return true;
}

/* operand ['op0 = decode_Vo', 'op1 = decode_Uoq'] */
bool X86Architecture::Operand__Vo_Uoq(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_Vo
  auto spOprd0 = Decode_Vo(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  // operand1: op1 = decode_Uoq
  auto spOprd1 = Decode_Uoq(rBinStrm, Offset, rInsn, Mode);
  if (spOprd1 == nullptr)
    return false;
  rInsn.AddOperand(spOprd1);

  return true;
}

/* operand ['op0 = decode_Vo', 'op1 = decode_Wo'] */
bool X86Architecture::Operand__Vo_Wo(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_Vo
  auto spOprd0 = Decode_Vo(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  // operand1: op1 = decode_Wo
  auto spOprd1 = Decode_Wo(rBinStrm, Offset, rInsn, Mode);
  if (spOprd1 == nullptr)
    return false;
  rInsn.AddOperand(spOprd1);

  return true;
}

/* operand ['op0 = decode_Vo', 'op1 = decode_Wo', 'op2 = decode_Ib'] */
bool X86Architecture::Operand__Vo_Wo_Ib(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_Vo
  auto spOprd0 = Decode_Vo(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  // operand1: op1 = decode_Wo
  auto spOprd1 = Decode_Wo(rBinStrm, Offset, rInsn, Mode);
  if (spOprd1 == nullptr)
    return false;
  rInsn.AddOperand(spOprd1);

  // operand2: op2 = decode_Ib
  auto spOprd2 = Decode_Ib(rBinStrm, Offset, rInsn, Mode);
  if (spOprd2 == nullptr)
    return false;
  rInsn.AddOperand(spOprd2);

  return true;
}

/* operand ['op0 = decode_Vo', 'op1 = decode_Wod'] */
bool X86Architecture::Operand__Vo_Wod(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_Vo
  auto spOprd0 = Decode_Vo(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  // operand1: op1 = decode_Wod
  auto spOprd1 = Decode_Wod(rBinStrm, Offset, rInsn, Mode);
  if (spOprd1 == nullptr)
    return false;
  rInsn.AddOperand(spOprd1);

  return true;
}

/* operand ['op0 = decode_Vo', 'op1 = decode_Woq'] */
bool X86Architecture::Operand__Vo_Woq(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_Vo
  auto spOprd0 = Decode_Vo(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  // operand1: op1 = decode_Woq
  auto spOprd1 = Decode_Woq(rBinStrm, Offset, rInsn, Mode);
  if (spOprd1 == nullptr)
    return false;
  rInsn.AddOperand(spOprd1);

  return true;
}

/* operand ['op0 = decode_Vo', 'op1 = decode_Woq', 'op2 = decode_Ib'] */
bool X86Architecture::Operand__Vo_Woq_Ib(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_Vo
  auto spOprd0 = Decode_Vo(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  // operand1: op1 = decode_Woq
  auto spOprd1 = Decode_Woq(rBinStrm, Offset, rInsn, Mode);
  if (spOprd1 == nullptr)
    return false;
  rInsn.AddOperand(spOprd1);

  // operand2: op2 = decode_Ib
  auto spOprd2 = Decode_Ib(rBinStrm, Offset, rInsn, Mode);
  if (spOprd2 == nullptr)
    return false;
  rInsn.AddOperand(spOprd2);

  return true;
}

/* operand ['op0 = decode_Vo', 'op1 = decode_Wow'] */
bool X86Architecture::Operand__Vo_Wow(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_Vo
  auto spOprd0 = Decode_Vo(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  // operand1: op1 = decode_Wow
  auto spOprd1 = Decode_Wow(rBinStrm, Offset, rInsn, Mode);
  if (spOprd1 == nullptr)
    return false;
  rInsn.AddOperand(spOprd1);

  return true;
}

/* operand ['op0 = decode_Vo', 'op1 = decode_Wx'] */
bool X86Architecture::Operand__Vo_Wx(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_Vo
  auto spOprd0 = Decode_Vo(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  // operand1: op1 = decode_Wx
  auto spOprd1 = Decode_Wx(rBinStrm, Offset, rInsn, Mode);
  if (spOprd1 == nullptr)
    return false;
  rInsn.AddOperand(spOprd1);

  return true;
}

/* operand ['op0 = decode_Vx', 'op1 = decode_Hx', 'op2 = decode_Mx'] */
bool X86Architecture::Operand__Vx_Hx_Mx(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_Vx
  auto spOprd0 = Decode_Vx(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  // operand1: op1 = decode_Hx
  auto spOprd1 = Decode_Hx(rBinStrm, Offset, rInsn, Mode);
  if (spOprd1 == nullptr)
    return false;
  rInsn.AddOperand(spOprd1);

  // operand2: op2 = decode_Mx
  auto spOprd2 = Decode_Mx(rBinStrm, Offset, rInsn, Mode);
  if (spOprd2 == nullptr)
    return false;
  rInsn.AddOperand(spOprd2);

  return true;
}

/* operand ['op0 = decode_Vx', 'op1 = decode_Hx', 'op2 = decode_Wx'] */
bool X86Architecture::Operand__Vx_Hx_Wx(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_Vx
  auto spOprd0 = Decode_Vx(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  // operand1: op1 = decode_Hx
  auto spOprd1 = Decode_Hx(rBinStrm, Offset, rInsn, Mode);
  if (spOprd1 == nullptr)
    return false;
  rInsn.AddOperand(spOprd1);

  // operand2: op2 = decode_Wx
  auto spOprd2 = Decode_Wx(rBinStrm, Offset, rInsn, Mode);
  if (spOprd2 == nullptr)
    return false;
  rInsn.AddOperand(spOprd2);

  return true;
}

/* operand ['last_len', 'op0 = decode_Vx', 'op1 = decode_Hx', 'op2 = decode_Wx', 'move_decode_offset(next_operand)', 'op3 = decode_Ib'] */
bool X86Architecture::Operand__Vx_Hx_Wx_Ib(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: last_len
  auto LastLen = rInsn.GetLength();
  // operand0: op0 = decode_Vx
  auto spOprd0 = Decode_Vx(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  // operand1: op1 = decode_Hx
  auto spOprd1 = Decode_Hx(rBinStrm, Offset, rInsn, Mode);
  if (spOprd1 == nullptr)
    return false;
  rInsn.AddOperand(spOprd1);

  // operand2: op2 = decode_Wx
  auto spOprd2 = Decode_Wx(rBinStrm, Offset, rInsn, Mode);
  if (spOprd2 == nullptr)
    return false;
  rInsn.AddOperand(spOprd2);

  // operand3: move_decode_offset(next_operand)
  Offset += (rInsn.GetLength() - LastLen);
  // operand3: op3 = decode_Ib
  auto spOprd3 = Decode_Ib(rBinStrm, Offset, rInsn, Mode);
  if (spOprd3 == nullptr)
    return false;
  rInsn.AddOperand(spOprd3);

  return true;
}

/* operand ['op0 = decode_Vx', 'op1 = decode_Hx', 'op2 = decode_Wx', 'op3 = decode_Lx'] */
bool X86Architecture::Operand__Vx_Hx_Wx_Lx(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_Vx
  auto spOprd0 = Decode_Vx(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  // operand1: op1 = decode_Hx
  auto spOprd1 = Decode_Hx(rBinStrm, Offset, rInsn, Mode);
  if (spOprd1 == nullptr)
    return false;
  rInsn.AddOperand(spOprd1);

  // operand2: op2 = decode_Wx
  auto spOprd2 = Decode_Wx(rBinStrm, Offset, rInsn, Mode);
  if (spOprd2 == nullptr)
    return false;
  rInsn.AddOperand(spOprd2);

  // operand3: op3 = decode_Lx
  auto spOprd3 = Decode_Lx(rBinStrm, Offset, rInsn, Mode);
  if (spOprd3 == nullptr)
    return false;
  rInsn.AddOperand(spOprd3);

  return true;
}

/* operand ['op0 = decode_Vx', 'op1 = decode_Md', 'op2 = decode_x', 'op3 = decode_Hx'] */
bool X86Architecture::Operand__Vx_Md_x_Hx(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_Vx
  auto spOprd0 = Decode_Vx(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  // operand1: op1 = decode_Md
  auto spOprd1 = Decode_Md(rBinStrm, Offset, rInsn, Mode);
  if (spOprd1 == nullptr)
    return false;
  rInsn.AddOperand(spOprd1);

  // operand2: op2 = decode_x
  auto spOprd2 = Decode_x(rBinStrm, Offset, rInsn, Mode);
  if (spOprd2 == nullptr)
    return false;
  rInsn.AddOperand(spOprd2);

  // operand3: op3 = decode_Hx
  auto spOprd3 = Decode_Hx(rBinStrm, Offset, rInsn, Mode);
  if (spOprd3 == nullptr)
    return false;
  rInsn.AddOperand(spOprd3);

  return true;
}

/* operand ['op0 = decode_Vx', 'op1 = decode_Mq', 'op2 = decode_x', 'op3 = decode_Hx'] */
bool X86Architecture::Operand__Vx_Mq_x_Hx(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_Vx
  auto spOprd0 = Decode_Vx(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  // operand1: op1 = decode_Mq
  auto spOprd1 = Decode_Mq(rBinStrm, Offset, rInsn, Mode);
  if (spOprd1 == nullptr)
    return false;
  rInsn.AddOperand(spOprd1);

  // operand2: op2 = decode_x
  auto spOprd2 = Decode_x(rBinStrm, Offset, rInsn, Mode);
  if (spOprd2 == nullptr)
    return false;
  rInsn.AddOperand(spOprd2);

  // operand3: op3 = decode_Hx
  auto spOprd3 = Decode_Hx(rBinStrm, Offset, rInsn, Mode);
  if (spOprd3 == nullptr)
    return false;
  rInsn.AddOperand(spOprd3);

  return true;
}

/* operand ['op0 = decode_Vx', 'op1 = decode_Mqo', 'op2 = decode_Hx'] */
bool X86Architecture::Operand__Vx_Mqo_Hx(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_Vx
  auto spOprd0 = Decode_Vx(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  // operand1: op1 = decode_Mqo
  auto spOprd1 = Decode_Mqo(rBinStrm, Offset, rInsn, Mode);
  if (spOprd1 == nullptr)
    return false;
  rInsn.AddOperand(spOprd1);

  // operand2: op2 = decode_Hx
  auto spOprd2 = Decode_Hx(rBinStrm, Offset, rInsn, Mode);
  if (spOprd2 == nullptr)
    return false;
  rInsn.AddOperand(spOprd2);

  return true;
}

/* operand ['op0 = decode_Vx', 'op1 = decode_Mx'] */
bool X86Architecture::Operand__Vx_Mx(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_Vx
  auto spOprd0 = Decode_Vx(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  // operand1: op1 = decode_Mx
  auto spOprd1 = Decode_Mx(rBinStrm, Offset, rInsn, Mode);
  if (spOprd1 == nullptr)
    return false;
  rInsn.AddOperand(spOprd1);

  return true;
}

/* operand ['op0 = decode_Vx', 'op1 = decode_Uo'] */
bool X86Architecture::Operand__Vx_Uo(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_Vx
  auto spOprd0 = Decode_Vx(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  // operand1: op1 = decode_Uo
  auto spOprd1 = Decode_Uo(rBinStrm, Offset, rInsn, Mode);
  if (spOprd1 == nullptr)
    return false;
  rInsn.AddOperand(spOprd1);

  return true;
}

/* operand ['op0 = decode_Vx', 'op1 = decode_Uo', 'op2 = decode_b'] */
bool X86Architecture::Operand__Vx_Uo_b(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_Vx
  auto spOprd0 = Decode_Vx(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  // operand1: op1 = decode_Uo
  auto spOprd1 = Decode_Uo(rBinStrm, Offset, rInsn, Mode);
  if (spOprd1 == nullptr)
    return false;
  rInsn.AddOperand(spOprd1);

  // operand2: op2 = decode_b
  auto spOprd2 = Decode_b(rBinStrm, Offset, rInsn, Mode);
  if (spOprd2 == nullptr)
    return false;
  rInsn.AddOperand(spOprd2);

  return true;
}

/* operand ['op0 = decode_Vx', 'op1 = decode_Uo', 'op2 = decode_w'] */
bool X86Architecture::Operand__Vx_Uo_w(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_Vx
  auto spOprd0 = Decode_Vx(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  // operand1: op1 = decode_Uo
  auto spOprd1 = Decode_Uo(rBinStrm, Offset, rInsn, Mode);
  if (spOprd1 == nullptr)
    return false;
  rInsn.AddOperand(spOprd1);

  // operand2: op2 = decode_w
  auto spOprd2 = Decode_w(rBinStrm, Offset, rInsn, Mode);
  if (spOprd2 == nullptr)
    return false;
  rInsn.AddOperand(spOprd2);

  return true;
}

/* operand ['op0 = decode_Vx', 'op1 = decode_Uod'] */
bool X86Architecture::Operand__Vx_Uod(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_Vx
  auto spOprd0 = Decode_Vx(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  // operand1: op1 = decode_Uod
  auto spOprd1 = Decode_Uod(rBinStrm, Offset, rInsn, Mode);
  if (spOprd1 == nullptr)
    return false;
  rInsn.AddOperand(spOprd1);

  return true;
}

/* operand ['op0 = decode_Vx', 'op1 = decode_Uoq'] */
bool X86Architecture::Operand__Vx_Uoq(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_Vx
  auto spOprd0 = Decode_Vx(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  // operand1: op1 = decode_Uoq
  auto spOprd1 = Decode_Uoq(rBinStrm, Offset, rInsn, Mode);
  if (spOprd1 == nullptr)
    return false;
  rInsn.AddOperand(spOprd1);

  return true;
}

/* operand ['op0 = decode_Vx', 'op1 = decode_Woq'] */
bool X86Architecture::Operand__Vx_Woq(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_Vx
  auto spOprd0 = Decode_Vx(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  // operand1: op1 = decode_Woq
  auto spOprd1 = Decode_Woq(rBinStrm, Offset, rInsn, Mode);
  if (spOprd1 == nullptr)
    return false;
  rInsn.AddOperand(spOprd1);

  return true;
}

/* operand ['op0 = decode_Vx', 'op1 = decode_Wx'] */
bool X86Architecture::Operand__Vx_Wx(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_Vx
  auto spOprd0 = Decode_Vx(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  // operand1: op1 = decode_Wx
  auto spOprd1 = Decode_Wx(rBinStrm, Offset, rInsn, Mode);
  if (spOprd1 == nullptr)
    return false;
  rInsn.AddOperand(spOprd1);

  return true;
}

/* operand ['last_len', 'op0 = decode_Vx', 'op1 = decode_Wx', 'move_decode_offset(next_operand)', 'op2 = decode_Ib'] */
bool X86Architecture::Operand__Vx_Wx_Ib(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: last_len
  auto LastLen = rInsn.GetLength();
  // operand0: op0 = decode_Vx
  auto spOprd0 = Decode_Vx(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  // operand1: op1 = decode_Wx
  auto spOprd1 = Decode_Wx(rBinStrm, Offset, rInsn, Mode);
  if (spOprd1 == nullptr)
    return false;
  rInsn.AddOperand(spOprd1);

  // operand2: move_decode_offset(next_operand)
  Offset += (rInsn.GetLength() - LastLen);
  // operand2: op2 = decode_Ib
  auto spOprd2 = Decode_Ib(rBinStrm, Offset, rInsn, Mode);
  if (spOprd2 == nullptr)
    return false;
  rInsn.AddOperand(spOprd2);

  return true;
}

/* operand ['last_len', 'op0 = decode_Vy', 'op1 = decode_Hy', 'op2 = decode_Wo', 'move_decode_offset(next_operand)', 'op3 = decode_Ib'] */
bool X86Architecture::Operand__Vy_Hy_Wo_Ib(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: last_len
  auto LastLen = rInsn.GetLength();
  // operand0: op0 = decode_Vy
  auto spOprd0 = Decode_Vy(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  // operand1: op1 = decode_Hy
  auto spOprd1 = Decode_Hy(rBinStrm, Offset, rInsn, Mode);
  if (spOprd1 == nullptr)
    return false;
  rInsn.AddOperand(spOprd1);

  // operand2: op2 = decode_Wo
  auto spOprd2 = Decode_Wo(rBinStrm, Offset, rInsn, Mode);
  if (spOprd2 == nullptr)
    return false;
  rInsn.AddOperand(spOprd2);

  // operand3: move_decode_offset(next_operand)
  Offset += (rInsn.GetLength() - LastLen);
  // operand3: op3 = decode_Ib
  auto spOprd3 = Decode_Ib(rBinStrm, Offset, rInsn, Mode);
  if (spOprd3 == nullptr)
    return false;
  rInsn.AddOperand(spOprd3);

  return true;
}

/* operand ['op0 = decode_Vy', 'op1 = decode_Hy', 'op2 = decode_Wy'] */
bool X86Architecture::Operand__Vy_Hy_Wy(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_Vy
  auto spOprd0 = Decode_Vy(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  // operand1: op1 = decode_Hy
  auto spOprd1 = Decode_Hy(rBinStrm, Offset, rInsn, Mode);
  if (spOprd1 == nullptr)
    return false;
  rInsn.AddOperand(spOprd1);

  // operand2: op2 = decode_Wy
  auto spOprd2 = Decode_Wy(rBinStrm, Offset, rInsn, Mode);
  if (spOprd2 == nullptr)
    return false;
  rInsn.AddOperand(spOprd2);

  return true;
}

/* operand ['last_len', 'op0 = decode_Vy', 'op1 = decode_Hy', 'op2 = decode_Wy', 'move_decode_offset(next_operand)', 'op3 = decode_Ib'] */
bool X86Architecture::Operand__Vy_Hy_Wy_Ib(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: last_len
  auto LastLen = rInsn.GetLength();
  // operand0: op0 = decode_Vy
  auto spOprd0 = Decode_Vy(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  // operand1: op1 = decode_Hy
  auto spOprd1 = Decode_Hy(rBinStrm, Offset, rInsn, Mode);
  if (spOprd1 == nullptr)
    return false;
  rInsn.AddOperand(spOprd1);

  // operand2: op2 = decode_Wy
  auto spOprd2 = Decode_Wy(rBinStrm, Offset, rInsn, Mode);
  if (spOprd2 == nullptr)
    return false;
  rInsn.AddOperand(spOprd2);

  // operand3: move_decode_offset(next_operand)
  Offset += (rInsn.GetLength() - LastLen);
  // operand3: op3 = decode_Ib
  auto spOprd3 = Decode_Ib(rBinStrm, Offset, rInsn, Mode);
  if (spOprd3 == nullptr)
    return false;
  rInsn.AddOperand(spOprd3);

  return true;
}

/* operand ['op0 = decode_Vy', 'op1 = decode_Uo'] */
bool X86Architecture::Operand__Vy_Uo(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_Vy
  auto spOprd0 = Decode_Vy(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  // operand1: op1 = decode_Uo
  auto spOprd1 = Decode_Uo(rBinStrm, Offset, rInsn, Mode);
  if (spOprd1 == nullptr)
    return false;
  rInsn.AddOperand(spOprd1);

  return true;
}

/* operand ['op0 = decode_Vy', 'op1 = decode_Uoq'] */
bool X86Architecture::Operand__Vy_Uoq(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_Vy
  auto spOprd0 = Decode_Vy(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  // operand1: op1 = decode_Uoq
  auto spOprd1 = Decode_Uoq(rBinStrm, Offset, rInsn, Mode);
  if (spOprd1 == nullptr)
    return false;
  rInsn.AddOperand(spOprd1);

  return true;
}

/* operand ['op0 = decode_Vy', 'op1 = decode_Wod'] */
bool X86Architecture::Operand__Vy_Wod(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_Vy
  auto spOprd0 = Decode_Vy(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  // operand1: op1 = decode_Wod
  auto spOprd1 = Decode_Wod(rBinStrm, Offset, rInsn, Mode);
  if (spOprd1 == nullptr)
    return false;
  rInsn.AddOperand(spOprd1);

  return true;
}

/* operand ['op0 = decode_Vy', 'op1 = decode_Woo'] */
bool X86Architecture::Operand__Vy_Woo(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_Vy
  auto spOprd0 = Decode_Vy(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  // operand1: op1 = decode_Woo
  auto spOprd1 = Decode_Woo(rBinStrm, Offset, rInsn, Mode);
  if (spOprd1 == nullptr)
    return false;
  rInsn.AddOperand(spOprd1);

  return true;
}

/* operand ['op0 = decode_Vy', 'op1 = decode_Woq'] */
bool X86Architecture::Operand__Vy_Woq(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_Vy
  auto spOprd0 = Decode_Vy(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  // operand1: op1 = decode_Woq
  auto spOprd1 = Decode_Woq(rBinStrm, Offset, rInsn, Mode);
  if (spOprd1 == nullptr)
    return false;
  rInsn.AddOperand(spOprd1);

  return true;
}

/* operand ['last_len', 'op0 = decode_Vy', 'op1 = decode_Wy', 'move_decode_offset(next_operand)', 'op2 = decode_Ib'] */
bool X86Architecture::Operand__Vy_Wy_Ib(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: last_len
  auto LastLen = rInsn.GetLength();
  // operand0: op0 = decode_Vy
  auto spOprd0 = Decode_Vy(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  // operand1: op1 = decode_Wy
  auto spOprd1 = Decode_Wy(rBinStrm, Offset, rInsn, Mode);
  if (spOprd1 == nullptr)
    return false;
  rInsn.AddOperand(spOprd1);

  // operand2: move_decode_offset(next_operand)
  Offset += (rInsn.GetLength() - LastLen);
  // operand2: op2 = decode_Ib
  auto spOprd2 = Decode_Ib(rBinStrm, Offset, rInsn, Mode);
  if (spOprd2 == nullptr)
    return false;
  rInsn.AddOperand(spOprd2);

  return true;
}

/* operand ['last_len', 'op0 = decode_Wo', 'op1 = decode_Vy', 'move_decode_offset(next_operand)', 'op2 = decode_Ib'] */
bool X86Architecture::Operand__Wo_Vy_Ib(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: last_len
  auto LastLen = rInsn.GetLength();
  // operand0: op0 = decode_Wo
  auto spOprd0 = Decode_Wo(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  // operand1: op1 = decode_Vy
  auto spOprd1 = Decode_Vy(rBinStrm, Offset, rInsn, Mode);
  if (spOprd1 == nullptr)
    return false;
  rInsn.AddOperand(spOprd1);

  // operand2: move_decode_offset(next_operand)
  Offset += (rInsn.GetLength() - LastLen);
  // operand2: op2 = decode_Ib
  auto spOprd2 = Decode_Ib(rBinStrm, Offset, rInsn, Mode);
  if (spOprd2 == nullptr)
    return false;
  rInsn.AddOperand(spOprd2);

  return true;
}

/* operand ['last_len', 'op0 = decode_Wob', 'op1 = decode_Vo', 'move_decode_offset(next_operand)', 'op2 = decode_Ib'] */
bool X86Architecture::Operand__Wob_Vo_Ib(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: last_len
  auto LastLen = rInsn.GetLength();
  // operand0: op0 = decode_Wob
  auto spOprd0 = Decode_Wob(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  // operand1: op1 = decode_Vo
  auto spOprd1 = Decode_Vo(rBinStrm, Offset, rInsn, Mode);
  if (spOprd1 == nullptr)
    return false;
  rInsn.AddOperand(spOprd1);

  // operand2: move_decode_offset(next_operand)
  Offset += (rInsn.GetLength() - LastLen);
  // operand2: op2 = decode_Ib
  auto spOprd2 = Decode_Ib(rBinStrm, Offset, rInsn, Mode);
  if (spOprd2 == nullptr)
    return false;
  rInsn.AddOperand(spOprd2);

  return true;
}

/* operand ['op0 = decode_Wod', 'op1 = decode_Vo'] */
bool X86Architecture::Operand__Wod_Vo(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_Wod
  auto spOprd0 = Decode_Wod(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  // operand1: op1 = decode_Vo
  auto spOprd1 = Decode_Vo(rBinStrm, Offset, rInsn, Mode);
  if (spOprd1 == nullptr)
    return false;
  rInsn.AddOperand(spOprd1);

  return true;
}

/* operand ['op0 = decode_Woq', 'op1 = decode_Vo'] */
bool X86Architecture::Operand__Woq_Vo(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_Woq
  auto spOprd0 = Decode_Woq(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  // operand1: op1 = decode_Vo
  auto spOprd1 = Decode_Vo(rBinStrm, Offset, rInsn, Mode);
  if (spOprd1 == nullptr)
    return false;
  rInsn.AddOperand(spOprd1);

  return true;
}

/* operand ['last_len', 'op0 = decode_Woqo', 'op1 = decode_Vx', 'move_decode_offset(next_operand)', 'op2 = decode_Ib'] */
bool X86Architecture::Operand__Woqo_Vx_Ib(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: last_len
  auto LastLen = rInsn.GetLength();
  // operand0: op0 = decode_Woqo
  auto spOprd0 = Decode_Woqo(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  // operand1: op1 = decode_Vx
  auto spOprd1 = Decode_Vx(rBinStrm, Offset, rInsn, Mode);
  if (spOprd1 == nullptr)
    return false;
  rInsn.AddOperand(spOprd1);

  // operand2: move_decode_offset(next_operand)
  Offset += (rInsn.GetLength() - LastLen);
  // operand2: op2 = decode_Ib
  auto spOprd2 = Decode_Ib(rBinStrm, Offset, rInsn, Mode);
  if (spOprd2 == nullptr)
    return false;
  rInsn.AddOperand(spOprd2);

  return true;
}

/* operand ['last_len', 'op0 = decode_Wow', 'op1 = decode_Vo', 'move_decode_offset(next_operand)', 'op2 = decode_Ib'] */
bool X86Architecture::Operand__Wow_Vo_Ib(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: last_len
  auto LastLen = rInsn.GetLength();
  // operand0: op0 = decode_Wow
  auto spOprd0 = Decode_Wow(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  // operand1: op1 = decode_Vo
  auto spOprd1 = Decode_Vo(rBinStrm, Offset, rInsn, Mode);
  if (spOprd1 == nullptr)
    return false;
  rInsn.AddOperand(spOprd1);

  // operand2: move_decode_offset(next_operand)
  Offset += (rInsn.GetLength() - LastLen);
  // operand2: op2 = decode_Ib
  auto spOprd2 = Decode_Ib(rBinStrm, Offset, rInsn, Mode);
  if (spOprd2 == nullptr)
    return false;
  rInsn.AddOperand(spOprd2);

  return true;
}

/* operand ['op0 = decode_Wx', 'op1 = decode_Vx'] */
bool X86Architecture::Operand__Wx_Vx(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_Wx
  auto spOprd0 = Decode_Wx(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  // operand1: op1 = decode_Vx
  auto spOprd1 = Decode_Vx(rBinStrm, Offset, rInsn, Mode);
  if (spOprd1 == nullptr)
    return false;
  rInsn.AddOperand(spOprd1);

  return true;
}

/* operand ['op0 = decode_Xb', 'op1 = decode_Yb'] */
bool X86Architecture::Operand__Xb_Yb(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_Xb
  auto spOprd0 = Decode_Xb(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  // operand1: op1 = decode_Yb
  auto spOprd1 = Decode_Yb(rBinStrm, Offset, rInsn, Mode);
  if (spOprd1 == nullptr)
    return false;
  rInsn.AddOperand(spOprd1);

  return true;
}

/* operand ['op0 = decode_Xv', 'op1 = decode_Yv'] */
bool X86Architecture::Operand__Xv_Yv(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_Xv
  auto spOprd0 = Decode_Xv(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  // operand1: op1 = decode_Yv
  auto spOprd1 = Decode_Yv(rBinStrm, Offset, rInsn, Mode);
  if (spOprd1 == nullptr)
    return false;
  rInsn.AddOperand(spOprd1);

  return true;
}

/* operand ['op0 = decode_Yb', 'op1 = decode_DX'] */
bool X86Architecture::Operand__Yb_DX(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_Yb
  auto spOprd0 = Decode_Yb(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  // operand1: op1 = decode_DX
  auto spOprd1 = Decode_DX(rBinStrm, Offset, rInsn, Mode);
  if (spOprd1 == nullptr)
    return false;
  rInsn.AddOperand(spOprd1);

  return true;
}

/* operand ['op0 = decode_Yz', 'op1 = decode_DX'] */
bool X86Architecture::Operand__Yz_DX(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_Yz
  auto spOprd0 = Decode_Yz(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  // operand1: op1 = decode_DX
  auto spOprd1 = Decode_DX(rBinStrm, Offset, rInsn, Mode);
  if (spOprd1 == nullptr)
    return false;
  rInsn.AddOperand(spOprd1);

  return true;
}

/* operand ['op0 = decode_d64_r10'] */
bool X86Architecture::Operand__d64_r10(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_d64_r10
  auto spOprd0 = Decode_d64_r10(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  return true;
}

/* operand ['op0 = decode_d64_r11'] */
bool X86Architecture::Operand__d64_r11(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_d64_r11
  auto spOprd0 = Decode_d64_r11(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  return true;
}

/* operand ['op0 = decode_d64_r12'] */
bool X86Architecture::Operand__d64_r12(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_d64_r12
  auto spOprd0 = Decode_d64_r12(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  return true;
}

/* operand ['op0 = decode_d64_r13'] */
bool X86Architecture::Operand__d64_r13(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_d64_r13
  auto spOprd0 = Decode_d64_r13(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  return true;
}

/* operand ['op0 = decode_d64_r14'] */
bool X86Architecture::Operand__d64_r14(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_d64_r14
  auto spOprd0 = Decode_d64_r14(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  return true;
}

/* operand ['op0 = decode_d64_r15'] */
bool X86Architecture::Operand__d64_r15(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_d64_r15
  auto spOprd0 = Decode_d64_r15(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  return true;
}

/* operand ['op0 = decode_d64_r8'] */
bool X86Architecture::Operand__d64_r8(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_d64_r8
  auto spOprd0 = Decode_d64_r8(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  return true;
}

/* operand ['op0 = decode_d64_r9'] */
bool X86Architecture::Operand__d64_r9(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_d64_r9
  auto spOprd0 = Decode_d64_r9(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  return true;
}

/* operand ['op0 = decode_d64_rAX'] */
bool X86Architecture::Operand__d64_rAX(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_d64_rAX
  auto spOprd0 = Decode_d64_rAX(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  return true;
}

/* operand ['op0 = decode_d64_rBP'] */
bool X86Architecture::Operand__d64_rBP(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_d64_rBP
  auto spOprd0 = Decode_d64_rBP(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  return true;
}

/* operand ['op0 = decode_d64_rBX'] */
bool X86Architecture::Operand__d64_rBX(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_d64_rBX
  auto spOprd0 = Decode_d64_rBX(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  return true;
}

/* operand ['op0 = decode_d64_rCX'] */
bool X86Architecture::Operand__d64_rCX(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_d64_rCX
  auto spOprd0 = Decode_d64_rCX(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  return true;
}

/* operand ['op0 = decode_d64_rDI'] */
bool X86Architecture::Operand__d64_rDI(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_d64_rDI
  auto spOprd0 = Decode_d64_rDI(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  return true;
}

/* operand ['op0 = decode_d64_rDX'] */
bool X86Architecture::Operand__d64_rDX(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_d64_rDX
  auto spOprd0 = Decode_d64_rDX(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  return true;
}

/* operand ['op0 = decode_d64_rSI'] */
bool X86Architecture::Operand__d64_rSI(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_d64_rSI
  auto spOprd0 = Decode_d64_rSI(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  return true;
}

/* operand ['op0 = decode_d64_rSP'] */
bool X86Architecture::Operand__d64_rSP(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_d64_rSP
  auto spOprd0 = Decode_d64_rSP(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  return true;
}

/* decoder ['const(8, 1)'] */
Expression::SPType X86Architecture::Decode_1(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: const(8, 1)
  return Expr::MakeBitVector(8, 1);
}

/* decoder ['const(8, 3)'] */
Expression::SPType X86Architecture::Decode_3(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: const(8, 3)
  return Expr::MakeBitVector(8, 3);
}

/* decoder ["reg('ah')"] */
Expression::SPType X86Architecture::Decode_AH(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: reg('ah')
  return Expr::MakeId(X86_Reg_Ah, &m_CpuInfo);
}

/* decoder ["reg('al')"] */
Expression::SPType X86Architecture::Decode_AL(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: reg('al')
  return Expr::MakeId(X86_Reg_Al, &m_CpuInfo);
}

/* decoder ["reg('ax')"] */
Expression::SPType X86Architecture::Decode_AX(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: reg('ax')
  return Expr::MakeId(X86_Reg_Ax, &m_CpuInfo);
}

/* decoder ["call('Decode_Ap')"] */
Expression::SPType X86Architecture::Decode_Ap(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: call('Decode_Ap')
  return __Decode_Ap(rBinStrm, Offset, rInsn, Mode);
}

/* decoder ["reg('bh')"] */
Expression::SPType X86Architecture::Decode_BH(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: reg('bh')
  return Expr::MakeId(X86_Reg_Bh, &m_CpuInfo);
}

/* decoder ["reg('bl')"] */
Expression::SPType X86Architecture::Decode_BL(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: reg('bl')
  return Expr::MakeId(X86_Reg_Bl, &m_CpuInfo);
}

/* decoder ["call('Decode_By')"] */
Expression::SPType X86Architecture::Decode_By(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: call('Decode_By')
  return __Decode_By(rBinStrm, Offset, rInsn, Mode);
}

/* decoder ["reg('ch')"] */
Expression::SPType X86Architecture::Decode_CH(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: reg('ch')
  return Expr::MakeId(X86_Reg_Ch, &m_CpuInfo);
}

/* decoder ["reg('cl')"] */
Expression::SPType X86Architecture::Decode_CL(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: reg('cl')
  return Expr::MakeId(X86_Reg_Cl, &m_CpuInfo);
}

/* decoder ["reg('cs')"] */
Expression::SPType X86Architecture::Decode_CS(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: reg('cs')
  return Expr::MakeId(X86_Reg_Cs, &m_CpuInfo);
}

/* decoder ["call('Decode_Cy')"] */
Expression::SPType X86Architecture::Decode_Cy(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: call('Decode_Cy')
  return __Decode_Cy(rBinStrm, Offset, rInsn, Mode);
}

/* decoder ["reg('dh')"] */
Expression::SPType X86Architecture::Decode_DH(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: reg('dh')
  return Expr::MakeId(X86_Reg_Dh, &m_CpuInfo);
}

/* decoder ["reg('dl')"] */
Expression::SPType X86Architecture::Decode_DL(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: reg('dl')
  return Expr::MakeId(X86_Reg_Dl, &m_CpuInfo);
}

/* decoder ["reg('ds')"] */
Expression::SPType X86Architecture::Decode_DS(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: reg('ds')
  return Expr::MakeId(X86_Reg_Ds, &m_CpuInfo);
}

/* decoder ["reg('dx')"] */
Expression::SPType X86Architecture::Decode_DX(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: reg('dx')
  return Expr::MakeId(X86_Reg_Dx, &m_CpuInfo);
}

/* decoder ["call('Decode_Dy')"] */
Expression::SPType X86Architecture::Decode_Dy(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: call('Decode_Dy')
  return __Decode_Dy(rBinStrm, Offset, rInsn, Mode);
}

/* decoder ["reg('es')"] */
Expression::SPType X86Architecture::Decode_ES(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: reg('es')
  return Expr::MakeId(X86_Reg_Es, &m_CpuInfo);
}

/* decoder ["call('Decode_Eb')"] */
Expression::SPType X86Architecture::Decode_Eb(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: call('Decode_Eb')
  return __Decode_Eb(rBinStrm, Offset, rInsn, Mode);
}

/* decoder ["call('Decode_Ed')"] */
Expression::SPType X86Architecture::Decode_Ed(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: call('Decode_Ed')
  return __Decode_Ed(rBinStrm, Offset, rInsn, Mode);
}

/* decoder ["call('Decode_Edb')"] */
Expression::SPType X86Architecture::Decode_Edb(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: call('Decode_Edb')
  return __Decode_Edb(rBinStrm, Offset, rInsn, Mode);
}

/* decoder ["call('Decode_Ev')"] */
Expression::SPType X86Architecture::Decode_Ev(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: call('Decode_Ev')
  return __Decode_Ev(rBinStrm, Offset, rInsn, Mode);
}

/* decoder ["call('Decode_Ew')"] */
Expression::SPType X86Architecture::Decode_Ew(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: call('Decode_Ew')
  return __Decode_Ew(rBinStrm, Offset, rInsn, Mode);
}

/* decoder ["call('Decode_Ey')"] */
Expression::SPType X86Architecture::Decode_Ey(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: call('Decode_Ey')
  return __Decode_Ey(rBinStrm, Offset, rInsn, Mode);
}

/* decoder ["call('Decode_Eyb')"] */
Expression::SPType X86Architecture::Decode_Eyb(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: call('Decode_Eyb')
  return __Decode_Eyb(rBinStrm, Offset, rInsn, Mode);
}

/* decoder ["call('Decode_Eyw')"] */
Expression::SPType X86Architecture::Decode_Eyw(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: call('Decode_Eyw')
  return __Decode_Eyw(rBinStrm, Offset, rInsn, Mode);
}

/* decoder ["reg('fs')"] */
Expression::SPType X86Architecture::Decode_FS(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: reg('fs')
  return Expr::MakeId(X86_Reg_Fs, &m_CpuInfo);
}

/* decoder ["reg('gs')"] */
Expression::SPType X86Architecture::Decode_GS(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: reg('gs')
  return Expr::MakeId(X86_Reg_Gs, &m_CpuInfo);
}

/* decoder ["call('Decode_Gb')"] */
Expression::SPType X86Architecture::Decode_Gb(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: call('Decode_Gb')
  return __Decode_Gb(rBinStrm, Offset, rInsn, Mode);
}

/* decoder ["call('Decode_Gv')"] */
Expression::SPType X86Architecture::Decode_Gv(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: call('Decode_Gv')
  return __Decode_Gv(rBinStrm, Offset, rInsn, Mode);
}

/* decoder ["call('Decode_Gw')"] */
Expression::SPType X86Architecture::Decode_Gw(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: call('Decode_Gw')
  return __Decode_Gw(rBinStrm, Offset, rInsn, Mode);
}

/* decoder ["call('Decode_Gy')"] */
Expression::SPType X86Architecture::Decode_Gy(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: call('Decode_Gy')
  return __Decode_Gy(rBinStrm, Offset, rInsn, Mode);
}

/* decoder ["call('Decode_Ho')"] */
Expression::SPType X86Architecture::Decode_Ho(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: call('Decode_Ho')
  return __Decode_Ho(rBinStrm, Offset, rInsn, Mode);
}

/* decoder ["call('Decode_Hx')"] */
Expression::SPType X86Architecture::Decode_Hx(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: call('Decode_Hx')
  return __Decode_Hx(rBinStrm, Offset, rInsn, Mode);
}

/* decoder ["call('Decode_Hy')"] */
Expression::SPType X86Architecture::Decode_Hy(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: call('Decode_Hy')
  return __Decode_Hy(rBinStrm, Offset, rInsn, Mode);
}

/* decoder ['read_b(off)'] */
Expression::SPType X86Architecture::Decode_Ib(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: read_b(off)
  u8 Value;
  if (!rBinStrm.Read(Offset, Value))
    return nullptr;
  Offset += sizeof(Value);
  rInsn.Length() += sizeof(Value);
  return Expr::MakeBitVector(8, Value);

}

/* decoder ["call('Decode_Ibs')"] */
Expression::SPType X86Architecture::Decode_Ibs(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: call('Decode_Ibs')
  return __Decode_Ibs(rBinStrm, Offset, rInsn, Mode);
}

/* decoder ['read_bsq(off)'] */
Expression::SPType X86Architecture::Decode_Ibsq(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: read_bsq(off)
  u8 Value;
  if (!rBinStrm.Read(Offset, Value))
    return nullptr;
  Offset += sizeof(Value);
  rInsn.Length() += sizeof(Value);
  return Expr::MakeBitVector(8, Value);

}

/* decoder ['read_v(off)'] */
Expression::SPType X86Architecture::Decode_Iv(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: read_v(off)
  switch (Mode)
  {
  case X86_Bit_16:
    if ((rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      u32 Value;
      if (!rBinStrm.Read(Offset, Value))
        return nullptr;
      Offset += sizeof(Value);
      rInsn.Length() += sizeof(Value);
      return Expr::MakeBitVector(32, Value);
    }
    else
    {
      u16 Value;
      if (!rBinStrm.Read(Offset, Value))
        return nullptr;
      Offset += sizeof(Value);
      rInsn.Length() += sizeof(Value);
      return Expr::MakeBitVector(16, Value);
    }
  case X86_Bit_64:
    if ((rInsn.GetPrefix() & X86_Prefix_REX_w) == X86_Prefix_REX_w)
    {
      u64 Value;
      if (!rBinStrm.Read(Offset, Value))
        return nullptr;
      Offset += sizeof(Value);
      rInsn.Length() += sizeof(Value);
      return Expr::MakeBitVector(64, Value);
    }
  case X86_Bit_32:
    if ((rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      u16 Value;
      if (!rBinStrm.Read(Offset, Value))
        return nullptr;
      Offset += sizeof(Value);
      rInsn.Length() += sizeof(Value);
      return Expr::MakeBitVector(16, Value);
    }
    else
    {
      u32 Value;
      if (!rBinStrm.Read(Offset, Value))
        return nullptr;
      Offset += sizeof(Value);
      rInsn.Length() += sizeof(Value);
      return Expr::MakeBitVector(32, Value);
    }
  default:
    return nullptr;
  }

}

/* decoder ['read_w(off)'] */
Expression::SPType X86Architecture::Decode_Iw(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: read_w(off)
  u16 Value;
  if (!rBinStrm.Read(Offset, Value))
    return nullptr;
  Offset += sizeof(Value);
  rInsn.Length() += sizeof(Value);
  return Expr::MakeBitVector(16, Value);

}

/* decoder ['read_z(off)'] */
Expression::SPType X86Architecture::Decode_Iz(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: read_z(off)
  switch (Mode)
  {
  case X86_Bit_16:
    if ((rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      u32 Value;
      if (!rBinStrm.Read(Offset, Value))
        return nullptr;
      Offset += sizeof(Value);
      rInsn.Length() += sizeof(Value);
      return Expr::MakeBitVector(32, Value);
    }
    else
    {
      u16 Value;
      if (!rBinStrm.Read(Offset, Value))
        return nullptr;
      Offset += sizeof(Value);
      rInsn.Length() += sizeof(Value);
      return Expr::MakeBitVector(16, Value);
    }
  case X86_Bit_64:
    if ((rInsn.GetPrefix() & X86_Prefix_REX_w) == X86_Prefix_REX_w)
    {
      u32 Value;
      if (!rBinStrm.Read(Offset, Value))
        return nullptr;
      Offset += sizeof(Value);
      rInsn.Length() += sizeof(Value);
      return Expr::MakeBitVector(64, SignExtend<s64, 32>(Value));
    }
  case X86_Bit_32:
    if ((rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      u16 Value;
      if (!rBinStrm.Read(Offset, Value))
        return nullptr;
      Offset += sizeof(Value);
      rInsn.Length() += sizeof(Value);
      return Expr::MakeBitVector(16, Value);
    }
    else
    {
      u32 Value;
      if (!rBinStrm.Read(Offset, Value))
        return nullptr;
      Offset += sizeof(Value);
      rInsn.Length() += sizeof(Value);
      return Expr::MakeBitVector(32, Value);
    }
  default:
    return nullptr;
  }

}

/* decoder ['read_zsq(off)'] */
Expression::SPType X86Architecture::Decode_Izsq(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: read_zsq(off)
  switch (Mode)
  {
  case X86_Bit_16:
    if ((rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      u32 Value;
      if (!rBinStrm.Read(Offset, Value))
        return nullptr;
      Offset += sizeof(Value);
      rInsn.Length() += sizeof(Value);
      return Expr::MakeBitVector(32, Value);
    }
    else
    {
      u16 Value;
      if (!rBinStrm.Read(Offset, Value))
        return nullptr;
      Offset += sizeof(Value);
      rInsn.Length() += sizeof(Value);
      return Expr::MakeBitVector(16, Value);
    }
  case X86_Bit_64:
    if ((rInsn.GetPrefix() & X86_Prefix_REX_w) == X86_Prefix_REX_w)
    {
      u32 Value;
      if (!rBinStrm.Read(Offset, Value))
        return nullptr;
      Offset += sizeof(Value);
      rInsn.Length() += sizeof(Value);
      return Expr::MakeBitVector(64, SignExtend<s64, 32>(Value));
    }
  case X86_Bit_32:
    if ((rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
    {
      u16 Value;
      if (!rBinStrm.Read(Offset, Value))
        return nullptr;
      Offset += sizeof(Value);
      rInsn.Length() += sizeof(Value);
      return Expr::MakeBitVector(16, Value);
    }
    else
    {
      u32 Value;
      if (!rBinStrm.Read(Offset, Value))
        return nullptr;
      Offset += sizeof(Value);
      rInsn.Length() += sizeof(Value);
      return Expr::MakeBitVector(32, Value);
    }
  default:
    return nullptr;
  }

}

/* decoder ["call('Decode_Jb')"] */
Expression::SPType X86Architecture::Decode_Jb(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: call('Decode_Jb')
  return __Decode_Jb(rBinStrm, Offset, rInsn, Mode);
}

/* decoder ["call('Decode_Jz')"] */
Expression::SPType X86Architecture::Decode_Jz(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: call('Decode_Jz')
  return __Decode_Jz(rBinStrm, Offset, rInsn, Mode);
}

/* decoder ["call('Decode_Lx')"] */
Expression::SPType X86Architecture::Decode_Lx(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: call('Decode_Lx')
  return __Decode_Lx(rBinStrm, Offset, rInsn, Mode);
}

/* decoder ["call('Decode_M')"] */
Expression::SPType X86Architecture::Decode_M(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: call('Decode_M')
  return __Decode_M(rBinStrm, Offset, rInsn, Mode);
}

/* decoder ["call('Decode_Ma')"] */
Expression::SPType X86Architecture::Decode_Ma(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: call('Decode_Ma')
  return __Decode_Ma(rBinStrm, Offset, rInsn, Mode);
}

/* decoder ["call('Decode_Md')"] */
Expression::SPType X86Architecture::Decode_Md(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: call('Decode_Md')
  return __Decode_Md(rBinStrm, Offset, rInsn, Mode);
}

/* decoder ["call('Decode_Mp')"] */
Expression::SPType X86Architecture::Decode_Mp(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: call('Decode_Mp')
  return __Decode_Mp(rBinStrm, Offset, rInsn, Mode);
}

/* decoder ["call('Decode_Mq')"] */
Expression::SPType X86Architecture::Decode_Mq(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: call('Decode_Mq')
  return __Decode_Mq(rBinStrm, Offset, rInsn, Mode);
}

/* decoder ["call('Decode_Mqo')"] */
Expression::SPType X86Architecture::Decode_Mqo(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: call('Decode_Mqo')
  return __Decode_Mqo(rBinStrm, Offset, rInsn, Mode);
}

/* decoder ["call('Decode_Mv')"] */
Expression::SPType X86Architecture::Decode_Mv(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: call('Decode_Mv')
  return __Decode_Mv(rBinStrm, Offset, rInsn, Mode);
}

/* decoder ["call('Decode_Mw')"] */
Expression::SPType X86Architecture::Decode_Mw(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: call('Decode_Mw')
  return __Decode_Mw(rBinStrm, Offset, rInsn, Mode);
}

/* decoder ["call('Decode_Mx')"] */
Expression::SPType X86Architecture::Decode_Mx(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: call('Decode_Mx')
  return __Decode_Mx(rBinStrm, Offset, rInsn, Mode);
}

/* decoder ["call('Decode_My')"] */
Expression::SPType X86Architecture::Decode_My(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: call('Decode_My')
  return __Decode_My(rBinStrm, Offset, rInsn, Mode);
}

/* decoder ["call('Decode_Nq')"] */
Expression::SPType X86Architecture::Decode_Nq(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: call('Decode_Nq')
  return __Decode_Nq(rBinStrm, Offset, rInsn, Mode);
}

/* decoder ["call('Decode_Ob')"] */
Expression::SPType X86Architecture::Decode_Ob(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: call('Decode_Ob')
  return __Decode_Ob(rBinStrm, Offset, rInsn, Mode);
}

/* decoder ["call('Decode_Ov')"] */
Expression::SPType X86Architecture::Decode_Ov(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: call('Decode_Ov')
  return __Decode_Ov(rBinStrm, Offset, rInsn, Mode);
}

/* decoder ["call('Decode_Pq')"] */
Expression::SPType X86Architecture::Decode_Pq(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: call('Decode_Pq')
  return __Decode_Pq(rBinStrm, Offset, rInsn, Mode);
}

/* decoder ["call('Decode_Qd')"] */
Expression::SPType X86Architecture::Decode_Qd(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: call('Decode_Qd')
  return __Decode_Qd(rBinStrm, Offset, rInsn, Mode);
}

/* decoder ["call('Decode_Qq')"] */
Expression::SPType X86Architecture::Decode_Qq(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: call('Decode_Qq')
  return __Decode_Qq(rBinStrm, Offset, rInsn, Mode);
}

/* decoder ["call('Decode_Rv')"] */
Expression::SPType X86Architecture::Decode_Rv(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: call('Decode_Rv')
  return __Decode_Rv(rBinStrm, Offset, rInsn, Mode);
}

/* decoder ["call('Decode_Ry')"] */
Expression::SPType X86Architecture::Decode_Ry(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: call('Decode_Ry')
  return __Decode_Ry(rBinStrm, Offset, rInsn, Mode);
}

/* decoder ["reg('ss')"] */
Expression::SPType X86Architecture::Decode_SS(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: reg('ss')
  return Expr::MakeId(X86_Reg_Ss, &m_CpuInfo);
}

/* decoder ["reg('st0')"] */
Expression::SPType X86Architecture::Decode_ST0(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: reg('st0')
  return Expr::MakeId(X86_Reg_St0, &m_CpuInfo);
}

/* decoder ["reg('st1')"] */
Expression::SPType X86Architecture::Decode_ST1(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: reg('st1')
  return Expr::MakeId(X86_Reg_St1, &m_CpuInfo);
}

/* decoder ["reg('st2')"] */
Expression::SPType X86Architecture::Decode_ST2(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: reg('st2')
  return Expr::MakeId(X86_Reg_St2, &m_CpuInfo);
}

/* decoder ["reg('st3')"] */
Expression::SPType X86Architecture::Decode_ST3(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: reg('st3')
  return Expr::MakeId(X86_Reg_St3, &m_CpuInfo);
}

/* decoder ["reg('st4')"] */
Expression::SPType X86Architecture::Decode_ST4(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: reg('st4')
  return Expr::MakeId(X86_Reg_St4, &m_CpuInfo);
}

/* decoder ["reg('st5')"] */
Expression::SPType X86Architecture::Decode_ST5(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: reg('st5')
  return Expr::MakeId(X86_Reg_St5, &m_CpuInfo);
}

/* decoder ["reg('st6')"] */
Expression::SPType X86Architecture::Decode_ST6(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: reg('st6')
  return Expr::MakeId(X86_Reg_St6, &m_CpuInfo);
}

/* decoder ["reg('st7')"] */
Expression::SPType X86Architecture::Decode_ST7(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: reg('st7')
  return Expr::MakeId(X86_Reg_St7, &m_CpuInfo);
}

/* decoder ["call('Decode_Sw')"] */
Expression::SPType X86Architecture::Decode_Sw(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: call('Decode_Sw')
  return __Decode_Sw(rBinStrm, Offset, rInsn, Mode);
}

/* decoder ["call('Decode_Ty')"] */
Expression::SPType X86Architecture::Decode_Ty(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: call('Decode_Ty')
  return __Decode_Ty(rBinStrm, Offset, rInsn, Mode);
}

/* decoder ["call('Decode_Uo')"] */
Expression::SPType X86Architecture::Decode_Uo(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: call('Decode_Uo')
  return __Decode_Uo(rBinStrm, Offset, rInsn, Mode);
}

/* decoder ["call('Decode_Uod')"] */
Expression::SPType X86Architecture::Decode_Uod(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: call('Decode_Uod')
  return __Decode_Uod(rBinStrm, Offset, rInsn, Mode);
}

/* decoder ["call('Decode_Uoq')"] */
Expression::SPType X86Architecture::Decode_Uoq(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: call('Decode_Uoq')
  return __Decode_Uoq(rBinStrm, Offset, rInsn, Mode);
}

/* decoder ["call('Decode_Uq')"] */
Expression::SPType X86Architecture::Decode_Uq(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: call('Decode_Uq')
  return __Decode_Uq(rBinStrm, Offset, rInsn, Mode);
}

/* decoder ["call('Decode_Ux')"] */
Expression::SPType X86Architecture::Decode_Ux(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: call('Decode_Ux')
  return __Decode_Ux(rBinStrm, Offset, rInsn, Mode);
}

/* decoder ["call('Decode_Vo')"] */
Expression::SPType X86Architecture::Decode_Vo(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: call('Decode_Vo')
  return __Decode_Vo(rBinStrm, Offset, rInsn, Mode);
}

/* decoder ["call('Decode_Vod')"] */
Expression::SPType X86Architecture::Decode_Vod(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: call('Decode_Vod')
  return __Decode_Vod(rBinStrm, Offset, rInsn, Mode);
}

/* decoder ["call('Decode_Voq')"] */
Expression::SPType X86Architecture::Decode_Voq(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: call('Decode_Voq')
  return __Decode_Voq(rBinStrm, Offset, rInsn, Mode);
}

/* decoder ["call('Decode_Vx')"] */
Expression::SPType X86Architecture::Decode_Vx(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: call('Decode_Vx')
  return __Decode_Vx(rBinStrm, Offset, rInsn, Mode);
}

/* decoder ["call('Decode_Vy')"] */
Expression::SPType X86Architecture::Decode_Vy(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: call('Decode_Vy')
  return __Decode_Vy(rBinStrm, Offset, rInsn, Mode);
}

/* decoder ["call('Decode_Wd')"] */
Expression::SPType X86Architecture::Decode_Wd(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: call('Decode_Wd')
  return __Decode_Wd(rBinStrm, Offset, rInsn, Mode);
}

/* decoder ["call('Decode_Wo')"] */
Expression::SPType X86Architecture::Decode_Wo(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: call('Decode_Wo')
  return __Decode_Wo(rBinStrm, Offset, rInsn, Mode);
}

/* decoder ["call('Decode_Wob')"] */
Expression::SPType X86Architecture::Decode_Wob(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: call('Decode_Wob')
  return __Decode_Wob(rBinStrm, Offset, rInsn, Mode);
}

/* decoder ["call('Decode_Wod')"] */
Expression::SPType X86Architecture::Decode_Wod(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: call('Decode_Wod')
  return __Decode_Wod(rBinStrm, Offset, rInsn, Mode);
}

/* decoder ["call('Decode_Woo')"] */
Expression::SPType X86Architecture::Decode_Woo(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: call('Decode_Woo')
  return __Decode_Woo(rBinStrm, Offset, rInsn, Mode);
}

/* decoder ["call('Decode_Woq')"] */
Expression::SPType X86Architecture::Decode_Woq(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: call('Decode_Woq')
  return __Decode_Woq(rBinStrm, Offset, rInsn, Mode);
}

/* decoder ["call('Decode_Woqo')"] */
Expression::SPType X86Architecture::Decode_Woqo(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: call('Decode_Woqo')
  return __Decode_Woqo(rBinStrm, Offset, rInsn, Mode);
}

/* decoder ["call('Decode_Wow')"] */
Expression::SPType X86Architecture::Decode_Wow(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: call('Decode_Wow')
  return __Decode_Wow(rBinStrm, Offset, rInsn, Mode);
}

/* decoder ["call('Decode_Wq')"] */
Expression::SPType X86Architecture::Decode_Wq(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: call('Decode_Wq')
  return __Decode_Wq(rBinStrm, Offset, rInsn, Mode);
}

/* decoder ["call('Decode_Wx')"] */
Expression::SPType X86Architecture::Decode_Wx(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: call('Decode_Wx')
  return __Decode_Wx(rBinStrm, Offset, rInsn, Mode);
}

/* decoder ["call('Decode_Wy')"] */
Expression::SPType X86Architecture::Decode_Wy(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: call('Decode_Wy')
  return __Decode_Wy(rBinStrm, Offset, rInsn, Mode);
}

/* decoder ['addr_b(decode_DS, decode_d64_rSI)'] */
Expression::SPType X86Architecture::Decode_Xb(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: addr_b(decode_DS, decode_d64_rSI)
  return Expr::MakeMem(8, Decode_DS(rBinStrm, Offset, rInsn, Mode), Decode_d64_rSI(rBinStrm, Offset, rInsn, Mode), true);
}

/* decoder ['addr_v(decode_DS, decode_d64_rSI)'] */
Expression::SPType X86Architecture::Decode_Xv(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: addr_v(decode_DS, decode_d64_rSI)
  switch (Mode)
  {
  case X86_Bit_16:
    if ((rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
      return Expr::MakeMem(32, Decode_DS(rBinStrm, Offset, rInsn, Mode), Decode_d64_rSI(rBinStrm, Offset, rInsn, Mode), true);
    else
      return Expr::MakeMem(16, Decode_DS(rBinStrm, Offset, rInsn, Mode), Decode_d64_rSI(rBinStrm, Offset, rInsn, Mode), true);
  case X86_Bit_64:
    if ((rInsn.GetPrefix() & X86_Prefix_REX_w) == X86_Prefix_REX_w)
      return Expr::MakeMem(64, Decode_DS(rBinStrm, Offset, rInsn, Mode), Decode_d64_rSI(rBinStrm, Offset, rInsn, Mode), true);
  case X86_Bit_32:
    if ((rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
      return Expr::MakeMem(16, Decode_DS(rBinStrm, Offset, rInsn, Mode), Decode_d64_rSI(rBinStrm, Offset, rInsn, Mode), true);
    else
      return Expr::MakeMem(32, Decode_DS(rBinStrm, Offset, rInsn, Mode), Decode_d64_rSI(rBinStrm, Offset, rInsn, Mode), true);
  default:
    return nullptr;
  }

}

/* decoder ['addr_z(decode_DS, decode_d64_rSI)'] */
Expression::SPType X86Architecture::Decode_Xz(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: addr_z(decode_DS, decode_d64_rSI)
  switch (Mode)
  {
  case X86_Bit_16:
    if ((rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
      return Expr::MakeMem(32, Decode_DS(rBinStrm, Offset, rInsn, Mode), Decode_d64_rSI(rBinStrm, Offset, rInsn, Mode), true);
    else
      return Expr::MakeMem(16, Decode_DS(rBinStrm, Offset, rInsn, Mode), Decode_d64_rSI(rBinStrm, Offset, rInsn, Mode), true);
  case X86_Bit_32:
    if ((rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
      return Expr::MakeMem(16, Decode_DS(rBinStrm, Offset, rInsn, Mode), Decode_d64_rSI(rBinStrm, Offset, rInsn, Mode), true);
    else
      return Expr::MakeMem(32, Decode_DS(rBinStrm, Offset, rInsn, Mode), Decode_d64_rSI(rBinStrm, Offset, rInsn, Mode), true);
  default:
    return nullptr;
  }

}

/* decoder ['addr_b(decode_ES, decode_d64_rDI)'] */
Expression::SPType X86Architecture::Decode_Yb(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: addr_b(decode_ES, decode_d64_rDI)
  return Expr::MakeMem(8, Decode_ES(rBinStrm, Offset, rInsn, Mode), Decode_d64_rDI(rBinStrm, Offset, rInsn, Mode), true);
}

/* decoder ['addr_v(decode_ES, decode_d64_rDI)'] */
Expression::SPType X86Architecture::Decode_Yv(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: addr_v(decode_ES, decode_d64_rDI)
  switch (Mode)
  {
  case X86_Bit_16:
    if ((rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
      return Expr::MakeMem(32, Decode_ES(rBinStrm, Offset, rInsn, Mode), Decode_d64_rDI(rBinStrm, Offset, rInsn, Mode), true);
    else
      return Expr::MakeMem(16, Decode_ES(rBinStrm, Offset, rInsn, Mode), Decode_d64_rDI(rBinStrm, Offset, rInsn, Mode), true);
  case X86_Bit_64:
    if ((rInsn.GetPrefix() & X86_Prefix_REX_w) == X86_Prefix_REX_w)
      return Expr::MakeMem(64, Decode_ES(rBinStrm, Offset, rInsn, Mode), Decode_d64_rDI(rBinStrm, Offset, rInsn, Mode), true);
  case X86_Bit_32:
    if ((rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
      return Expr::MakeMem(16, Decode_ES(rBinStrm, Offset, rInsn, Mode), Decode_d64_rDI(rBinStrm, Offset, rInsn, Mode), true);
    else
      return Expr::MakeMem(32, Decode_ES(rBinStrm, Offset, rInsn, Mode), Decode_d64_rDI(rBinStrm, Offset, rInsn, Mode), true);
  default:
    return nullptr;
  }

}

/* decoder ['addr_z(decode_ES, decode_d64_rDI)'] */
Expression::SPType X86Architecture::Decode_Yz(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: addr_z(decode_ES, decode_d64_rDI)
  switch (Mode)
  {
  case X86_Bit_16:
    if ((rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
      return Expr::MakeMem(32, Decode_ES(rBinStrm, Offset, rInsn, Mode), Decode_d64_rDI(rBinStrm, Offset, rInsn, Mode), true);
    else
      return Expr::MakeMem(16, Decode_ES(rBinStrm, Offset, rInsn, Mode), Decode_d64_rDI(rBinStrm, Offset, rInsn, Mode), true);
  case X86_Bit_32:
    if ((rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
      return Expr::MakeMem(16, Decode_ES(rBinStrm, Offset, rInsn, Mode), Decode_d64_rDI(rBinStrm, Offset, rInsn, Mode), true);
    else
      return Expr::MakeMem(32, Decode_ES(rBinStrm, Offset, rInsn, Mode), Decode_d64_rDI(rBinStrm, Offset, rInsn, Mode), true);
  default:
    return nullptr;
  }

}

/* decoder ["call('Decode_b')"] */
Expression::SPType X86Architecture::Decode_b(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: call('Decode_b')
  return __Decode_b(rBinStrm, Offset, rInsn, Mode);
}

/* decoder ["reg_d64_r('r10w', 'r10d', 'r10')"] */
Expression::SPType X86Architecture::Decode_d64_r10(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: reg_d64_r('r10w', 'r10d', 'r10')
  switch (Mode)
  {
  case X86_Bit_16:
    if ((rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
      return Expr::MakeId(X86_Reg_R10d, &m_CpuInfo);
    else
      return Expr::MakeId(X86_Reg_R10w, &m_CpuInfo);
  case X86_Bit_64:
    return Expr::MakeId(X86_Reg_R10, &m_CpuInfo);case X86_Bit_32:
    if ((rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
      return Expr::MakeId(X86_Reg_R10w, &m_CpuInfo);
    else
      return Expr::MakeId(X86_Reg_R10d, &m_CpuInfo);
  default:
    return nullptr;
  }

}

/* decoder ["reg_d64_r('r11w', 'r11d', 'r11')"] */
Expression::SPType X86Architecture::Decode_d64_r11(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: reg_d64_r('r11w', 'r11d', 'r11')
  switch (Mode)
  {
  case X86_Bit_16:
    if ((rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
      return Expr::MakeId(X86_Reg_R11d, &m_CpuInfo);
    else
      return Expr::MakeId(X86_Reg_R11w, &m_CpuInfo);
  case X86_Bit_64:
    return Expr::MakeId(X86_Reg_R11, &m_CpuInfo);case X86_Bit_32:
    if ((rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
      return Expr::MakeId(X86_Reg_R11w, &m_CpuInfo);
    else
      return Expr::MakeId(X86_Reg_R11d, &m_CpuInfo);
  default:
    return nullptr;
  }

}

/* decoder ["reg_d64_r('r12w', 'r12d', 'r12')"] */
Expression::SPType X86Architecture::Decode_d64_r12(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: reg_d64_r('r12w', 'r12d', 'r12')
  switch (Mode)
  {
  case X86_Bit_16:
    if ((rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
      return Expr::MakeId(X86_Reg_R12d, &m_CpuInfo);
    else
      return Expr::MakeId(X86_Reg_R12w, &m_CpuInfo);
  case X86_Bit_64:
    return Expr::MakeId(X86_Reg_R12, &m_CpuInfo);case X86_Bit_32:
    if ((rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
      return Expr::MakeId(X86_Reg_R12w, &m_CpuInfo);
    else
      return Expr::MakeId(X86_Reg_R12d, &m_CpuInfo);
  default:
    return nullptr;
  }

}

/* decoder ["reg_d64_r('r13w', 'r13d', 'r13')"] */
Expression::SPType X86Architecture::Decode_d64_r13(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: reg_d64_r('r13w', 'r13d', 'r13')
  switch (Mode)
  {
  case X86_Bit_16:
    if ((rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
      return Expr::MakeId(X86_Reg_R13d, &m_CpuInfo);
    else
      return Expr::MakeId(X86_Reg_R13w, &m_CpuInfo);
  case X86_Bit_64:
    return Expr::MakeId(X86_Reg_R13, &m_CpuInfo);case X86_Bit_32:
    if ((rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
      return Expr::MakeId(X86_Reg_R13w, &m_CpuInfo);
    else
      return Expr::MakeId(X86_Reg_R13d, &m_CpuInfo);
  default:
    return nullptr;
  }

}

/* decoder ["reg_d64_r('r14w', 'r14d', 'r14')"] */
Expression::SPType X86Architecture::Decode_d64_r14(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: reg_d64_r('r14w', 'r14d', 'r14')
  switch (Mode)
  {
  case X86_Bit_16:
    if ((rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
      return Expr::MakeId(X86_Reg_R14d, &m_CpuInfo);
    else
      return Expr::MakeId(X86_Reg_R14w, &m_CpuInfo);
  case X86_Bit_64:
    return Expr::MakeId(X86_Reg_R14, &m_CpuInfo);case X86_Bit_32:
    if ((rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
      return Expr::MakeId(X86_Reg_R14w, &m_CpuInfo);
    else
      return Expr::MakeId(X86_Reg_R14d, &m_CpuInfo);
  default:
    return nullptr;
  }

}

/* decoder ["reg_d64_r('r15w', 'r15d', 'r15')"] */
Expression::SPType X86Architecture::Decode_d64_r15(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: reg_d64_r('r15w', 'r15d', 'r15')
  switch (Mode)
  {
  case X86_Bit_16:
    if ((rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
      return Expr::MakeId(X86_Reg_R15d, &m_CpuInfo);
    else
      return Expr::MakeId(X86_Reg_R15w, &m_CpuInfo);
  case X86_Bit_64:
    return Expr::MakeId(X86_Reg_R15, &m_CpuInfo);case X86_Bit_32:
    if ((rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
      return Expr::MakeId(X86_Reg_R15w, &m_CpuInfo);
    else
      return Expr::MakeId(X86_Reg_R15d, &m_CpuInfo);
  default:
    return nullptr;
  }

}

/* decoder ["reg_d64_r('r8w', 'r8d', 'r8')"] */
Expression::SPType X86Architecture::Decode_d64_r8(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: reg_d64_r('r8w', 'r8d', 'r8')
  switch (Mode)
  {
  case X86_Bit_16:
    if ((rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
      return Expr::MakeId(X86_Reg_R8d, &m_CpuInfo);
    else
      return Expr::MakeId(X86_Reg_R8w, &m_CpuInfo);
  case X86_Bit_64:
    return Expr::MakeId(X86_Reg_R8, &m_CpuInfo);case X86_Bit_32:
    if ((rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
      return Expr::MakeId(X86_Reg_R8w, &m_CpuInfo);
    else
      return Expr::MakeId(X86_Reg_R8d, &m_CpuInfo);
  default:
    return nullptr;
  }

}

/* decoder ["reg_d64_r('r9w', 'r9d', 'r9')"] */
Expression::SPType X86Architecture::Decode_d64_r9(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: reg_d64_r('r9w', 'r9d', 'r9')
  switch (Mode)
  {
  case X86_Bit_16:
    if ((rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
      return Expr::MakeId(X86_Reg_R9d, &m_CpuInfo);
    else
      return Expr::MakeId(X86_Reg_R9w, &m_CpuInfo);
  case X86_Bit_64:
    return Expr::MakeId(X86_Reg_R9, &m_CpuInfo);case X86_Bit_32:
    if ((rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
      return Expr::MakeId(X86_Reg_R9w, &m_CpuInfo);
    else
      return Expr::MakeId(X86_Reg_R9d, &m_CpuInfo);
  default:
    return nullptr;
  }

}

/* decoder ["reg_d64_r('ax', 'eax', 'rax')"] */
Expression::SPType X86Architecture::Decode_d64_rAX(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: reg_d64_r('ax', 'eax', 'rax')
  switch (Mode)
  {
  case X86_Bit_16:
    if ((rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
      return Expr::MakeId(X86_Reg_Eax, &m_CpuInfo);
    else
      return Expr::MakeId(X86_Reg_Ax, &m_CpuInfo);
  case X86_Bit_64:
    return Expr::MakeId(X86_Reg_Rax, &m_CpuInfo);case X86_Bit_32:
    if ((rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
      return Expr::MakeId(X86_Reg_Ax, &m_CpuInfo);
    else
      return Expr::MakeId(X86_Reg_Eax, &m_CpuInfo);
  default:
    return nullptr;
  }

}

/* decoder ["reg_d64_r('bp', 'ebp', 'rbp')"] */
Expression::SPType X86Architecture::Decode_d64_rBP(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: reg_d64_r('bp', 'ebp', 'rbp')
  switch (Mode)
  {
  case X86_Bit_16:
    if ((rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
      return Expr::MakeId(X86_Reg_Ebp, &m_CpuInfo);
    else
      return Expr::MakeId(X86_Reg_Bp, &m_CpuInfo);
  case X86_Bit_64:
    return Expr::MakeId(X86_Reg_Rbp, &m_CpuInfo);case X86_Bit_32:
    if ((rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
      return Expr::MakeId(X86_Reg_Bp, &m_CpuInfo);
    else
      return Expr::MakeId(X86_Reg_Ebp, &m_CpuInfo);
  default:
    return nullptr;
  }

}

/* decoder ["reg_d64_r('bx', 'ebx', 'rbx')"] */
Expression::SPType X86Architecture::Decode_d64_rBX(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: reg_d64_r('bx', 'ebx', 'rbx')
  switch (Mode)
  {
  case X86_Bit_16:
    if ((rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
      return Expr::MakeId(X86_Reg_Ebx, &m_CpuInfo);
    else
      return Expr::MakeId(X86_Reg_Bx, &m_CpuInfo);
  case X86_Bit_64:
    return Expr::MakeId(X86_Reg_Rbx, &m_CpuInfo);case X86_Bit_32:
    if ((rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
      return Expr::MakeId(X86_Reg_Bx, &m_CpuInfo);
    else
      return Expr::MakeId(X86_Reg_Ebx, &m_CpuInfo);
  default:
    return nullptr;
  }

}

/* decoder ["reg_d64_r('cx', 'ecx', 'rcx')"] */
Expression::SPType X86Architecture::Decode_d64_rCX(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: reg_d64_r('cx', 'ecx', 'rcx')
  switch (Mode)
  {
  case X86_Bit_16:
    if ((rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
      return Expr::MakeId(X86_Reg_Ecx, &m_CpuInfo);
    else
      return Expr::MakeId(X86_Reg_Cx, &m_CpuInfo);
  case X86_Bit_64:
    return Expr::MakeId(X86_Reg_Rcx, &m_CpuInfo);case X86_Bit_32:
    if ((rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
      return Expr::MakeId(X86_Reg_Cx, &m_CpuInfo);
    else
      return Expr::MakeId(X86_Reg_Ecx, &m_CpuInfo);
  default:
    return nullptr;
  }

}

/* decoder ["reg_d64_r('di', 'edi', 'rdi')"] */
Expression::SPType X86Architecture::Decode_d64_rDI(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: reg_d64_r('di', 'edi', 'rdi')
  switch (Mode)
  {
  case X86_Bit_16:
    if ((rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
      return Expr::MakeId(X86_Reg_Edi, &m_CpuInfo);
    else
      return Expr::MakeId(X86_Reg_Di, &m_CpuInfo);
  case X86_Bit_64:
    return Expr::MakeId(X86_Reg_Rdi, &m_CpuInfo);case X86_Bit_32:
    if ((rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
      return Expr::MakeId(X86_Reg_Di, &m_CpuInfo);
    else
      return Expr::MakeId(X86_Reg_Edi, &m_CpuInfo);
  default:
    return nullptr;
  }

}

/* decoder ["reg_d64_r('dx', 'edx', 'rdx')"] */
Expression::SPType X86Architecture::Decode_d64_rDX(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: reg_d64_r('dx', 'edx', 'rdx')
  switch (Mode)
  {
  case X86_Bit_16:
    if ((rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
      return Expr::MakeId(X86_Reg_Edx, &m_CpuInfo);
    else
      return Expr::MakeId(X86_Reg_Dx, &m_CpuInfo);
  case X86_Bit_64:
    return Expr::MakeId(X86_Reg_Rdx, &m_CpuInfo);case X86_Bit_32:
    if ((rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
      return Expr::MakeId(X86_Reg_Dx, &m_CpuInfo);
    else
      return Expr::MakeId(X86_Reg_Edx, &m_CpuInfo);
  default:
    return nullptr;
  }

}

/* decoder ["reg_d64_r('si', 'esi', 'rsi')"] */
Expression::SPType X86Architecture::Decode_d64_rSI(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: reg_d64_r('si', 'esi', 'rsi')
  switch (Mode)
  {
  case X86_Bit_16:
    if ((rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
      return Expr::MakeId(X86_Reg_Esi, &m_CpuInfo);
    else
      return Expr::MakeId(X86_Reg_Si, &m_CpuInfo);
  case X86_Bit_64:
    return Expr::MakeId(X86_Reg_Rsi, &m_CpuInfo);case X86_Bit_32:
    if ((rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
      return Expr::MakeId(X86_Reg_Si, &m_CpuInfo);
    else
      return Expr::MakeId(X86_Reg_Esi, &m_CpuInfo);
  default:
    return nullptr;
  }

}

/* decoder ["reg_d64_r('sp', 'esp', 'rsp')"] */
Expression::SPType X86Architecture::Decode_d64_rSP(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: reg_d64_r('sp', 'esp', 'rsp')
  switch (Mode)
  {
  case X86_Bit_16:
    if ((rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
      return Expr::MakeId(X86_Reg_Esp, &m_CpuInfo);
    else
      return Expr::MakeId(X86_Reg_Sp, &m_CpuInfo);
  case X86_Bit_64:
    return Expr::MakeId(X86_Reg_Rsp, &m_CpuInfo);case X86_Bit_32:
    if ((rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
      return Expr::MakeId(X86_Reg_Sp, &m_CpuInfo);
    else
      return Expr::MakeId(X86_Reg_Esp, &m_CpuInfo);
  default:
    return nullptr;
  }

}

/* decoder ["reg_z('ax', 'eax')"] */
Expression::SPType X86Architecture::Decode_eAX(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: reg_z('ax', 'eax')
  switch (Mode)
  {
  case X86_Bit_16:
    if ((rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
      return Expr::MakeId(X86_Reg_Eax, &m_CpuInfo);
    else
      return Expr::MakeId(X86_Reg_Ax, &m_CpuInfo);
  case X86_Bit_32:
    if ((rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
      return Expr::MakeId(X86_Reg_Ax, &m_CpuInfo);
    else
      return Expr::MakeId(X86_Reg_Eax, &m_CpuInfo);
  default:
    return nullptr;
  }

}

/* decoder ["reg_z('bp', 'ebp')"] */
Expression::SPType X86Architecture::Decode_eBP(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: reg_z('bp', 'ebp')
  switch (Mode)
  {
  case X86_Bit_16:
    if ((rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
      return Expr::MakeId(X86_Reg_Ebp, &m_CpuInfo);
    else
      return Expr::MakeId(X86_Reg_Bp, &m_CpuInfo);
  case X86_Bit_32:
    if ((rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
      return Expr::MakeId(X86_Reg_Bp, &m_CpuInfo);
    else
      return Expr::MakeId(X86_Reg_Ebp, &m_CpuInfo);
  default:
    return nullptr;
  }

}

/* decoder ["reg_z('bx', 'ebx')"] */
Expression::SPType X86Architecture::Decode_eBX(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: reg_z('bx', 'ebx')
  switch (Mode)
  {
  case X86_Bit_16:
    if ((rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
      return Expr::MakeId(X86_Reg_Ebx, &m_CpuInfo);
    else
      return Expr::MakeId(X86_Reg_Bx, &m_CpuInfo);
  case X86_Bit_32:
    if ((rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
      return Expr::MakeId(X86_Reg_Bx, &m_CpuInfo);
    else
      return Expr::MakeId(X86_Reg_Ebx, &m_CpuInfo);
  default:
    return nullptr;
  }

}

/* decoder ["reg_z('cx', 'ecx')"] */
Expression::SPType X86Architecture::Decode_eCX(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: reg_z('cx', 'ecx')
  switch (Mode)
  {
  case X86_Bit_16:
    if ((rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
      return Expr::MakeId(X86_Reg_Ecx, &m_CpuInfo);
    else
      return Expr::MakeId(X86_Reg_Cx, &m_CpuInfo);
  case X86_Bit_32:
    if ((rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
      return Expr::MakeId(X86_Reg_Cx, &m_CpuInfo);
    else
      return Expr::MakeId(X86_Reg_Ecx, &m_CpuInfo);
  default:
    return nullptr;
  }

}

/* decoder ["reg_z('di', 'edi')"] */
Expression::SPType X86Architecture::Decode_eDI(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: reg_z('di', 'edi')
  switch (Mode)
  {
  case X86_Bit_16:
    if ((rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
      return Expr::MakeId(X86_Reg_Edi, &m_CpuInfo);
    else
      return Expr::MakeId(X86_Reg_Di, &m_CpuInfo);
  case X86_Bit_32:
    if ((rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
      return Expr::MakeId(X86_Reg_Di, &m_CpuInfo);
    else
      return Expr::MakeId(X86_Reg_Edi, &m_CpuInfo);
  default:
    return nullptr;
  }

}

/* decoder ["reg_z('dx', 'edx')"] */
Expression::SPType X86Architecture::Decode_eDX(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: reg_z('dx', 'edx')
  switch (Mode)
  {
  case X86_Bit_16:
    if ((rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
      return Expr::MakeId(X86_Reg_Edx, &m_CpuInfo);
    else
      return Expr::MakeId(X86_Reg_Dx, &m_CpuInfo);
  case X86_Bit_32:
    if ((rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
      return Expr::MakeId(X86_Reg_Dx, &m_CpuInfo);
    else
      return Expr::MakeId(X86_Reg_Edx, &m_CpuInfo);
  default:
    return nullptr;
  }

}

/* decoder ["reg_z('si', 'esi')"] */
Expression::SPType X86Architecture::Decode_eSI(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: reg_z('si', 'esi')
  switch (Mode)
  {
  case X86_Bit_16:
    if ((rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
      return Expr::MakeId(X86_Reg_Esi, &m_CpuInfo);
    else
      return Expr::MakeId(X86_Reg_Si, &m_CpuInfo);
  case X86_Bit_32:
    if ((rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
      return Expr::MakeId(X86_Reg_Si, &m_CpuInfo);
    else
      return Expr::MakeId(X86_Reg_Esi, &m_CpuInfo);
  default:
    return nullptr;
  }

}

/* decoder ["reg_z('sp', 'esp')"] */
Expression::SPType X86Architecture::Decode_eSP(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: reg_z('sp', 'esp')
  switch (Mode)
  {
  case X86_Bit_16:
    if ((rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
      return Expr::MakeId(X86_Reg_Esp, &m_CpuInfo);
    else
      return Expr::MakeId(X86_Reg_Sp, &m_CpuInfo);
  case X86_Bit_32:
    if ((rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
      return Expr::MakeId(X86_Reg_Sp, &m_CpuInfo);
    else
      return Expr::MakeId(X86_Reg_Esp, &m_CpuInfo);
  default:
    return nullptr;
  }

}

/* decoder ["call('Decode_m16int')"] */
Expression::SPType X86Architecture::Decode_m16int(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: call('Decode_m16int')
  return __Decode_m16int(rBinStrm, Offset, rInsn, Mode);
}

/* decoder ["call('Decode_m32fp')"] */
Expression::SPType X86Architecture::Decode_m32fp(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: call('Decode_m32fp')
  return __Decode_m32fp(rBinStrm, Offset, rInsn, Mode);
}

/* decoder ["call('Decode_m32int')"] */
Expression::SPType X86Architecture::Decode_m32int(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: call('Decode_m32int')
  return __Decode_m32int(rBinStrm, Offset, rInsn, Mode);
}

/* decoder ["call('Decode_m64fp')"] */
Expression::SPType X86Architecture::Decode_m64fp(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: call('Decode_m64fp')
  return __Decode_m64fp(rBinStrm, Offset, rInsn, Mode);
}

/* decoder ["call('Decode_m64int')"] */
Expression::SPType X86Architecture::Decode_m64int(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: call('Decode_m64int')
  return __Decode_m64int(rBinStrm, Offset, rInsn, Mode);
}

/* decoder ["call('Decode_m80bcd')"] */
Expression::SPType X86Architecture::Decode_m80bcd(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: call('Decode_m80bcd')
  return __Decode_m80bcd(rBinStrm, Offset, rInsn, Mode);
}

/* decoder ["call('Decode_m80dec')"] */
Expression::SPType X86Architecture::Decode_m80dec(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: call('Decode_m80dec')
  return __Decode_m80dec(rBinStrm, Offset, rInsn, Mode);
}

/* decoder ["call('Decode_m80fp')"] */
Expression::SPType X86Architecture::Decode_m80fp(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: call('Decode_m80fp')
  return __Decode_m80fp(rBinStrm, Offset, rInsn, Mode);
}

/* decoder ["reg_v('r10w', 'r10d', 'r10')"] */
Expression::SPType X86Architecture::Decode_r10(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: reg_v('r10w', 'r10d', 'r10')
  switch (Mode)
  {
  case X86_Bit_16:
    if ((rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
      return Expr::MakeId(X86_Reg_R10d, &m_CpuInfo);
    else
      return Expr::MakeId(X86_Reg_R10w, &m_CpuInfo);
  case X86_Bit_64:
    if ((rInsn.GetPrefix() & X86_Prefix_REX_w) == X86_Prefix_REX_w)
      return Expr::MakeId(X86_Reg_R10, &m_CpuInfo);
  case X86_Bit_32:
    if ((rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
      return Expr::MakeId(X86_Reg_R10w, &m_CpuInfo);
    else
      return Expr::MakeId(X86_Reg_R10d, &m_CpuInfo);
  default:
    return nullptr;
  }

}

/* decoder ["reg('r10b')"] */
Expression::SPType X86Architecture::Decode_r10b(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: reg('r10b')
  return Expr::MakeId(X86_Reg_R10b, &m_CpuInfo);
}

/* decoder ["reg_v('r11w', 'r11d', 'r11')"] */
Expression::SPType X86Architecture::Decode_r11(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: reg_v('r11w', 'r11d', 'r11')
  switch (Mode)
  {
  case X86_Bit_16:
    if ((rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
      return Expr::MakeId(X86_Reg_R11d, &m_CpuInfo);
    else
      return Expr::MakeId(X86_Reg_R11w, &m_CpuInfo);
  case X86_Bit_64:
    if ((rInsn.GetPrefix() & X86_Prefix_REX_w) == X86_Prefix_REX_w)
      return Expr::MakeId(X86_Reg_R11, &m_CpuInfo);
  case X86_Bit_32:
    if ((rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
      return Expr::MakeId(X86_Reg_R11w, &m_CpuInfo);
    else
      return Expr::MakeId(X86_Reg_R11d, &m_CpuInfo);
  default:
    return nullptr;
  }

}

/* decoder ["reg('r11b')"] */
Expression::SPType X86Architecture::Decode_r11b(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: reg('r11b')
  return Expr::MakeId(X86_Reg_R11b, &m_CpuInfo);
}

/* decoder ["reg_v('r12w', 'r12d', 'r12')"] */
Expression::SPType X86Architecture::Decode_r12(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: reg_v('r12w', 'r12d', 'r12')
  switch (Mode)
  {
  case X86_Bit_16:
    if ((rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
      return Expr::MakeId(X86_Reg_R12d, &m_CpuInfo);
    else
      return Expr::MakeId(X86_Reg_R12w, &m_CpuInfo);
  case X86_Bit_64:
    if ((rInsn.GetPrefix() & X86_Prefix_REX_w) == X86_Prefix_REX_w)
      return Expr::MakeId(X86_Reg_R12, &m_CpuInfo);
  case X86_Bit_32:
    if ((rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
      return Expr::MakeId(X86_Reg_R12w, &m_CpuInfo);
    else
      return Expr::MakeId(X86_Reg_R12d, &m_CpuInfo);
  default:
    return nullptr;
  }

}

/* decoder ["reg('r12b')"] */
Expression::SPType X86Architecture::Decode_r12b(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: reg('r12b')
  return Expr::MakeId(X86_Reg_R12b, &m_CpuInfo);
}

/* decoder ["reg_v('r13w', 'r13d', 'r13')"] */
Expression::SPType X86Architecture::Decode_r13(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: reg_v('r13w', 'r13d', 'r13')
  switch (Mode)
  {
  case X86_Bit_16:
    if ((rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
      return Expr::MakeId(X86_Reg_R13d, &m_CpuInfo);
    else
      return Expr::MakeId(X86_Reg_R13w, &m_CpuInfo);
  case X86_Bit_64:
    if ((rInsn.GetPrefix() & X86_Prefix_REX_w) == X86_Prefix_REX_w)
      return Expr::MakeId(X86_Reg_R13, &m_CpuInfo);
  case X86_Bit_32:
    if ((rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
      return Expr::MakeId(X86_Reg_R13w, &m_CpuInfo);
    else
      return Expr::MakeId(X86_Reg_R13d, &m_CpuInfo);
  default:
    return nullptr;
  }

}

/* decoder ["reg('r13b')"] */
Expression::SPType X86Architecture::Decode_r13b(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: reg('r13b')
  return Expr::MakeId(X86_Reg_R13b, &m_CpuInfo);
}

/* decoder ["reg_v('r14w', 'r14d', 'r14')"] */
Expression::SPType X86Architecture::Decode_r14(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: reg_v('r14w', 'r14d', 'r14')
  switch (Mode)
  {
  case X86_Bit_16:
    if ((rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
      return Expr::MakeId(X86_Reg_R14d, &m_CpuInfo);
    else
      return Expr::MakeId(X86_Reg_R14w, &m_CpuInfo);
  case X86_Bit_64:
    if ((rInsn.GetPrefix() & X86_Prefix_REX_w) == X86_Prefix_REX_w)
      return Expr::MakeId(X86_Reg_R14, &m_CpuInfo);
  case X86_Bit_32:
    if ((rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
      return Expr::MakeId(X86_Reg_R14w, &m_CpuInfo);
    else
      return Expr::MakeId(X86_Reg_R14d, &m_CpuInfo);
  default:
    return nullptr;
  }

}

/* decoder ["reg('r14b')"] */
Expression::SPType X86Architecture::Decode_r14b(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: reg('r14b')
  return Expr::MakeId(X86_Reg_R14b, &m_CpuInfo);
}

/* decoder ["reg_v('r15w', 'r15d', 'r15')"] */
Expression::SPType X86Architecture::Decode_r15(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: reg_v('r15w', 'r15d', 'r15')
  switch (Mode)
  {
  case X86_Bit_16:
    if ((rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
      return Expr::MakeId(X86_Reg_R15d, &m_CpuInfo);
    else
      return Expr::MakeId(X86_Reg_R15w, &m_CpuInfo);
  case X86_Bit_64:
    if ((rInsn.GetPrefix() & X86_Prefix_REX_w) == X86_Prefix_REX_w)
      return Expr::MakeId(X86_Reg_R15, &m_CpuInfo);
  case X86_Bit_32:
    if ((rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
      return Expr::MakeId(X86_Reg_R15w, &m_CpuInfo);
    else
      return Expr::MakeId(X86_Reg_R15d, &m_CpuInfo);
  default:
    return nullptr;
  }

}

/* decoder ["reg('r15b')"] */
Expression::SPType X86Architecture::Decode_r15b(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: reg('r15b')
  return Expr::MakeId(X86_Reg_R15b, &m_CpuInfo);
}

/* decoder ["reg_v('r8w', 'r8d', 'r8')"] */
Expression::SPType X86Architecture::Decode_r8(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: reg_v('r8w', 'r8d', 'r8')
  switch (Mode)
  {
  case X86_Bit_16:
    if ((rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
      return Expr::MakeId(X86_Reg_R8d, &m_CpuInfo);
    else
      return Expr::MakeId(X86_Reg_R8w, &m_CpuInfo);
  case X86_Bit_64:
    if ((rInsn.GetPrefix() & X86_Prefix_REX_w) == X86_Prefix_REX_w)
      return Expr::MakeId(X86_Reg_R8, &m_CpuInfo);
  case X86_Bit_32:
    if ((rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
      return Expr::MakeId(X86_Reg_R8w, &m_CpuInfo);
    else
      return Expr::MakeId(X86_Reg_R8d, &m_CpuInfo);
  default:
    return nullptr;
  }

}

/* decoder ["reg('r8b')"] */
Expression::SPType X86Architecture::Decode_r8b(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: reg('r8b')
  return Expr::MakeId(X86_Reg_R8b, &m_CpuInfo);
}

/* decoder ["reg_v('r9w', 'r9d', 'r9')"] */
Expression::SPType X86Architecture::Decode_r9(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: reg_v('r9w', 'r9d', 'r9')
  switch (Mode)
  {
  case X86_Bit_16:
    if ((rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
      return Expr::MakeId(X86_Reg_R9d, &m_CpuInfo);
    else
      return Expr::MakeId(X86_Reg_R9w, &m_CpuInfo);
  case X86_Bit_64:
    if ((rInsn.GetPrefix() & X86_Prefix_REX_w) == X86_Prefix_REX_w)
      return Expr::MakeId(X86_Reg_R9, &m_CpuInfo);
  case X86_Bit_32:
    if ((rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
      return Expr::MakeId(X86_Reg_R9w, &m_CpuInfo);
    else
      return Expr::MakeId(X86_Reg_R9d, &m_CpuInfo);
  default:
    return nullptr;
  }

}

/* decoder ["reg('r9b')"] */
Expression::SPType X86Architecture::Decode_r9b(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: reg('r9b')
  return Expr::MakeId(X86_Reg_R9b, &m_CpuInfo);
}

/* decoder ["reg_v('ax', 'eax', 'rax')"] */
Expression::SPType X86Architecture::Decode_rAX(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: reg_v('ax', 'eax', 'rax')
  switch (Mode)
  {
  case X86_Bit_16:
    if ((rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
      return Expr::MakeId(X86_Reg_Eax, &m_CpuInfo);
    else
      return Expr::MakeId(X86_Reg_Ax, &m_CpuInfo);
  case X86_Bit_64:
    if ((rInsn.GetPrefix() & X86_Prefix_REX_w) == X86_Prefix_REX_w)
      return Expr::MakeId(X86_Reg_Rax, &m_CpuInfo);
  case X86_Bit_32:
    if ((rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
      return Expr::MakeId(X86_Reg_Ax, &m_CpuInfo);
    else
      return Expr::MakeId(X86_Reg_Eax, &m_CpuInfo);
  default:
    return nullptr;
  }

}

/* decoder ["reg_v('bp', 'ebp', 'rbp')"] */
Expression::SPType X86Architecture::Decode_rBP(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: reg_v('bp', 'ebp', 'rbp')
  switch (Mode)
  {
  case X86_Bit_16:
    if ((rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
      return Expr::MakeId(X86_Reg_Ebp, &m_CpuInfo);
    else
      return Expr::MakeId(X86_Reg_Bp, &m_CpuInfo);
  case X86_Bit_64:
    if ((rInsn.GetPrefix() & X86_Prefix_REX_w) == X86_Prefix_REX_w)
      return Expr::MakeId(X86_Reg_Rbp, &m_CpuInfo);
  case X86_Bit_32:
    if ((rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
      return Expr::MakeId(X86_Reg_Bp, &m_CpuInfo);
    else
      return Expr::MakeId(X86_Reg_Ebp, &m_CpuInfo);
  default:
    return nullptr;
  }

}

/* decoder ["reg_v('bx', 'ebx', 'rbx')"] */
Expression::SPType X86Architecture::Decode_rBX(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: reg_v('bx', 'ebx', 'rbx')
  switch (Mode)
  {
  case X86_Bit_16:
    if ((rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
      return Expr::MakeId(X86_Reg_Ebx, &m_CpuInfo);
    else
      return Expr::MakeId(X86_Reg_Bx, &m_CpuInfo);
  case X86_Bit_64:
    if ((rInsn.GetPrefix() & X86_Prefix_REX_w) == X86_Prefix_REX_w)
      return Expr::MakeId(X86_Reg_Rbx, &m_CpuInfo);
  case X86_Bit_32:
    if ((rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
      return Expr::MakeId(X86_Reg_Bx, &m_CpuInfo);
    else
      return Expr::MakeId(X86_Reg_Ebx, &m_CpuInfo);
  default:
    return nullptr;
  }

}

/* decoder ["reg_v('cx', 'ecx', 'rcx')"] */
Expression::SPType X86Architecture::Decode_rCX(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: reg_v('cx', 'ecx', 'rcx')
  switch (Mode)
  {
  case X86_Bit_16:
    if ((rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
      return Expr::MakeId(X86_Reg_Ecx, &m_CpuInfo);
    else
      return Expr::MakeId(X86_Reg_Cx, &m_CpuInfo);
  case X86_Bit_64:
    if ((rInsn.GetPrefix() & X86_Prefix_REX_w) == X86_Prefix_REX_w)
      return Expr::MakeId(X86_Reg_Rcx, &m_CpuInfo);
  case X86_Bit_32:
    if ((rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
      return Expr::MakeId(X86_Reg_Cx, &m_CpuInfo);
    else
      return Expr::MakeId(X86_Reg_Ecx, &m_CpuInfo);
  default:
    return nullptr;
  }

}

/* decoder ["reg_v('di', 'edi', 'rdi')"] */
Expression::SPType X86Architecture::Decode_rDI(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: reg_v('di', 'edi', 'rdi')
  switch (Mode)
  {
  case X86_Bit_16:
    if ((rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
      return Expr::MakeId(X86_Reg_Edi, &m_CpuInfo);
    else
      return Expr::MakeId(X86_Reg_Di, &m_CpuInfo);
  case X86_Bit_64:
    if ((rInsn.GetPrefix() & X86_Prefix_REX_w) == X86_Prefix_REX_w)
      return Expr::MakeId(X86_Reg_Rdi, &m_CpuInfo);
  case X86_Bit_32:
    if ((rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
      return Expr::MakeId(X86_Reg_Di, &m_CpuInfo);
    else
      return Expr::MakeId(X86_Reg_Edi, &m_CpuInfo);
  default:
    return nullptr;
  }

}

/* decoder ["reg_v('dx', 'edx', 'rdx')"] */
Expression::SPType X86Architecture::Decode_rDX(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: reg_v('dx', 'edx', 'rdx')
  switch (Mode)
  {
  case X86_Bit_16:
    if ((rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
      return Expr::MakeId(X86_Reg_Edx, &m_CpuInfo);
    else
      return Expr::MakeId(X86_Reg_Dx, &m_CpuInfo);
  case X86_Bit_64:
    if ((rInsn.GetPrefix() & X86_Prefix_REX_w) == X86_Prefix_REX_w)
      return Expr::MakeId(X86_Reg_Rdx, &m_CpuInfo);
  case X86_Bit_32:
    if ((rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
      return Expr::MakeId(X86_Reg_Dx, &m_CpuInfo);
    else
      return Expr::MakeId(X86_Reg_Edx, &m_CpuInfo);
  default:
    return nullptr;
  }

}

/* decoder ["reg_v('si', 'esi', 'rsi')"] */
Expression::SPType X86Architecture::Decode_rSI(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: reg_v('si', 'esi', 'rsi')
  switch (Mode)
  {
  case X86_Bit_16:
    if ((rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
      return Expr::MakeId(X86_Reg_Esi, &m_CpuInfo);
    else
      return Expr::MakeId(X86_Reg_Si, &m_CpuInfo);
  case X86_Bit_64:
    if ((rInsn.GetPrefix() & X86_Prefix_REX_w) == X86_Prefix_REX_w)
      return Expr::MakeId(X86_Reg_Rsi, &m_CpuInfo);
  case X86_Bit_32:
    if ((rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
      return Expr::MakeId(X86_Reg_Si, &m_CpuInfo);
    else
      return Expr::MakeId(X86_Reg_Esi, &m_CpuInfo);
  default:
    return nullptr;
  }

}

/* decoder ["reg_v('sp', 'esp', 'rsp')"] */
Expression::SPType X86Architecture::Decode_rSP(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: reg_v('sp', 'esp', 'rsp')
  switch (Mode)
  {
  case X86_Bit_16:
    if ((rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
      return Expr::MakeId(X86_Reg_Esp, &m_CpuInfo);
    else
      return Expr::MakeId(X86_Reg_Sp, &m_CpuInfo);
  case X86_Bit_64:
    if ((rInsn.GetPrefix() & X86_Prefix_REX_w) == X86_Prefix_REX_w)
      return Expr::MakeId(X86_Reg_Rsp, &m_CpuInfo);
  case X86_Bit_32:
    if ((rInsn.GetPrefix() & X86_Prefix_OpSize) == X86_Prefix_OpSize)
      return Expr::MakeId(X86_Reg_Sp, &m_CpuInfo);
    else
      return Expr::MakeId(X86_Reg_Esp, &m_CpuInfo);
  default:
    return nullptr;
  }

}

/* decoder ["call('Decode_w')"] */
Expression::SPType X86Architecture::Decode_w(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: call('Decode_w')
  return __Decode_w(rBinStrm, Offset, rInsn, Mode);
}

/* decoder ["call('Decode_x')"] */
Expression::SPType X86Architecture::Decode_x(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: call('Decode_x')
  return __Decode_x(rBinStrm, Offset, rInsn, Mode);
}

/* operand ['op0 = decode_eAX'] */
bool X86Architecture::Operand__eAX(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_eAX
  auto spOprd0 = Decode_eAX(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  return true;
}

/* operand ['op0 = decode_eAX', 'op1 = decode_DX'] */
bool X86Architecture::Operand__eAX_DX(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_eAX
  auto spOprd0 = Decode_eAX(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  // operand1: op1 = decode_DX
  auto spOprd1 = Decode_DX(rBinStrm, Offset, rInsn, Mode);
  if (spOprd1 == nullptr)
    return false;
  rInsn.AddOperand(spOprd1);

  return true;
}

/* operand ['op0 = decode_eAX', 'op1 = decode_Ib'] */
bool X86Architecture::Operand__eAX_Ib(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_eAX
  auto spOprd0 = Decode_eAX(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  // operand1: op1 = decode_Ib
  auto spOprd1 = Decode_Ib(rBinStrm, Offset, rInsn, Mode);
  if (spOprd1 == nullptr)
    return false;
  rInsn.AddOperand(spOprd1);

  return true;
}

/* operand ['op0 = decode_eBP'] */
bool X86Architecture::Operand__eBP(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_eBP
  auto spOprd0 = Decode_eBP(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  return true;
}

/* operand ['op0 = decode_eBX'] */
bool X86Architecture::Operand__eBX(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_eBX
  auto spOprd0 = Decode_eBX(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  return true;
}

/* operand ['op0 = decode_eCX'] */
bool X86Architecture::Operand__eCX(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_eCX
  auto spOprd0 = Decode_eCX(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  return true;
}

/* operand ['op0 = decode_eDI'] */
bool X86Architecture::Operand__eDI(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_eDI
  auto spOprd0 = Decode_eDI(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  return true;
}

/* operand ['op0 = decode_eDX'] */
bool X86Architecture::Operand__eDX(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_eDX
  auto spOprd0 = Decode_eDX(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  return true;
}

/* operand ['op0 = decode_eSI'] */
bool X86Architecture::Operand__eSI(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_eSI
  auto spOprd0 = Decode_eSI(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  return true;
}

/* operand ['op0 = decode_eSP'] */
bool X86Architecture::Operand__eSP(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_eSP
  auto spOprd0 = Decode_eSP(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  return true;
}

/* operand ['op0 = decode_m16int'] */
bool X86Architecture::Operand__m16int(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_m16int
  auto spOprd0 = Decode_m16int(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  return true;
}

/* operand ['op0 = decode_m32fp'] */
bool X86Architecture::Operand__m32fp(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_m32fp
  auto spOprd0 = Decode_m32fp(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  return true;
}

/* operand ['op0 = decode_m32int'] */
bool X86Architecture::Operand__m32int(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_m32int
  auto spOprd0 = Decode_m32int(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  return true;
}

/* operand ['op0 = decode_m64fp'] */
bool X86Architecture::Operand__m64fp(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_m64fp
  auto spOprd0 = Decode_m64fp(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  return true;
}

/* operand ['op0 = decode_m64int'] */
bool X86Architecture::Operand__m64int(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_m64int
  auto spOprd0 = Decode_m64int(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  return true;
}

/* operand ['op0 = decode_m80bcd'] */
bool X86Architecture::Operand__m80bcd(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_m80bcd
  auto spOprd0 = Decode_m80bcd(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  return true;
}

/* operand ['op0 = decode_m80dec'] */
bool X86Architecture::Operand__m80dec(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_m80dec
  auto spOprd0 = Decode_m80dec(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  return true;
}

/* operand ['op0 = decode_m80fp'] */
bool X86Architecture::Operand__m80fp(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_m80fp
  auto spOprd0 = Decode_m80fp(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  return true;
}

/* operand ['op0 = decode_r10'] */
bool X86Architecture::Operand__r10(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_r10
  auto spOprd0 = Decode_r10(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  return true;
}

/* operand ['op0 = decode_r10', 'op1 = decode_Iv'] */
bool X86Architecture::Operand__r10_Iv(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_r10
  auto spOprd0 = Decode_r10(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  // operand1: op1 = decode_Iv
  auto spOprd1 = Decode_Iv(rBinStrm, Offset, rInsn, Mode);
  if (spOprd1 == nullptr)
    return false;
  rInsn.AddOperand(spOprd1);

  return true;
}

/* operand ['op0 = decode_r10', 'op1 = decode_rAX'] */
bool X86Architecture::Operand__r10_rAX(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_r10
  auto spOprd0 = Decode_r10(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  // operand1: op1 = decode_rAX
  auto spOprd1 = Decode_rAX(rBinStrm, Offset, rInsn, Mode);
  if (spOprd1 == nullptr)
    return false;
  rInsn.AddOperand(spOprd1);

  return true;
}

/* operand ['op0 = decode_r10b', 'op1 = decode_Ib'] */
bool X86Architecture::Operand__r10b_Ib(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_r10b
  auto spOprd0 = Decode_r10b(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  // operand1: op1 = decode_Ib
  auto spOprd1 = Decode_Ib(rBinStrm, Offset, rInsn, Mode);
  if (spOprd1 == nullptr)
    return false;
  rInsn.AddOperand(spOprd1);

  return true;
}

/* operand ['op0 = decode_r11'] */
bool X86Architecture::Operand__r11(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_r11
  auto spOprd0 = Decode_r11(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  return true;
}

/* operand ['op0 = decode_r11', 'op1 = decode_Iv'] */
bool X86Architecture::Operand__r11_Iv(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_r11
  auto spOprd0 = Decode_r11(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  // operand1: op1 = decode_Iv
  auto spOprd1 = Decode_Iv(rBinStrm, Offset, rInsn, Mode);
  if (spOprd1 == nullptr)
    return false;
  rInsn.AddOperand(spOprd1);

  return true;
}

/* operand ['op0 = decode_r11', 'op1 = decode_rAX'] */
bool X86Architecture::Operand__r11_rAX(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_r11
  auto spOprd0 = Decode_r11(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  // operand1: op1 = decode_rAX
  auto spOprd1 = Decode_rAX(rBinStrm, Offset, rInsn, Mode);
  if (spOprd1 == nullptr)
    return false;
  rInsn.AddOperand(spOprd1);

  return true;
}

/* operand ['op0 = decode_r11b', 'op1 = decode_Ib'] */
bool X86Architecture::Operand__r11b_Ib(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_r11b
  auto spOprd0 = Decode_r11b(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  // operand1: op1 = decode_Ib
  auto spOprd1 = Decode_Ib(rBinStrm, Offset, rInsn, Mode);
  if (spOprd1 == nullptr)
    return false;
  rInsn.AddOperand(spOprd1);

  return true;
}

/* operand ['op0 = decode_r12'] */
bool X86Architecture::Operand__r12(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_r12
  auto spOprd0 = Decode_r12(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  return true;
}

/* operand ['op0 = decode_r12', 'op1 = decode_Iv'] */
bool X86Architecture::Operand__r12_Iv(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_r12
  auto spOprd0 = Decode_r12(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  // operand1: op1 = decode_Iv
  auto spOprd1 = Decode_Iv(rBinStrm, Offset, rInsn, Mode);
  if (spOprd1 == nullptr)
    return false;
  rInsn.AddOperand(spOprd1);

  return true;
}

/* operand ['op0 = decode_r12', 'op1 = decode_rAX'] */
bool X86Architecture::Operand__r12_rAX(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_r12
  auto spOprd0 = Decode_r12(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  // operand1: op1 = decode_rAX
  auto spOprd1 = Decode_rAX(rBinStrm, Offset, rInsn, Mode);
  if (spOprd1 == nullptr)
    return false;
  rInsn.AddOperand(spOprd1);

  return true;
}

/* operand ['op0 = decode_r12b', 'op1 = decode_Ib'] */
bool X86Architecture::Operand__r12b_Ib(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_r12b
  auto spOprd0 = Decode_r12b(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  // operand1: op1 = decode_Ib
  auto spOprd1 = Decode_Ib(rBinStrm, Offset, rInsn, Mode);
  if (spOprd1 == nullptr)
    return false;
  rInsn.AddOperand(spOprd1);

  return true;
}

/* operand ['op0 = decode_r13'] */
bool X86Architecture::Operand__r13(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_r13
  auto spOprd0 = Decode_r13(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  return true;
}

/* operand ['op0 = decode_r13', 'op1 = decode_Iv'] */
bool X86Architecture::Operand__r13_Iv(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_r13
  auto spOprd0 = Decode_r13(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  // operand1: op1 = decode_Iv
  auto spOprd1 = Decode_Iv(rBinStrm, Offset, rInsn, Mode);
  if (spOprd1 == nullptr)
    return false;
  rInsn.AddOperand(spOprd1);

  return true;
}

/* operand ['op0 = decode_r13', 'op1 = decode_rAX'] */
bool X86Architecture::Operand__r13_rAX(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_r13
  auto spOprd0 = Decode_r13(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  // operand1: op1 = decode_rAX
  auto spOprd1 = Decode_rAX(rBinStrm, Offset, rInsn, Mode);
  if (spOprd1 == nullptr)
    return false;
  rInsn.AddOperand(spOprd1);

  return true;
}

/* operand ['op0 = decode_r13b', 'op1 = decode_Ib'] */
bool X86Architecture::Operand__r13b_Ib(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_r13b
  auto spOprd0 = Decode_r13b(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  // operand1: op1 = decode_Ib
  auto spOprd1 = Decode_Ib(rBinStrm, Offset, rInsn, Mode);
  if (spOprd1 == nullptr)
    return false;
  rInsn.AddOperand(spOprd1);

  return true;
}

/* operand ['op0 = decode_r14'] */
bool X86Architecture::Operand__r14(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_r14
  auto spOprd0 = Decode_r14(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  return true;
}

/* operand ['op0 = decode_r14', 'op1 = decode_Iv'] */
bool X86Architecture::Operand__r14_Iv(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_r14
  auto spOprd0 = Decode_r14(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  // operand1: op1 = decode_Iv
  auto spOprd1 = Decode_Iv(rBinStrm, Offset, rInsn, Mode);
  if (spOprd1 == nullptr)
    return false;
  rInsn.AddOperand(spOprd1);

  return true;
}

/* operand ['op0 = decode_r14', 'op1 = decode_rAX'] */
bool X86Architecture::Operand__r14_rAX(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_r14
  auto spOprd0 = Decode_r14(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  // operand1: op1 = decode_rAX
  auto spOprd1 = Decode_rAX(rBinStrm, Offset, rInsn, Mode);
  if (spOprd1 == nullptr)
    return false;
  rInsn.AddOperand(spOprd1);

  return true;
}

/* operand ['op0 = decode_r14b', 'op1 = decode_Ib'] */
bool X86Architecture::Operand__r14b_Ib(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_r14b
  auto spOprd0 = Decode_r14b(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  // operand1: op1 = decode_Ib
  auto spOprd1 = Decode_Ib(rBinStrm, Offset, rInsn, Mode);
  if (spOprd1 == nullptr)
    return false;
  rInsn.AddOperand(spOprd1);

  return true;
}

/* operand ['op0 = decode_r15'] */
bool X86Architecture::Operand__r15(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_r15
  auto spOprd0 = Decode_r15(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  return true;
}

/* operand ['op0 = decode_r15', 'op1 = decode_Iv'] */
bool X86Architecture::Operand__r15_Iv(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_r15
  auto spOprd0 = Decode_r15(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  // operand1: op1 = decode_Iv
  auto spOprd1 = Decode_Iv(rBinStrm, Offset, rInsn, Mode);
  if (spOprd1 == nullptr)
    return false;
  rInsn.AddOperand(spOprd1);

  return true;
}

/* operand ['op0 = decode_r15', 'op1 = decode_rAX'] */
bool X86Architecture::Operand__r15_rAX(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_r15
  auto spOprd0 = Decode_r15(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  // operand1: op1 = decode_rAX
  auto spOprd1 = Decode_rAX(rBinStrm, Offset, rInsn, Mode);
  if (spOprd1 == nullptr)
    return false;
  rInsn.AddOperand(spOprd1);

  return true;
}

/* operand ['op0 = decode_r15b', 'op1 = decode_Ib'] */
bool X86Architecture::Operand__r15b_Ib(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_r15b
  auto spOprd0 = Decode_r15b(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  // operand1: op1 = decode_Ib
  auto spOprd1 = Decode_Ib(rBinStrm, Offset, rInsn, Mode);
  if (spOprd1 == nullptr)
    return false;
  rInsn.AddOperand(spOprd1);

  return true;
}

/* operand ['op0 = decode_r8'] */
bool X86Architecture::Operand__r8(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_r8
  auto spOprd0 = Decode_r8(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  return true;
}

/* operand ['op0 = decode_r8', 'op1 = decode_Iv'] */
bool X86Architecture::Operand__r8_Iv(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_r8
  auto spOprd0 = Decode_r8(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  // operand1: op1 = decode_Iv
  auto spOprd1 = Decode_Iv(rBinStrm, Offset, rInsn, Mode);
  if (spOprd1 == nullptr)
    return false;
  rInsn.AddOperand(spOprd1);

  return true;
}

/* operand ['op0 = decode_r8', 'op1 = decode_rAX'] */
bool X86Architecture::Operand__r8_rAX(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_r8
  auto spOprd0 = Decode_r8(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  // operand1: op1 = decode_rAX
  auto spOprd1 = Decode_rAX(rBinStrm, Offset, rInsn, Mode);
  if (spOprd1 == nullptr)
    return false;
  rInsn.AddOperand(spOprd1);

  return true;
}

/* operand ['op0 = decode_r8b', 'op1 = decode_Ib'] */
bool X86Architecture::Operand__r8b_Ib(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_r8b
  auto spOprd0 = Decode_r8b(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  // operand1: op1 = decode_Ib
  auto spOprd1 = Decode_Ib(rBinStrm, Offset, rInsn, Mode);
  if (spOprd1 == nullptr)
    return false;
  rInsn.AddOperand(spOprd1);

  return true;
}

/* operand ['op0 = decode_r9'] */
bool X86Architecture::Operand__r9(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_r9
  auto spOprd0 = Decode_r9(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  return true;
}

/* operand ['op0 = decode_r9', 'op1 = decode_Iv'] */
bool X86Architecture::Operand__r9_Iv(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_r9
  auto spOprd0 = Decode_r9(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  // operand1: op1 = decode_Iv
  auto spOprd1 = Decode_Iv(rBinStrm, Offset, rInsn, Mode);
  if (spOprd1 == nullptr)
    return false;
  rInsn.AddOperand(spOprd1);

  return true;
}

/* operand ['op0 = decode_r9', 'op1 = decode_rAX'] */
bool X86Architecture::Operand__r9_rAX(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_r9
  auto spOprd0 = Decode_r9(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  // operand1: op1 = decode_rAX
  auto spOprd1 = Decode_rAX(rBinStrm, Offset, rInsn, Mode);
  if (spOprd1 == nullptr)
    return false;
  rInsn.AddOperand(spOprd1);

  return true;
}

/* operand ['op0 = decode_r9b', 'op1 = decode_Ib'] */
bool X86Architecture::Operand__r9b_Ib(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_r9b
  auto spOprd0 = Decode_r9b(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  // operand1: op1 = decode_Ib
  auto spOprd1 = Decode_Ib(rBinStrm, Offset, rInsn, Mode);
  if (spOprd1 == nullptr)
    return false;
  rInsn.AddOperand(spOprd1);

  return true;
}

/* operand ['op0 = decode_rAX'] */
bool X86Architecture::Operand__rAX(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_rAX
  auto spOprd0 = Decode_rAX(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  return true;
}

/* operand ['op0 = decode_rAX', 'op1 = decode_Iv'] */
bool X86Architecture::Operand__rAX_Iv(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_rAX
  auto spOprd0 = Decode_rAX(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  // operand1: op1 = decode_Iv
  auto spOprd1 = Decode_Iv(rBinStrm, Offset, rInsn, Mode);
  if (spOprd1 == nullptr)
    return false;
  rInsn.AddOperand(spOprd1);

  return true;
}

/* operand ['op0 = decode_rAX', 'op1 = decode_Iz'] */
bool X86Architecture::Operand__rAX_Iz(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_rAX
  auto spOprd0 = Decode_rAX(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  // operand1: op1 = decode_Iz
  auto spOprd1 = Decode_Iz(rBinStrm, Offset, rInsn, Mode);
  if (spOprd1 == nullptr)
    return false;
  rInsn.AddOperand(spOprd1);

  return true;
}

/* operand ['op0 = decode_rAX', 'op1 = decode_Ov'] */
bool X86Architecture::Operand__rAX_Ov(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_rAX
  auto spOprd0 = Decode_rAX(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  // operand1: op1 = decode_Ov
  auto spOprd1 = Decode_Ov(rBinStrm, Offset, rInsn, Mode);
  if (spOprd1 == nullptr)
    return false;
  rInsn.AddOperand(spOprd1);

  return true;
}

/* operand ['op0 = decode_rAX', 'op1 = decode_Xv'] */
bool X86Architecture::Operand__rAX_Xv(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_rAX
  auto spOprd0 = Decode_rAX(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  // operand1: op1 = decode_Xv
  auto spOprd1 = Decode_Xv(rBinStrm, Offset, rInsn, Mode);
  if (spOprd1 == nullptr)
    return false;
  rInsn.AddOperand(spOprd1);

  return true;
}

/* operand ['op0 = decode_rAX', 'op1 = decode_Yv'] */
bool X86Architecture::Operand__rAX_Yv(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_rAX
  auto spOprd0 = Decode_rAX(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  // operand1: op1 = decode_Yv
  auto spOprd1 = Decode_Yv(rBinStrm, Offset, rInsn, Mode);
  if (spOprd1 == nullptr)
    return false;
  rInsn.AddOperand(spOprd1);

  return true;
}

/* operand ['op0 = decode_rBP'] */
bool X86Architecture::Operand__rBP(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_rBP
  auto spOprd0 = Decode_rBP(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  return true;
}

/* operand ['op0 = decode_rBP', 'op1 = decode_Iv'] */
bool X86Architecture::Operand__rBP_Iv(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_rBP
  auto spOprd0 = Decode_rBP(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  // operand1: op1 = decode_Iv
  auto spOprd1 = Decode_Iv(rBinStrm, Offset, rInsn, Mode);
  if (spOprd1 == nullptr)
    return false;
  rInsn.AddOperand(spOprd1);

  return true;
}

/* operand ['op0 = decode_rBP', 'op1 = decode_rAX'] */
bool X86Architecture::Operand__rBP_rAX(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_rBP
  auto spOprd0 = Decode_rBP(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  // operand1: op1 = decode_rAX
  auto spOprd1 = Decode_rAX(rBinStrm, Offset, rInsn, Mode);
  if (spOprd1 == nullptr)
    return false;
  rInsn.AddOperand(spOprd1);

  return true;
}

/* operand ['op0 = decode_rBX'] */
bool X86Architecture::Operand__rBX(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_rBX
  auto spOprd0 = Decode_rBX(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  return true;
}

/* operand ['op0 = decode_rBX', 'op1 = decode_Iv'] */
bool X86Architecture::Operand__rBX_Iv(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_rBX
  auto spOprd0 = Decode_rBX(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  // operand1: op1 = decode_Iv
  auto spOprd1 = Decode_Iv(rBinStrm, Offset, rInsn, Mode);
  if (spOprd1 == nullptr)
    return false;
  rInsn.AddOperand(spOprd1);

  return true;
}

/* operand ['op0 = decode_rBX', 'op1 = decode_rAX'] */
bool X86Architecture::Operand__rBX_rAX(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_rBX
  auto spOprd0 = Decode_rBX(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  // operand1: op1 = decode_rAX
  auto spOprd1 = Decode_rAX(rBinStrm, Offset, rInsn, Mode);
  if (spOprd1 == nullptr)
    return false;
  rInsn.AddOperand(spOprd1);

  return true;
}

/* operand ['op0 = decode_rCX'] */
bool X86Architecture::Operand__rCX(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_rCX
  auto spOprd0 = Decode_rCX(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  return true;
}

/* operand ['op0 = decode_rCX', 'op1 = decode_Iv'] */
bool X86Architecture::Operand__rCX_Iv(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_rCX
  auto spOprd0 = Decode_rCX(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  // operand1: op1 = decode_Iv
  auto spOprd1 = Decode_Iv(rBinStrm, Offset, rInsn, Mode);
  if (spOprd1 == nullptr)
    return false;
  rInsn.AddOperand(spOprd1);

  return true;
}

/* operand ['op0 = decode_rCX', 'op1 = decode_rAX'] */
bool X86Architecture::Operand__rCX_rAX(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_rCX
  auto spOprd0 = Decode_rCX(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  // operand1: op1 = decode_rAX
  auto spOprd1 = Decode_rAX(rBinStrm, Offset, rInsn, Mode);
  if (spOprd1 == nullptr)
    return false;
  rInsn.AddOperand(spOprd1);

  return true;
}

/* operand ['op0 = decode_rDI'] */
bool X86Architecture::Operand__rDI(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_rDI
  auto spOprd0 = Decode_rDI(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  return true;
}

/* operand ['op0 = decode_rDI', 'op1 = decode_Iv'] */
bool X86Architecture::Operand__rDI_Iv(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_rDI
  auto spOprd0 = Decode_rDI(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  // operand1: op1 = decode_Iv
  auto spOprd1 = Decode_Iv(rBinStrm, Offset, rInsn, Mode);
  if (spOprd1 == nullptr)
    return false;
  rInsn.AddOperand(spOprd1);

  return true;
}

/* operand ['op0 = decode_rDI', 'op1 = decode_rAX'] */
bool X86Architecture::Operand__rDI_rAX(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_rDI
  auto spOprd0 = Decode_rDI(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  // operand1: op1 = decode_rAX
  auto spOprd1 = Decode_rAX(rBinStrm, Offset, rInsn, Mode);
  if (spOprd1 == nullptr)
    return false;
  rInsn.AddOperand(spOprd1);

  return true;
}

/* operand ['op0 = decode_rDX'] */
bool X86Architecture::Operand__rDX(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_rDX
  auto spOprd0 = Decode_rDX(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  return true;
}

/* operand ['op0 = decode_rDX', 'op1 = decode_Iv'] */
bool X86Architecture::Operand__rDX_Iv(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_rDX
  auto spOprd0 = Decode_rDX(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  // operand1: op1 = decode_Iv
  auto spOprd1 = Decode_Iv(rBinStrm, Offset, rInsn, Mode);
  if (spOprd1 == nullptr)
    return false;
  rInsn.AddOperand(spOprd1);

  return true;
}

/* operand ['op0 = decode_rDX', 'op1 = decode_rAX'] */
bool X86Architecture::Operand__rDX_rAX(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_rDX
  auto spOprd0 = Decode_rDX(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  // operand1: op1 = decode_rAX
  auto spOprd1 = Decode_rAX(rBinStrm, Offset, rInsn, Mode);
  if (spOprd1 == nullptr)
    return false;
  rInsn.AddOperand(spOprd1);

  return true;
}

/* operand ['op0 = decode_rSI'] */
bool X86Architecture::Operand__rSI(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_rSI
  auto spOprd0 = Decode_rSI(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  return true;
}

/* operand ['op0 = decode_rSI', 'op1 = decode_Iv'] */
bool X86Architecture::Operand__rSI_Iv(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_rSI
  auto spOprd0 = Decode_rSI(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  // operand1: op1 = decode_Iv
  auto spOprd1 = Decode_Iv(rBinStrm, Offset, rInsn, Mode);
  if (spOprd1 == nullptr)
    return false;
  rInsn.AddOperand(spOprd1);

  return true;
}

/* operand ['op0 = decode_rSI', 'op1 = decode_rAX'] */
bool X86Architecture::Operand__rSI_rAX(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_rSI
  auto spOprd0 = Decode_rSI(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  // operand1: op1 = decode_rAX
  auto spOprd1 = Decode_rAX(rBinStrm, Offset, rInsn, Mode);
  if (spOprd1 == nullptr)
    return false;
  rInsn.AddOperand(spOprd1);

  return true;
}

/* operand ['op0 = decode_rSP'] */
bool X86Architecture::Operand__rSP(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_rSP
  auto spOprd0 = Decode_rSP(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  return true;
}

/* operand ['op0 = decode_rSP', 'op1 = decode_Iv'] */
bool X86Architecture::Operand__rSP_Iv(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_rSP
  auto spOprd0 = Decode_rSP(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  // operand1: op1 = decode_Iv
  auto spOprd1 = Decode_Iv(rBinStrm, Offset, rInsn, Mode);
  if (spOprd1 == nullptr)
    return false;
  rInsn.AddOperand(spOprd1);

  return true;
}

/* operand ['op0 = decode_rSP', 'op1 = decode_rAX'] */
bool X86Architecture::Operand__rSP_rAX(BinaryStream const& rBinStrm, TOffset Offset, Instruction& rInsn, u8 Mode)
{
  // operand0: op0 = decode_rSP
  auto spOprd0 = Decode_rSP(rBinStrm, Offset, rInsn, Mode);
  if (spOprd0 == nullptr)
    return false;
  rInsn.AddOperand(spOprd0);

  // operand1: op1 = decode_rAX
  auto spOprd1 = Decode_rAX(rBinStrm, Offset, rInsn, Mode);
  if (spOprd1 == nullptr)
    return false;
  rInsn.AddOperand(spOprd1);

  return true;
}

