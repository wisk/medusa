/* This file has been automatically generated, you must _NOT_ edit it directly. (Sun Feb 05 12:38:19 2017) */
#include "x86_architecture.hpp"
const X86Architecture::TDisassembler X86Architecture::m_Table_1[0x100] =
{
  &X86Architecture::Table_1_00,
  &X86Architecture::Table_1_01,
  &X86Architecture::Table_1_02,
  &X86Architecture::Table_1_03,
  &X86Architecture::Table_1_04,
  &X86Architecture::Table_1_05,
  &X86Architecture::Table_1_06,
  &X86Architecture::Table_1_07,
  &X86Architecture::Table_1_08,
  &X86Architecture::Table_1_09,
  &X86Architecture::Table_1_0a,
  &X86Architecture::Table_1_0b,
  &X86Architecture::Table_1_0c,
  &X86Architecture::Table_1_0d,
  &X86Architecture::Table_1_0e,
  &X86Architecture::Table_1_0f,
  &X86Architecture::Table_1_10,
  &X86Architecture::Table_1_11,
  &X86Architecture::Table_1_12,
  &X86Architecture::Table_1_13,
  &X86Architecture::Table_1_14,
  &X86Architecture::Table_1_15,
  &X86Architecture::Table_1_16,
  &X86Architecture::Table_1_17,
  &X86Architecture::Table_1_18,
  &X86Architecture::Table_1_19,
  &X86Architecture::Table_1_1a,
  &X86Architecture::Table_1_1b,
  &X86Architecture::Table_1_1c,
  &X86Architecture::Table_1_1d,
  &X86Architecture::Table_1_1e,
  &X86Architecture::Table_1_1f,
  &X86Architecture::Table_1_20,
  &X86Architecture::Table_1_21,
  &X86Architecture::Table_1_22,
  &X86Architecture::Table_1_23,
  &X86Architecture::Table_1_24,
  &X86Architecture::Table_1_25,
  &X86Architecture::Table_1_26,
  &X86Architecture::Table_1_27,
  &X86Architecture::Table_1_28,
  &X86Architecture::Table_1_29,
  &X86Architecture::Table_1_2a,
  &X86Architecture::Table_1_2b,
  &X86Architecture::Table_1_2c,
  &X86Architecture::Table_1_2d,
  &X86Architecture::Table_1_2e,
  &X86Architecture::Table_1_2f,
  &X86Architecture::Table_1_30,
  &X86Architecture::Table_1_31,
  &X86Architecture::Table_1_32,
  &X86Architecture::Table_1_33,
  &X86Architecture::Table_1_34,
  &X86Architecture::Table_1_35,
  &X86Architecture::Table_1_36,
  &X86Architecture::Table_1_37,
  &X86Architecture::Table_1_38,
  &X86Architecture::Table_1_39,
  &X86Architecture::Table_1_3a,
  &X86Architecture::Table_1_3b,
  &X86Architecture::Table_1_3c,
  &X86Architecture::Table_1_3d,
  &X86Architecture::Table_1_3e,
  &X86Architecture::Table_1_3f,
  &X86Architecture::Table_1_40,
  &X86Architecture::Table_1_41,
  &X86Architecture::Table_1_42,
  &X86Architecture::Table_1_43,
  &X86Architecture::Table_1_44,
  &X86Architecture::Table_1_45,
  &X86Architecture::Table_1_46,
  &X86Architecture::Table_1_47,
  &X86Architecture::Table_1_48,
  &X86Architecture::Table_1_49,
  &X86Architecture::Table_1_4a,
  &X86Architecture::Table_1_4b,
  &X86Architecture::Table_1_4c,
  &X86Architecture::Table_1_4d,
  &X86Architecture::Table_1_4e,
  &X86Architecture::Table_1_4f,
  &X86Architecture::Table_1_50,
  &X86Architecture::Table_1_51,
  &X86Architecture::Table_1_52,
  &X86Architecture::Table_1_53,
  &X86Architecture::Table_1_54,
  &X86Architecture::Table_1_55,
  &X86Architecture::Table_1_56,
  &X86Architecture::Table_1_57,
  &X86Architecture::Table_1_58,
  &X86Architecture::Table_1_59,
  &X86Architecture::Table_1_5a,
  &X86Architecture::Table_1_5b,
  &X86Architecture::Table_1_5c,
  &X86Architecture::Table_1_5d,
  &X86Architecture::Table_1_5e,
  &X86Architecture::Table_1_5f,
  &X86Architecture::Table_1_60,
  &X86Architecture::Table_1_61,
  &X86Architecture::Table_1_62,
  &X86Architecture::Table_1_63,
  &X86Architecture::Table_1_64,
  &X86Architecture::Table_1_65,
  &X86Architecture::Table_1_66,
  &X86Architecture::Table_1_67,
  &X86Architecture::Table_1_68,
  &X86Architecture::Table_1_69,
  &X86Architecture::Table_1_6a,
  &X86Architecture::Table_1_6b,
  &X86Architecture::Table_1_6c,
  &X86Architecture::Table_1_6d,
  &X86Architecture::Table_1_6e,
  &X86Architecture::Table_1_6f,
  &X86Architecture::Table_1_70,
  &X86Architecture::Table_1_71,
  &X86Architecture::Table_1_72,
  &X86Architecture::Table_1_73,
  &X86Architecture::Table_1_74,
  &X86Architecture::Table_1_75,
  &X86Architecture::Table_1_76,
  &X86Architecture::Table_1_77,
  &X86Architecture::Table_1_78,
  &X86Architecture::Table_1_79,
  &X86Architecture::Table_1_7a,
  &X86Architecture::Table_1_7b,
  &X86Architecture::Table_1_7c,
  &X86Architecture::Table_1_7d,
  &X86Architecture::Table_1_7e,
  &X86Architecture::Table_1_7f,
  &X86Architecture::Table_1_80,
  &X86Architecture::Table_1_81,
  &X86Architecture::Table_1_82,
  &X86Architecture::Table_1_83,
  &X86Architecture::Table_1_84,
  &X86Architecture::Table_1_85,
  &X86Architecture::Table_1_86,
  &X86Architecture::Table_1_87,
  &X86Architecture::Table_1_88,
  &X86Architecture::Table_1_89,
  &X86Architecture::Table_1_8a,
  &X86Architecture::Table_1_8b,
  &X86Architecture::Table_1_8c,
  &X86Architecture::Table_1_8d,
  &X86Architecture::Table_1_8e,
  &X86Architecture::Table_1_8f,
  &X86Architecture::Table_1_90,
  &X86Architecture::Table_1_91,
  &X86Architecture::Table_1_92,
  &X86Architecture::Table_1_93,
  &X86Architecture::Table_1_94,
  &X86Architecture::Table_1_95,
  &X86Architecture::Table_1_96,
  &X86Architecture::Table_1_97,
  &X86Architecture::Table_1_98,
  &X86Architecture::Table_1_99,
  &X86Architecture::Table_1_9a,
  &X86Architecture::Table_1_9b,
  &X86Architecture::Table_1_9c,
  &X86Architecture::Table_1_9d,
  &X86Architecture::Table_1_9e,
  &X86Architecture::Table_1_9f,
  &X86Architecture::Table_1_a0,
  &X86Architecture::Table_1_a1,
  &X86Architecture::Table_1_a2,
  &X86Architecture::Table_1_a3,
  &X86Architecture::Table_1_a4,
  &X86Architecture::Table_1_a5,
  &X86Architecture::Table_1_a6,
  &X86Architecture::Table_1_a7,
  &X86Architecture::Table_1_a8,
  &X86Architecture::Table_1_a9,
  &X86Architecture::Table_1_aa,
  &X86Architecture::Table_1_ab,
  &X86Architecture::Table_1_ac,
  &X86Architecture::Table_1_ad,
  &X86Architecture::Table_1_ae,
  &X86Architecture::Table_1_af,
  &X86Architecture::Table_1_b0,
  &X86Architecture::Table_1_b1,
  &X86Architecture::Table_1_b2,
  &X86Architecture::Table_1_b3,
  &X86Architecture::Table_1_b4,
  &X86Architecture::Table_1_b5,
  &X86Architecture::Table_1_b6,
  &X86Architecture::Table_1_b7,
  &X86Architecture::Table_1_b8,
  &X86Architecture::Table_1_b9,
  &X86Architecture::Table_1_ba,
  &X86Architecture::Table_1_bb,
  &X86Architecture::Table_1_bc,
  &X86Architecture::Table_1_bd,
  &X86Architecture::Table_1_be,
  &X86Architecture::Table_1_bf,
  &X86Architecture::Table_1_c0,
  &X86Architecture::Table_1_c1,
  &X86Architecture::Table_1_c2,
  &X86Architecture::Table_1_c3,
  &X86Architecture::Table_1_c4,
  &X86Architecture::Table_1_c5,
  &X86Architecture::Table_1_c6,
  &X86Architecture::Table_1_c7,
  &X86Architecture::Table_1_c8,
  &X86Architecture::Table_1_c9,
  &X86Architecture::Table_1_ca,
  &X86Architecture::Table_1_cb,
  &X86Architecture::Table_1_cc,
  &X86Architecture::Table_1_cd,
  &X86Architecture::Table_1_ce,
  &X86Architecture::Table_1_cf,
  &X86Architecture::Table_1_d0,
  &X86Architecture::Table_1_d1,
  &X86Architecture::Table_1_d2,
  &X86Architecture::Table_1_d3,
  &X86Architecture::Table_1_d4,
  &X86Architecture::Table_1_d5,
  &X86Architecture::Table_1_d6,
  &X86Architecture::Table_1_d7,
  &X86Architecture::Table_1_d8,
  &X86Architecture::Table_1_d9,
  &X86Architecture::Table_1_da,
  &X86Architecture::Table_1_db,
  &X86Architecture::Table_1_dc,
  &X86Architecture::Table_1_dd,
  &X86Architecture::Table_1_de,
  &X86Architecture::Table_1_df,
  &X86Architecture::Table_1_e0,
  &X86Architecture::Table_1_e1,
  &X86Architecture::Table_1_e2,
  &X86Architecture::Table_1_e3,
  &X86Architecture::Table_1_e4,
  &X86Architecture::Table_1_e5,
  &X86Architecture::Table_1_e6,
  &X86Architecture::Table_1_e7,
  &X86Architecture::Table_1_e8,
  &X86Architecture::Table_1_e9,
  &X86Architecture::Table_1_ea,
  &X86Architecture::Table_1_eb,
  &X86Architecture::Table_1_ec,
  &X86Architecture::Table_1_ed,
  &X86Architecture::Table_1_ee,
  &X86Architecture::Table_1_ef,
  &X86Architecture::Table_1_f0,
  &X86Architecture::Table_1_f1,
  &X86Architecture::Table_1_f2,
  &X86Architecture::Table_1_f3,
  &X86Architecture::Table_1_f4,
  &X86Architecture::Table_1_f5,
  &X86Architecture::Table_1_f6,
  &X86Architecture::Table_1_f7,
  &X86Architecture::Table_1_f8,
  &X86Architecture::Table_1_f9,
  &X86Architecture::Table_1_fa,
  &X86Architecture::Table_1_fb,
  &X86Architecture::Table_1_fc,
  &X86Architecture::Table_1_fd,
  &X86Architecture::Table_1_fe,
  &X86Architecture::Table_1_ff
};

/** instruction
 * mnemonic: add
 * operand: ['Eb', 'Gb']
 * update_flags: ['cf', 'pf', 'af', 'zf', 'sf', 'of']
 * opcode: 00
 * semantic: alloc_var('res', op0.bit);
res.val = op0.val + op1.val;
call('overflow_flag_add');
call('carry_flag_add');
call('sign_flag');
call('zero_flag');
call('parity_flag');
call('adjust_flag');
op0.val = res.val;
free_var('res');

**/
bool X86Architecture::Table_1_00(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Size()++;
    rInsn.SetOpcode(X86_Opcode_Add);
    if (Operand__Eb_Gb(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    {
      Expression::LSPType AllExpr;
      rInsn.SetUpdatedFlags(X86_FlCf | X86_FlPf | X86_FlAf | X86_FlZf | X86_FlSf | X86_FlOf);
      /* semantic: alloc_var('res', op0.bit) */
      AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
      /* semantic: res.val = op0.val + op1.val */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("res", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpAdd,
          rInsn.GetOperand(0),
          rInsn.GetOperand(1))));
      /* semantic: call('overflow_flag_add') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlOf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeBinOp(
            OperationExpression::OpAnd,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              rInsn.GetOperand(0),
              Expr::MakeVar("res", VariableExpression::Use)),
            Expr::MakeUnOp(
              OperationExpression::OpNot,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                rInsn.GetOperand(1)))),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
      /* semantic: call('carry_flag_add') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlCf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              rInsn.GetOperand(0),
              rInsn.GetOperand(1)),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  rInsn.GetOperand(0),
                  rInsn.GetOperand(1)),
                Expr::MakeVar("res", VariableExpression::Use)),
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                rInsn.GetOperand(1)))),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
      /* semantic: call('sign_flag') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlSf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
      /* semantic: call('zero_flag') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlZf, &m_CpuInfo),
        Expr::MakeTernaryCond(ConditionExpression::CondEq,
        Expr::MakeVar("res", VariableExpression::Use),
        Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
        Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))));
      /* semantic: call('parity_flag') */
      AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBitVector(1, 0x1)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlPf, &m_CpuInfo),
        Expr::MakeVar("pf_tmp", VariableExpression::Use)));
      AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
      /* semantic: call('adjust_flag') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlAf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              rInsn.GetOperand(0),
              rInsn.GetOperand(1)),
            Expr::MakeVar("res", VariableExpression::Use)),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))));
      /* semantic: op0.val = res.val */
      AllExpr.push_back(Expr::MakeAssign(
        rInsn.GetOperand(0),
        Expr::MakeVar("res", VariableExpression::Use)));
      /* semantic: free_var('res') */
      AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instruction
 * mnemonic: add
 * operand: ['Ev', 'Gv']
 * update_flags: ['cf', 'pf', 'af', 'zf', 'sf', 'of']
 * opcode: 01
 * semantic: alloc_var('res', op0.bit);
res.val = op0.val + op1.val;
call('overflow_flag_add');
call('carry_flag_add');
call('sign_flag');
call('zero_flag');
call('parity_flag');
call('adjust_flag');
op0.val = res.val;
free_var('res');

**/
bool X86Architecture::Table_1_01(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Size()++;
    rInsn.SetOpcode(X86_Opcode_Add);
    if (Operand__Ev_Gv(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    {
      Expression::LSPType AllExpr;
      rInsn.SetUpdatedFlags(X86_FlCf | X86_FlPf | X86_FlAf | X86_FlZf | X86_FlSf | X86_FlOf);
      /* semantic: alloc_var('res', op0.bit) */
      AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
      /* semantic: res.val = op0.val + op1.val */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("res", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpAdd,
          rInsn.GetOperand(0),
          rInsn.GetOperand(1))));
      /* semantic: call('overflow_flag_add') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlOf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeBinOp(
            OperationExpression::OpAnd,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              rInsn.GetOperand(0),
              Expr::MakeVar("res", VariableExpression::Use)),
            Expr::MakeUnOp(
              OperationExpression::OpNot,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                rInsn.GetOperand(1)))),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
      /* semantic: call('carry_flag_add') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlCf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              rInsn.GetOperand(0),
              rInsn.GetOperand(1)),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  rInsn.GetOperand(0),
                  rInsn.GetOperand(1)),
                Expr::MakeVar("res", VariableExpression::Use)),
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                rInsn.GetOperand(1)))),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
      /* semantic: call('sign_flag') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlSf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
      /* semantic: call('zero_flag') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlZf, &m_CpuInfo),
        Expr::MakeTernaryCond(ConditionExpression::CondEq,
        Expr::MakeVar("res", VariableExpression::Use),
        Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
        Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))));
      /* semantic: call('parity_flag') */
      AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBitVector(1, 0x1)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlPf, &m_CpuInfo),
        Expr::MakeVar("pf_tmp", VariableExpression::Use)));
      AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
      /* semantic: call('adjust_flag') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlAf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              rInsn.GetOperand(0),
              rInsn.GetOperand(1)),
            Expr::MakeVar("res", VariableExpression::Use)),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))));
      /* semantic: op0.val = res.val */
      AllExpr.push_back(Expr::MakeAssign(
        rInsn.GetOperand(0),
        Expr::MakeVar("res", VariableExpression::Use)));
      /* semantic: free_var('res') */
      AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instruction
 * mnemonic: add
 * operand: ['Gb', 'Eb']
 * update_flags: ['cf', 'pf', 'af', 'zf', 'sf', 'of']
 * opcode: 02
 * semantic: alloc_var('res', op0.bit);
res.val = op0.val + op1.val;
call('overflow_flag_add');
call('carry_flag_add');
call('sign_flag');
call('zero_flag');
call('parity_flag');
call('adjust_flag');
op0.val = res.val;
free_var('res');

**/
bool X86Architecture::Table_1_02(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Size()++;
    rInsn.SetOpcode(X86_Opcode_Add);
    if (Operand__Gb_Eb(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    {
      Expression::LSPType AllExpr;
      rInsn.SetUpdatedFlags(X86_FlCf | X86_FlPf | X86_FlAf | X86_FlZf | X86_FlSf | X86_FlOf);
      /* semantic: alloc_var('res', op0.bit) */
      AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
      /* semantic: res.val = op0.val + op1.val */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("res", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpAdd,
          rInsn.GetOperand(0),
          rInsn.GetOperand(1))));
      /* semantic: call('overflow_flag_add') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlOf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeBinOp(
            OperationExpression::OpAnd,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              rInsn.GetOperand(0),
              Expr::MakeVar("res", VariableExpression::Use)),
            Expr::MakeUnOp(
              OperationExpression::OpNot,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                rInsn.GetOperand(1)))),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
      /* semantic: call('carry_flag_add') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlCf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              rInsn.GetOperand(0),
              rInsn.GetOperand(1)),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  rInsn.GetOperand(0),
                  rInsn.GetOperand(1)),
                Expr::MakeVar("res", VariableExpression::Use)),
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                rInsn.GetOperand(1)))),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
      /* semantic: call('sign_flag') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlSf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
      /* semantic: call('zero_flag') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlZf, &m_CpuInfo),
        Expr::MakeTernaryCond(ConditionExpression::CondEq,
        Expr::MakeVar("res", VariableExpression::Use),
        Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
        Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))));
      /* semantic: call('parity_flag') */
      AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBitVector(1, 0x1)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlPf, &m_CpuInfo),
        Expr::MakeVar("pf_tmp", VariableExpression::Use)));
      AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
      /* semantic: call('adjust_flag') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlAf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              rInsn.GetOperand(0),
              rInsn.GetOperand(1)),
            Expr::MakeVar("res", VariableExpression::Use)),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))));
      /* semantic: op0.val = res.val */
      AllExpr.push_back(Expr::MakeAssign(
        rInsn.GetOperand(0),
        Expr::MakeVar("res", VariableExpression::Use)));
      /* semantic: free_var('res') */
      AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instruction
 * mnemonic: add
 * operand: ['Gv', 'Ev']
 * update_flags: ['cf', 'pf', 'af', 'zf', 'sf', 'of']
 * opcode: 03
 * semantic: alloc_var('res', op0.bit);
res.val = op0.val + op1.val;
call('overflow_flag_add');
call('carry_flag_add');
call('sign_flag');
call('zero_flag');
call('parity_flag');
call('adjust_flag');
op0.val = res.val;
free_var('res');

**/
bool X86Architecture::Table_1_03(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Size()++;
    rInsn.SetOpcode(X86_Opcode_Add);
    if (Operand__Gv_Ev(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    {
      Expression::LSPType AllExpr;
      rInsn.SetUpdatedFlags(X86_FlCf | X86_FlPf | X86_FlAf | X86_FlZf | X86_FlSf | X86_FlOf);
      /* semantic: alloc_var('res', op0.bit) */
      AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
      /* semantic: res.val = op0.val + op1.val */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("res", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpAdd,
          rInsn.GetOperand(0),
          rInsn.GetOperand(1))));
      /* semantic: call('overflow_flag_add') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlOf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeBinOp(
            OperationExpression::OpAnd,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              rInsn.GetOperand(0),
              Expr::MakeVar("res", VariableExpression::Use)),
            Expr::MakeUnOp(
              OperationExpression::OpNot,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                rInsn.GetOperand(1)))),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
      /* semantic: call('carry_flag_add') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlCf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              rInsn.GetOperand(0),
              rInsn.GetOperand(1)),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  rInsn.GetOperand(0),
                  rInsn.GetOperand(1)),
                Expr::MakeVar("res", VariableExpression::Use)),
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                rInsn.GetOperand(1)))),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
      /* semantic: call('sign_flag') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlSf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
      /* semantic: call('zero_flag') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlZf, &m_CpuInfo),
        Expr::MakeTernaryCond(ConditionExpression::CondEq,
        Expr::MakeVar("res", VariableExpression::Use),
        Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
        Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))));
      /* semantic: call('parity_flag') */
      AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBitVector(1, 0x1)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlPf, &m_CpuInfo),
        Expr::MakeVar("pf_tmp", VariableExpression::Use)));
      AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
      /* semantic: call('adjust_flag') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlAf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              rInsn.GetOperand(0),
              rInsn.GetOperand(1)),
            Expr::MakeVar("res", VariableExpression::Use)),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))));
      /* semantic: op0.val = res.val */
      AllExpr.push_back(Expr::MakeAssign(
        rInsn.GetOperand(0),
        Expr::MakeVar("res", VariableExpression::Use)));
      /* semantic: free_var('res') */
      AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instruction
 * mnemonic: add
 * operand: ['AL', 'Ib']
 * update_flags: ['cf', 'pf', 'af', 'zf', 'sf', 'of']
 * opcode: 04
 * semantic: alloc_var('res', op0.bit);
res.val = op0.val + op1.val;
call('overflow_flag_add');
call('carry_flag_add');
call('sign_flag');
call('zero_flag');
call('parity_flag');
call('adjust_flag');
op0.val = res.val;
free_var('res');

**/
bool X86Architecture::Table_1_04(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Size()++;
    rInsn.SetOpcode(X86_Opcode_Add);
    if (Operand__AL_Ib(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    {
      Expression::LSPType AllExpr;
      rInsn.SetUpdatedFlags(X86_FlCf | X86_FlPf | X86_FlAf | X86_FlZf | X86_FlSf | X86_FlOf);
      /* semantic: alloc_var('res', op0.bit) */
      AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
      /* semantic: res.val = op0.val + op1.val */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("res", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpAdd,
          rInsn.GetOperand(0),
          rInsn.GetOperand(1))));
      /* semantic: call('overflow_flag_add') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlOf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeBinOp(
            OperationExpression::OpAnd,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              rInsn.GetOperand(0),
              Expr::MakeVar("res", VariableExpression::Use)),
            Expr::MakeUnOp(
              OperationExpression::OpNot,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                rInsn.GetOperand(1)))),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
      /* semantic: call('carry_flag_add') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlCf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              rInsn.GetOperand(0),
              rInsn.GetOperand(1)),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  rInsn.GetOperand(0),
                  rInsn.GetOperand(1)),
                Expr::MakeVar("res", VariableExpression::Use)),
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                rInsn.GetOperand(1)))),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
      /* semantic: call('sign_flag') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlSf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
      /* semantic: call('zero_flag') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlZf, &m_CpuInfo),
        Expr::MakeTernaryCond(ConditionExpression::CondEq,
        Expr::MakeVar("res", VariableExpression::Use),
        Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
        Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))));
      /* semantic: call('parity_flag') */
      AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBitVector(1, 0x1)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlPf, &m_CpuInfo),
        Expr::MakeVar("pf_tmp", VariableExpression::Use)));
      AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
      /* semantic: call('adjust_flag') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlAf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              rInsn.GetOperand(0),
              rInsn.GetOperand(1)),
            Expr::MakeVar("res", VariableExpression::Use)),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))));
      /* semantic: op0.val = res.val */
      AllExpr.push_back(Expr::MakeAssign(
        rInsn.GetOperand(0),
        Expr::MakeVar("res", VariableExpression::Use)));
      /* semantic: free_var('res') */
      AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instruction
 * mnemonic: add
 * operand: ['rAX', 'Iz']
 * update_flags: ['cf', 'pf', 'af', 'zf', 'sf', 'of']
 * opcode: 05
 * semantic: alloc_var('res', op0.bit);
res.val = op0.val + op1.val;
call('overflow_flag_add');
call('carry_flag_add');
call('sign_flag');
call('zero_flag');
call('parity_flag');
call('adjust_flag');
op0.val = res.val;
free_var('res');

**/
bool X86Architecture::Table_1_05(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Size()++;
    rInsn.SetOpcode(X86_Opcode_Add);
    if (Operand__rAX_Iz(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    {
      Expression::LSPType AllExpr;
      rInsn.SetUpdatedFlags(X86_FlCf | X86_FlPf | X86_FlAf | X86_FlZf | X86_FlSf | X86_FlOf);
      /* semantic: alloc_var('res', op0.bit) */
      AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
      /* semantic: res.val = op0.val + op1.val */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("res", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpAdd,
          rInsn.GetOperand(0),
          rInsn.GetOperand(1))));
      /* semantic: call('overflow_flag_add') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlOf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeBinOp(
            OperationExpression::OpAnd,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              rInsn.GetOperand(0),
              Expr::MakeVar("res", VariableExpression::Use)),
            Expr::MakeUnOp(
              OperationExpression::OpNot,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                rInsn.GetOperand(1)))),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
      /* semantic: call('carry_flag_add') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlCf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              rInsn.GetOperand(0),
              rInsn.GetOperand(1)),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  rInsn.GetOperand(0),
                  rInsn.GetOperand(1)),
                Expr::MakeVar("res", VariableExpression::Use)),
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                rInsn.GetOperand(1)))),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
      /* semantic: call('sign_flag') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlSf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
      /* semantic: call('zero_flag') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlZf, &m_CpuInfo),
        Expr::MakeTernaryCond(ConditionExpression::CondEq,
        Expr::MakeVar("res", VariableExpression::Use),
        Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
        Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))));
      /* semantic: call('parity_flag') */
      AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBitVector(1, 0x1)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlPf, &m_CpuInfo),
        Expr::MakeVar("pf_tmp", VariableExpression::Use)));
      AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
      /* semantic: call('adjust_flag') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlAf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              rInsn.GetOperand(0),
              rInsn.GetOperand(1)),
            Expr::MakeVar("res", VariableExpression::Use)),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))));
      /* semantic: op0.val = res.val */
      AllExpr.push_back(Expr::MakeAssign(
        rInsn.GetOperand(0),
        Expr::MakeVar("res", VariableExpression::Use)));
      /* semantic: free_var('res') */
      AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instruction
 * mnemonic: push
 * operand: ['ES']
 * opcode: 06
 * attr: ['nm64']
 * semantic: alloc_var('pushed_value', stack.bit);
pushed_value = sign_extend(op0.val, int(stack.bit, stack.bit));
stack.id -= stack.size;
stack.mem = pushed_value;
free_var('pushed_value');

**/
bool X86Architecture::Table_1_06(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    if (Mode != X86_Bit_64)
    {
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Push);
      if (Operand__ES(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('pushed_value', stack.bit) */
        AllExpr.push_back(Expr::MakeVar("pushed_value", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()))));
        /* semantic: pushed_value = sign_extend(op0.val, int(stack.bit, stack.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pushed_value", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpSext, rInsn.GetOperand(0), Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()))))));
        /* semantic: stack.id -= stack.size */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
            Expr::MakeBitVector(
              m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())),
              m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())) / 8)))
        );
        /* semantic: stack.mem = pushed_value */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeMem(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), nullptr, Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo)),
          Expr::MakeVar("pushed_value", VariableExpression::Use)));
        /* semantic: free_var('pushed_value') */
        AllExpr.push_back(Expr::MakeVar("pushed_value", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    else
      return false;
}

/** instruction
 * mnemonic: pop
 * operand: ['ES']
 * opcode: 07
 * attr: ['nm64']
 * semantic: alloc_var('popped_value', stack.bit);
popped_value = stack.mem;
stack.id += stack.size;
op0.val = popped_value;
free_var('popped_value');

**/
bool X86Architecture::Table_1_07(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    if (Mode != X86_Bit_64)
    {
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Pop);
      if (Operand__ES(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('popped_value', stack.bit) */
        AllExpr.push_back(Expr::MakeVar("popped_value", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()))));
        /* semantic: popped_value = stack.mem */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("popped_value", VariableExpression::Use),
          Expr::MakeMem(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), nullptr, Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo))));
        /* semantic: stack.id += stack.size */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeBinOp(
            OperationExpression::OpAdd,
            Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
            Expr::MakeBitVector(
              m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())),
              m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())) / 8)))
        );
        /* semantic: op0.val = popped_value */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("popped_value", VariableExpression::Use)));
        /* semantic: free_var('popped_value') */
        AllExpr.push_back(Expr::MakeVar("popped_value", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    else
      return false;
}

/** instruction
 * mnemonic: or
 * clear_flags: ['af', 'of', 'cf']
 * semantic: alloc_var('res', op0.bit);
res = op0.val | op1.val;
of.id = int1(0)
cf.id = int1(0)
call('sign_flag')
call('zero_flag')
call('parity_flag')
op0.val = res;
free_var('res');

 * operand: ['Eb', 'Gb']
 * opcode: 08
 * update_flags: ['cf', 'pf', 'af', 'zf', 'sf', 'of']
**/
bool X86Architecture::Table_1_08(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Size()++;
    rInsn.SetOpcode(X86_Opcode_Or);
    if (Operand__Eb_Gb(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    {
      Expression::LSPType AllExpr;
      rInsn.SetUpdatedFlags(X86_FlCf | X86_FlPf | X86_FlAf | X86_FlZf | X86_FlSf | X86_FlOf);
      rInsn.SetClearedFlags(X86_FlAf | X86_FlOf | X86_FlCf);
      AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlAf, &m_CpuInfo), Expr::MakeBoolean(false)));
      AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlOf, &m_CpuInfo), Expr::MakeBoolean(false)));
      AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlCf, &m_CpuInfo), Expr::MakeBoolean(false)));
      /* semantic: alloc_var('res', op0.bit) */
      AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
      /* semantic: res = op0.val | op1.val */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("res", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpOr,
          rInsn.GetOperand(0),
          rInsn.GetOperand(1))));
      /* semantic: of.id = int1(0)
      cf.id = int1(0)
      call('sign_flag')
      call('zero_flag')
      call('parity_flag')
      op0.val = res */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlOf, &m_CpuInfo),
        Expr::MakeBitVector(1, 0x0)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlCf, &m_CpuInfo),
        Expr::MakeBitVector(1, 0x0)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlSf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlZf, &m_CpuInfo),
        Expr::MakeTernaryCond(ConditionExpression::CondEq,
        Expr::MakeVar("res", VariableExpression::Use),
        Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
        Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))));
      AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBitVector(1, 0x1)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlPf, &m_CpuInfo),
        Expr::MakeVar("pf_tmp", VariableExpression::Use)));
      AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
      AllExpr.push_back(Expr::MakeAssign(
        rInsn.GetOperand(0),
        Expr::MakeVar("res", VariableExpression::Use)));
      /* semantic: free_var('res') */
      AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instruction
 * mnemonic: or
 * clear_flags: ['af', 'of', 'cf']
 * semantic: alloc_var('res', op0.bit);
res = op0.val | op1.val;
of.id = int1(0)
cf.id = int1(0)
call('sign_flag')
call('zero_flag')
call('parity_flag')
op0.val = res;
free_var('res');

 * operand: ['Ev', 'Gv']
 * opcode: 09
 * update_flags: ['cf', 'pf', 'af', 'zf', 'sf', 'of']
**/
bool X86Architecture::Table_1_09(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Size()++;
    rInsn.SetOpcode(X86_Opcode_Or);
    if (Operand__Ev_Gv(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    {
      Expression::LSPType AllExpr;
      rInsn.SetUpdatedFlags(X86_FlCf | X86_FlPf | X86_FlAf | X86_FlZf | X86_FlSf | X86_FlOf);
      rInsn.SetClearedFlags(X86_FlAf | X86_FlOf | X86_FlCf);
      AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlAf, &m_CpuInfo), Expr::MakeBoolean(false)));
      AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlOf, &m_CpuInfo), Expr::MakeBoolean(false)));
      AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlCf, &m_CpuInfo), Expr::MakeBoolean(false)));
      /* semantic: alloc_var('res', op0.bit) */
      AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
      /* semantic: res = op0.val | op1.val */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("res", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpOr,
          rInsn.GetOperand(0),
          rInsn.GetOperand(1))));
      /* semantic: of.id = int1(0)
      cf.id = int1(0)
      call('sign_flag')
      call('zero_flag')
      call('parity_flag')
      op0.val = res */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlOf, &m_CpuInfo),
        Expr::MakeBitVector(1, 0x0)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlCf, &m_CpuInfo),
        Expr::MakeBitVector(1, 0x0)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlSf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlZf, &m_CpuInfo),
        Expr::MakeTernaryCond(ConditionExpression::CondEq,
        Expr::MakeVar("res", VariableExpression::Use),
        Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
        Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))));
      AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBitVector(1, 0x1)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlPf, &m_CpuInfo),
        Expr::MakeVar("pf_tmp", VariableExpression::Use)));
      AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
      AllExpr.push_back(Expr::MakeAssign(
        rInsn.GetOperand(0),
        Expr::MakeVar("res", VariableExpression::Use)));
      /* semantic: free_var('res') */
      AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instruction
 * mnemonic: or
 * clear_flags: ['af', 'of', 'cf']
 * semantic: alloc_var('res', op0.bit);
res = op0.val | op1.val;
of.id = int1(0)
cf.id = int1(0)
call('sign_flag')
call('zero_flag')
call('parity_flag')
op0.val = res;
free_var('res');

 * operand: ['Gb', 'Eb']
 * opcode: 0a
 * update_flags: ['cf', 'pf', 'af', 'zf', 'sf', 'of']
**/
bool X86Architecture::Table_1_0a(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Size()++;
    rInsn.SetOpcode(X86_Opcode_Or);
    if (Operand__Gb_Eb(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    {
      Expression::LSPType AllExpr;
      rInsn.SetUpdatedFlags(X86_FlCf | X86_FlPf | X86_FlAf | X86_FlZf | X86_FlSf | X86_FlOf);
      rInsn.SetClearedFlags(X86_FlAf | X86_FlOf | X86_FlCf);
      AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlAf, &m_CpuInfo), Expr::MakeBoolean(false)));
      AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlOf, &m_CpuInfo), Expr::MakeBoolean(false)));
      AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlCf, &m_CpuInfo), Expr::MakeBoolean(false)));
      /* semantic: alloc_var('res', op0.bit) */
      AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
      /* semantic: res = op0.val | op1.val */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("res", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpOr,
          rInsn.GetOperand(0),
          rInsn.GetOperand(1))));
      /* semantic: of.id = int1(0)
      cf.id = int1(0)
      call('sign_flag')
      call('zero_flag')
      call('parity_flag')
      op0.val = res */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlOf, &m_CpuInfo),
        Expr::MakeBitVector(1, 0x0)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlCf, &m_CpuInfo),
        Expr::MakeBitVector(1, 0x0)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlSf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlZf, &m_CpuInfo),
        Expr::MakeTernaryCond(ConditionExpression::CondEq,
        Expr::MakeVar("res", VariableExpression::Use),
        Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
        Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))));
      AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBitVector(1, 0x1)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlPf, &m_CpuInfo),
        Expr::MakeVar("pf_tmp", VariableExpression::Use)));
      AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
      AllExpr.push_back(Expr::MakeAssign(
        rInsn.GetOperand(0),
        Expr::MakeVar("res", VariableExpression::Use)));
      /* semantic: free_var('res') */
      AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instruction
 * mnemonic: or
 * clear_flags: ['af', 'of', 'cf']
 * semantic: alloc_var('res', op0.bit);
res = op0.val | op1.val;
of.id = int1(0)
cf.id = int1(0)
call('sign_flag')
call('zero_flag')
call('parity_flag')
op0.val = res;
free_var('res');

 * operand: ['Gv', 'Ev']
 * opcode: 0b
 * update_flags: ['cf', 'pf', 'af', 'zf', 'sf', 'of']
**/
bool X86Architecture::Table_1_0b(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Size()++;
    rInsn.SetOpcode(X86_Opcode_Or);
    if (Operand__Gv_Ev(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    {
      Expression::LSPType AllExpr;
      rInsn.SetUpdatedFlags(X86_FlCf | X86_FlPf | X86_FlAf | X86_FlZf | X86_FlSf | X86_FlOf);
      rInsn.SetClearedFlags(X86_FlAf | X86_FlOf | X86_FlCf);
      AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlAf, &m_CpuInfo), Expr::MakeBoolean(false)));
      AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlOf, &m_CpuInfo), Expr::MakeBoolean(false)));
      AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlCf, &m_CpuInfo), Expr::MakeBoolean(false)));
      /* semantic: alloc_var('res', op0.bit) */
      AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
      /* semantic: res = op0.val | op1.val */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("res", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpOr,
          rInsn.GetOperand(0),
          rInsn.GetOperand(1))));
      /* semantic: of.id = int1(0)
      cf.id = int1(0)
      call('sign_flag')
      call('zero_flag')
      call('parity_flag')
      op0.val = res */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlOf, &m_CpuInfo),
        Expr::MakeBitVector(1, 0x0)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlCf, &m_CpuInfo),
        Expr::MakeBitVector(1, 0x0)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlSf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlZf, &m_CpuInfo),
        Expr::MakeTernaryCond(ConditionExpression::CondEq,
        Expr::MakeVar("res", VariableExpression::Use),
        Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
        Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))));
      AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBitVector(1, 0x1)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlPf, &m_CpuInfo),
        Expr::MakeVar("pf_tmp", VariableExpression::Use)));
      AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
      AllExpr.push_back(Expr::MakeAssign(
        rInsn.GetOperand(0),
        Expr::MakeVar("res", VariableExpression::Use)));
      /* semantic: free_var('res') */
      AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instruction
 * mnemonic: or
 * clear_flags: ['af', 'of', 'cf']
 * semantic: alloc_var('res', op0.bit);
res = op0.val | op1.val;
of.id = int1(0)
cf.id = int1(0)
call('sign_flag')
call('zero_flag')
call('parity_flag')
op0.val = res;
free_var('res');

 * operand: ['AL', 'Ib']
 * opcode: 0c
 * update_flags: ['cf', 'pf', 'af', 'zf', 'sf', 'of']
**/
bool X86Architecture::Table_1_0c(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Size()++;
    rInsn.SetOpcode(X86_Opcode_Or);
    if (Operand__AL_Ib(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    {
      Expression::LSPType AllExpr;
      rInsn.SetUpdatedFlags(X86_FlCf | X86_FlPf | X86_FlAf | X86_FlZf | X86_FlSf | X86_FlOf);
      rInsn.SetClearedFlags(X86_FlAf | X86_FlOf | X86_FlCf);
      AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlAf, &m_CpuInfo), Expr::MakeBoolean(false)));
      AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlOf, &m_CpuInfo), Expr::MakeBoolean(false)));
      AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlCf, &m_CpuInfo), Expr::MakeBoolean(false)));
      /* semantic: alloc_var('res', op0.bit) */
      AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
      /* semantic: res = op0.val | op1.val */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("res", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpOr,
          rInsn.GetOperand(0),
          rInsn.GetOperand(1))));
      /* semantic: of.id = int1(0)
      cf.id = int1(0)
      call('sign_flag')
      call('zero_flag')
      call('parity_flag')
      op0.val = res */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlOf, &m_CpuInfo),
        Expr::MakeBitVector(1, 0x0)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlCf, &m_CpuInfo),
        Expr::MakeBitVector(1, 0x0)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlSf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlZf, &m_CpuInfo),
        Expr::MakeTernaryCond(ConditionExpression::CondEq,
        Expr::MakeVar("res", VariableExpression::Use),
        Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
        Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))));
      AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBitVector(1, 0x1)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlPf, &m_CpuInfo),
        Expr::MakeVar("pf_tmp", VariableExpression::Use)));
      AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
      AllExpr.push_back(Expr::MakeAssign(
        rInsn.GetOperand(0),
        Expr::MakeVar("res", VariableExpression::Use)));
      /* semantic: free_var('res') */
      AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instruction
 * mnemonic: or
 * clear_flags: ['af', 'of', 'cf']
 * semantic: alloc_var('res', op0.bit);
res = op0.val | op1.val;
of.id = int1(0)
cf.id = int1(0)
call('sign_flag')
call('zero_flag')
call('parity_flag')
op0.val = res;
free_var('res');

 * operand: ['rAX', 'Iz']
 * opcode: 0d
 * update_flags: ['cf', 'pf', 'af', 'zf', 'sf', 'of']
**/
bool X86Architecture::Table_1_0d(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Size()++;
    rInsn.SetOpcode(X86_Opcode_Or);
    if (Operand__rAX_Iz(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    {
      Expression::LSPType AllExpr;
      rInsn.SetUpdatedFlags(X86_FlCf | X86_FlPf | X86_FlAf | X86_FlZf | X86_FlSf | X86_FlOf);
      rInsn.SetClearedFlags(X86_FlAf | X86_FlOf | X86_FlCf);
      AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlAf, &m_CpuInfo), Expr::MakeBoolean(false)));
      AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlOf, &m_CpuInfo), Expr::MakeBoolean(false)));
      AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlCf, &m_CpuInfo), Expr::MakeBoolean(false)));
      /* semantic: alloc_var('res', op0.bit) */
      AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
      /* semantic: res = op0.val | op1.val */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("res", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpOr,
          rInsn.GetOperand(0),
          rInsn.GetOperand(1))));
      /* semantic: of.id = int1(0)
      cf.id = int1(0)
      call('sign_flag')
      call('zero_flag')
      call('parity_flag')
      op0.val = res */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlOf, &m_CpuInfo),
        Expr::MakeBitVector(1, 0x0)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlCf, &m_CpuInfo),
        Expr::MakeBitVector(1, 0x0)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlSf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlZf, &m_CpuInfo),
        Expr::MakeTernaryCond(ConditionExpression::CondEq,
        Expr::MakeVar("res", VariableExpression::Use),
        Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
        Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))));
      AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBitVector(1, 0x1)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlPf, &m_CpuInfo),
        Expr::MakeVar("pf_tmp", VariableExpression::Use)));
      AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
      AllExpr.push_back(Expr::MakeAssign(
        rInsn.GetOperand(0),
        Expr::MakeVar("res", VariableExpression::Use)));
      /* semantic: free_var('res') */
      AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instruction
 * mnemonic: push
 * operand: ['CS']
 * opcode: 0e
 * attr: ['nm64']
 * semantic: alloc_var('pushed_value', stack.bit);
pushed_value = sign_extend(op0.val, int(stack.bit, stack.bit));
stack.id -= stack.size;
stack.mem = pushed_value;
free_var('pushed_value');

**/
bool X86Architecture::Table_1_0e(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    if (Mode != X86_Bit_64)
    {
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Push);
      if (Operand__CS(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('pushed_value', stack.bit) */
        AllExpr.push_back(Expr::MakeVar("pushed_value", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()))));
        /* semantic: pushed_value = sign_extend(op0.val, int(stack.bit, stack.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pushed_value", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpSext, rInsn.GetOperand(0), Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()))))));
        /* semantic: stack.id -= stack.size */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
            Expr::MakeBitVector(
              m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())),
              m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())) / 8)))
        );
        /* semantic: stack.mem = pushed_value */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeMem(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), nullptr, Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo)),
          Expr::MakeVar("pushed_value", VariableExpression::Use)));
        /* semantic: free_var('pushed_value') */
        AllExpr.push_back(Expr::MakeVar("pushed_value", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    else
      return false;
}

/** instruction
 * opcode: 0f
 * cpu_model: >= X86_Arch_80286
 * reference: table_2
**/
bool X86Architecture::Table_1_0f(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    u8 Opcode;
    if (!rBinStrm.Read(Offset, Opcode))
      return false;

    rInsn.Size()++;
    if (Opcode + 1 > sizeof(m_Table_2))
      return false;
    return (this->*m_Table_2[Opcode])(rBinStrm, Offset + 1, rInsn, Mode);
}

/** instruction
 * mnemonic: adc
 * test_flags: ['cf']
 * semantic: alloc_var('res', op0.bit);
res.val = op0.val + op1.val + bit_cast(cf.id, int(op0.bit, op0.bit));
call('overflow_flag_add');
call('carry_flag_add');
call('sign_flag');
call('zero_flag');
call('parity_flag');
call('adjust_flag');
op0.val = res.val;
free_var('res');

 * operand: ['Eb', 'Gb']
 * opcode: 10
 * update_flags: ['cf', 'pf', 'af', 'zf', 'sf', 'of']
**/
bool X86Architecture::Table_1_10(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Size()++;
    rInsn.SetOpcode(X86_Opcode_Adc);
    if (Operand__Eb_Gb(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    {
      Expression::LSPType AllExpr;
      rInsn.SetTestedFlags(X86_FlCf);
      rInsn.SetUpdatedFlags(X86_FlCf | X86_FlPf | X86_FlAf | X86_FlZf | X86_FlSf | X86_FlOf);
      /* semantic: alloc_var('res', op0.bit) */
      AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
      /* semantic: res.val = op0.val + op1.val + bit_cast(cf.id, int(op0.bit, op0.bit)) */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("res", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpAdd,
          Expr::MakeBinOp(
            OperationExpression::OpAdd,
            rInsn.GetOperand(0),
            rInsn.GetOperand(1)),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeId(X86_FlCf, &m_CpuInfo), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize())))));
      /* semantic: call('overflow_flag_add') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlOf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeBinOp(
            OperationExpression::OpAnd,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              rInsn.GetOperand(0),
              Expr::MakeVar("res", VariableExpression::Use)),
            Expr::MakeUnOp(
              OperationExpression::OpNot,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                rInsn.GetOperand(1)))),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
      /* semantic: call('carry_flag_add') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlCf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              rInsn.GetOperand(0),
              rInsn.GetOperand(1)),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  rInsn.GetOperand(0),
                  rInsn.GetOperand(1)),
                Expr::MakeVar("res", VariableExpression::Use)),
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                rInsn.GetOperand(1)))),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
      /* semantic: call('sign_flag') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlSf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
      /* semantic: call('zero_flag') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlZf, &m_CpuInfo),
        Expr::MakeTernaryCond(ConditionExpression::CondEq,
        Expr::MakeVar("res", VariableExpression::Use),
        Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
        Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))));
      /* semantic: call('parity_flag') */
      AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBitVector(1, 0x1)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlPf, &m_CpuInfo),
        Expr::MakeVar("pf_tmp", VariableExpression::Use)));
      AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
      /* semantic: call('adjust_flag') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlAf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              rInsn.GetOperand(0),
              rInsn.GetOperand(1)),
            Expr::MakeVar("res", VariableExpression::Use)),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))));
      /* semantic: op0.val = res.val */
      AllExpr.push_back(Expr::MakeAssign(
        rInsn.GetOperand(0),
        Expr::MakeVar("res", VariableExpression::Use)));
      /* semantic: free_var('res') */
      AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instruction
 * mnemonic: adc
 * test_flags: ['cf']
 * semantic: alloc_var('res', op0.bit);
res.val = op0.val + op1.val + bit_cast(cf.id, int(op0.bit, op0.bit));
call('overflow_flag_add');
call('carry_flag_add');
call('sign_flag');
call('zero_flag');
call('parity_flag');
call('adjust_flag');
op0.val = res.val;
free_var('res');

 * operand: ['Ev', 'Gv']
 * opcode: 11
 * update_flags: ['cf', 'pf', 'af', 'zf', 'sf', 'of']
**/
bool X86Architecture::Table_1_11(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Size()++;
    rInsn.SetOpcode(X86_Opcode_Adc);
    if (Operand__Ev_Gv(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    {
      Expression::LSPType AllExpr;
      rInsn.SetTestedFlags(X86_FlCf);
      rInsn.SetUpdatedFlags(X86_FlCf | X86_FlPf | X86_FlAf | X86_FlZf | X86_FlSf | X86_FlOf);
      /* semantic: alloc_var('res', op0.bit) */
      AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
      /* semantic: res.val = op0.val + op1.val + bit_cast(cf.id, int(op0.bit, op0.bit)) */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("res", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpAdd,
          Expr::MakeBinOp(
            OperationExpression::OpAdd,
            rInsn.GetOperand(0),
            rInsn.GetOperand(1)),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeId(X86_FlCf, &m_CpuInfo), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize())))));
      /* semantic: call('overflow_flag_add') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlOf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeBinOp(
            OperationExpression::OpAnd,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              rInsn.GetOperand(0),
              Expr::MakeVar("res", VariableExpression::Use)),
            Expr::MakeUnOp(
              OperationExpression::OpNot,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                rInsn.GetOperand(1)))),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
      /* semantic: call('carry_flag_add') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlCf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              rInsn.GetOperand(0),
              rInsn.GetOperand(1)),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  rInsn.GetOperand(0),
                  rInsn.GetOperand(1)),
                Expr::MakeVar("res", VariableExpression::Use)),
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                rInsn.GetOperand(1)))),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
      /* semantic: call('sign_flag') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlSf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
      /* semantic: call('zero_flag') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlZf, &m_CpuInfo),
        Expr::MakeTernaryCond(ConditionExpression::CondEq,
        Expr::MakeVar("res", VariableExpression::Use),
        Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
        Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))));
      /* semantic: call('parity_flag') */
      AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBitVector(1, 0x1)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlPf, &m_CpuInfo),
        Expr::MakeVar("pf_tmp", VariableExpression::Use)));
      AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
      /* semantic: call('adjust_flag') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlAf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              rInsn.GetOperand(0),
              rInsn.GetOperand(1)),
            Expr::MakeVar("res", VariableExpression::Use)),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))));
      /* semantic: op0.val = res.val */
      AllExpr.push_back(Expr::MakeAssign(
        rInsn.GetOperand(0),
        Expr::MakeVar("res", VariableExpression::Use)));
      /* semantic: free_var('res') */
      AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instruction
 * mnemonic: adc
 * test_flags: ['cf']
 * semantic: alloc_var('res', op0.bit);
res.val = op0.val + op1.val + bit_cast(cf.id, int(op0.bit, op0.bit));
call('overflow_flag_add');
call('carry_flag_add');
call('sign_flag');
call('zero_flag');
call('parity_flag');
call('adjust_flag');
op0.val = res.val;
free_var('res');

 * operand: ['Gb', 'Eb']
 * opcode: 12
 * update_flags: ['cf', 'pf', 'af', 'zf', 'sf', 'of']
**/
bool X86Architecture::Table_1_12(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Size()++;
    rInsn.SetOpcode(X86_Opcode_Adc);
    if (Operand__Gb_Eb(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    {
      Expression::LSPType AllExpr;
      rInsn.SetTestedFlags(X86_FlCf);
      rInsn.SetUpdatedFlags(X86_FlCf | X86_FlPf | X86_FlAf | X86_FlZf | X86_FlSf | X86_FlOf);
      /* semantic: alloc_var('res', op0.bit) */
      AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
      /* semantic: res.val = op0.val + op1.val + bit_cast(cf.id, int(op0.bit, op0.bit)) */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("res", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpAdd,
          Expr::MakeBinOp(
            OperationExpression::OpAdd,
            rInsn.GetOperand(0),
            rInsn.GetOperand(1)),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeId(X86_FlCf, &m_CpuInfo), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize())))));
      /* semantic: call('overflow_flag_add') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlOf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeBinOp(
            OperationExpression::OpAnd,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              rInsn.GetOperand(0),
              Expr::MakeVar("res", VariableExpression::Use)),
            Expr::MakeUnOp(
              OperationExpression::OpNot,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                rInsn.GetOperand(1)))),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
      /* semantic: call('carry_flag_add') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlCf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              rInsn.GetOperand(0),
              rInsn.GetOperand(1)),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  rInsn.GetOperand(0),
                  rInsn.GetOperand(1)),
                Expr::MakeVar("res", VariableExpression::Use)),
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                rInsn.GetOperand(1)))),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
      /* semantic: call('sign_flag') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlSf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
      /* semantic: call('zero_flag') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlZf, &m_CpuInfo),
        Expr::MakeTernaryCond(ConditionExpression::CondEq,
        Expr::MakeVar("res", VariableExpression::Use),
        Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
        Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))));
      /* semantic: call('parity_flag') */
      AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBitVector(1, 0x1)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlPf, &m_CpuInfo),
        Expr::MakeVar("pf_tmp", VariableExpression::Use)));
      AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
      /* semantic: call('adjust_flag') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlAf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              rInsn.GetOperand(0),
              rInsn.GetOperand(1)),
            Expr::MakeVar("res", VariableExpression::Use)),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))));
      /* semantic: op0.val = res.val */
      AllExpr.push_back(Expr::MakeAssign(
        rInsn.GetOperand(0),
        Expr::MakeVar("res", VariableExpression::Use)));
      /* semantic: free_var('res') */
      AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instruction
 * mnemonic: adc
 * test_flags: ['cf']
 * semantic: alloc_var('res', op0.bit);
res.val = op0.val + op1.val + bit_cast(cf.id, int(op0.bit, op0.bit));
call('overflow_flag_add');
call('carry_flag_add');
call('sign_flag');
call('zero_flag');
call('parity_flag');
call('adjust_flag');
op0.val = res.val;
free_var('res');

 * operand: ['Gv', 'Ev']
 * opcode: 13
 * update_flags: ['cf', 'pf', 'af', 'zf', 'sf', 'of']
**/
bool X86Architecture::Table_1_13(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Size()++;
    rInsn.SetOpcode(X86_Opcode_Adc);
    if (Operand__Gv_Ev(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    {
      Expression::LSPType AllExpr;
      rInsn.SetTestedFlags(X86_FlCf);
      rInsn.SetUpdatedFlags(X86_FlCf | X86_FlPf | X86_FlAf | X86_FlZf | X86_FlSf | X86_FlOf);
      /* semantic: alloc_var('res', op0.bit) */
      AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
      /* semantic: res.val = op0.val + op1.val + bit_cast(cf.id, int(op0.bit, op0.bit)) */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("res", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpAdd,
          Expr::MakeBinOp(
            OperationExpression::OpAdd,
            rInsn.GetOperand(0),
            rInsn.GetOperand(1)),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeId(X86_FlCf, &m_CpuInfo), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize())))));
      /* semantic: call('overflow_flag_add') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlOf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeBinOp(
            OperationExpression::OpAnd,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              rInsn.GetOperand(0),
              Expr::MakeVar("res", VariableExpression::Use)),
            Expr::MakeUnOp(
              OperationExpression::OpNot,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                rInsn.GetOperand(1)))),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
      /* semantic: call('carry_flag_add') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlCf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              rInsn.GetOperand(0),
              rInsn.GetOperand(1)),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  rInsn.GetOperand(0),
                  rInsn.GetOperand(1)),
                Expr::MakeVar("res", VariableExpression::Use)),
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                rInsn.GetOperand(1)))),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
      /* semantic: call('sign_flag') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlSf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
      /* semantic: call('zero_flag') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlZf, &m_CpuInfo),
        Expr::MakeTernaryCond(ConditionExpression::CondEq,
        Expr::MakeVar("res", VariableExpression::Use),
        Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
        Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))));
      /* semantic: call('parity_flag') */
      AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBitVector(1, 0x1)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlPf, &m_CpuInfo),
        Expr::MakeVar("pf_tmp", VariableExpression::Use)));
      AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
      /* semantic: call('adjust_flag') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlAf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              rInsn.GetOperand(0),
              rInsn.GetOperand(1)),
            Expr::MakeVar("res", VariableExpression::Use)),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))));
      /* semantic: op0.val = res.val */
      AllExpr.push_back(Expr::MakeAssign(
        rInsn.GetOperand(0),
        Expr::MakeVar("res", VariableExpression::Use)));
      /* semantic: free_var('res') */
      AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instruction
 * mnemonic: adc
 * test_flags: ['cf']
 * semantic: alloc_var('res', op0.bit);
res.val = op0.val + op1.val + bit_cast(cf.id, int(op0.bit, op0.bit));
call('overflow_flag_add');
call('carry_flag_add');
call('sign_flag');
call('zero_flag');
call('parity_flag');
call('adjust_flag');
op0.val = res.val;
free_var('res');

 * operand: ['AL', 'Ib']
 * opcode: 14
 * update_flags: ['cf', 'pf', 'af', 'zf', 'sf', 'of']
**/
bool X86Architecture::Table_1_14(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Size()++;
    rInsn.SetOpcode(X86_Opcode_Adc);
    if (Operand__AL_Ib(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    {
      Expression::LSPType AllExpr;
      rInsn.SetTestedFlags(X86_FlCf);
      rInsn.SetUpdatedFlags(X86_FlCf | X86_FlPf | X86_FlAf | X86_FlZf | X86_FlSf | X86_FlOf);
      /* semantic: alloc_var('res', op0.bit) */
      AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
      /* semantic: res.val = op0.val + op1.val + bit_cast(cf.id, int(op0.bit, op0.bit)) */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("res", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpAdd,
          Expr::MakeBinOp(
            OperationExpression::OpAdd,
            rInsn.GetOperand(0),
            rInsn.GetOperand(1)),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeId(X86_FlCf, &m_CpuInfo), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize())))));
      /* semantic: call('overflow_flag_add') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlOf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeBinOp(
            OperationExpression::OpAnd,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              rInsn.GetOperand(0),
              Expr::MakeVar("res", VariableExpression::Use)),
            Expr::MakeUnOp(
              OperationExpression::OpNot,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                rInsn.GetOperand(1)))),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
      /* semantic: call('carry_flag_add') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlCf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              rInsn.GetOperand(0),
              rInsn.GetOperand(1)),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  rInsn.GetOperand(0),
                  rInsn.GetOperand(1)),
                Expr::MakeVar("res", VariableExpression::Use)),
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                rInsn.GetOperand(1)))),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
      /* semantic: call('sign_flag') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlSf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
      /* semantic: call('zero_flag') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlZf, &m_CpuInfo),
        Expr::MakeTernaryCond(ConditionExpression::CondEq,
        Expr::MakeVar("res", VariableExpression::Use),
        Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
        Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))));
      /* semantic: call('parity_flag') */
      AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBitVector(1, 0x1)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlPf, &m_CpuInfo),
        Expr::MakeVar("pf_tmp", VariableExpression::Use)));
      AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
      /* semantic: call('adjust_flag') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlAf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              rInsn.GetOperand(0),
              rInsn.GetOperand(1)),
            Expr::MakeVar("res", VariableExpression::Use)),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))));
      /* semantic: op0.val = res.val */
      AllExpr.push_back(Expr::MakeAssign(
        rInsn.GetOperand(0),
        Expr::MakeVar("res", VariableExpression::Use)));
      /* semantic: free_var('res') */
      AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instruction
 * mnemonic: adc
 * test_flags: ['cf']
 * semantic: alloc_var('res', op0.bit);
res.val = op0.val + op1.val + bit_cast(cf.id, int(op0.bit, op0.bit));
call('overflow_flag_add');
call('carry_flag_add');
call('sign_flag');
call('zero_flag');
call('parity_flag');
call('adjust_flag');
op0.val = res.val;
free_var('res');

 * operand: ['rAX', 'Iz']
 * opcode: 15
 * update_flags: ['cf', 'pf', 'af', 'zf', 'sf', 'of']
**/
bool X86Architecture::Table_1_15(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Size()++;
    rInsn.SetOpcode(X86_Opcode_Adc);
    if (Operand__rAX_Iz(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    {
      Expression::LSPType AllExpr;
      rInsn.SetTestedFlags(X86_FlCf);
      rInsn.SetUpdatedFlags(X86_FlCf | X86_FlPf | X86_FlAf | X86_FlZf | X86_FlSf | X86_FlOf);
      /* semantic: alloc_var('res', op0.bit) */
      AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
      /* semantic: res.val = op0.val + op1.val + bit_cast(cf.id, int(op0.bit, op0.bit)) */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("res", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpAdd,
          Expr::MakeBinOp(
            OperationExpression::OpAdd,
            rInsn.GetOperand(0),
            rInsn.GetOperand(1)),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeId(X86_FlCf, &m_CpuInfo), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize())))));
      /* semantic: call('overflow_flag_add') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlOf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeBinOp(
            OperationExpression::OpAnd,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              rInsn.GetOperand(0),
              Expr::MakeVar("res", VariableExpression::Use)),
            Expr::MakeUnOp(
              OperationExpression::OpNot,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                rInsn.GetOperand(1)))),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
      /* semantic: call('carry_flag_add') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlCf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              rInsn.GetOperand(0),
              rInsn.GetOperand(1)),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  rInsn.GetOperand(0),
                  rInsn.GetOperand(1)),
                Expr::MakeVar("res", VariableExpression::Use)),
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                rInsn.GetOperand(1)))),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
      /* semantic: call('sign_flag') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlSf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
      /* semantic: call('zero_flag') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlZf, &m_CpuInfo),
        Expr::MakeTernaryCond(ConditionExpression::CondEq,
        Expr::MakeVar("res", VariableExpression::Use),
        Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
        Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))));
      /* semantic: call('parity_flag') */
      AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBitVector(1, 0x1)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlPf, &m_CpuInfo),
        Expr::MakeVar("pf_tmp", VariableExpression::Use)));
      AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
      /* semantic: call('adjust_flag') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlAf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              rInsn.GetOperand(0),
              rInsn.GetOperand(1)),
            Expr::MakeVar("res", VariableExpression::Use)),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))));
      /* semantic: op0.val = res.val */
      AllExpr.push_back(Expr::MakeAssign(
        rInsn.GetOperand(0),
        Expr::MakeVar("res", VariableExpression::Use)));
      /* semantic: free_var('res') */
      AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instruction
 * mnemonic: push
 * operand: ['SS']
 * opcode: 16
 * attr: ['nm64']
 * semantic: alloc_var('pushed_value', stack.bit);
pushed_value = sign_extend(op0.val, int(stack.bit, stack.bit));
stack.id -= stack.size;
stack.mem = pushed_value;
free_var('pushed_value');

**/
bool X86Architecture::Table_1_16(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    if (Mode != X86_Bit_64)
    {
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Push);
      if (Operand__SS(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('pushed_value', stack.bit) */
        AllExpr.push_back(Expr::MakeVar("pushed_value", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()))));
        /* semantic: pushed_value = sign_extend(op0.val, int(stack.bit, stack.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pushed_value", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpSext, rInsn.GetOperand(0), Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()))))));
        /* semantic: stack.id -= stack.size */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
            Expr::MakeBitVector(
              m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())),
              m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())) / 8)))
        );
        /* semantic: stack.mem = pushed_value */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeMem(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), nullptr, Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo)),
          Expr::MakeVar("pushed_value", VariableExpression::Use)));
        /* semantic: free_var('pushed_value') */
        AllExpr.push_back(Expr::MakeVar("pushed_value", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    else
      return false;
}

/** instruction
 * mnemonic: pop
 * operand: ['SS']
 * opcode: 17
 * attr: ['nm64']
 * semantic: alloc_var('popped_value', stack.bit);
popped_value = stack.mem;
stack.id += stack.size;
op0.val = popped_value;
free_var('popped_value');

**/
bool X86Architecture::Table_1_17(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    if (Mode != X86_Bit_64)
    {
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Pop);
      if (Operand__SS(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('popped_value', stack.bit) */
        AllExpr.push_back(Expr::MakeVar("popped_value", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()))));
        /* semantic: popped_value = stack.mem */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("popped_value", VariableExpression::Use),
          Expr::MakeMem(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), nullptr, Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo))));
        /* semantic: stack.id += stack.size */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeBinOp(
            OperationExpression::OpAdd,
            Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
            Expr::MakeBitVector(
              m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())),
              m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())) / 8)))
        );
        /* semantic: op0.val = popped_value */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("popped_value", VariableExpression::Use)));
        /* semantic: free_var('popped_value') */
        AllExpr.push_back(Expr::MakeVar("popped_value", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    else
      return false;
}

/** instruction
 * mnemonic: sbb
 * test_flags: ['cf']
 * semantic: alloc_var('res', op0.bit);
res = op0.val - op1.val - bit_cast(cf.id, int(op0.bit, op0.bit));
call('overflow_flag_sub');
call('carry_flag_sub');
call('sign_flag');
call('zero_flag');
call('parity_flag');
call('adjust_flag');
op0.val = res.val;
free_var('res');

 * operand: ['Eb', 'Gb']
 * opcode: 18
 * update_flags: ['cf', 'pf', 'af', 'zf', 'sf', 'of']
**/
bool X86Architecture::Table_1_18(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Size()++;
    rInsn.SetOpcode(X86_Opcode_Sbb);
    if (Operand__Eb_Gb(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    {
      Expression::LSPType AllExpr;
      rInsn.SetTestedFlags(X86_FlCf);
      rInsn.SetUpdatedFlags(X86_FlCf | X86_FlPf | X86_FlAf | X86_FlZf | X86_FlSf | X86_FlOf);
      /* semantic: alloc_var('res', op0.bit) */
      AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
      /* semantic: res = op0.val - op1.val - bit_cast(cf.id, int(op0.bit, op0.bit)) */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("res", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpSub,
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            rInsn.GetOperand(0),
            rInsn.GetOperand(1)),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeId(X86_FlCf, &m_CpuInfo), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize())))));
      /* semantic: call('overflow_flag_sub') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlOf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeBinOp(
            OperationExpression::OpAnd,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              rInsn.GetOperand(0),
              Expr::MakeVar("res", VariableExpression::Use)),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              rInsn.GetOperand(0),
              rInsn.GetOperand(1))),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
      /* semantic: call('carry_flag_sub') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlCf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                rInsn.GetOperand(1)),
              Expr::MakeVar("res", VariableExpression::Use)),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                Expr::MakeVar("res", VariableExpression::Use)),
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                rInsn.GetOperand(1)))),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
      /* semantic: call('sign_flag') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlSf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
      /* semantic: call('zero_flag') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlZf, &m_CpuInfo),
        Expr::MakeTernaryCond(ConditionExpression::CondEq,
        Expr::MakeVar("res", VariableExpression::Use),
        Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
        Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))));
      /* semantic: call('parity_flag') */
      AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBitVector(1, 0x1)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlPf, &m_CpuInfo),
        Expr::MakeVar("pf_tmp", VariableExpression::Use)));
      AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
      /* semantic: call('adjust_flag') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlAf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              rInsn.GetOperand(0),
              rInsn.GetOperand(1)),
            Expr::MakeVar("res", VariableExpression::Use)),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))));
      /* semantic: op0.val = res.val */
      AllExpr.push_back(Expr::MakeAssign(
        rInsn.GetOperand(0),
        Expr::MakeVar("res", VariableExpression::Use)));
      /* semantic: free_var('res') */
      AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instruction
 * mnemonic: sbb
 * test_flags: ['cf']
 * semantic: alloc_var('res', op0.bit);
res = op0.val - op1.val - bit_cast(cf.id, int(op0.bit, op0.bit));
call('overflow_flag_sub');
call('carry_flag_sub');
call('sign_flag');
call('zero_flag');
call('parity_flag');
call('adjust_flag');
op0.val = res.val;
free_var('res');

 * operand: ['Ev', 'Gv']
 * opcode: 19
 * update_flags: ['cf', 'pf', 'af', 'zf', 'sf', 'of']
**/
bool X86Architecture::Table_1_19(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Size()++;
    rInsn.SetOpcode(X86_Opcode_Sbb);
    if (Operand__Ev_Gv(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    {
      Expression::LSPType AllExpr;
      rInsn.SetTestedFlags(X86_FlCf);
      rInsn.SetUpdatedFlags(X86_FlCf | X86_FlPf | X86_FlAf | X86_FlZf | X86_FlSf | X86_FlOf);
      /* semantic: alloc_var('res', op0.bit) */
      AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
      /* semantic: res = op0.val - op1.val - bit_cast(cf.id, int(op0.bit, op0.bit)) */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("res", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpSub,
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            rInsn.GetOperand(0),
            rInsn.GetOperand(1)),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeId(X86_FlCf, &m_CpuInfo), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize())))));
      /* semantic: call('overflow_flag_sub') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlOf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeBinOp(
            OperationExpression::OpAnd,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              rInsn.GetOperand(0),
              Expr::MakeVar("res", VariableExpression::Use)),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              rInsn.GetOperand(0),
              rInsn.GetOperand(1))),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
      /* semantic: call('carry_flag_sub') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlCf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                rInsn.GetOperand(1)),
              Expr::MakeVar("res", VariableExpression::Use)),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                Expr::MakeVar("res", VariableExpression::Use)),
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                rInsn.GetOperand(1)))),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
      /* semantic: call('sign_flag') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlSf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
      /* semantic: call('zero_flag') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlZf, &m_CpuInfo),
        Expr::MakeTernaryCond(ConditionExpression::CondEq,
        Expr::MakeVar("res", VariableExpression::Use),
        Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
        Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))));
      /* semantic: call('parity_flag') */
      AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBitVector(1, 0x1)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlPf, &m_CpuInfo),
        Expr::MakeVar("pf_tmp", VariableExpression::Use)));
      AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
      /* semantic: call('adjust_flag') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlAf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              rInsn.GetOperand(0),
              rInsn.GetOperand(1)),
            Expr::MakeVar("res", VariableExpression::Use)),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))));
      /* semantic: op0.val = res.val */
      AllExpr.push_back(Expr::MakeAssign(
        rInsn.GetOperand(0),
        Expr::MakeVar("res", VariableExpression::Use)));
      /* semantic: free_var('res') */
      AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instruction
 * mnemonic: sbb
 * test_flags: ['cf']
 * semantic: alloc_var('res', op0.bit);
res = op0.val - op1.val - bit_cast(cf.id, int(op0.bit, op0.bit));
call('overflow_flag_sub');
call('carry_flag_sub');
call('sign_flag');
call('zero_flag');
call('parity_flag');
call('adjust_flag');
op0.val = res.val;
free_var('res');

 * operand: ['Gb', 'Eb']
 * opcode: 1a
 * update_flags: ['cf', 'pf', 'af', 'zf', 'sf', 'of']
**/
bool X86Architecture::Table_1_1a(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Size()++;
    rInsn.SetOpcode(X86_Opcode_Sbb);
    if (Operand__Gb_Eb(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    {
      Expression::LSPType AllExpr;
      rInsn.SetTestedFlags(X86_FlCf);
      rInsn.SetUpdatedFlags(X86_FlCf | X86_FlPf | X86_FlAf | X86_FlZf | X86_FlSf | X86_FlOf);
      /* semantic: alloc_var('res', op0.bit) */
      AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
      /* semantic: res = op0.val - op1.val - bit_cast(cf.id, int(op0.bit, op0.bit)) */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("res", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpSub,
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            rInsn.GetOperand(0),
            rInsn.GetOperand(1)),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeId(X86_FlCf, &m_CpuInfo), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize())))));
      /* semantic: call('overflow_flag_sub') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlOf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeBinOp(
            OperationExpression::OpAnd,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              rInsn.GetOperand(0),
              Expr::MakeVar("res", VariableExpression::Use)),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              rInsn.GetOperand(0),
              rInsn.GetOperand(1))),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
      /* semantic: call('carry_flag_sub') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlCf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                rInsn.GetOperand(1)),
              Expr::MakeVar("res", VariableExpression::Use)),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                Expr::MakeVar("res", VariableExpression::Use)),
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                rInsn.GetOperand(1)))),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
      /* semantic: call('sign_flag') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlSf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
      /* semantic: call('zero_flag') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlZf, &m_CpuInfo),
        Expr::MakeTernaryCond(ConditionExpression::CondEq,
        Expr::MakeVar("res", VariableExpression::Use),
        Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
        Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))));
      /* semantic: call('parity_flag') */
      AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBitVector(1, 0x1)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlPf, &m_CpuInfo),
        Expr::MakeVar("pf_tmp", VariableExpression::Use)));
      AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
      /* semantic: call('adjust_flag') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlAf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              rInsn.GetOperand(0),
              rInsn.GetOperand(1)),
            Expr::MakeVar("res", VariableExpression::Use)),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))));
      /* semantic: op0.val = res.val */
      AllExpr.push_back(Expr::MakeAssign(
        rInsn.GetOperand(0),
        Expr::MakeVar("res", VariableExpression::Use)));
      /* semantic: free_var('res') */
      AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instruction
 * mnemonic: sbb
 * test_flags: ['cf']
 * semantic: alloc_var('res', op0.bit);
res = op0.val - op1.val - bit_cast(cf.id, int(op0.bit, op0.bit));
call('overflow_flag_sub');
call('carry_flag_sub');
call('sign_flag');
call('zero_flag');
call('parity_flag');
call('adjust_flag');
op0.val = res.val;
free_var('res');

 * operand: ['Gv', 'Ev']
 * opcode: 1b
 * update_flags: ['cf', 'pf', 'af', 'zf', 'sf', 'of']
**/
bool X86Architecture::Table_1_1b(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Size()++;
    rInsn.SetOpcode(X86_Opcode_Sbb);
    if (Operand__Gv_Ev(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    {
      Expression::LSPType AllExpr;
      rInsn.SetTestedFlags(X86_FlCf);
      rInsn.SetUpdatedFlags(X86_FlCf | X86_FlPf | X86_FlAf | X86_FlZf | X86_FlSf | X86_FlOf);
      /* semantic: alloc_var('res', op0.bit) */
      AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
      /* semantic: res = op0.val - op1.val - bit_cast(cf.id, int(op0.bit, op0.bit)) */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("res", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpSub,
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            rInsn.GetOperand(0),
            rInsn.GetOperand(1)),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeId(X86_FlCf, &m_CpuInfo), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize())))));
      /* semantic: call('overflow_flag_sub') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlOf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeBinOp(
            OperationExpression::OpAnd,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              rInsn.GetOperand(0),
              Expr::MakeVar("res", VariableExpression::Use)),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              rInsn.GetOperand(0),
              rInsn.GetOperand(1))),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
      /* semantic: call('carry_flag_sub') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlCf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                rInsn.GetOperand(1)),
              Expr::MakeVar("res", VariableExpression::Use)),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                Expr::MakeVar("res", VariableExpression::Use)),
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                rInsn.GetOperand(1)))),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
      /* semantic: call('sign_flag') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlSf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
      /* semantic: call('zero_flag') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlZf, &m_CpuInfo),
        Expr::MakeTernaryCond(ConditionExpression::CondEq,
        Expr::MakeVar("res", VariableExpression::Use),
        Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
        Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))));
      /* semantic: call('parity_flag') */
      AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBitVector(1, 0x1)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlPf, &m_CpuInfo),
        Expr::MakeVar("pf_tmp", VariableExpression::Use)));
      AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
      /* semantic: call('adjust_flag') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlAf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              rInsn.GetOperand(0),
              rInsn.GetOperand(1)),
            Expr::MakeVar("res", VariableExpression::Use)),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))));
      /* semantic: op0.val = res.val */
      AllExpr.push_back(Expr::MakeAssign(
        rInsn.GetOperand(0),
        Expr::MakeVar("res", VariableExpression::Use)));
      /* semantic: free_var('res') */
      AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instruction
 * mnemonic: sbb
 * test_flags: ['cf']
 * semantic: alloc_var('res', op0.bit);
res = op0.val - op1.val - bit_cast(cf.id, int(op0.bit, op0.bit));
call('overflow_flag_sub');
call('carry_flag_sub');
call('sign_flag');
call('zero_flag');
call('parity_flag');
call('adjust_flag');
op0.val = res.val;
free_var('res');

 * operand: ['AL', 'Ib']
 * opcode: 1c
 * update_flags: ['cf', 'pf', 'af', 'zf', 'sf', 'of']
**/
bool X86Architecture::Table_1_1c(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Size()++;
    rInsn.SetOpcode(X86_Opcode_Sbb);
    if (Operand__AL_Ib(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    {
      Expression::LSPType AllExpr;
      rInsn.SetTestedFlags(X86_FlCf);
      rInsn.SetUpdatedFlags(X86_FlCf | X86_FlPf | X86_FlAf | X86_FlZf | X86_FlSf | X86_FlOf);
      /* semantic: alloc_var('res', op0.bit) */
      AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
      /* semantic: res = op0.val - op1.val - bit_cast(cf.id, int(op0.bit, op0.bit)) */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("res", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpSub,
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            rInsn.GetOperand(0),
            rInsn.GetOperand(1)),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeId(X86_FlCf, &m_CpuInfo), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize())))));
      /* semantic: call('overflow_flag_sub') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlOf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeBinOp(
            OperationExpression::OpAnd,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              rInsn.GetOperand(0),
              Expr::MakeVar("res", VariableExpression::Use)),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              rInsn.GetOperand(0),
              rInsn.GetOperand(1))),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
      /* semantic: call('carry_flag_sub') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlCf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                rInsn.GetOperand(1)),
              Expr::MakeVar("res", VariableExpression::Use)),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                Expr::MakeVar("res", VariableExpression::Use)),
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                rInsn.GetOperand(1)))),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
      /* semantic: call('sign_flag') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlSf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
      /* semantic: call('zero_flag') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlZf, &m_CpuInfo),
        Expr::MakeTernaryCond(ConditionExpression::CondEq,
        Expr::MakeVar("res", VariableExpression::Use),
        Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
        Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))));
      /* semantic: call('parity_flag') */
      AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBitVector(1, 0x1)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlPf, &m_CpuInfo),
        Expr::MakeVar("pf_tmp", VariableExpression::Use)));
      AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
      /* semantic: call('adjust_flag') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlAf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              rInsn.GetOperand(0),
              rInsn.GetOperand(1)),
            Expr::MakeVar("res", VariableExpression::Use)),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))));
      /* semantic: op0.val = res.val */
      AllExpr.push_back(Expr::MakeAssign(
        rInsn.GetOperand(0),
        Expr::MakeVar("res", VariableExpression::Use)));
      /* semantic: free_var('res') */
      AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instruction
 * mnemonic: sbb
 * test_flags: ['cf']
 * semantic: alloc_var('res', op0.bit);
res = op0.val - op1.val - bit_cast(cf.id, int(op0.bit, op0.bit));
call('overflow_flag_sub');
call('carry_flag_sub');
call('sign_flag');
call('zero_flag');
call('parity_flag');
call('adjust_flag');
op0.val = res.val;
free_var('res');

 * operand: ['rAX', 'Iz']
 * opcode: 1d
 * update_flags: ['cf', 'pf', 'af', 'zf', 'sf', 'of']
**/
bool X86Architecture::Table_1_1d(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Size()++;
    rInsn.SetOpcode(X86_Opcode_Sbb);
    if (Operand__rAX_Iz(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    {
      Expression::LSPType AllExpr;
      rInsn.SetTestedFlags(X86_FlCf);
      rInsn.SetUpdatedFlags(X86_FlCf | X86_FlPf | X86_FlAf | X86_FlZf | X86_FlSf | X86_FlOf);
      /* semantic: alloc_var('res', op0.bit) */
      AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
      /* semantic: res = op0.val - op1.val - bit_cast(cf.id, int(op0.bit, op0.bit)) */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("res", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpSub,
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            rInsn.GetOperand(0),
            rInsn.GetOperand(1)),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeId(X86_FlCf, &m_CpuInfo), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize())))));
      /* semantic: call('overflow_flag_sub') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlOf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeBinOp(
            OperationExpression::OpAnd,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              rInsn.GetOperand(0),
              Expr::MakeVar("res", VariableExpression::Use)),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              rInsn.GetOperand(0),
              rInsn.GetOperand(1))),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
      /* semantic: call('carry_flag_sub') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlCf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                rInsn.GetOperand(1)),
              Expr::MakeVar("res", VariableExpression::Use)),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                Expr::MakeVar("res", VariableExpression::Use)),
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                rInsn.GetOperand(1)))),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
      /* semantic: call('sign_flag') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlSf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
      /* semantic: call('zero_flag') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlZf, &m_CpuInfo),
        Expr::MakeTernaryCond(ConditionExpression::CondEq,
        Expr::MakeVar("res", VariableExpression::Use),
        Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
        Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))));
      /* semantic: call('parity_flag') */
      AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBitVector(1, 0x1)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlPf, &m_CpuInfo),
        Expr::MakeVar("pf_tmp", VariableExpression::Use)));
      AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
      /* semantic: call('adjust_flag') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlAf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              rInsn.GetOperand(0),
              rInsn.GetOperand(1)),
            Expr::MakeVar("res", VariableExpression::Use)),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))));
      /* semantic: op0.val = res.val */
      AllExpr.push_back(Expr::MakeAssign(
        rInsn.GetOperand(0),
        Expr::MakeVar("res", VariableExpression::Use)));
      /* semantic: free_var('res') */
      AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instruction
 * mnemonic: push
 * operand: ['DS']
 * opcode: 1e
 * attr: ['nm64']
 * semantic: alloc_var('pushed_value', stack.bit);
pushed_value = sign_extend(op0.val, int(stack.bit, stack.bit));
stack.id -= stack.size;
stack.mem = pushed_value;
free_var('pushed_value');

**/
bool X86Architecture::Table_1_1e(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    if (Mode != X86_Bit_64)
    {
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Push);
      if (Operand__DS(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('pushed_value', stack.bit) */
        AllExpr.push_back(Expr::MakeVar("pushed_value", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()))));
        /* semantic: pushed_value = sign_extend(op0.val, int(stack.bit, stack.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pushed_value", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpSext, rInsn.GetOperand(0), Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()))))));
        /* semantic: stack.id -= stack.size */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
            Expr::MakeBitVector(
              m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())),
              m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())) / 8)))
        );
        /* semantic: stack.mem = pushed_value */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeMem(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), nullptr, Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo)),
          Expr::MakeVar("pushed_value", VariableExpression::Use)));
        /* semantic: free_var('pushed_value') */
        AllExpr.push_back(Expr::MakeVar("pushed_value", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    else
      return false;
}

/** instruction
 * mnemonic: pop
 * operand: ['DS']
 * opcode: 1f
 * attr: ['nm64']
 * semantic: alloc_var('popped_value', stack.bit);
popped_value = stack.mem;
stack.id += stack.size;
op0.val = popped_value;
free_var('popped_value');

**/
bool X86Architecture::Table_1_1f(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    if (Mode != X86_Bit_64)
    {
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Pop);
      if (Operand__DS(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('popped_value', stack.bit) */
        AllExpr.push_back(Expr::MakeVar("popped_value", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()))));
        /* semantic: popped_value = stack.mem */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("popped_value", VariableExpression::Use),
          Expr::MakeMem(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), nullptr, Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo))));
        /* semantic: stack.id += stack.size */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeBinOp(
            OperationExpression::OpAdd,
            Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
            Expr::MakeBitVector(
              m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())),
              m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())) / 8)))
        );
        /* semantic: op0.val = popped_value */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("popped_value", VariableExpression::Use)));
        /* semantic: free_var('popped_value') */
        AllExpr.push_back(Expr::MakeVar("popped_value", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    else
      return false;
}

/** instruction
 * mnemonic: and
 * clear_flags: ['af', 'of', 'cf']
 * semantic: alloc_var('res', op0.bit);
res = op0.val & op1.val;
of.id = int1(0)
cf.id = int1(0)
call('sign_flag')
call('zero_flag')
call('parity_flag')
op0.val = res;
free_var('res');

 * operand: ['Eb', 'Gb']
 * opcode: 20
 * update_flags: ['cf', 'pf', 'af', 'zf', 'sf', 'of']
**/
bool X86Architecture::Table_1_20(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Size()++;
    rInsn.SetOpcode(X86_Opcode_And);
    if (Operand__Eb_Gb(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    {
      Expression::LSPType AllExpr;
      rInsn.SetUpdatedFlags(X86_FlCf | X86_FlPf | X86_FlAf | X86_FlZf | X86_FlSf | X86_FlOf);
      rInsn.SetClearedFlags(X86_FlAf | X86_FlOf | X86_FlCf);
      AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlAf, &m_CpuInfo), Expr::MakeBoolean(false)));
      AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlOf, &m_CpuInfo), Expr::MakeBoolean(false)));
      AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlCf, &m_CpuInfo), Expr::MakeBoolean(false)));
      /* semantic: alloc_var('res', op0.bit) */
      AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
      /* semantic: res = op0.val & op1.val */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("res", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpAnd,
          rInsn.GetOperand(0),
          rInsn.GetOperand(1))));
      /* semantic: of.id = int1(0)
      cf.id = int1(0)
      call('sign_flag')
      call('zero_flag')
      call('parity_flag')
      op0.val = res */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlOf, &m_CpuInfo),
        Expr::MakeBitVector(1, 0x0)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlCf, &m_CpuInfo),
        Expr::MakeBitVector(1, 0x0)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlSf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlZf, &m_CpuInfo),
        Expr::MakeTernaryCond(ConditionExpression::CondEq,
        Expr::MakeVar("res", VariableExpression::Use),
        Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
        Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))));
      AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBitVector(1, 0x1)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlPf, &m_CpuInfo),
        Expr::MakeVar("pf_tmp", VariableExpression::Use)));
      AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
      AllExpr.push_back(Expr::MakeAssign(
        rInsn.GetOperand(0),
        Expr::MakeVar("res", VariableExpression::Use)));
      /* semantic: free_var('res') */
      AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instruction
 * mnemonic: and
 * clear_flags: ['af', 'of', 'cf']
 * semantic: alloc_var('res', op0.bit);
res = op0.val & op1.val;
of.id = int1(0)
cf.id = int1(0)
call('sign_flag')
call('zero_flag')
call('parity_flag')
op0.val = res;
free_var('res');

 * operand: ['Ev', 'Gv']
 * opcode: 21
 * update_flags: ['cf', 'pf', 'af', 'zf', 'sf', 'of']
**/
bool X86Architecture::Table_1_21(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Size()++;
    rInsn.SetOpcode(X86_Opcode_And);
    if (Operand__Ev_Gv(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    {
      Expression::LSPType AllExpr;
      rInsn.SetUpdatedFlags(X86_FlCf | X86_FlPf | X86_FlAf | X86_FlZf | X86_FlSf | X86_FlOf);
      rInsn.SetClearedFlags(X86_FlAf | X86_FlOf | X86_FlCf);
      AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlAf, &m_CpuInfo), Expr::MakeBoolean(false)));
      AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlOf, &m_CpuInfo), Expr::MakeBoolean(false)));
      AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlCf, &m_CpuInfo), Expr::MakeBoolean(false)));
      /* semantic: alloc_var('res', op0.bit) */
      AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
      /* semantic: res = op0.val & op1.val */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("res", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpAnd,
          rInsn.GetOperand(0),
          rInsn.GetOperand(1))));
      /* semantic: of.id = int1(0)
      cf.id = int1(0)
      call('sign_flag')
      call('zero_flag')
      call('parity_flag')
      op0.val = res */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlOf, &m_CpuInfo),
        Expr::MakeBitVector(1, 0x0)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlCf, &m_CpuInfo),
        Expr::MakeBitVector(1, 0x0)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlSf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlZf, &m_CpuInfo),
        Expr::MakeTernaryCond(ConditionExpression::CondEq,
        Expr::MakeVar("res", VariableExpression::Use),
        Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
        Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))));
      AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBitVector(1, 0x1)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlPf, &m_CpuInfo),
        Expr::MakeVar("pf_tmp", VariableExpression::Use)));
      AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
      AllExpr.push_back(Expr::MakeAssign(
        rInsn.GetOperand(0),
        Expr::MakeVar("res", VariableExpression::Use)));
      /* semantic: free_var('res') */
      AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instruction
 * mnemonic: and
 * clear_flags: ['af', 'of', 'cf']
 * semantic: alloc_var('res', op0.bit);
res = op0.val & op1.val;
of.id = int1(0)
cf.id = int1(0)
call('sign_flag')
call('zero_flag')
call('parity_flag')
op0.val = res;
free_var('res');

 * operand: ['Gb', 'Eb']
 * opcode: 22
 * update_flags: ['cf', 'pf', 'af', 'zf', 'sf', 'of']
**/
bool X86Architecture::Table_1_22(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Size()++;
    rInsn.SetOpcode(X86_Opcode_And);
    if (Operand__Gb_Eb(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    {
      Expression::LSPType AllExpr;
      rInsn.SetUpdatedFlags(X86_FlCf | X86_FlPf | X86_FlAf | X86_FlZf | X86_FlSf | X86_FlOf);
      rInsn.SetClearedFlags(X86_FlAf | X86_FlOf | X86_FlCf);
      AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlAf, &m_CpuInfo), Expr::MakeBoolean(false)));
      AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlOf, &m_CpuInfo), Expr::MakeBoolean(false)));
      AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlCf, &m_CpuInfo), Expr::MakeBoolean(false)));
      /* semantic: alloc_var('res', op0.bit) */
      AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
      /* semantic: res = op0.val & op1.val */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("res", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpAnd,
          rInsn.GetOperand(0),
          rInsn.GetOperand(1))));
      /* semantic: of.id = int1(0)
      cf.id = int1(0)
      call('sign_flag')
      call('zero_flag')
      call('parity_flag')
      op0.val = res */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlOf, &m_CpuInfo),
        Expr::MakeBitVector(1, 0x0)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlCf, &m_CpuInfo),
        Expr::MakeBitVector(1, 0x0)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlSf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlZf, &m_CpuInfo),
        Expr::MakeTernaryCond(ConditionExpression::CondEq,
        Expr::MakeVar("res", VariableExpression::Use),
        Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
        Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))));
      AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBitVector(1, 0x1)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlPf, &m_CpuInfo),
        Expr::MakeVar("pf_tmp", VariableExpression::Use)));
      AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
      AllExpr.push_back(Expr::MakeAssign(
        rInsn.GetOperand(0),
        Expr::MakeVar("res", VariableExpression::Use)));
      /* semantic: free_var('res') */
      AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instruction
 * mnemonic: and
 * clear_flags: ['af', 'of', 'cf']
 * semantic: alloc_var('res', op0.bit);
res = op0.val & op1.val;
of.id = int1(0)
cf.id = int1(0)
call('sign_flag')
call('zero_flag')
call('parity_flag')
op0.val = res;
free_var('res');

 * operand: ['Gv', 'Ev']
 * opcode: 23
 * update_flags: ['cf', 'pf', 'af', 'zf', 'sf', 'of']
**/
bool X86Architecture::Table_1_23(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Size()++;
    rInsn.SetOpcode(X86_Opcode_And);
    if (Operand__Gv_Ev(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    {
      Expression::LSPType AllExpr;
      rInsn.SetUpdatedFlags(X86_FlCf | X86_FlPf | X86_FlAf | X86_FlZf | X86_FlSf | X86_FlOf);
      rInsn.SetClearedFlags(X86_FlAf | X86_FlOf | X86_FlCf);
      AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlAf, &m_CpuInfo), Expr::MakeBoolean(false)));
      AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlOf, &m_CpuInfo), Expr::MakeBoolean(false)));
      AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlCf, &m_CpuInfo), Expr::MakeBoolean(false)));
      /* semantic: alloc_var('res', op0.bit) */
      AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
      /* semantic: res = op0.val & op1.val */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("res", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpAnd,
          rInsn.GetOperand(0),
          rInsn.GetOperand(1))));
      /* semantic: of.id = int1(0)
      cf.id = int1(0)
      call('sign_flag')
      call('zero_flag')
      call('parity_flag')
      op0.val = res */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlOf, &m_CpuInfo),
        Expr::MakeBitVector(1, 0x0)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlCf, &m_CpuInfo),
        Expr::MakeBitVector(1, 0x0)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlSf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlZf, &m_CpuInfo),
        Expr::MakeTernaryCond(ConditionExpression::CondEq,
        Expr::MakeVar("res", VariableExpression::Use),
        Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
        Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))));
      AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBitVector(1, 0x1)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlPf, &m_CpuInfo),
        Expr::MakeVar("pf_tmp", VariableExpression::Use)));
      AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
      AllExpr.push_back(Expr::MakeAssign(
        rInsn.GetOperand(0),
        Expr::MakeVar("res", VariableExpression::Use)));
      /* semantic: free_var('res') */
      AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instruction
 * mnemonic: and
 * clear_flags: ['af', 'of', 'cf']
 * semantic: alloc_var('res', op0.bit);
res = op0.val & op1.val;
of.id = int1(0)
cf.id = int1(0)
call('sign_flag')
call('zero_flag')
call('parity_flag')
op0.val = res;
free_var('res');

 * operand: ['AL', 'Ib']
 * opcode: 24
 * update_flags: ['cf', 'pf', 'af', 'zf', 'sf', 'of']
**/
bool X86Architecture::Table_1_24(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Size()++;
    rInsn.SetOpcode(X86_Opcode_And);
    if (Operand__AL_Ib(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    {
      Expression::LSPType AllExpr;
      rInsn.SetUpdatedFlags(X86_FlCf | X86_FlPf | X86_FlAf | X86_FlZf | X86_FlSf | X86_FlOf);
      rInsn.SetClearedFlags(X86_FlAf | X86_FlOf | X86_FlCf);
      AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlAf, &m_CpuInfo), Expr::MakeBoolean(false)));
      AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlOf, &m_CpuInfo), Expr::MakeBoolean(false)));
      AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlCf, &m_CpuInfo), Expr::MakeBoolean(false)));
      /* semantic: alloc_var('res', op0.bit) */
      AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
      /* semantic: res = op0.val & op1.val */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("res", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpAnd,
          rInsn.GetOperand(0),
          rInsn.GetOperand(1))));
      /* semantic: of.id = int1(0)
      cf.id = int1(0)
      call('sign_flag')
      call('zero_flag')
      call('parity_flag')
      op0.val = res */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlOf, &m_CpuInfo),
        Expr::MakeBitVector(1, 0x0)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlCf, &m_CpuInfo),
        Expr::MakeBitVector(1, 0x0)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlSf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlZf, &m_CpuInfo),
        Expr::MakeTernaryCond(ConditionExpression::CondEq,
        Expr::MakeVar("res", VariableExpression::Use),
        Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
        Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))));
      AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBitVector(1, 0x1)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlPf, &m_CpuInfo),
        Expr::MakeVar("pf_tmp", VariableExpression::Use)));
      AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
      AllExpr.push_back(Expr::MakeAssign(
        rInsn.GetOperand(0),
        Expr::MakeVar("res", VariableExpression::Use)));
      /* semantic: free_var('res') */
      AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instruction
 * mnemonic: and
 * clear_flags: ['af', 'of', 'cf']
 * semantic: alloc_var('res', op0.bit);
res = op0.val & op1.val;
of.id = int1(0)
cf.id = int1(0)
call('sign_flag')
call('zero_flag')
call('parity_flag')
op0.val = res;
free_var('res');

 * operand: ['rAX', 'Iz']
 * opcode: 25
 * update_flags: ['cf', 'pf', 'af', 'zf', 'sf', 'of']
**/
bool X86Architecture::Table_1_25(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Size()++;
    rInsn.SetOpcode(X86_Opcode_And);
    if (Operand__rAX_Iz(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    {
      Expression::LSPType AllExpr;
      rInsn.SetUpdatedFlags(X86_FlCf | X86_FlPf | X86_FlAf | X86_FlZf | X86_FlSf | X86_FlOf);
      rInsn.SetClearedFlags(X86_FlAf | X86_FlOf | X86_FlCf);
      AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlAf, &m_CpuInfo), Expr::MakeBoolean(false)));
      AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlOf, &m_CpuInfo), Expr::MakeBoolean(false)));
      AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlCf, &m_CpuInfo), Expr::MakeBoolean(false)));
      /* semantic: alloc_var('res', op0.bit) */
      AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
      /* semantic: res = op0.val & op1.val */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("res", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpAnd,
          rInsn.GetOperand(0),
          rInsn.GetOperand(1))));
      /* semantic: of.id = int1(0)
      cf.id = int1(0)
      call('sign_flag')
      call('zero_flag')
      call('parity_flag')
      op0.val = res */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlOf, &m_CpuInfo),
        Expr::MakeBitVector(1, 0x0)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlCf, &m_CpuInfo),
        Expr::MakeBitVector(1, 0x0)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlSf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlZf, &m_CpuInfo),
        Expr::MakeTernaryCond(ConditionExpression::CondEq,
        Expr::MakeVar("res", VariableExpression::Use),
        Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
        Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))));
      AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBitVector(1, 0x1)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlPf, &m_CpuInfo),
        Expr::MakeVar("pf_tmp", VariableExpression::Use)));
      AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
      AllExpr.push_back(Expr::MakeAssign(
        rInsn.GetOperand(0),
        Expr::MakeVar("res", VariableExpression::Use)));
      /* semantic: free_var('res') */
      AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instruction
 * mnemonic: ES
 * opcode: 26
 * constraint: pfx1
**/
bool X86Architecture::Table_1_26(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Size()++;
    rInsn.Prefix() |= X86_Prefix_ES;
    return Disassemble(rBinStrm, Offset, rInsn, Mode);
}

/** instruction
 * mnemonic: daa
 * clear_flags: ['of']
 * test_flags: ['af', 'cf']
 * semantic: alloc_var('old_al', al.bit);
alloc_var('old_cf', 1);
alloc_var('cond', 1);
alloc_var('pf_tmp', pf.bit);
old_cf = cf.id;
old_al = al.id;
cf.id = int1(0);
cond = int1(0);
if __expr and (al.id & int(al.bit, 0x0f)) > int(al.bit, 9): cond |= int1(1);
if __expr and af.id == int1(1): cond |= int1(1);
if __expr and cond == int1(1):
  if __expr and al.id > int(al.bit, 0xf9): cf.id = int1(1)
  else: cf.id = old_cf
  al.id += int(al.bit, 0x6)
  af.id = int1(1)
else:
  af.id = int1(0);
cond = int1(0);
if __expr and old_al > int(al.bit, 0x99): cond |= int1(1);
if __expr and old_cf == int1(1): cond |= int1(1);
if __expr and cond == int1(1):
  al.id += int(al.bit, 0x60)
  cf.id = int1(1)
else:
  cf.id = int1(0);
# Start updating ZF
if __expr and al.id == int(al.bit, 0): zf.id = int1(1)
else: zf.id = int1(0);
# Start updating SF
sf.id = bit_cast(al.id >> (int(al.bit, al.bit) - int(al.bit, 1)), int1(1));
# Start updating PF
pf_tmp = int1(1);
pf_tmp ^= bit_cast(al.id >> int(al.bit, 0), int1(1));
pf_tmp ^= bit_cast(al.id >> int(al.bit, 1), int1(1));
pf_tmp ^= bit_cast(al.id >> int(al.bit, 2), int1(1));
pf_tmp ^= bit_cast(al.id >> int(al.bit, 3), int1(1));
pf_tmp ^= bit_cast(al.id >> int(al.bit, 4), int1(1));
pf_tmp ^= bit_cast(al.id >> int(al.bit, 5), int1(1));
pf_tmp ^= bit_cast(al.id >> int(al.bit, 6), int1(1));
pf_tmp ^= bit_cast(al.id >> int(al.bit, 7), int1(1));
pf.id = pf_tmp;
free_var('pf_tmp');
free_var('cond');
free_var('old_cf');
free_var('old_al');

 * attr: ['nm64']
 * opcode: 27
 * update_flags: ['cf', 'pf', 'af', 'zf', 'sf', 'of']
**/
bool X86Architecture::Table_1_27(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    if (Mode != X86_Bit_64)
    {
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Daa);
      {
        Expression::LSPType AllExpr;
        rInsn.SetTestedFlags(X86_FlAf | X86_FlCf);
        rInsn.SetUpdatedFlags(X86_FlCf | X86_FlPf | X86_FlAf | X86_FlZf | X86_FlSf | X86_FlOf);
        rInsn.SetClearedFlags(X86_FlOf);
        AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlOf, &m_CpuInfo), Expr::MakeBoolean(false)));
        /* semantic: alloc_var('old_al', al.bit) */
        AllExpr.push_back(Expr::MakeVar("old_al", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_Reg_Al)));
        /* semantic: alloc_var('old_cf', 1) */
        AllExpr.push_back(Expr::MakeVar("old_cf", VariableExpression::Alloc, 0x1));
        /* semantic: alloc_var('cond', 1) */
        AllExpr.push_back(Expr::MakeVar("cond", VariableExpression::Alloc, 0x1));
        /* semantic: alloc_var('pf_tmp', pf.bit) */
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
        /* semantic: old_cf = cf.id */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("old_cf", VariableExpression::Use),
          Expr::MakeId(X86_FlCf, &m_CpuInfo)));
        /* semantic: old_al = al.id */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("old_al", VariableExpression::Use),
          Expr::MakeId(X86_Reg_Al, &m_CpuInfo)));
        /* semantic: cf.id = int1(0) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlCf, &m_CpuInfo),
          Expr::MakeBitVector(1, 0x0)));
        /* semantic: cond = int1(0) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("cond", VariableExpression::Use),
          Expr::MakeBitVector(1, 0x0)));
        /* semantic: if __expr and (al.id & int(al.bit, 0x0f)) > int(al.bit, 9): cond |= int1(1) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondUgt,
          Expr::MakeBinOp(
            OperationExpression::OpAnd,
            Expr::MakeId(X86_Reg_Al, &m_CpuInfo),
            Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(X86_Reg_Al), 0xf)),
          Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(X86_Reg_Al), 0x9),
          Expr::MakeAssign(
            Expr::MakeVar("cond", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpOr,
              Expr::MakeVar("cond", VariableExpression::Use),
              Expr::MakeBitVector(1, 0x1)))
        , nullptr)
        );
        /* semantic: if __expr and af.id == int1(1): cond |= int1(1) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeId(X86_FlAf, &m_CpuInfo),
          Expr::MakeBitVector(1, 0x1),
          Expr::MakeAssign(
            Expr::MakeVar("cond", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpOr,
              Expr::MakeVar("cond", VariableExpression::Use),
              Expr::MakeBitVector(1, 0x1)))
        , nullptr)
        );
        /* semantic: if __expr and cond == int1(1):
          if __expr and al.id > int(al.bit, 0xf9): cf.id = int1(1)
          else: cf.id = old_cf
          al.id += int(al.bit, 0x6)
          af.id = int1(1)
        else:
          af.id = int1(0) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeVar("cond", VariableExpression::Use),
          Expr::MakeBitVector(1, 0x1),
          Expr::MakeBind({
          Expr::MakeIfElseCond(
            ConditionExpression::CondUgt,
            Expr::MakeId(X86_Reg_Al, &m_CpuInfo),
            Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(X86_Reg_Al), 0xf9),
            Expr::MakeAssign(
              Expr::MakeId(X86_FlCf, &m_CpuInfo),
              Expr::MakeBitVector(1, 0x1)),
            Expr::MakeAssign(
              Expr::MakeId(X86_FlCf, &m_CpuInfo),
              Expr::MakeVar("old_cf", VariableExpression::Use))),
          Expr::MakeAssign(
            Expr::MakeId(X86_Reg_Al, &m_CpuInfo),
            Expr::MakeBinOp(
              OperationExpression::OpAdd,
              Expr::MakeId(X86_Reg_Al, &m_CpuInfo),
              Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(X86_Reg_Al), 0x6)))
          ,
          Expr::MakeAssign(
            Expr::MakeId(X86_FlAf, &m_CpuInfo),
            Expr::MakeBitVector(1, 0x1))})
        ,
          Expr::MakeAssign(
            Expr::MakeId(X86_FlAf, &m_CpuInfo),
            Expr::MakeBitVector(1, 0x0))));
        /* semantic: cond = int1(0) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("cond", VariableExpression::Use),
          Expr::MakeBitVector(1, 0x0)));
        /* semantic: if __expr and old_al > int(al.bit, 0x99): cond |= int1(1) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondUgt,
          Expr::MakeVar("old_al", VariableExpression::Use),
          Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(X86_Reg_Al), 0x99),
          Expr::MakeAssign(
            Expr::MakeVar("cond", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpOr,
              Expr::MakeVar("cond", VariableExpression::Use),
              Expr::MakeBitVector(1, 0x1)))
        , nullptr)
        );
        /* semantic: if __expr and old_cf == int1(1): cond |= int1(1) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeVar("old_cf", VariableExpression::Use),
          Expr::MakeBitVector(1, 0x1),
          Expr::MakeAssign(
            Expr::MakeVar("cond", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpOr,
              Expr::MakeVar("cond", VariableExpression::Use),
              Expr::MakeBitVector(1, 0x1)))
        , nullptr)
        );
        /* semantic: if __expr and cond == int1(1):
          al.id += int(al.bit, 0x60)
          cf.id = int1(1)
        else:
          cf.id = int1(0) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeVar("cond", VariableExpression::Use),
          Expr::MakeBitVector(1, 0x1),
          Expr::MakeBind({
          Expr::MakeAssign(
            Expr::MakeId(X86_Reg_Al, &m_CpuInfo),
            Expr::MakeBinOp(
              OperationExpression::OpAdd,
              Expr::MakeId(X86_Reg_Al, &m_CpuInfo),
              Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(X86_Reg_Al), 0x60)))
          ,
          Expr::MakeAssign(
            Expr::MakeId(X86_FlCf, &m_CpuInfo),
            Expr::MakeBitVector(1, 0x1))})
        ,
          Expr::MakeAssign(
            Expr::MakeId(X86_FlCf, &m_CpuInfo),
            Expr::MakeBitVector(1, 0x0))));
        /* semantic: # Start updating ZF
        if __expr and al.id == int(al.bit, 0): zf.id = int1(1)
        else: zf.id = int1(0) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeId(X86_Reg_Al, &m_CpuInfo),
          Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(X86_Reg_Al), 0x0),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlZf, &m_CpuInfo),
            Expr::MakeBitVector(1, 0x1)),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlZf, &m_CpuInfo),
            Expr::MakeBitVector(1, 0x0))));
        /* semantic: # Start updating SF
        sf.id = bit_cast(al.id >> (int(al.bit, al.bit) - int(al.bit, 1)), int1(1)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlSf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeId(X86_Reg_Al, &m_CpuInfo),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(X86_Reg_Al), m_CpuInfo.GetSizeOfRegisterInBit(X86_Reg_Al)),
              Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(X86_Reg_Al), 0x1))), Expr::MakeBitVector(1, 0x1))));
        /* semantic: # Start updating PF
        pf_tmp = int1(1) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBitVector(1, 0x1)));
        /* semantic: pf_tmp ^= bit_cast(al.id >> int(al.bit, 0), int1(1)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeId(X86_Reg_Al, &m_CpuInfo),
              Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(X86_Reg_Al), 0x0)), Expr::MakeBitVector(1, 0x1))))
        );
        /* semantic: pf_tmp ^= bit_cast(al.id >> int(al.bit, 1), int1(1)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeId(X86_Reg_Al, &m_CpuInfo),
              Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(X86_Reg_Al), 0x1)), Expr::MakeBitVector(1, 0x1))))
        );
        /* semantic: pf_tmp ^= bit_cast(al.id >> int(al.bit, 2), int1(1)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeId(X86_Reg_Al, &m_CpuInfo),
              Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(X86_Reg_Al), 0x2)), Expr::MakeBitVector(1, 0x1))))
        );
        /* semantic: pf_tmp ^= bit_cast(al.id >> int(al.bit, 3), int1(1)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeId(X86_Reg_Al, &m_CpuInfo),
              Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(X86_Reg_Al), 0x3)), Expr::MakeBitVector(1, 0x1))))
        );
        /* semantic: pf_tmp ^= bit_cast(al.id >> int(al.bit, 4), int1(1)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeId(X86_Reg_Al, &m_CpuInfo),
              Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(X86_Reg_Al), 0x4)), Expr::MakeBitVector(1, 0x1))))
        );
        /* semantic: pf_tmp ^= bit_cast(al.id >> int(al.bit, 5), int1(1)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeId(X86_Reg_Al, &m_CpuInfo),
              Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(X86_Reg_Al), 0x5)), Expr::MakeBitVector(1, 0x1))))
        );
        /* semantic: pf_tmp ^= bit_cast(al.id >> int(al.bit, 6), int1(1)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeId(X86_Reg_Al, &m_CpuInfo),
              Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(X86_Reg_Al), 0x6)), Expr::MakeBitVector(1, 0x1))))
        );
        /* semantic: pf_tmp ^= bit_cast(al.id >> int(al.bit, 7), int1(1)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeId(X86_Reg_Al, &m_CpuInfo),
              Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(X86_Reg_Al), 0x7)), Expr::MakeBitVector(1, 0x1))))
        );
        /* semantic: pf.id = pf_tmp */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlPf, &m_CpuInfo),
          Expr::MakeVar("pf_tmp", VariableExpression::Use)));
        /* semantic: free_var('pf_tmp') */
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
        /* semantic: free_var('cond') */
        AllExpr.push_back(Expr::MakeVar("cond", VariableExpression::Free));
        /* semantic: free_var('old_cf') */
        AllExpr.push_back(Expr::MakeVar("old_cf", VariableExpression::Free));
        /* semantic: free_var('old_al') */
        AllExpr.push_back(Expr::MakeVar("old_al", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    else
      return false;
}

/** instruction
 * mnemonic: sub
 * operand: ['Eb', 'Gb']
 * update_flags: ['cf', 'pf', 'af', 'zf', 'sf', 'of']
 * opcode: 28
 * semantic: alloc_var('res', op0.bit);
res = op0.val - op1.val;
call('overflow_flag_sub');
call('carry_flag_sub');
call('sign_flag');
call('zero_flag');
call('parity_flag');
call('adjust_flag');
op0.val = res;
free_var('res');

**/
bool X86Architecture::Table_1_28(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Size()++;
    rInsn.SetOpcode(X86_Opcode_Sub);
    if (Operand__Eb_Gb(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    {
      Expression::LSPType AllExpr;
      rInsn.SetUpdatedFlags(X86_FlCf | X86_FlPf | X86_FlAf | X86_FlZf | X86_FlSf | X86_FlOf);
      /* semantic: alloc_var('res', op0.bit) */
      AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
      /* semantic: res = op0.val - op1.val */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("res", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpSub,
          rInsn.GetOperand(0),
          rInsn.GetOperand(1))));
      /* semantic: call('overflow_flag_sub') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlOf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeBinOp(
            OperationExpression::OpAnd,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              rInsn.GetOperand(0),
              Expr::MakeVar("res", VariableExpression::Use)),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              rInsn.GetOperand(0),
              rInsn.GetOperand(1))),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
      /* semantic: call('carry_flag_sub') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlCf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                rInsn.GetOperand(1)),
              Expr::MakeVar("res", VariableExpression::Use)),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                Expr::MakeVar("res", VariableExpression::Use)),
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                rInsn.GetOperand(1)))),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
      /* semantic: call('sign_flag') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlSf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
      /* semantic: call('zero_flag') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlZf, &m_CpuInfo),
        Expr::MakeTernaryCond(ConditionExpression::CondEq,
        Expr::MakeVar("res", VariableExpression::Use),
        Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
        Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))));
      /* semantic: call('parity_flag') */
      AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBitVector(1, 0x1)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlPf, &m_CpuInfo),
        Expr::MakeVar("pf_tmp", VariableExpression::Use)));
      AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
      /* semantic: call('adjust_flag') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlAf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              rInsn.GetOperand(0),
              rInsn.GetOperand(1)),
            Expr::MakeVar("res", VariableExpression::Use)),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))));
      /* semantic: op0.val = res */
      AllExpr.push_back(Expr::MakeAssign(
        rInsn.GetOperand(0),
        Expr::MakeVar("res", VariableExpression::Use)));
      /* semantic: free_var('res') */
      AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instruction
 * mnemonic: sub
 * operand: ['Ev', 'Gv']
 * update_flags: ['cf', 'pf', 'af', 'zf', 'sf', 'of']
 * opcode: 29
 * semantic: alloc_var('res', op0.bit);
res = op0.val - op1.val;
call('overflow_flag_sub');
call('carry_flag_sub');
call('sign_flag');
call('zero_flag');
call('parity_flag');
call('adjust_flag');
op0.val = res;
free_var('res');

**/
bool X86Architecture::Table_1_29(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Size()++;
    rInsn.SetOpcode(X86_Opcode_Sub);
    if (Operand__Ev_Gv(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    {
      Expression::LSPType AllExpr;
      rInsn.SetUpdatedFlags(X86_FlCf | X86_FlPf | X86_FlAf | X86_FlZf | X86_FlSf | X86_FlOf);
      /* semantic: alloc_var('res', op0.bit) */
      AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
      /* semantic: res = op0.val - op1.val */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("res", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpSub,
          rInsn.GetOperand(0),
          rInsn.GetOperand(1))));
      /* semantic: call('overflow_flag_sub') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlOf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeBinOp(
            OperationExpression::OpAnd,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              rInsn.GetOperand(0),
              Expr::MakeVar("res", VariableExpression::Use)),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              rInsn.GetOperand(0),
              rInsn.GetOperand(1))),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
      /* semantic: call('carry_flag_sub') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlCf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                rInsn.GetOperand(1)),
              Expr::MakeVar("res", VariableExpression::Use)),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                Expr::MakeVar("res", VariableExpression::Use)),
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                rInsn.GetOperand(1)))),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
      /* semantic: call('sign_flag') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlSf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
      /* semantic: call('zero_flag') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlZf, &m_CpuInfo),
        Expr::MakeTernaryCond(ConditionExpression::CondEq,
        Expr::MakeVar("res", VariableExpression::Use),
        Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
        Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))));
      /* semantic: call('parity_flag') */
      AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBitVector(1, 0x1)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlPf, &m_CpuInfo),
        Expr::MakeVar("pf_tmp", VariableExpression::Use)));
      AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
      /* semantic: call('adjust_flag') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlAf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              rInsn.GetOperand(0),
              rInsn.GetOperand(1)),
            Expr::MakeVar("res", VariableExpression::Use)),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))));
      /* semantic: op0.val = res */
      AllExpr.push_back(Expr::MakeAssign(
        rInsn.GetOperand(0),
        Expr::MakeVar("res", VariableExpression::Use)));
      /* semantic: free_var('res') */
      AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instruction
 * mnemonic: sub
 * operand: ['Gb', 'Eb']
 * update_flags: ['cf', 'pf', 'af', 'zf', 'sf', 'of']
 * opcode: 2a
 * semantic: alloc_var('res', op0.bit);
res = op0.val - op1.val;
call('overflow_flag_sub');
call('carry_flag_sub');
call('sign_flag');
call('zero_flag');
call('parity_flag');
call('adjust_flag');
op0.val = res;
free_var('res');

**/
bool X86Architecture::Table_1_2a(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Size()++;
    rInsn.SetOpcode(X86_Opcode_Sub);
    if (Operand__Gb_Eb(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    {
      Expression::LSPType AllExpr;
      rInsn.SetUpdatedFlags(X86_FlCf | X86_FlPf | X86_FlAf | X86_FlZf | X86_FlSf | X86_FlOf);
      /* semantic: alloc_var('res', op0.bit) */
      AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
      /* semantic: res = op0.val - op1.val */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("res", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpSub,
          rInsn.GetOperand(0),
          rInsn.GetOperand(1))));
      /* semantic: call('overflow_flag_sub') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlOf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeBinOp(
            OperationExpression::OpAnd,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              rInsn.GetOperand(0),
              Expr::MakeVar("res", VariableExpression::Use)),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              rInsn.GetOperand(0),
              rInsn.GetOperand(1))),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
      /* semantic: call('carry_flag_sub') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlCf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                rInsn.GetOperand(1)),
              Expr::MakeVar("res", VariableExpression::Use)),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                Expr::MakeVar("res", VariableExpression::Use)),
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                rInsn.GetOperand(1)))),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
      /* semantic: call('sign_flag') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlSf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
      /* semantic: call('zero_flag') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlZf, &m_CpuInfo),
        Expr::MakeTernaryCond(ConditionExpression::CondEq,
        Expr::MakeVar("res", VariableExpression::Use),
        Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
        Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))));
      /* semantic: call('parity_flag') */
      AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBitVector(1, 0x1)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlPf, &m_CpuInfo),
        Expr::MakeVar("pf_tmp", VariableExpression::Use)));
      AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
      /* semantic: call('adjust_flag') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlAf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              rInsn.GetOperand(0),
              rInsn.GetOperand(1)),
            Expr::MakeVar("res", VariableExpression::Use)),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))));
      /* semantic: op0.val = res */
      AllExpr.push_back(Expr::MakeAssign(
        rInsn.GetOperand(0),
        Expr::MakeVar("res", VariableExpression::Use)));
      /* semantic: free_var('res') */
      AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instruction
 * mnemonic: sub
 * operand: ['Gv', 'Ev']
 * update_flags: ['cf', 'pf', 'af', 'zf', 'sf', 'of']
 * opcode: 2b
 * semantic: alloc_var('res', op0.bit);
res = op0.val - op1.val;
call('overflow_flag_sub');
call('carry_flag_sub');
call('sign_flag');
call('zero_flag');
call('parity_flag');
call('adjust_flag');
op0.val = res;
free_var('res');

**/
bool X86Architecture::Table_1_2b(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Size()++;
    rInsn.SetOpcode(X86_Opcode_Sub);
    if (Operand__Gv_Ev(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    {
      Expression::LSPType AllExpr;
      rInsn.SetUpdatedFlags(X86_FlCf | X86_FlPf | X86_FlAf | X86_FlZf | X86_FlSf | X86_FlOf);
      /* semantic: alloc_var('res', op0.bit) */
      AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
      /* semantic: res = op0.val - op1.val */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("res", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpSub,
          rInsn.GetOperand(0),
          rInsn.GetOperand(1))));
      /* semantic: call('overflow_flag_sub') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlOf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeBinOp(
            OperationExpression::OpAnd,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              rInsn.GetOperand(0),
              Expr::MakeVar("res", VariableExpression::Use)),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              rInsn.GetOperand(0),
              rInsn.GetOperand(1))),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
      /* semantic: call('carry_flag_sub') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlCf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                rInsn.GetOperand(1)),
              Expr::MakeVar("res", VariableExpression::Use)),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                Expr::MakeVar("res", VariableExpression::Use)),
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                rInsn.GetOperand(1)))),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
      /* semantic: call('sign_flag') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlSf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
      /* semantic: call('zero_flag') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlZf, &m_CpuInfo),
        Expr::MakeTernaryCond(ConditionExpression::CondEq,
        Expr::MakeVar("res", VariableExpression::Use),
        Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
        Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))));
      /* semantic: call('parity_flag') */
      AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBitVector(1, 0x1)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlPf, &m_CpuInfo),
        Expr::MakeVar("pf_tmp", VariableExpression::Use)));
      AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
      /* semantic: call('adjust_flag') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlAf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              rInsn.GetOperand(0),
              rInsn.GetOperand(1)),
            Expr::MakeVar("res", VariableExpression::Use)),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))));
      /* semantic: op0.val = res */
      AllExpr.push_back(Expr::MakeAssign(
        rInsn.GetOperand(0),
        Expr::MakeVar("res", VariableExpression::Use)));
      /* semantic: free_var('res') */
      AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instruction
 * mnemonic: sub
 * operand: ['AL', 'Ib']
 * update_flags: ['cf', 'pf', 'af', 'zf', 'sf', 'of']
 * opcode: 2c
 * semantic: alloc_var('res', op0.bit);
res = op0.val - op1.val;
call('overflow_flag_sub');
call('carry_flag_sub');
call('sign_flag');
call('zero_flag');
call('parity_flag');
call('adjust_flag');
op0.val = res;
free_var('res');

**/
bool X86Architecture::Table_1_2c(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Size()++;
    rInsn.SetOpcode(X86_Opcode_Sub);
    if (Operand__AL_Ib(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    {
      Expression::LSPType AllExpr;
      rInsn.SetUpdatedFlags(X86_FlCf | X86_FlPf | X86_FlAf | X86_FlZf | X86_FlSf | X86_FlOf);
      /* semantic: alloc_var('res', op0.bit) */
      AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
      /* semantic: res = op0.val - op1.val */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("res", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpSub,
          rInsn.GetOperand(0),
          rInsn.GetOperand(1))));
      /* semantic: call('overflow_flag_sub') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlOf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeBinOp(
            OperationExpression::OpAnd,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              rInsn.GetOperand(0),
              Expr::MakeVar("res", VariableExpression::Use)),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              rInsn.GetOperand(0),
              rInsn.GetOperand(1))),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
      /* semantic: call('carry_flag_sub') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlCf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                rInsn.GetOperand(1)),
              Expr::MakeVar("res", VariableExpression::Use)),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                Expr::MakeVar("res", VariableExpression::Use)),
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                rInsn.GetOperand(1)))),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
      /* semantic: call('sign_flag') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlSf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
      /* semantic: call('zero_flag') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlZf, &m_CpuInfo),
        Expr::MakeTernaryCond(ConditionExpression::CondEq,
        Expr::MakeVar("res", VariableExpression::Use),
        Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
        Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))));
      /* semantic: call('parity_flag') */
      AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBitVector(1, 0x1)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlPf, &m_CpuInfo),
        Expr::MakeVar("pf_tmp", VariableExpression::Use)));
      AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
      /* semantic: call('adjust_flag') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlAf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              rInsn.GetOperand(0),
              rInsn.GetOperand(1)),
            Expr::MakeVar("res", VariableExpression::Use)),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))));
      /* semantic: op0.val = res */
      AllExpr.push_back(Expr::MakeAssign(
        rInsn.GetOperand(0),
        Expr::MakeVar("res", VariableExpression::Use)));
      /* semantic: free_var('res') */
      AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instruction
 * mnemonic: sub
 * operand: ['rAX', 'Iz']
 * update_flags: ['cf', 'pf', 'af', 'zf', 'sf', 'of']
 * opcode: 2d
 * semantic: alloc_var('res', op0.bit);
res = op0.val - op1.val;
call('overflow_flag_sub');
call('carry_flag_sub');
call('sign_flag');
call('zero_flag');
call('parity_flag');
call('adjust_flag');
op0.val = res;
free_var('res');

**/
bool X86Architecture::Table_1_2d(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Size()++;
    rInsn.SetOpcode(X86_Opcode_Sub);
    if (Operand__rAX_Iz(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    {
      Expression::LSPType AllExpr;
      rInsn.SetUpdatedFlags(X86_FlCf | X86_FlPf | X86_FlAf | X86_FlZf | X86_FlSf | X86_FlOf);
      /* semantic: alloc_var('res', op0.bit) */
      AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
      /* semantic: res = op0.val - op1.val */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("res", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpSub,
          rInsn.GetOperand(0),
          rInsn.GetOperand(1))));
      /* semantic: call('overflow_flag_sub') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlOf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeBinOp(
            OperationExpression::OpAnd,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              rInsn.GetOperand(0),
              Expr::MakeVar("res", VariableExpression::Use)),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              rInsn.GetOperand(0),
              rInsn.GetOperand(1))),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
      /* semantic: call('carry_flag_sub') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlCf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                rInsn.GetOperand(1)),
              Expr::MakeVar("res", VariableExpression::Use)),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                Expr::MakeVar("res", VariableExpression::Use)),
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                rInsn.GetOperand(1)))),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
      /* semantic: call('sign_flag') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlSf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
      /* semantic: call('zero_flag') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlZf, &m_CpuInfo),
        Expr::MakeTernaryCond(ConditionExpression::CondEq,
        Expr::MakeVar("res", VariableExpression::Use),
        Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
        Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))));
      /* semantic: call('parity_flag') */
      AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBitVector(1, 0x1)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlPf, &m_CpuInfo),
        Expr::MakeVar("pf_tmp", VariableExpression::Use)));
      AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
      /* semantic: call('adjust_flag') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlAf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              rInsn.GetOperand(0),
              rInsn.GetOperand(1)),
            Expr::MakeVar("res", VariableExpression::Use)),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))));
      /* semantic: op0.val = res */
      AllExpr.push_back(Expr::MakeAssign(
        rInsn.GetOperand(0),
        Expr::MakeVar("res", VariableExpression::Use)));
      /* semantic: free_var('res') */
      AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instruction
 * mnemonic: CS
 * opcode: 2e
 * constraint: pfx1
**/
bool X86Architecture::Table_1_2e(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Size()++;
    rInsn.Prefix() |= X86_Prefix_CS;
    return Disassemble(rBinStrm, Offset, rInsn, Mode);
}

/** instruction
 * mnemonic: das
 * clear_flags: ['of']
 * test_flags: ['af', 'cf']
 * semantic: alloc_var('old_al', al.bit);
alloc_var('old_cf', 1);
alloc_var('cond', 1);
alloc_var('pf_tmp', pf.bit);
old_cf = cf.id;
old_al = al.id;
cf.id = int1(0);
cond = int1(0);
if __expr and (al.id & int(al.bit, 0x0f)) > int(al.bit, 9): cond |= int1(1);
if __expr and af.id == int1(1): cond |= int1(1);
if __expr and cond == int1(1):
  if __expr and int(al.bit, 0x6) > al.id: cf.id = int1(1)
  else: cf.id = old_cf
  al.id -= int(al.bit, 0x6)
  af.id = int1(1)
else:
  af.id = int1(0);
cond = int1(0);
if __expr and old_al > int(al.bit, 0x99): cond |= int1(1);
if __expr and old_cf == int1(1): cond |= int1(1);
if __expr and cond == int1(1):
  al.id -= int(al.bit, 0x60)
  cf.id = int1(1);
# Start updating ZF
if __expr and al.id == int(al.bit, 0): zf.id = int1(1)
else: zf.id = int1(0);
# Start updating SF
sf.id = bit_cast(al.id >> (int(al.bit, al.bit) - int(al.bit, 1)), int1(1));
# Start updating PF
pf_tmp = int1(1);
pf_tmp ^= bit_cast(al.id >> int(al.bit, 0), int1(1));
pf_tmp ^= bit_cast(al.id >> int(al.bit, 1), int1(1));
pf_tmp ^= bit_cast(al.id >> int(al.bit, 2), int1(1));
pf_tmp ^= bit_cast(al.id >> int(al.bit, 3), int1(1));
pf_tmp ^= bit_cast(al.id >> int(al.bit, 4), int1(1));
pf_tmp ^= bit_cast(al.id >> int(al.bit, 5), int1(1));
pf_tmp ^= bit_cast(al.id >> int(al.bit, 6), int1(1));
pf_tmp ^= bit_cast(al.id >> int(al.bit, 7), int1(1));
pf.id = pf_tmp;
free_var('pf_tmp');
free_var('cond');
free_var('old_cf');
free_var('old_al');

 * attr: ['nm64']
 * opcode: 2f
 * update_flags: ['cf', 'pf', 'af', 'zf', 'sf', 'of']
**/
bool X86Architecture::Table_1_2f(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    if (Mode != X86_Bit_64)
    {
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Das);
      {
        Expression::LSPType AllExpr;
        rInsn.SetTestedFlags(X86_FlAf | X86_FlCf);
        rInsn.SetUpdatedFlags(X86_FlCf | X86_FlPf | X86_FlAf | X86_FlZf | X86_FlSf | X86_FlOf);
        rInsn.SetClearedFlags(X86_FlOf);
        AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlOf, &m_CpuInfo), Expr::MakeBoolean(false)));
        /* semantic: alloc_var('old_al', al.bit) */
        AllExpr.push_back(Expr::MakeVar("old_al", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_Reg_Al)));
        /* semantic: alloc_var('old_cf', 1) */
        AllExpr.push_back(Expr::MakeVar("old_cf", VariableExpression::Alloc, 0x1));
        /* semantic: alloc_var('cond', 1) */
        AllExpr.push_back(Expr::MakeVar("cond", VariableExpression::Alloc, 0x1));
        /* semantic: alloc_var('pf_tmp', pf.bit) */
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
        /* semantic: old_cf = cf.id */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("old_cf", VariableExpression::Use),
          Expr::MakeId(X86_FlCf, &m_CpuInfo)));
        /* semantic: old_al = al.id */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("old_al", VariableExpression::Use),
          Expr::MakeId(X86_Reg_Al, &m_CpuInfo)));
        /* semantic: cf.id = int1(0) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlCf, &m_CpuInfo),
          Expr::MakeBitVector(1, 0x0)));
        /* semantic: cond = int1(0) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("cond", VariableExpression::Use),
          Expr::MakeBitVector(1, 0x0)));
        /* semantic: if __expr and (al.id & int(al.bit, 0x0f)) > int(al.bit, 9): cond |= int1(1) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondUgt,
          Expr::MakeBinOp(
            OperationExpression::OpAnd,
            Expr::MakeId(X86_Reg_Al, &m_CpuInfo),
            Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(X86_Reg_Al), 0xf)),
          Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(X86_Reg_Al), 0x9),
          Expr::MakeAssign(
            Expr::MakeVar("cond", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpOr,
              Expr::MakeVar("cond", VariableExpression::Use),
              Expr::MakeBitVector(1, 0x1)))
        , nullptr)
        );
        /* semantic: if __expr and af.id == int1(1): cond |= int1(1) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeId(X86_FlAf, &m_CpuInfo),
          Expr::MakeBitVector(1, 0x1),
          Expr::MakeAssign(
            Expr::MakeVar("cond", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpOr,
              Expr::MakeVar("cond", VariableExpression::Use),
              Expr::MakeBitVector(1, 0x1)))
        , nullptr)
        );
        /* semantic: if __expr and cond == int1(1):
          if __expr and int(al.bit, 0x6) > al.id: cf.id = int1(1)
          else: cf.id = old_cf
          al.id -= int(al.bit, 0x6)
          af.id = int1(1)
        else:
          af.id = int1(0) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeVar("cond", VariableExpression::Use),
          Expr::MakeBitVector(1, 0x1),
          Expr::MakeBind({
          Expr::MakeIfElseCond(
            ConditionExpression::CondUgt,
            Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(X86_Reg_Al), 0x6),
            Expr::MakeId(X86_Reg_Al, &m_CpuInfo),
            Expr::MakeAssign(
              Expr::MakeId(X86_FlCf, &m_CpuInfo),
              Expr::MakeBitVector(1, 0x1)),
            Expr::MakeAssign(
              Expr::MakeId(X86_FlCf, &m_CpuInfo),
              Expr::MakeVar("old_cf", VariableExpression::Use))),
          Expr::MakeAssign(
            Expr::MakeId(X86_Reg_Al, &m_CpuInfo),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeId(X86_Reg_Al, &m_CpuInfo),
              Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(X86_Reg_Al), 0x6)))
          ,
          Expr::MakeAssign(
            Expr::MakeId(X86_FlAf, &m_CpuInfo),
            Expr::MakeBitVector(1, 0x1))})
        ,
          Expr::MakeAssign(
            Expr::MakeId(X86_FlAf, &m_CpuInfo),
            Expr::MakeBitVector(1, 0x0))));
        /* semantic: cond = int1(0) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("cond", VariableExpression::Use),
          Expr::MakeBitVector(1, 0x0)));
        /* semantic: if __expr and old_al > int(al.bit, 0x99): cond |= int1(1) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondUgt,
          Expr::MakeVar("old_al", VariableExpression::Use),
          Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(X86_Reg_Al), 0x99),
          Expr::MakeAssign(
            Expr::MakeVar("cond", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpOr,
              Expr::MakeVar("cond", VariableExpression::Use),
              Expr::MakeBitVector(1, 0x1)))
        , nullptr)
        );
        /* semantic: if __expr and old_cf == int1(1): cond |= int1(1) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeVar("old_cf", VariableExpression::Use),
          Expr::MakeBitVector(1, 0x1),
          Expr::MakeAssign(
            Expr::MakeVar("cond", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpOr,
              Expr::MakeVar("cond", VariableExpression::Use),
              Expr::MakeBitVector(1, 0x1)))
        , nullptr)
        );
        /* semantic: if __expr and cond == int1(1):
          al.id -= int(al.bit, 0x60)
          cf.id = int1(1) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeVar("cond", VariableExpression::Use),
          Expr::MakeBitVector(1, 0x1),
          Expr::MakeBind({
          Expr::MakeAssign(
            Expr::MakeId(X86_Reg_Al, &m_CpuInfo),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeId(X86_Reg_Al, &m_CpuInfo),
              Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(X86_Reg_Al), 0x60)))
          ,
          Expr::MakeAssign(
            Expr::MakeId(X86_FlCf, &m_CpuInfo),
            Expr::MakeBitVector(1, 0x1))})
        , nullptr)
        );
        /* semantic: # Start updating ZF
        if __expr and al.id == int(al.bit, 0): zf.id = int1(1)
        else: zf.id = int1(0) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeId(X86_Reg_Al, &m_CpuInfo),
          Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(X86_Reg_Al), 0x0),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlZf, &m_CpuInfo),
            Expr::MakeBitVector(1, 0x1)),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlZf, &m_CpuInfo),
            Expr::MakeBitVector(1, 0x0))));
        /* semantic: # Start updating SF
        sf.id = bit_cast(al.id >> (int(al.bit, al.bit) - int(al.bit, 1)), int1(1)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlSf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeId(X86_Reg_Al, &m_CpuInfo),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(X86_Reg_Al), m_CpuInfo.GetSizeOfRegisterInBit(X86_Reg_Al)),
              Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(X86_Reg_Al), 0x1))), Expr::MakeBitVector(1, 0x1))));
        /* semantic: # Start updating PF
        pf_tmp = int1(1) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBitVector(1, 0x1)));
        /* semantic: pf_tmp ^= bit_cast(al.id >> int(al.bit, 0), int1(1)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeId(X86_Reg_Al, &m_CpuInfo),
              Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(X86_Reg_Al), 0x0)), Expr::MakeBitVector(1, 0x1))))
        );
        /* semantic: pf_tmp ^= bit_cast(al.id >> int(al.bit, 1), int1(1)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeId(X86_Reg_Al, &m_CpuInfo),
              Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(X86_Reg_Al), 0x1)), Expr::MakeBitVector(1, 0x1))))
        );
        /* semantic: pf_tmp ^= bit_cast(al.id >> int(al.bit, 2), int1(1)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeId(X86_Reg_Al, &m_CpuInfo),
              Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(X86_Reg_Al), 0x2)), Expr::MakeBitVector(1, 0x1))))
        );
        /* semantic: pf_tmp ^= bit_cast(al.id >> int(al.bit, 3), int1(1)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeId(X86_Reg_Al, &m_CpuInfo),
              Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(X86_Reg_Al), 0x3)), Expr::MakeBitVector(1, 0x1))))
        );
        /* semantic: pf_tmp ^= bit_cast(al.id >> int(al.bit, 4), int1(1)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeId(X86_Reg_Al, &m_CpuInfo),
              Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(X86_Reg_Al), 0x4)), Expr::MakeBitVector(1, 0x1))))
        );
        /* semantic: pf_tmp ^= bit_cast(al.id >> int(al.bit, 5), int1(1)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeId(X86_Reg_Al, &m_CpuInfo),
              Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(X86_Reg_Al), 0x5)), Expr::MakeBitVector(1, 0x1))))
        );
        /* semantic: pf_tmp ^= bit_cast(al.id >> int(al.bit, 6), int1(1)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeId(X86_Reg_Al, &m_CpuInfo),
              Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(X86_Reg_Al), 0x6)), Expr::MakeBitVector(1, 0x1))))
        );
        /* semantic: pf_tmp ^= bit_cast(al.id >> int(al.bit, 7), int1(1)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeId(X86_Reg_Al, &m_CpuInfo),
              Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(X86_Reg_Al), 0x7)), Expr::MakeBitVector(1, 0x1))))
        );
        /* semantic: pf.id = pf_tmp */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlPf, &m_CpuInfo),
          Expr::MakeVar("pf_tmp", VariableExpression::Use)));
        /* semantic: free_var('pf_tmp') */
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
        /* semantic: free_var('cond') */
        AllExpr.push_back(Expr::MakeVar("cond", VariableExpression::Free));
        /* semantic: free_var('old_cf') */
        AllExpr.push_back(Expr::MakeVar("old_cf", VariableExpression::Free));
        /* semantic: free_var('old_al') */
        AllExpr.push_back(Expr::MakeVar("old_al", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    else
      return false;
}

/** instruction
 * mnemonic: xor
 * clear_flags: ['af', 'of', 'cf']
 * semantic: alloc_var('res', op0.bit);
res = op0.val ^ op1.val;
of.id = int1(0)
cf.id = int1(0)
call('sign_flag')
call('zero_flag')
call('parity_flag')
op0.val = res;
free_var('res');

 * operand: ['Eb', 'Gb']
 * opcode: 30
 * update_flags: ['cf', 'pf', 'af', 'zf', 'sf', 'of']
**/
bool X86Architecture::Table_1_30(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Size()++;
    rInsn.SetOpcode(X86_Opcode_Xor);
    if (Operand__Eb_Gb(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    {
      Expression::LSPType AllExpr;
      rInsn.SetUpdatedFlags(X86_FlCf | X86_FlPf | X86_FlAf | X86_FlZf | X86_FlSf | X86_FlOf);
      rInsn.SetClearedFlags(X86_FlAf | X86_FlOf | X86_FlCf);
      AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlAf, &m_CpuInfo), Expr::MakeBoolean(false)));
      AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlOf, &m_CpuInfo), Expr::MakeBoolean(false)));
      AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlCf, &m_CpuInfo), Expr::MakeBoolean(false)));
      /* semantic: alloc_var('res', op0.bit) */
      AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
      /* semantic: res = op0.val ^ op1.val */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("res", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          rInsn.GetOperand(0),
          rInsn.GetOperand(1))));
      /* semantic: of.id = int1(0)
      cf.id = int1(0)
      call('sign_flag')
      call('zero_flag')
      call('parity_flag')
      op0.val = res */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlOf, &m_CpuInfo),
        Expr::MakeBitVector(1, 0x0)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlCf, &m_CpuInfo),
        Expr::MakeBitVector(1, 0x0)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlSf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlZf, &m_CpuInfo),
        Expr::MakeTernaryCond(ConditionExpression::CondEq,
        Expr::MakeVar("res", VariableExpression::Use),
        Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
        Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))));
      AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBitVector(1, 0x1)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlPf, &m_CpuInfo),
        Expr::MakeVar("pf_tmp", VariableExpression::Use)));
      AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
      AllExpr.push_back(Expr::MakeAssign(
        rInsn.GetOperand(0),
        Expr::MakeVar("res", VariableExpression::Use)));
      /* semantic: free_var('res') */
      AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instruction
 * mnemonic: xor
 * clear_flags: ['af', 'of', 'cf']
 * semantic: alloc_var('res', op0.bit);
res = op0.val ^ op1.val;
of.id = int1(0)
cf.id = int1(0)
call('sign_flag')
call('zero_flag')
call('parity_flag')
op0.val = res;
free_var('res');

 * operand: ['Ev', 'Gv']
 * opcode: 31
 * update_flags: ['cf', 'pf', 'af', 'zf', 'sf', 'of']
**/
bool X86Architecture::Table_1_31(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Size()++;
    rInsn.SetOpcode(X86_Opcode_Xor);
    if (Operand__Ev_Gv(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    {
      Expression::LSPType AllExpr;
      rInsn.SetUpdatedFlags(X86_FlCf | X86_FlPf | X86_FlAf | X86_FlZf | X86_FlSf | X86_FlOf);
      rInsn.SetClearedFlags(X86_FlAf | X86_FlOf | X86_FlCf);
      AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlAf, &m_CpuInfo), Expr::MakeBoolean(false)));
      AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlOf, &m_CpuInfo), Expr::MakeBoolean(false)));
      AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlCf, &m_CpuInfo), Expr::MakeBoolean(false)));
      /* semantic: alloc_var('res', op0.bit) */
      AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
      /* semantic: res = op0.val ^ op1.val */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("res", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          rInsn.GetOperand(0),
          rInsn.GetOperand(1))));
      /* semantic: of.id = int1(0)
      cf.id = int1(0)
      call('sign_flag')
      call('zero_flag')
      call('parity_flag')
      op0.val = res */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlOf, &m_CpuInfo),
        Expr::MakeBitVector(1, 0x0)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlCf, &m_CpuInfo),
        Expr::MakeBitVector(1, 0x0)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlSf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlZf, &m_CpuInfo),
        Expr::MakeTernaryCond(ConditionExpression::CondEq,
        Expr::MakeVar("res", VariableExpression::Use),
        Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
        Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))));
      AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBitVector(1, 0x1)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlPf, &m_CpuInfo),
        Expr::MakeVar("pf_tmp", VariableExpression::Use)));
      AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
      AllExpr.push_back(Expr::MakeAssign(
        rInsn.GetOperand(0),
        Expr::MakeVar("res", VariableExpression::Use)));
      /* semantic: free_var('res') */
      AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instruction
 * mnemonic: xor
 * clear_flags: ['af', 'of', 'cf']
 * semantic: alloc_var('res', op0.bit);
res = op0.val ^ op1.val;
of.id = int1(0)
cf.id = int1(0)
call('sign_flag')
call('zero_flag')
call('parity_flag')
op0.val = res;
free_var('res');

 * operand: ['Gb', 'Eb']
 * opcode: 32
 * update_flags: ['cf', 'pf', 'af', 'zf', 'sf', 'of']
**/
bool X86Architecture::Table_1_32(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Size()++;
    rInsn.SetOpcode(X86_Opcode_Xor);
    if (Operand__Gb_Eb(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    {
      Expression::LSPType AllExpr;
      rInsn.SetUpdatedFlags(X86_FlCf | X86_FlPf | X86_FlAf | X86_FlZf | X86_FlSf | X86_FlOf);
      rInsn.SetClearedFlags(X86_FlAf | X86_FlOf | X86_FlCf);
      AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlAf, &m_CpuInfo), Expr::MakeBoolean(false)));
      AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlOf, &m_CpuInfo), Expr::MakeBoolean(false)));
      AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlCf, &m_CpuInfo), Expr::MakeBoolean(false)));
      /* semantic: alloc_var('res', op0.bit) */
      AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
      /* semantic: res = op0.val ^ op1.val */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("res", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          rInsn.GetOperand(0),
          rInsn.GetOperand(1))));
      /* semantic: of.id = int1(0)
      cf.id = int1(0)
      call('sign_flag')
      call('zero_flag')
      call('parity_flag')
      op0.val = res */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlOf, &m_CpuInfo),
        Expr::MakeBitVector(1, 0x0)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlCf, &m_CpuInfo),
        Expr::MakeBitVector(1, 0x0)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlSf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlZf, &m_CpuInfo),
        Expr::MakeTernaryCond(ConditionExpression::CondEq,
        Expr::MakeVar("res", VariableExpression::Use),
        Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
        Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))));
      AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBitVector(1, 0x1)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlPf, &m_CpuInfo),
        Expr::MakeVar("pf_tmp", VariableExpression::Use)));
      AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
      AllExpr.push_back(Expr::MakeAssign(
        rInsn.GetOperand(0),
        Expr::MakeVar("res", VariableExpression::Use)));
      /* semantic: free_var('res') */
      AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instruction
 * mnemonic: xor
 * clear_flags: ['af', 'of', 'cf']
 * semantic: alloc_var('res', op0.bit);
res = op0.val ^ op1.val;
of.id = int1(0)
cf.id = int1(0)
call('sign_flag')
call('zero_flag')
call('parity_flag')
op0.val = res;
free_var('res');

 * operand: ['Gv', 'Ev']
 * opcode: 33
 * update_flags: ['cf', 'pf', 'af', 'zf', 'sf', 'of']
**/
bool X86Architecture::Table_1_33(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Size()++;
    rInsn.SetOpcode(X86_Opcode_Xor);
    if (Operand__Gv_Ev(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    {
      Expression::LSPType AllExpr;
      rInsn.SetUpdatedFlags(X86_FlCf | X86_FlPf | X86_FlAf | X86_FlZf | X86_FlSf | X86_FlOf);
      rInsn.SetClearedFlags(X86_FlAf | X86_FlOf | X86_FlCf);
      AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlAf, &m_CpuInfo), Expr::MakeBoolean(false)));
      AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlOf, &m_CpuInfo), Expr::MakeBoolean(false)));
      AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlCf, &m_CpuInfo), Expr::MakeBoolean(false)));
      /* semantic: alloc_var('res', op0.bit) */
      AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
      /* semantic: res = op0.val ^ op1.val */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("res", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          rInsn.GetOperand(0),
          rInsn.GetOperand(1))));
      /* semantic: of.id = int1(0)
      cf.id = int1(0)
      call('sign_flag')
      call('zero_flag')
      call('parity_flag')
      op0.val = res */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlOf, &m_CpuInfo),
        Expr::MakeBitVector(1, 0x0)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlCf, &m_CpuInfo),
        Expr::MakeBitVector(1, 0x0)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlSf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlZf, &m_CpuInfo),
        Expr::MakeTernaryCond(ConditionExpression::CondEq,
        Expr::MakeVar("res", VariableExpression::Use),
        Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
        Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))));
      AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBitVector(1, 0x1)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlPf, &m_CpuInfo),
        Expr::MakeVar("pf_tmp", VariableExpression::Use)));
      AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
      AllExpr.push_back(Expr::MakeAssign(
        rInsn.GetOperand(0),
        Expr::MakeVar("res", VariableExpression::Use)));
      /* semantic: free_var('res') */
      AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instruction
 * mnemonic: xor
 * clear_flags: ['af', 'of', 'cf']
 * semantic: alloc_var('res', op0.bit);
res = op0.val ^ op1.val;
of.id = int1(0)
cf.id = int1(0)
call('sign_flag')
call('zero_flag')
call('parity_flag')
op0.val = res;
free_var('res');

 * operand: ['AL', 'Ib']
 * opcode: 34
 * update_flags: ['cf', 'pf', 'af', 'zf', 'sf', 'of']
**/
bool X86Architecture::Table_1_34(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Size()++;
    rInsn.SetOpcode(X86_Opcode_Xor);
    if (Operand__AL_Ib(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    {
      Expression::LSPType AllExpr;
      rInsn.SetUpdatedFlags(X86_FlCf | X86_FlPf | X86_FlAf | X86_FlZf | X86_FlSf | X86_FlOf);
      rInsn.SetClearedFlags(X86_FlAf | X86_FlOf | X86_FlCf);
      AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlAf, &m_CpuInfo), Expr::MakeBoolean(false)));
      AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlOf, &m_CpuInfo), Expr::MakeBoolean(false)));
      AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlCf, &m_CpuInfo), Expr::MakeBoolean(false)));
      /* semantic: alloc_var('res', op0.bit) */
      AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
      /* semantic: res = op0.val ^ op1.val */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("res", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          rInsn.GetOperand(0),
          rInsn.GetOperand(1))));
      /* semantic: of.id = int1(0)
      cf.id = int1(0)
      call('sign_flag')
      call('zero_flag')
      call('parity_flag')
      op0.val = res */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlOf, &m_CpuInfo),
        Expr::MakeBitVector(1, 0x0)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlCf, &m_CpuInfo),
        Expr::MakeBitVector(1, 0x0)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlSf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlZf, &m_CpuInfo),
        Expr::MakeTernaryCond(ConditionExpression::CondEq,
        Expr::MakeVar("res", VariableExpression::Use),
        Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
        Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))));
      AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBitVector(1, 0x1)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlPf, &m_CpuInfo),
        Expr::MakeVar("pf_tmp", VariableExpression::Use)));
      AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
      AllExpr.push_back(Expr::MakeAssign(
        rInsn.GetOperand(0),
        Expr::MakeVar("res", VariableExpression::Use)));
      /* semantic: free_var('res') */
      AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instruction
 * mnemonic: xor
 * clear_flags: ['af', 'of', 'cf']
 * semantic: alloc_var('res', op0.bit);
res = op0.val ^ op1.val;
of.id = int1(0)
cf.id = int1(0)
call('sign_flag')
call('zero_flag')
call('parity_flag')
op0.val = res;
free_var('res');

 * operand: ['rAX', 'Iz']
 * opcode: 35
 * update_flags: ['cf', 'pf', 'af', 'zf', 'sf', 'of']
**/
bool X86Architecture::Table_1_35(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Size()++;
    rInsn.SetOpcode(X86_Opcode_Xor);
    if (Operand__rAX_Iz(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    {
      Expression::LSPType AllExpr;
      rInsn.SetUpdatedFlags(X86_FlCf | X86_FlPf | X86_FlAf | X86_FlZf | X86_FlSf | X86_FlOf);
      rInsn.SetClearedFlags(X86_FlAf | X86_FlOf | X86_FlCf);
      AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlAf, &m_CpuInfo), Expr::MakeBoolean(false)));
      AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlOf, &m_CpuInfo), Expr::MakeBoolean(false)));
      AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlCf, &m_CpuInfo), Expr::MakeBoolean(false)));
      /* semantic: alloc_var('res', op0.bit) */
      AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
      /* semantic: res = op0.val ^ op1.val */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("res", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          rInsn.GetOperand(0),
          rInsn.GetOperand(1))));
      /* semantic: of.id = int1(0)
      cf.id = int1(0)
      call('sign_flag')
      call('zero_flag')
      call('parity_flag')
      op0.val = res */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlOf, &m_CpuInfo),
        Expr::MakeBitVector(1, 0x0)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlCf, &m_CpuInfo),
        Expr::MakeBitVector(1, 0x0)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlSf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlZf, &m_CpuInfo),
        Expr::MakeTernaryCond(ConditionExpression::CondEq,
        Expr::MakeVar("res", VariableExpression::Use),
        Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
        Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))));
      AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBitVector(1, 0x1)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlPf, &m_CpuInfo),
        Expr::MakeVar("pf_tmp", VariableExpression::Use)));
      AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
      AllExpr.push_back(Expr::MakeAssign(
        rInsn.GetOperand(0),
        Expr::MakeVar("res", VariableExpression::Use)));
      /* semantic: free_var('res') */
      AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instruction
 * mnemonic: SS
 * opcode: 36
 * constraint: pfx1
**/
bool X86Architecture::Table_1_36(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Size()++;
    rInsn.Prefix() |= X86_Prefix_SS;
    return Disassemble(rBinStrm, Offset, rInsn, Mode);
}

/** instruction
 * mnemonic: aaa
 * clear_flags: ['of']
 * test_flags: ['af', 'cf']
 * semantic: alloc_var('cond', 1);
cond = int1(0);
if __expr and ((al.id & int(al.bit, 0x0f)) > int(al.bit, 9)): cond |= int1(1);
if __expr and af.id == int1(1): cond |= int1(1);
if __expr and cond == int1(1):
  ax.id += int(ax.bit, 0x106)
  af.id = int1(1)
  cf.id = int1(1)
else:
  af.id = int1(0)
  cf.id = int1(0);
al.id &= int(al.bit, 0x0f);
free_var('cond');

 * opcode: 37
 * update_flags: ['cf', 'pf', 'af', 'zf', 'sf', 'of']
**/
bool X86Architecture::Table_1_37(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Size()++;
    rInsn.SetOpcode(X86_Opcode_Aaa);
    {
      Expression::LSPType AllExpr;
      rInsn.SetTestedFlags(X86_FlAf | X86_FlCf);
      rInsn.SetUpdatedFlags(X86_FlCf | X86_FlPf | X86_FlAf | X86_FlZf | X86_FlSf | X86_FlOf);
      rInsn.SetClearedFlags(X86_FlOf);
      AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlOf, &m_CpuInfo), Expr::MakeBoolean(false)));
      /* semantic: alloc_var('cond', 1) */
      AllExpr.push_back(Expr::MakeVar("cond", VariableExpression::Alloc, 0x1));
      /* semantic: cond = int1(0) */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("cond", VariableExpression::Use),
        Expr::MakeBitVector(1, 0x0)));
      /* semantic: if __expr and ((al.id & int(al.bit, 0x0f)) > int(al.bit, 9)): cond |= int1(1) */
      AllExpr.push_back(Expr::MakeIfElseCond(
        ConditionExpression::CondUgt,
        Expr::MakeBinOp(
          OperationExpression::OpAnd,
          Expr::MakeId(X86_Reg_Al, &m_CpuInfo),
          Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(X86_Reg_Al), 0xf)),
        Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(X86_Reg_Al), 0x9),
        Expr::MakeAssign(
          Expr::MakeVar("cond", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpOr,
            Expr::MakeVar("cond", VariableExpression::Use),
            Expr::MakeBitVector(1, 0x1)))
      , nullptr)
      );
      /* semantic: if __expr and af.id == int1(1): cond |= int1(1) */
      AllExpr.push_back(Expr::MakeIfElseCond(
        ConditionExpression::CondEq,
        Expr::MakeId(X86_FlAf, &m_CpuInfo),
        Expr::MakeBitVector(1, 0x1),
        Expr::MakeAssign(
          Expr::MakeVar("cond", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpOr,
            Expr::MakeVar("cond", VariableExpression::Use),
            Expr::MakeBitVector(1, 0x1)))
      , nullptr)
      );
      /* semantic: if __expr and cond == int1(1):
        ax.id += int(ax.bit, 0x106)
        af.id = int1(1)
        cf.id = int1(1)
      else:
        af.id = int1(0)
        cf.id = int1(0) */
      AllExpr.push_back(Expr::MakeIfElseCond(
        ConditionExpression::CondEq,
        Expr::MakeVar("cond", VariableExpression::Use),
        Expr::MakeBitVector(1, 0x1),
        Expr::MakeBind({
        Expr::MakeAssign(
          Expr::MakeId(X86_Reg_Ax, &m_CpuInfo),
          Expr::MakeBinOp(
            OperationExpression::OpAdd,
            Expr::MakeId(X86_Reg_Ax, &m_CpuInfo),
            Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(X86_Reg_Ax), 0x106)))
        ,
        Expr::MakeAssign(
          Expr::MakeId(X86_FlAf, &m_CpuInfo),
          Expr::MakeBitVector(1, 0x1)),
        Expr::MakeAssign(
          Expr::MakeId(X86_FlCf, &m_CpuInfo),
          Expr::MakeBitVector(1, 0x1))})
      ,
        Expr::MakeBind({
        Expr::MakeAssign(
          Expr::MakeId(X86_FlAf, &m_CpuInfo),
          Expr::MakeBitVector(1, 0x0)),
        Expr::MakeAssign(
          Expr::MakeId(X86_FlCf, &m_CpuInfo),
          Expr::MakeBitVector(1, 0x0))})
      ));
      /* semantic: al.id &= int(al.bit, 0x0f) */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_Reg_Al, &m_CpuInfo),
        Expr::MakeBinOp(
          OperationExpression::OpAnd,
          Expr::MakeId(X86_Reg_Al, &m_CpuInfo),
          Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(X86_Reg_Al), 0xf)))
      );
      /* semantic: free_var('cond') */
      AllExpr.push_back(Expr::MakeVar("cond", VariableExpression::Free));
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instruction
 * mnemonic: cmp
 * operand: ['Eb', 'Gb']
 * update_flags: ['cf', 'pf', 'af', 'zf', 'sf', 'of']
 * opcode: 38
 * semantic: alloc_var('res', op0.bit);
res = op0.val - op1.val;
call('overflow_flag_sub');
call('carry_flag_sub');
call('sign_flag');
call('zero_flag');
call('parity_flag');
call('adjust_flag');
free_var('res');

**/
bool X86Architecture::Table_1_38(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Size()++;
    rInsn.SetOpcode(X86_Opcode_Cmp);
    if (Operand__Eb_Gb(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    {
      Expression::LSPType AllExpr;
      rInsn.SetUpdatedFlags(X86_FlCf | X86_FlPf | X86_FlAf | X86_FlZf | X86_FlSf | X86_FlOf);
      /* semantic: alloc_var('res', op0.bit) */
      AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
      /* semantic: res = op0.val - op1.val */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("res", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpSub,
          rInsn.GetOperand(0),
          rInsn.GetOperand(1))));
      /* semantic: call('overflow_flag_sub') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlOf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeBinOp(
            OperationExpression::OpAnd,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              rInsn.GetOperand(0),
              Expr::MakeVar("res", VariableExpression::Use)),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              rInsn.GetOperand(0),
              rInsn.GetOperand(1))),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
      /* semantic: call('carry_flag_sub') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlCf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                rInsn.GetOperand(1)),
              Expr::MakeVar("res", VariableExpression::Use)),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                Expr::MakeVar("res", VariableExpression::Use)),
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                rInsn.GetOperand(1)))),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
      /* semantic: call('sign_flag') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlSf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
      /* semantic: call('zero_flag') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlZf, &m_CpuInfo),
        Expr::MakeTernaryCond(ConditionExpression::CondEq,
        Expr::MakeVar("res", VariableExpression::Use),
        Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
        Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))));
      /* semantic: call('parity_flag') */
      AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBitVector(1, 0x1)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlPf, &m_CpuInfo),
        Expr::MakeVar("pf_tmp", VariableExpression::Use)));
      AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
      /* semantic: call('adjust_flag') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlAf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              rInsn.GetOperand(0),
              rInsn.GetOperand(1)),
            Expr::MakeVar("res", VariableExpression::Use)),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))));
      /* semantic: free_var('res') */
      AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instruction
 * mnemonic: cmp
 * operand: ['Ev', 'Gv']
 * update_flags: ['cf', 'pf', 'af', 'zf', 'sf', 'of']
 * opcode: 39
 * semantic: alloc_var('res', op0.bit);
res = op0.val - op1.val;
call('overflow_flag_sub');
call('carry_flag_sub');
call('sign_flag');
call('zero_flag');
call('parity_flag');
call('adjust_flag');
free_var('res');

**/
bool X86Architecture::Table_1_39(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Size()++;
    rInsn.SetOpcode(X86_Opcode_Cmp);
    if (Operand__Ev_Gv(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    {
      Expression::LSPType AllExpr;
      rInsn.SetUpdatedFlags(X86_FlCf | X86_FlPf | X86_FlAf | X86_FlZf | X86_FlSf | X86_FlOf);
      /* semantic: alloc_var('res', op0.bit) */
      AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
      /* semantic: res = op0.val - op1.val */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("res", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpSub,
          rInsn.GetOperand(0),
          rInsn.GetOperand(1))));
      /* semantic: call('overflow_flag_sub') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlOf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeBinOp(
            OperationExpression::OpAnd,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              rInsn.GetOperand(0),
              Expr::MakeVar("res", VariableExpression::Use)),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              rInsn.GetOperand(0),
              rInsn.GetOperand(1))),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
      /* semantic: call('carry_flag_sub') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlCf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                rInsn.GetOperand(1)),
              Expr::MakeVar("res", VariableExpression::Use)),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                Expr::MakeVar("res", VariableExpression::Use)),
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                rInsn.GetOperand(1)))),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
      /* semantic: call('sign_flag') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlSf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
      /* semantic: call('zero_flag') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlZf, &m_CpuInfo),
        Expr::MakeTernaryCond(ConditionExpression::CondEq,
        Expr::MakeVar("res", VariableExpression::Use),
        Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
        Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))));
      /* semantic: call('parity_flag') */
      AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBitVector(1, 0x1)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlPf, &m_CpuInfo),
        Expr::MakeVar("pf_tmp", VariableExpression::Use)));
      AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
      /* semantic: call('adjust_flag') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlAf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              rInsn.GetOperand(0),
              rInsn.GetOperand(1)),
            Expr::MakeVar("res", VariableExpression::Use)),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))));
      /* semantic: free_var('res') */
      AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instruction
 * mnemonic: cmp
 * operand: ['Gb', 'Eb']
 * update_flags: ['cf', 'pf', 'af', 'zf', 'sf', 'of']
 * opcode: 3a
 * semantic: alloc_var('res', op0.bit);
res = op0.val - op1.val;
call('overflow_flag_sub');
call('carry_flag_sub');
call('sign_flag');
call('zero_flag');
call('parity_flag');
call('adjust_flag');
free_var('res');

**/
bool X86Architecture::Table_1_3a(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Size()++;
    rInsn.SetOpcode(X86_Opcode_Cmp);
    if (Operand__Gb_Eb(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    {
      Expression::LSPType AllExpr;
      rInsn.SetUpdatedFlags(X86_FlCf | X86_FlPf | X86_FlAf | X86_FlZf | X86_FlSf | X86_FlOf);
      /* semantic: alloc_var('res', op0.bit) */
      AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
      /* semantic: res = op0.val - op1.val */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("res", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpSub,
          rInsn.GetOperand(0),
          rInsn.GetOperand(1))));
      /* semantic: call('overflow_flag_sub') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlOf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeBinOp(
            OperationExpression::OpAnd,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              rInsn.GetOperand(0),
              Expr::MakeVar("res", VariableExpression::Use)),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              rInsn.GetOperand(0),
              rInsn.GetOperand(1))),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
      /* semantic: call('carry_flag_sub') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlCf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                rInsn.GetOperand(1)),
              Expr::MakeVar("res", VariableExpression::Use)),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                Expr::MakeVar("res", VariableExpression::Use)),
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                rInsn.GetOperand(1)))),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
      /* semantic: call('sign_flag') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlSf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
      /* semantic: call('zero_flag') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlZf, &m_CpuInfo),
        Expr::MakeTernaryCond(ConditionExpression::CondEq,
        Expr::MakeVar("res", VariableExpression::Use),
        Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
        Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))));
      /* semantic: call('parity_flag') */
      AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBitVector(1, 0x1)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlPf, &m_CpuInfo),
        Expr::MakeVar("pf_tmp", VariableExpression::Use)));
      AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
      /* semantic: call('adjust_flag') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlAf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              rInsn.GetOperand(0),
              rInsn.GetOperand(1)),
            Expr::MakeVar("res", VariableExpression::Use)),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))));
      /* semantic: free_var('res') */
      AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instruction
 * mnemonic: cmp
 * operand: ['Gv', 'Ev']
 * update_flags: ['cf', 'pf', 'af', 'zf', 'sf', 'of']
 * opcode: 3b
 * semantic: alloc_var('res', op0.bit);
res = op0.val - op1.val;
call('overflow_flag_sub');
call('carry_flag_sub');
call('sign_flag');
call('zero_flag');
call('parity_flag');
call('adjust_flag');
free_var('res');

**/
bool X86Architecture::Table_1_3b(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Size()++;
    rInsn.SetOpcode(X86_Opcode_Cmp);
    if (Operand__Gv_Ev(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    {
      Expression::LSPType AllExpr;
      rInsn.SetUpdatedFlags(X86_FlCf | X86_FlPf | X86_FlAf | X86_FlZf | X86_FlSf | X86_FlOf);
      /* semantic: alloc_var('res', op0.bit) */
      AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
      /* semantic: res = op0.val - op1.val */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("res", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpSub,
          rInsn.GetOperand(0),
          rInsn.GetOperand(1))));
      /* semantic: call('overflow_flag_sub') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlOf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeBinOp(
            OperationExpression::OpAnd,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              rInsn.GetOperand(0),
              Expr::MakeVar("res", VariableExpression::Use)),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              rInsn.GetOperand(0),
              rInsn.GetOperand(1))),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
      /* semantic: call('carry_flag_sub') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlCf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                rInsn.GetOperand(1)),
              Expr::MakeVar("res", VariableExpression::Use)),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                Expr::MakeVar("res", VariableExpression::Use)),
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                rInsn.GetOperand(1)))),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
      /* semantic: call('sign_flag') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlSf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
      /* semantic: call('zero_flag') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlZf, &m_CpuInfo),
        Expr::MakeTernaryCond(ConditionExpression::CondEq,
        Expr::MakeVar("res", VariableExpression::Use),
        Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
        Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))));
      /* semantic: call('parity_flag') */
      AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBitVector(1, 0x1)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlPf, &m_CpuInfo),
        Expr::MakeVar("pf_tmp", VariableExpression::Use)));
      AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
      /* semantic: call('adjust_flag') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlAf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              rInsn.GetOperand(0),
              rInsn.GetOperand(1)),
            Expr::MakeVar("res", VariableExpression::Use)),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))));
      /* semantic: free_var('res') */
      AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instruction
 * mnemonic: cmp
 * operand: ['AL', 'Ib']
 * update_flags: ['cf', 'pf', 'af', 'zf', 'sf', 'of']
 * opcode: 3c
 * semantic: alloc_var('res', op0.bit);
res = op0.val - op1.val;
call('overflow_flag_sub');
call('carry_flag_sub');
call('sign_flag');
call('zero_flag');
call('parity_flag');
call('adjust_flag');
free_var('res');

**/
bool X86Architecture::Table_1_3c(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Size()++;
    rInsn.SetOpcode(X86_Opcode_Cmp);
    if (Operand__AL_Ib(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    {
      Expression::LSPType AllExpr;
      rInsn.SetUpdatedFlags(X86_FlCf | X86_FlPf | X86_FlAf | X86_FlZf | X86_FlSf | X86_FlOf);
      /* semantic: alloc_var('res', op0.bit) */
      AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
      /* semantic: res = op0.val - op1.val */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("res", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpSub,
          rInsn.GetOperand(0),
          rInsn.GetOperand(1))));
      /* semantic: call('overflow_flag_sub') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlOf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeBinOp(
            OperationExpression::OpAnd,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              rInsn.GetOperand(0),
              Expr::MakeVar("res", VariableExpression::Use)),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              rInsn.GetOperand(0),
              rInsn.GetOperand(1))),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
      /* semantic: call('carry_flag_sub') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlCf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                rInsn.GetOperand(1)),
              Expr::MakeVar("res", VariableExpression::Use)),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                Expr::MakeVar("res", VariableExpression::Use)),
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                rInsn.GetOperand(1)))),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
      /* semantic: call('sign_flag') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlSf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
      /* semantic: call('zero_flag') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlZf, &m_CpuInfo),
        Expr::MakeTernaryCond(ConditionExpression::CondEq,
        Expr::MakeVar("res", VariableExpression::Use),
        Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
        Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))));
      /* semantic: call('parity_flag') */
      AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBitVector(1, 0x1)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlPf, &m_CpuInfo),
        Expr::MakeVar("pf_tmp", VariableExpression::Use)));
      AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
      /* semantic: call('adjust_flag') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlAf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              rInsn.GetOperand(0),
              rInsn.GetOperand(1)),
            Expr::MakeVar("res", VariableExpression::Use)),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))));
      /* semantic: free_var('res') */
      AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instruction
 * mnemonic: cmp
 * operand: ['rAX', 'Iz']
 * update_flags: ['cf', 'pf', 'af', 'zf', 'sf', 'of']
 * opcode: 3d
 * semantic: alloc_var('res', op0.bit);
res = op0.val - op1.val;
call('overflow_flag_sub');
call('carry_flag_sub');
call('sign_flag');
call('zero_flag');
call('parity_flag');
call('adjust_flag');
free_var('res');

**/
bool X86Architecture::Table_1_3d(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Size()++;
    rInsn.SetOpcode(X86_Opcode_Cmp);
    if (Operand__rAX_Iz(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    {
      Expression::LSPType AllExpr;
      rInsn.SetUpdatedFlags(X86_FlCf | X86_FlPf | X86_FlAf | X86_FlZf | X86_FlSf | X86_FlOf);
      /* semantic: alloc_var('res', op0.bit) */
      AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
      /* semantic: res = op0.val - op1.val */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("res", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpSub,
          rInsn.GetOperand(0),
          rInsn.GetOperand(1))));
      /* semantic: call('overflow_flag_sub') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlOf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeBinOp(
            OperationExpression::OpAnd,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              rInsn.GetOperand(0),
              Expr::MakeVar("res", VariableExpression::Use)),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              rInsn.GetOperand(0),
              rInsn.GetOperand(1))),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
      /* semantic: call('carry_flag_sub') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlCf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                rInsn.GetOperand(1)),
              Expr::MakeVar("res", VariableExpression::Use)),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                Expr::MakeVar("res", VariableExpression::Use)),
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                rInsn.GetOperand(1)))),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
      /* semantic: call('sign_flag') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlSf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
      /* semantic: call('zero_flag') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlZf, &m_CpuInfo),
        Expr::MakeTernaryCond(ConditionExpression::CondEq,
        Expr::MakeVar("res", VariableExpression::Use),
        Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
        Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))));
      /* semantic: call('parity_flag') */
      AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBitVector(1, 0x1)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlPf, &m_CpuInfo),
        Expr::MakeVar("pf_tmp", VariableExpression::Use)));
      AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
      /* semantic: call('adjust_flag') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlAf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              rInsn.GetOperand(0),
              rInsn.GetOperand(1)),
            Expr::MakeVar("res", VariableExpression::Use)),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))));
      /* semantic: free_var('res') */
      AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instruction
 * mnemonic: DS
 * opcode: 3e
 * constraint: pfx1
**/
bool X86Architecture::Table_1_3e(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Size()++;
    rInsn.Prefix() |= X86_Prefix_DS;
    return Disassemble(rBinStrm, Offset, rInsn, Mode);
}

/** instruction
 * mnemonic: aas
 * clear_flags: ['of', 'sf', 'zf', 'pf']
 * test_flags: ['af']
 * semantic: alloc_var('cond', 1);
cond = int1(0);
if __expr and ((al.id & int(al.bit, 0x0f)) > int(al.bit, 9)): cond |= int1(1)
if __expr and af.id == int1(1): cond |= int1(1);
if __expr and cond == int1(1):
  ax.id -= int(ax.bit, 0x6)
  ah.id -= int(ah.bit, 1)
  af.id = int1(1)
  cf.id = int1(1)
else:
  cf.id = int1(0)
  af.id = int1(0);
al.id &= int(al.bit, 0x0f);
free_var('cond');

 * attr: ['nm64']
 * opcode: 3f
 * update_flags: ['cf', 'pf', 'af', 'zf', 'sf', 'of']
**/
bool X86Architecture::Table_1_3f(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    if (Mode != X86_Bit_64)
    {
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Aas);
      {
        Expression::LSPType AllExpr;
        rInsn.SetTestedFlags(X86_FlAf);
        rInsn.SetUpdatedFlags(X86_FlCf | X86_FlPf | X86_FlAf | X86_FlZf | X86_FlSf | X86_FlOf);
        rInsn.SetClearedFlags(X86_FlOf | X86_FlSf | X86_FlZf | X86_FlPf);
        AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlOf, &m_CpuInfo), Expr::MakeBoolean(false)));
        AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlSf, &m_CpuInfo), Expr::MakeBoolean(false)));
        AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlZf, &m_CpuInfo), Expr::MakeBoolean(false)));
        AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlPf, &m_CpuInfo), Expr::MakeBoolean(false)));
        /* semantic: alloc_var('cond', 1) */
        AllExpr.push_back(Expr::MakeVar("cond", VariableExpression::Alloc, 0x1));
        /* semantic: cond = int1(0) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("cond", VariableExpression::Use),
          Expr::MakeBitVector(1, 0x0)));
        /* semantic: if __expr and ((al.id & int(al.bit, 0x0f)) > int(al.bit, 9)): cond |= int1(1)
        if __expr and af.id == int1(1): cond |= int1(1) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondUgt,
          Expr::MakeBinOp(
            OperationExpression::OpAnd,
            Expr::MakeId(X86_Reg_Al, &m_CpuInfo),
            Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(X86_Reg_Al), 0xf)),
          Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(X86_Reg_Al), 0x9),
          Expr::MakeAssign(
            Expr::MakeVar("cond", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpOr,
              Expr::MakeVar("cond", VariableExpression::Use),
              Expr::MakeBitVector(1, 0x1)))
        , nullptr)
        );
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeId(X86_FlAf, &m_CpuInfo),
          Expr::MakeBitVector(1, 0x1),
          Expr::MakeAssign(
            Expr::MakeVar("cond", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpOr,
              Expr::MakeVar("cond", VariableExpression::Use),
              Expr::MakeBitVector(1, 0x1)))
        , nullptr)
        );
        /* semantic: if __expr and cond == int1(1):
          ax.id -= int(ax.bit, 0x6)
          ah.id -= int(ah.bit, 1)
          af.id = int1(1)
          cf.id = int1(1)
        else:
          cf.id = int1(0)
          af.id = int1(0) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeVar("cond", VariableExpression::Use),
          Expr::MakeBitVector(1, 0x1),
          Expr::MakeBind({
          Expr::MakeAssign(
            Expr::MakeId(X86_Reg_Ax, &m_CpuInfo),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeId(X86_Reg_Ax, &m_CpuInfo),
              Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(X86_Reg_Ax), 0x6)))
          ,
          Expr::MakeAssign(
            Expr::MakeId(X86_Reg_Ah, &m_CpuInfo),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeId(X86_Reg_Ah, &m_CpuInfo),
              Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(X86_Reg_Ah), 0x1)))
          ,
          Expr::MakeAssign(
            Expr::MakeId(X86_FlAf, &m_CpuInfo),
            Expr::MakeBitVector(1, 0x1)),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlCf, &m_CpuInfo),
            Expr::MakeBitVector(1, 0x1))})
        ,
          Expr::MakeBind({
          Expr::MakeAssign(
            Expr::MakeId(X86_FlCf, &m_CpuInfo),
            Expr::MakeBitVector(1, 0x0)),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlAf, &m_CpuInfo),
            Expr::MakeBitVector(1, 0x0))})
        ));
        /* semantic: al.id &= int(al.bit, 0x0f) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_Reg_Al, &m_CpuInfo),
          Expr::MakeBinOp(
            OperationExpression::OpAnd,
            Expr::MakeId(X86_Reg_Al, &m_CpuInfo),
            Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(X86_Reg_Al), 0xf)))
        );
        /* semantic: free_var('cond') */
        AllExpr.push_back(Expr::MakeVar("cond", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    else
      return false;
}

/** instructions
 * opcode: 40
 *
 * mnemonic: inc
 * operand: ['eAX']
 * update_flags: ['pf', 'af', 'zf', 'sf', 'of']
 * semantic: alloc_var('op1', op0.bit);
alloc_var('res', op0.bit);
op1.val = int(op0.bit, 1);
res.val = op0.val + op1.val;
call('overflow_flag_add');
call('sign_flag');
call('zero_flag');
call('parity_flag');
call('adjust_flag');
op0.val = res.val;
free_var('op1');
free_var('res');

 *
 * mnemonic: REX
 * attr: ['m64']
 * constraint: pfx1
 *
**/
bool X86Architecture::Table_1_40(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    if (Mode == X86_Bit_64)
    {
      rInsn.Size()++;
      rInsn.Prefix() |= X86_Prefix_REX;
      return Disassemble(rBinStrm, Offset, rInsn, Mode);
    }
    else
    {
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Inc);
      if (Operand__eAX(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        rInsn.SetUpdatedFlags(X86_FlPf | X86_FlAf | X86_FlZf | X86_FlSf | X86_FlOf);
        /* semantic: alloc_var('op1', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("op1", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: op1.val = int(op0.bit, 1) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("op1", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)));
        /* semantic: res.val = op0.val + op1.val */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpAdd,
            rInsn.GetOperand(0),
            Expr::MakeVar("op1", VariableExpression::Use))));
        /* semantic: call('overflow_flag_add') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlOf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                Expr::MakeVar("res", VariableExpression::Use)),
              Expr::MakeUnOp(
                OperationExpression::OpNot,
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  rInsn.GetOperand(0),
                  Expr::MakeVar("op1", VariableExpression::Use)))),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        /* semantic: call('sign_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlSf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        /* semantic: call('zero_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlZf, &m_CpuInfo),
          Expr::MakeTernaryCond(ConditionExpression::CondEq,
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))));
        /* semantic: call('parity_flag') */
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBitVector(1, 0x1)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlPf, &m_CpuInfo),
          Expr::MakeVar("pf_tmp", VariableExpression::Use)));
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
        /* semantic: call('adjust_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlAf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                Expr::MakeVar("op1", VariableExpression::Use)),
              Expr::MakeVar("res", VariableExpression::Use)),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))));
        /* semantic: op0.val = res.val */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("res", VariableExpression::Use)));
        /* semantic: free_var('op1') */
        AllExpr.push_back(Expr::MakeVar("op1", VariableExpression::Free));
        /* semantic: free_var('res') */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
}

/** instructions
 * opcode: 41
 *
 * mnemonic: inc
 * operand: ['eCX']
 * update_flags: ['pf', 'af', 'zf', 'sf', 'of']
 * semantic: alloc_var('op1', op0.bit);
alloc_var('res', op0.bit);
op1.val = int(op0.bit, 1);
res.val = op0.val + op1.val;
call('overflow_flag_add');
call('sign_flag');
call('zero_flag');
call('parity_flag');
call('adjust_flag');
op0.val = res.val;
free_var('op1');
free_var('res');

 *
 * mnemonic: REX_b
 * attr: ['m64']
 * constraint: pfx1
 *
**/
bool X86Architecture::Table_1_41(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    if (Mode == X86_Bit_64)
    {
      rInsn.Size()++;
      rInsn.Prefix() |= X86_Prefix_REX_b;
      return Disassemble(rBinStrm, Offset, rInsn, Mode);
    }
    else
    {
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Inc);
      if (Operand__eCX(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        rInsn.SetUpdatedFlags(X86_FlPf | X86_FlAf | X86_FlZf | X86_FlSf | X86_FlOf);
        /* semantic: alloc_var('op1', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("op1", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: op1.val = int(op0.bit, 1) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("op1", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)));
        /* semantic: res.val = op0.val + op1.val */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpAdd,
            rInsn.GetOperand(0),
            Expr::MakeVar("op1", VariableExpression::Use))));
        /* semantic: call('overflow_flag_add') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlOf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                Expr::MakeVar("res", VariableExpression::Use)),
              Expr::MakeUnOp(
                OperationExpression::OpNot,
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  rInsn.GetOperand(0),
                  Expr::MakeVar("op1", VariableExpression::Use)))),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        /* semantic: call('sign_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlSf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        /* semantic: call('zero_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlZf, &m_CpuInfo),
          Expr::MakeTernaryCond(ConditionExpression::CondEq,
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))));
        /* semantic: call('parity_flag') */
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBitVector(1, 0x1)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlPf, &m_CpuInfo),
          Expr::MakeVar("pf_tmp", VariableExpression::Use)));
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
        /* semantic: call('adjust_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlAf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                Expr::MakeVar("op1", VariableExpression::Use)),
              Expr::MakeVar("res", VariableExpression::Use)),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))));
        /* semantic: op0.val = res.val */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("res", VariableExpression::Use)));
        /* semantic: free_var('op1') */
        AllExpr.push_back(Expr::MakeVar("op1", VariableExpression::Free));
        /* semantic: free_var('res') */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
}

/** instructions
 * opcode: 42
 *
 * mnemonic: inc
 * operand: ['eDX']
 * update_flags: ['pf', 'af', 'zf', 'sf', 'of']
 * semantic: alloc_var('op1', op0.bit);
alloc_var('res', op0.bit);
op1.val = int(op0.bit, 1);
res.val = op0.val + op1.val;
call('overflow_flag_add');
call('sign_flag');
call('zero_flag');
call('parity_flag');
call('adjust_flag');
op0.val = res.val;
free_var('op1');
free_var('res');

 *
 * mnemonic: REX_x
 * attr: ['m64']
 * constraint: pfx1
 *
**/
bool X86Architecture::Table_1_42(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    if (Mode == X86_Bit_64)
    {
      rInsn.Size()++;
      rInsn.Prefix() |= X86_Prefix_REX_x;
      return Disassemble(rBinStrm, Offset, rInsn, Mode);
    }
    else
    {
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Inc);
      if (Operand__eDX(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        rInsn.SetUpdatedFlags(X86_FlPf | X86_FlAf | X86_FlZf | X86_FlSf | X86_FlOf);
        /* semantic: alloc_var('op1', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("op1", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: op1.val = int(op0.bit, 1) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("op1", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)));
        /* semantic: res.val = op0.val + op1.val */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpAdd,
            rInsn.GetOperand(0),
            Expr::MakeVar("op1", VariableExpression::Use))));
        /* semantic: call('overflow_flag_add') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlOf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                Expr::MakeVar("res", VariableExpression::Use)),
              Expr::MakeUnOp(
                OperationExpression::OpNot,
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  rInsn.GetOperand(0),
                  Expr::MakeVar("op1", VariableExpression::Use)))),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        /* semantic: call('sign_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlSf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        /* semantic: call('zero_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlZf, &m_CpuInfo),
          Expr::MakeTernaryCond(ConditionExpression::CondEq,
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))));
        /* semantic: call('parity_flag') */
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBitVector(1, 0x1)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlPf, &m_CpuInfo),
          Expr::MakeVar("pf_tmp", VariableExpression::Use)));
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
        /* semantic: call('adjust_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlAf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                Expr::MakeVar("op1", VariableExpression::Use)),
              Expr::MakeVar("res", VariableExpression::Use)),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))));
        /* semantic: op0.val = res.val */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("res", VariableExpression::Use)));
        /* semantic: free_var('op1') */
        AllExpr.push_back(Expr::MakeVar("op1", VariableExpression::Free));
        /* semantic: free_var('res') */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
}

/** instructions
 * opcode: 43
 *
 * mnemonic: inc
 * operand: ['eBX']
 * update_flags: ['pf', 'af', 'zf', 'sf', 'of']
 * semantic: alloc_var('op1', op0.bit);
alloc_var('res', op0.bit);
op1.val = int(op0.bit, 1);
res.val = op0.val + op1.val;
call('overflow_flag_add');
call('sign_flag');
call('zero_flag');
call('parity_flag');
call('adjust_flag');
op0.val = res.val;
free_var('op1');
free_var('res');

 *
 * mnemonic: REX_xb
 * attr: ['m64']
 * constraint: pfx1
 *
**/
bool X86Architecture::Table_1_43(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    if (Mode == X86_Bit_64)
    {
      rInsn.Size()++;
      rInsn.Prefix() |= X86_Prefix_REX_xb;
      return Disassemble(rBinStrm, Offset, rInsn, Mode);
    }
    else
    {
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Inc);
      if (Operand__eBX(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        rInsn.SetUpdatedFlags(X86_FlPf | X86_FlAf | X86_FlZf | X86_FlSf | X86_FlOf);
        /* semantic: alloc_var('op1', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("op1", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: op1.val = int(op0.bit, 1) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("op1", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)));
        /* semantic: res.val = op0.val + op1.val */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpAdd,
            rInsn.GetOperand(0),
            Expr::MakeVar("op1", VariableExpression::Use))));
        /* semantic: call('overflow_flag_add') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlOf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                Expr::MakeVar("res", VariableExpression::Use)),
              Expr::MakeUnOp(
                OperationExpression::OpNot,
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  rInsn.GetOperand(0),
                  Expr::MakeVar("op1", VariableExpression::Use)))),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        /* semantic: call('sign_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlSf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        /* semantic: call('zero_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlZf, &m_CpuInfo),
          Expr::MakeTernaryCond(ConditionExpression::CondEq,
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))));
        /* semantic: call('parity_flag') */
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBitVector(1, 0x1)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlPf, &m_CpuInfo),
          Expr::MakeVar("pf_tmp", VariableExpression::Use)));
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
        /* semantic: call('adjust_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlAf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                Expr::MakeVar("op1", VariableExpression::Use)),
              Expr::MakeVar("res", VariableExpression::Use)),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))));
        /* semantic: op0.val = res.val */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("res", VariableExpression::Use)));
        /* semantic: free_var('op1') */
        AllExpr.push_back(Expr::MakeVar("op1", VariableExpression::Free));
        /* semantic: free_var('res') */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
}

/** instructions
 * opcode: 44
 *
 * mnemonic: inc
 * operand: ['eSP']
 * update_flags: ['pf', 'af', 'zf', 'sf', 'of']
 * semantic: alloc_var('op1', op0.bit);
alloc_var('res', op0.bit);
op1.val = int(op0.bit, 1);
res.val = op0.val + op1.val;
call('overflow_flag_add');
call('sign_flag');
call('zero_flag');
call('parity_flag');
call('adjust_flag');
op0.val = res.val;
free_var('op1');
free_var('res');

 *
 * mnemonic: REX_r
 * attr: ['m64']
 * constraint: pfx1
 *
**/
bool X86Architecture::Table_1_44(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    if (Mode == X86_Bit_64)
    {
      rInsn.Size()++;
      rInsn.Prefix() |= X86_Prefix_REX_r;
      return Disassemble(rBinStrm, Offset, rInsn, Mode);
    }
    else
    {
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Inc);
      if (Operand__eSP(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        rInsn.SetUpdatedFlags(X86_FlPf | X86_FlAf | X86_FlZf | X86_FlSf | X86_FlOf);
        /* semantic: alloc_var('op1', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("op1", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: op1.val = int(op0.bit, 1) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("op1", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)));
        /* semantic: res.val = op0.val + op1.val */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpAdd,
            rInsn.GetOperand(0),
            Expr::MakeVar("op1", VariableExpression::Use))));
        /* semantic: call('overflow_flag_add') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlOf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                Expr::MakeVar("res", VariableExpression::Use)),
              Expr::MakeUnOp(
                OperationExpression::OpNot,
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  rInsn.GetOperand(0),
                  Expr::MakeVar("op1", VariableExpression::Use)))),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        /* semantic: call('sign_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlSf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        /* semantic: call('zero_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlZf, &m_CpuInfo),
          Expr::MakeTernaryCond(ConditionExpression::CondEq,
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))));
        /* semantic: call('parity_flag') */
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBitVector(1, 0x1)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlPf, &m_CpuInfo),
          Expr::MakeVar("pf_tmp", VariableExpression::Use)));
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
        /* semantic: call('adjust_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlAf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                Expr::MakeVar("op1", VariableExpression::Use)),
              Expr::MakeVar("res", VariableExpression::Use)),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))));
        /* semantic: op0.val = res.val */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("res", VariableExpression::Use)));
        /* semantic: free_var('op1') */
        AllExpr.push_back(Expr::MakeVar("op1", VariableExpression::Free));
        /* semantic: free_var('res') */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
}

/** instructions
 * opcode: 45
 *
 * mnemonic: inc
 * operand: ['eBP']
 * update_flags: ['pf', 'af', 'zf', 'sf', 'of']
 * semantic: alloc_var('op1', op0.bit);
alloc_var('res', op0.bit);
op1.val = int(op0.bit, 1);
res.val = op0.val + op1.val;
call('overflow_flag_add');
call('sign_flag');
call('zero_flag');
call('parity_flag');
call('adjust_flag');
op0.val = res.val;
free_var('op1');
free_var('res');

 *
 * mnemonic: REX_rb
 * attr: ['m64']
 * constraint: pfx1
 *
**/
bool X86Architecture::Table_1_45(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    if (Mode == X86_Bit_64)
    {
      rInsn.Size()++;
      rInsn.Prefix() |= X86_Prefix_REX_rb;
      return Disassemble(rBinStrm, Offset, rInsn, Mode);
    }
    else
    {
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Inc);
      if (Operand__eBP(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        rInsn.SetUpdatedFlags(X86_FlPf | X86_FlAf | X86_FlZf | X86_FlSf | X86_FlOf);
        /* semantic: alloc_var('op1', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("op1", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: op1.val = int(op0.bit, 1) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("op1", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)));
        /* semantic: res.val = op0.val + op1.val */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpAdd,
            rInsn.GetOperand(0),
            Expr::MakeVar("op1", VariableExpression::Use))));
        /* semantic: call('overflow_flag_add') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlOf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                Expr::MakeVar("res", VariableExpression::Use)),
              Expr::MakeUnOp(
                OperationExpression::OpNot,
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  rInsn.GetOperand(0),
                  Expr::MakeVar("op1", VariableExpression::Use)))),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        /* semantic: call('sign_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlSf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        /* semantic: call('zero_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlZf, &m_CpuInfo),
          Expr::MakeTernaryCond(ConditionExpression::CondEq,
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))));
        /* semantic: call('parity_flag') */
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBitVector(1, 0x1)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlPf, &m_CpuInfo),
          Expr::MakeVar("pf_tmp", VariableExpression::Use)));
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
        /* semantic: call('adjust_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlAf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                Expr::MakeVar("op1", VariableExpression::Use)),
              Expr::MakeVar("res", VariableExpression::Use)),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))));
        /* semantic: op0.val = res.val */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("res", VariableExpression::Use)));
        /* semantic: free_var('op1') */
        AllExpr.push_back(Expr::MakeVar("op1", VariableExpression::Free));
        /* semantic: free_var('res') */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
}

/** instructions
 * opcode: 46
 *
 * mnemonic: inc
 * operand: ['eSI']
 * update_flags: ['pf', 'af', 'zf', 'sf', 'of']
 * semantic: alloc_var('op1', op0.bit);
alloc_var('res', op0.bit);
op1.val = int(op0.bit, 1);
res.val = op0.val + op1.val;
call('overflow_flag_add');
call('sign_flag');
call('zero_flag');
call('parity_flag');
call('adjust_flag');
op0.val = res.val;
free_var('op1');
free_var('res');

 *
 * mnemonic: REX_rx
 * attr: ['m64']
 * constraint: pfx1
 *
**/
bool X86Architecture::Table_1_46(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    if (Mode == X86_Bit_64)
    {
      rInsn.Size()++;
      rInsn.Prefix() |= X86_Prefix_REX_rx;
      return Disassemble(rBinStrm, Offset, rInsn, Mode);
    }
    else
    {
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Inc);
      if (Operand__eSI(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        rInsn.SetUpdatedFlags(X86_FlPf | X86_FlAf | X86_FlZf | X86_FlSf | X86_FlOf);
        /* semantic: alloc_var('op1', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("op1", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: op1.val = int(op0.bit, 1) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("op1", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)));
        /* semantic: res.val = op0.val + op1.val */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpAdd,
            rInsn.GetOperand(0),
            Expr::MakeVar("op1", VariableExpression::Use))));
        /* semantic: call('overflow_flag_add') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlOf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                Expr::MakeVar("res", VariableExpression::Use)),
              Expr::MakeUnOp(
                OperationExpression::OpNot,
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  rInsn.GetOperand(0),
                  Expr::MakeVar("op1", VariableExpression::Use)))),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        /* semantic: call('sign_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlSf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        /* semantic: call('zero_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlZf, &m_CpuInfo),
          Expr::MakeTernaryCond(ConditionExpression::CondEq,
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))));
        /* semantic: call('parity_flag') */
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBitVector(1, 0x1)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlPf, &m_CpuInfo),
          Expr::MakeVar("pf_tmp", VariableExpression::Use)));
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
        /* semantic: call('adjust_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlAf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                Expr::MakeVar("op1", VariableExpression::Use)),
              Expr::MakeVar("res", VariableExpression::Use)),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))));
        /* semantic: op0.val = res.val */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("res", VariableExpression::Use)));
        /* semantic: free_var('op1') */
        AllExpr.push_back(Expr::MakeVar("op1", VariableExpression::Free));
        /* semantic: free_var('res') */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
}

/** instructions
 * opcode: 47
 *
 * mnemonic: inc
 * operand: ['eDI']
 * update_flags: ['pf', 'af', 'zf', 'sf', 'of']
 * semantic: alloc_var('op1', op0.bit);
alloc_var('res', op0.bit);
op1.val = int(op0.bit, 1);
res.val = op0.val + op1.val;
call('overflow_flag_add');
call('sign_flag');
call('zero_flag');
call('parity_flag');
call('adjust_flag');
op0.val = res.val;
free_var('op1');
free_var('res');

 *
 * mnemonic: REX_rxb
 * attr: ['m64']
 * constraint: pfx1
 *
**/
bool X86Architecture::Table_1_47(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    if (Mode == X86_Bit_64)
    {
      rInsn.Size()++;
      rInsn.Prefix() |= X86_Prefix_REX_rxb;
      return Disassemble(rBinStrm, Offset, rInsn, Mode);
    }
    else
    {
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Inc);
      if (Operand__eDI(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        rInsn.SetUpdatedFlags(X86_FlPf | X86_FlAf | X86_FlZf | X86_FlSf | X86_FlOf);
        /* semantic: alloc_var('op1', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("op1", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: op1.val = int(op0.bit, 1) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("op1", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)));
        /* semantic: res.val = op0.val + op1.val */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpAdd,
            rInsn.GetOperand(0),
            Expr::MakeVar("op1", VariableExpression::Use))));
        /* semantic: call('overflow_flag_add') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlOf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                Expr::MakeVar("res", VariableExpression::Use)),
              Expr::MakeUnOp(
                OperationExpression::OpNot,
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  rInsn.GetOperand(0),
                  Expr::MakeVar("op1", VariableExpression::Use)))),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        /* semantic: call('sign_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlSf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        /* semantic: call('zero_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlZf, &m_CpuInfo),
          Expr::MakeTernaryCond(ConditionExpression::CondEq,
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))));
        /* semantic: call('parity_flag') */
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBitVector(1, 0x1)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlPf, &m_CpuInfo),
          Expr::MakeVar("pf_tmp", VariableExpression::Use)));
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
        /* semantic: call('adjust_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlAf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                Expr::MakeVar("op1", VariableExpression::Use)),
              Expr::MakeVar("res", VariableExpression::Use)),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))));
        /* semantic: op0.val = res.val */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("res", VariableExpression::Use)));
        /* semantic: free_var('op1') */
        AllExpr.push_back(Expr::MakeVar("op1", VariableExpression::Free));
        /* semantic: free_var('res') */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
}

/** instructions
 * opcode: 48
 *
 * mnemonic: dec
 * operand: ['eAX']
 * update_flags: ['pf', 'af', 'zf', 'sf', 'of']
 * semantic: alloc_var('res', op0.bit);
alloc_var('op1', op0.bit);
op1 = int(op0.bit, 1);
res = op0.val - op1;
call('overflow_flag_sub');
call('sign_flag');
call('zero_flag');
call('parity_flag');
call('adjust_flag');
op0.val = res;
free_var('op1');
free_var('res');

 *
 * mnemonic: REX_w
 * attr: ['m64']
 * constraint: pfx1
 *
**/
bool X86Architecture::Table_1_48(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    if (Mode == X86_Bit_64)
    {
      rInsn.Size()++;
      rInsn.Prefix() |= X86_Prefix_REX_w;
      return Disassemble(rBinStrm, Offset, rInsn, Mode);
    }
    else
    {
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Dec);
      if (Operand__eAX(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        rInsn.SetUpdatedFlags(X86_FlPf | X86_FlAf | X86_FlZf | X86_FlSf | X86_FlOf);
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: alloc_var('op1', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("op1", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: op1 = int(op0.bit, 1) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("op1", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)));
        /* semantic: res = op0.val - op1 */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            rInsn.GetOperand(0),
            Expr::MakeVar("op1", VariableExpression::Use))));
        /* semantic: call('overflow_flag_sub') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlOf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                Expr::MakeVar("res", VariableExpression::Use)),
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                Expr::MakeVar("op1", VariableExpression::Use))),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        /* semantic: call('sign_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlSf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        /* semantic: call('zero_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlZf, &m_CpuInfo),
          Expr::MakeTernaryCond(ConditionExpression::CondEq,
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))));
        /* semantic: call('parity_flag') */
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBitVector(1, 0x1)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlPf, &m_CpuInfo),
          Expr::MakeVar("pf_tmp", VariableExpression::Use)));
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
        /* semantic: call('adjust_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlAf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                Expr::MakeVar("op1", VariableExpression::Use)),
              Expr::MakeVar("res", VariableExpression::Use)),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))));
        /* semantic: op0.val = res */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("res", VariableExpression::Use)));
        /* semantic: free_var('op1') */
        AllExpr.push_back(Expr::MakeVar("op1", VariableExpression::Free));
        /* semantic: free_var('res') */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
}

/** instructions
 * opcode: 49
 *
 * mnemonic: dec
 * operand: ['eCX']
 * update_flags: ['pf', 'af', 'zf', 'sf', 'of']
 * semantic: alloc_var('res', op0.bit);
alloc_var('op1', op0.bit);
op1 = int(op0.bit, 1);
res = op0.val - op1;
call('overflow_flag_sub');
call('sign_flag');
call('zero_flag');
call('parity_flag');
call('adjust_flag');
op0.val = res;
free_var('op1');
free_var('res');

 *
 * mnemonic: REX_wb
 * attr: ['m64']
 * constraint: pfx1
 *
**/
bool X86Architecture::Table_1_49(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    if (Mode == X86_Bit_64)
    {
      rInsn.Size()++;
      rInsn.Prefix() |= X86_Prefix_REX_wb;
      return Disassemble(rBinStrm, Offset, rInsn, Mode);
    }
    else
    {
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Dec);
      if (Operand__eCX(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        rInsn.SetUpdatedFlags(X86_FlPf | X86_FlAf | X86_FlZf | X86_FlSf | X86_FlOf);
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: alloc_var('op1', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("op1", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: op1 = int(op0.bit, 1) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("op1", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)));
        /* semantic: res = op0.val - op1 */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            rInsn.GetOperand(0),
            Expr::MakeVar("op1", VariableExpression::Use))));
        /* semantic: call('overflow_flag_sub') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlOf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                Expr::MakeVar("res", VariableExpression::Use)),
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                Expr::MakeVar("op1", VariableExpression::Use))),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        /* semantic: call('sign_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlSf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        /* semantic: call('zero_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlZf, &m_CpuInfo),
          Expr::MakeTernaryCond(ConditionExpression::CondEq,
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))));
        /* semantic: call('parity_flag') */
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBitVector(1, 0x1)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlPf, &m_CpuInfo),
          Expr::MakeVar("pf_tmp", VariableExpression::Use)));
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
        /* semantic: call('adjust_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlAf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                Expr::MakeVar("op1", VariableExpression::Use)),
              Expr::MakeVar("res", VariableExpression::Use)),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))));
        /* semantic: op0.val = res */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("res", VariableExpression::Use)));
        /* semantic: free_var('op1') */
        AllExpr.push_back(Expr::MakeVar("op1", VariableExpression::Free));
        /* semantic: free_var('res') */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
}

/** instructions
 * opcode: 4a
 *
 * mnemonic: dec
 * operand: ['eDX']
 * update_flags: ['pf', 'af', 'zf', 'sf', 'of']
 * semantic: alloc_var('res', op0.bit);
alloc_var('op1', op0.bit);
op1 = int(op0.bit, 1);
res = op0.val - op1;
call('overflow_flag_sub');
call('sign_flag');
call('zero_flag');
call('parity_flag');
call('adjust_flag');
op0.val = res;
free_var('op1');
free_var('res');

 *
 * mnemonic: REX_wx
 * attr: ['m64']
 * constraint: pfx1
 *
**/
bool X86Architecture::Table_1_4a(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    if (Mode == X86_Bit_64)
    {
      rInsn.Size()++;
      rInsn.Prefix() |= X86_Prefix_REX_wx;
      return Disassemble(rBinStrm, Offset, rInsn, Mode);
    }
    else
    {
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Dec);
      if (Operand__eDX(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        rInsn.SetUpdatedFlags(X86_FlPf | X86_FlAf | X86_FlZf | X86_FlSf | X86_FlOf);
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: alloc_var('op1', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("op1", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: op1 = int(op0.bit, 1) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("op1", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)));
        /* semantic: res = op0.val - op1 */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            rInsn.GetOperand(0),
            Expr::MakeVar("op1", VariableExpression::Use))));
        /* semantic: call('overflow_flag_sub') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlOf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                Expr::MakeVar("res", VariableExpression::Use)),
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                Expr::MakeVar("op1", VariableExpression::Use))),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        /* semantic: call('sign_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlSf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        /* semantic: call('zero_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlZf, &m_CpuInfo),
          Expr::MakeTernaryCond(ConditionExpression::CondEq,
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))));
        /* semantic: call('parity_flag') */
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBitVector(1, 0x1)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlPf, &m_CpuInfo),
          Expr::MakeVar("pf_tmp", VariableExpression::Use)));
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
        /* semantic: call('adjust_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlAf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                Expr::MakeVar("op1", VariableExpression::Use)),
              Expr::MakeVar("res", VariableExpression::Use)),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))));
        /* semantic: op0.val = res */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("res", VariableExpression::Use)));
        /* semantic: free_var('op1') */
        AllExpr.push_back(Expr::MakeVar("op1", VariableExpression::Free));
        /* semantic: free_var('res') */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
}

/** instructions
 * opcode: 4b
 *
 * mnemonic: dec
 * operand: ['eBX']
 * update_flags: ['pf', 'af', 'zf', 'sf', 'of']
 * semantic: alloc_var('res', op0.bit);
alloc_var('op1', op0.bit);
op1 = int(op0.bit, 1);
res = op0.val - op1;
call('overflow_flag_sub');
call('sign_flag');
call('zero_flag');
call('parity_flag');
call('adjust_flag');
op0.val = res;
free_var('op1');
free_var('res');

 *
 * mnemonic: REX_wxb
 * attr: ['m64']
 * constraint: pfx1
 *
**/
bool X86Architecture::Table_1_4b(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    if (Mode == X86_Bit_64)
    {
      rInsn.Size()++;
      rInsn.Prefix() |= X86_Prefix_REX_wxb;
      return Disassemble(rBinStrm, Offset, rInsn, Mode);
    }
    else
    {
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Dec);
      if (Operand__eBX(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        rInsn.SetUpdatedFlags(X86_FlPf | X86_FlAf | X86_FlZf | X86_FlSf | X86_FlOf);
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: alloc_var('op1', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("op1", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: op1 = int(op0.bit, 1) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("op1", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)));
        /* semantic: res = op0.val - op1 */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            rInsn.GetOperand(0),
            Expr::MakeVar("op1", VariableExpression::Use))));
        /* semantic: call('overflow_flag_sub') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlOf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                Expr::MakeVar("res", VariableExpression::Use)),
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                Expr::MakeVar("op1", VariableExpression::Use))),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        /* semantic: call('sign_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlSf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        /* semantic: call('zero_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlZf, &m_CpuInfo),
          Expr::MakeTernaryCond(ConditionExpression::CondEq,
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))));
        /* semantic: call('parity_flag') */
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBitVector(1, 0x1)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlPf, &m_CpuInfo),
          Expr::MakeVar("pf_tmp", VariableExpression::Use)));
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
        /* semantic: call('adjust_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlAf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                Expr::MakeVar("op1", VariableExpression::Use)),
              Expr::MakeVar("res", VariableExpression::Use)),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))));
        /* semantic: op0.val = res */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("res", VariableExpression::Use)));
        /* semantic: free_var('op1') */
        AllExpr.push_back(Expr::MakeVar("op1", VariableExpression::Free));
        /* semantic: free_var('res') */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
}

/** instructions
 * opcode: 4c
 *
 * mnemonic: dec
 * operand: ['eSP']
 * update_flags: ['pf', 'af', 'zf', 'sf', 'of']
 * semantic: alloc_var('res', op0.bit);
alloc_var('op1', op0.bit);
op1 = int(op0.bit, 1);
res = op0.val - op1;
call('overflow_flag_sub');
call('sign_flag');
call('zero_flag');
call('parity_flag');
call('adjust_flag');
op0.val = res;
free_var('op1');
free_var('res');

 *
 * mnemonic: REX_wr
 * attr: ['m64']
 * constraint: pfx1
 *
**/
bool X86Architecture::Table_1_4c(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    if (Mode == X86_Bit_64)
    {
      rInsn.Size()++;
      rInsn.Prefix() |= X86_Prefix_REX_wr;
      return Disassemble(rBinStrm, Offset, rInsn, Mode);
    }
    else
    {
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Dec);
      if (Operand__eSP(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        rInsn.SetUpdatedFlags(X86_FlPf | X86_FlAf | X86_FlZf | X86_FlSf | X86_FlOf);
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: alloc_var('op1', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("op1", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: op1 = int(op0.bit, 1) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("op1", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)));
        /* semantic: res = op0.val - op1 */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            rInsn.GetOperand(0),
            Expr::MakeVar("op1", VariableExpression::Use))));
        /* semantic: call('overflow_flag_sub') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlOf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                Expr::MakeVar("res", VariableExpression::Use)),
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                Expr::MakeVar("op1", VariableExpression::Use))),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        /* semantic: call('sign_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlSf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        /* semantic: call('zero_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlZf, &m_CpuInfo),
          Expr::MakeTernaryCond(ConditionExpression::CondEq,
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))));
        /* semantic: call('parity_flag') */
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBitVector(1, 0x1)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlPf, &m_CpuInfo),
          Expr::MakeVar("pf_tmp", VariableExpression::Use)));
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
        /* semantic: call('adjust_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlAf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                Expr::MakeVar("op1", VariableExpression::Use)),
              Expr::MakeVar("res", VariableExpression::Use)),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))));
        /* semantic: op0.val = res */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("res", VariableExpression::Use)));
        /* semantic: free_var('op1') */
        AllExpr.push_back(Expr::MakeVar("op1", VariableExpression::Free));
        /* semantic: free_var('res') */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
}

/** instructions
 * opcode: 4d
 *
 * mnemonic: dec
 * operand: ['eBP']
 * update_flags: ['pf', 'af', 'zf', 'sf', 'of']
 * semantic: alloc_var('res', op0.bit);
alloc_var('op1', op0.bit);
op1 = int(op0.bit, 1);
res = op0.val - op1;
call('overflow_flag_sub');
call('sign_flag');
call('zero_flag');
call('parity_flag');
call('adjust_flag');
op0.val = res;
free_var('op1');
free_var('res');

 *
 * mnemonic: REX_wrb
 * attr: ['m64']
 * constraint: pfx1
 *
**/
bool X86Architecture::Table_1_4d(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    if (Mode == X86_Bit_64)
    {
      rInsn.Size()++;
      rInsn.Prefix() |= X86_Prefix_REX_wrb;
      return Disassemble(rBinStrm, Offset, rInsn, Mode);
    }
    else
    {
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Dec);
      if (Operand__eBP(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        rInsn.SetUpdatedFlags(X86_FlPf | X86_FlAf | X86_FlZf | X86_FlSf | X86_FlOf);
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: alloc_var('op1', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("op1", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: op1 = int(op0.bit, 1) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("op1", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)));
        /* semantic: res = op0.val - op1 */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            rInsn.GetOperand(0),
            Expr::MakeVar("op1", VariableExpression::Use))));
        /* semantic: call('overflow_flag_sub') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlOf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                Expr::MakeVar("res", VariableExpression::Use)),
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                Expr::MakeVar("op1", VariableExpression::Use))),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        /* semantic: call('sign_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlSf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        /* semantic: call('zero_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlZf, &m_CpuInfo),
          Expr::MakeTernaryCond(ConditionExpression::CondEq,
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))));
        /* semantic: call('parity_flag') */
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBitVector(1, 0x1)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlPf, &m_CpuInfo),
          Expr::MakeVar("pf_tmp", VariableExpression::Use)));
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
        /* semantic: call('adjust_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlAf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                Expr::MakeVar("op1", VariableExpression::Use)),
              Expr::MakeVar("res", VariableExpression::Use)),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))));
        /* semantic: op0.val = res */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("res", VariableExpression::Use)));
        /* semantic: free_var('op1') */
        AllExpr.push_back(Expr::MakeVar("op1", VariableExpression::Free));
        /* semantic: free_var('res') */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
}

/** instructions
 * opcode: 4e
 *
 * mnemonic: dec
 * operand: ['eSI']
 * update_flags: ['pf', 'af', 'zf', 'sf', 'of']
 * semantic: alloc_var('res', op0.bit);
alloc_var('op1', op0.bit);
op1 = int(op0.bit, 1);
res = op0.val - op1;
call('overflow_flag_sub');
call('sign_flag');
call('zero_flag');
call('parity_flag');
call('adjust_flag');
op0.val = res;
free_var('op1');
free_var('res');

 *
 * mnemonic: REX_wrx
 * attr: ['m64']
 * constraint: pfx1
 *
**/
bool X86Architecture::Table_1_4e(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    if (Mode == X86_Bit_64)
    {
      rInsn.Size()++;
      rInsn.Prefix() |= X86_Prefix_REX_wrx;
      return Disassemble(rBinStrm, Offset, rInsn, Mode);
    }
    else
    {
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Dec);
      if (Operand__eSI(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        rInsn.SetUpdatedFlags(X86_FlPf | X86_FlAf | X86_FlZf | X86_FlSf | X86_FlOf);
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: alloc_var('op1', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("op1", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: op1 = int(op0.bit, 1) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("op1", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)));
        /* semantic: res = op0.val - op1 */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            rInsn.GetOperand(0),
            Expr::MakeVar("op1", VariableExpression::Use))));
        /* semantic: call('overflow_flag_sub') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlOf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                Expr::MakeVar("res", VariableExpression::Use)),
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                Expr::MakeVar("op1", VariableExpression::Use))),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        /* semantic: call('sign_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlSf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        /* semantic: call('zero_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlZf, &m_CpuInfo),
          Expr::MakeTernaryCond(ConditionExpression::CondEq,
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))));
        /* semantic: call('parity_flag') */
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBitVector(1, 0x1)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlPf, &m_CpuInfo),
          Expr::MakeVar("pf_tmp", VariableExpression::Use)));
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
        /* semantic: call('adjust_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlAf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                Expr::MakeVar("op1", VariableExpression::Use)),
              Expr::MakeVar("res", VariableExpression::Use)),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))));
        /* semantic: op0.val = res */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("res", VariableExpression::Use)));
        /* semantic: free_var('op1') */
        AllExpr.push_back(Expr::MakeVar("op1", VariableExpression::Free));
        /* semantic: free_var('res') */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
}

/** instructions
 * opcode: 4f
 *
 * mnemonic: dec
 * operand: ['eDI']
 * update_flags: ['pf', 'af', 'zf', 'sf', 'of']
 * semantic: alloc_var('res', op0.bit);
alloc_var('op1', op0.bit);
op1 = int(op0.bit, 1);
res = op0.val - op1;
call('overflow_flag_sub');
call('sign_flag');
call('zero_flag');
call('parity_flag');
call('adjust_flag');
op0.val = res;
free_var('op1');
free_var('res');

 *
 * mnemonic: REX_wrxb
 * attr: ['m64']
 * constraint: pfx1
 *
**/
bool X86Architecture::Table_1_4f(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    if (Mode == X86_Bit_64)
    {
      rInsn.Size()++;
      rInsn.Prefix() |= X86_Prefix_REX_wrxb;
      return Disassemble(rBinStrm, Offset, rInsn, Mode);
    }
    else
    {
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Dec);
      if (Operand__eDI(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        rInsn.SetUpdatedFlags(X86_FlPf | X86_FlAf | X86_FlZf | X86_FlSf | X86_FlOf);
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: alloc_var('op1', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("op1", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: op1 = int(op0.bit, 1) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("op1", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)));
        /* semantic: res = op0.val - op1 */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            rInsn.GetOperand(0),
            Expr::MakeVar("op1", VariableExpression::Use))));
        /* semantic: call('overflow_flag_sub') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlOf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                Expr::MakeVar("res", VariableExpression::Use)),
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                Expr::MakeVar("op1", VariableExpression::Use))),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        /* semantic: call('sign_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlSf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        /* semantic: call('zero_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlZf, &m_CpuInfo),
          Expr::MakeTernaryCond(ConditionExpression::CondEq,
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))));
        /* semantic: call('parity_flag') */
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBitVector(1, 0x1)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlPf, &m_CpuInfo),
          Expr::MakeVar("pf_tmp", VariableExpression::Use)));
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
        /* semantic: call('adjust_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlAf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                Expr::MakeVar("op1", VariableExpression::Use)),
              Expr::MakeVar("res", VariableExpression::Use)),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))));
        /* semantic: op0.val = res */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("res", VariableExpression::Use)));
        /* semantic: free_var('op1') */
        AllExpr.push_back(Expr::MakeVar("op1", VariableExpression::Free));
        /* semantic: free_var('res') */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
}

/** instructions
 * opcode: 50
 *
 * mnemonic: push
 * operand: ['d64_rAX']
 * semantic: alloc_var('pushed_value', stack.bit);
pushed_value = sign_extend(op0.val, int(stack.bit, stack.bit));
stack.id -= stack.size;
stack.mem = pushed_value;
free_var('pushed_value');

 * constraint: d64
 *
 * mnemonic: push
 * operand: ['d64_r8']
 * semantic: alloc_var('pushed_value', stack.bit);
pushed_value = sign_extend(op0.val, int(stack.bit, stack.bit));
stack.id -= stack.size;
stack.mem = pushed_value;
free_var('pushed_value');

 * attr: ['rexb', 'm64']
 *
**/
bool X86Architecture::Table_1_50(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    if ((rInsn.GetPrefix() & X86_Prefix_REX_b) == X86_Prefix_REX_b && Mode == X86_Bit_64)
    {
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Push);
      if (Operand__d64_r8(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('pushed_value', stack.bit) */
        AllExpr.push_back(Expr::MakeVar("pushed_value", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()))));
        /* semantic: pushed_value = sign_extend(op0.val, int(stack.bit, stack.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pushed_value", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpSext, rInsn.GetOperand(0), Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()))))));
        /* semantic: stack.id -= stack.size */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
            Expr::MakeBitVector(
              m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())),
              m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())) / 8)))
        );
        /* semantic: stack.mem = pushed_value */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeMem(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), nullptr, Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo)),
          Expr::MakeVar("pushed_value", VariableExpression::Use)));
        /* semantic: free_var('pushed_value') */
        AllExpr.push_back(Expr::MakeVar("pushed_value", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    else
    {
      if (!(rInsn.Prefix() & X86_Prefix_OpSize))
      {
        rInsn.Prefix() |= X86_Prefix_REX_w; /* d64/df64 constraint */
      }
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Push);
      if (Operand__d64_rAX(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('pushed_value', stack.bit) */
        AllExpr.push_back(Expr::MakeVar("pushed_value", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()))));
        /* semantic: pushed_value = sign_extend(op0.val, int(stack.bit, stack.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pushed_value", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpSext, rInsn.GetOperand(0), Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()))))));
        /* semantic: stack.id -= stack.size */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
            Expr::MakeBitVector(
              m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())),
              m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())) / 8)))
        );
        /* semantic: stack.mem = pushed_value */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeMem(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), nullptr, Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo)),
          Expr::MakeVar("pushed_value", VariableExpression::Use)));
        /* semantic: free_var('pushed_value') */
        AllExpr.push_back(Expr::MakeVar("pushed_value", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
}

/** instructions
 * opcode: 51
 *
 * mnemonic: push
 * operand: ['d64_rCX']
 * semantic: alloc_var('pushed_value', stack.bit);
pushed_value = sign_extend(op0.val, int(stack.bit, stack.bit));
stack.id -= stack.size;
stack.mem = pushed_value;
free_var('pushed_value');

 * constraint: d64
 *
 * mnemonic: push
 * operand: ['d64_r9']
 * semantic: alloc_var('pushed_value', stack.bit);
pushed_value = sign_extend(op0.val, int(stack.bit, stack.bit));
stack.id -= stack.size;
stack.mem = pushed_value;
free_var('pushed_value');

 * attr: ['rexb', 'm64']
 *
**/
bool X86Architecture::Table_1_51(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    if ((rInsn.GetPrefix() & X86_Prefix_REX_b) == X86_Prefix_REX_b && Mode == X86_Bit_64)
    {
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Push);
      if (Operand__d64_r9(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('pushed_value', stack.bit) */
        AllExpr.push_back(Expr::MakeVar("pushed_value", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()))));
        /* semantic: pushed_value = sign_extend(op0.val, int(stack.bit, stack.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pushed_value", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpSext, rInsn.GetOperand(0), Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()))))));
        /* semantic: stack.id -= stack.size */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
            Expr::MakeBitVector(
              m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())),
              m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())) / 8)))
        );
        /* semantic: stack.mem = pushed_value */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeMem(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), nullptr, Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo)),
          Expr::MakeVar("pushed_value", VariableExpression::Use)));
        /* semantic: free_var('pushed_value') */
        AllExpr.push_back(Expr::MakeVar("pushed_value", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    else
    {
      if (!(rInsn.Prefix() & X86_Prefix_OpSize))
      {
        rInsn.Prefix() |= X86_Prefix_REX_w; /* d64/df64 constraint */
      }
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Push);
      if (Operand__d64_rCX(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('pushed_value', stack.bit) */
        AllExpr.push_back(Expr::MakeVar("pushed_value", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()))));
        /* semantic: pushed_value = sign_extend(op0.val, int(stack.bit, stack.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pushed_value", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpSext, rInsn.GetOperand(0), Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()))))));
        /* semantic: stack.id -= stack.size */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
            Expr::MakeBitVector(
              m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())),
              m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())) / 8)))
        );
        /* semantic: stack.mem = pushed_value */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeMem(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), nullptr, Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo)),
          Expr::MakeVar("pushed_value", VariableExpression::Use)));
        /* semantic: free_var('pushed_value') */
        AllExpr.push_back(Expr::MakeVar("pushed_value", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
}

/** instructions
 * opcode: 52
 *
 * mnemonic: push
 * operand: ['d64_rDX']
 * semantic: alloc_var('pushed_value', stack.bit);
pushed_value = sign_extend(op0.val, int(stack.bit, stack.bit));
stack.id -= stack.size;
stack.mem = pushed_value;
free_var('pushed_value');

 * constraint: d64
 *
 * mnemonic: push
 * operand: ['d64_r10']
 * semantic: alloc_var('pushed_value', stack.bit);
pushed_value = sign_extend(op0.val, int(stack.bit, stack.bit));
stack.id -= stack.size;
stack.mem = pushed_value;
free_var('pushed_value');

 * attr: ['rexb', 'm64']
 *
**/
bool X86Architecture::Table_1_52(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    if ((rInsn.GetPrefix() & X86_Prefix_REX_b) == X86_Prefix_REX_b && Mode == X86_Bit_64)
    {
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Push);
      if (Operand__d64_r10(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('pushed_value', stack.bit) */
        AllExpr.push_back(Expr::MakeVar("pushed_value", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()))));
        /* semantic: pushed_value = sign_extend(op0.val, int(stack.bit, stack.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pushed_value", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpSext, rInsn.GetOperand(0), Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()))))));
        /* semantic: stack.id -= stack.size */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
            Expr::MakeBitVector(
              m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())),
              m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())) / 8)))
        );
        /* semantic: stack.mem = pushed_value */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeMem(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), nullptr, Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo)),
          Expr::MakeVar("pushed_value", VariableExpression::Use)));
        /* semantic: free_var('pushed_value') */
        AllExpr.push_back(Expr::MakeVar("pushed_value", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    else
    {
      if (!(rInsn.Prefix() & X86_Prefix_OpSize))
      {
        rInsn.Prefix() |= X86_Prefix_REX_w; /* d64/df64 constraint */
      }
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Push);
      if (Operand__d64_rDX(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('pushed_value', stack.bit) */
        AllExpr.push_back(Expr::MakeVar("pushed_value", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()))));
        /* semantic: pushed_value = sign_extend(op0.val, int(stack.bit, stack.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pushed_value", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpSext, rInsn.GetOperand(0), Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()))))));
        /* semantic: stack.id -= stack.size */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
            Expr::MakeBitVector(
              m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())),
              m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())) / 8)))
        );
        /* semantic: stack.mem = pushed_value */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeMem(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), nullptr, Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo)),
          Expr::MakeVar("pushed_value", VariableExpression::Use)));
        /* semantic: free_var('pushed_value') */
        AllExpr.push_back(Expr::MakeVar("pushed_value", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
}

/** instructions
 * opcode: 53
 *
 * mnemonic: push
 * operand: ['d64_rBX']
 * semantic: alloc_var('pushed_value', stack.bit);
pushed_value = sign_extend(op0.val, int(stack.bit, stack.bit));
stack.id -= stack.size;
stack.mem = pushed_value;
free_var('pushed_value');

 * constraint: d64
 *
 * mnemonic: push
 * operand: ['d64_r11']
 * semantic: alloc_var('pushed_value', stack.bit);
pushed_value = sign_extend(op0.val, int(stack.bit, stack.bit));
stack.id -= stack.size;
stack.mem = pushed_value;
free_var('pushed_value');

 * attr: ['rexb', 'm64']
 *
**/
bool X86Architecture::Table_1_53(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    if ((rInsn.GetPrefix() & X86_Prefix_REX_b) == X86_Prefix_REX_b && Mode == X86_Bit_64)
    {
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Push);
      if (Operand__d64_r11(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('pushed_value', stack.bit) */
        AllExpr.push_back(Expr::MakeVar("pushed_value", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()))));
        /* semantic: pushed_value = sign_extend(op0.val, int(stack.bit, stack.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pushed_value", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpSext, rInsn.GetOperand(0), Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()))))));
        /* semantic: stack.id -= stack.size */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
            Expr::MakeBitVector(
              m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())),
              m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())) / 8)))
        );
        /* semantic: stack.mem = pushed_value */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeMem(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), nullptr, Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo)),
          Expr::MakeVar("pushed_value", VariableExpression::Use)));
        /* semantic: free_var('pushed_value') */
        AllExpr.push_back(Expr::MakeVar("pushed_value", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    else
    {
      if (!(rInsn.Prefix() & X86_Prefix_OpSize))
      {
        rInsn.Prefix() |= X86_Prefix_REX_w; /* d64/df64 constraint */
      }
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Push);
      if (Operand__d64_rBX(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('pushed_value', stack.bit) */
        AllExpr.push_back(Expr::MakeVar("pushed_value", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()))));
        /* semantic: pushed_value = sign_extend(op0.val, int(stack.bit, stack.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pushed_value", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpSext, rInsn.GetOperand(0), Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()))))));
        /* semantic: stack.id -= stack.size */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
            Expr::MakeBitVector(
              m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())),
              m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())) / 8)))
        );
        /* semantic: stack.mem = pushed_value */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeMem(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), nullptr, Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo)),
          Expr::MakeVar("pushed_value", VariableExpression::Use)));
        /* semantic: free_var('pushed_value') */
        AllExpr.push_back(Expr::MakeVar("pushed_value", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
}

/** instructions
 * opcode: 54
 *
 * mnemonic: push
 * operand: ['d64_rSP']
 * semantic: alloc_var('pushed_value', stack.bit);
pushed_value = sign_extend(op0.val, int(stack.bit, stack.bit));
stack.id -= stack.size;
stack.mem = pushed_value;
free_var('pushed_value');

 * constraint: d64
 *
 * mnemonic: push
 * operand: ['d64_r12']
 * semantic: alloc_var('pushed_value', stack.bit);
pushed_value = sign_extend(op0.val, int(stack.bit, stack.bit));
stack.id -= stack.size;
stack.mem = pushed_value;
free_var('pushed_value');

 * attr: ['rexb', 'm64']
 *
**/
bool X86Architecture::Table_1_54(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    if ((rInsn.GetPrefix() & X86_Prefix_REX_b) == X86_Prefix_REX_b && Mode == X86_Bit_64)
    {
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Push);
      if (Operand__d64_r12(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('pushed_value', stack.bit) */
        AllExpr.push_back(Expr::MakeVar("pushed_value", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()))));
        /* semantic: pushed_value = sign_extend(op0.val, int(stack.bit, stack.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pushed_value", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpSext, rInsn.GetOperand(0), Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()))))));
        /* semantic: stack.id -= stack.size */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
            Expr::MakeBitVector(
              m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())),
              m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())) / 8)))
        );
        /* semantic: stack.mem = pushed_value */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeMem(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), nullptr, Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo)),
          Expr::MakeVar("pushed_value", VariableExpression::Use)));
        /* semantic: free_var('pushed_value') */
        AllExpr.push_back(Expr::MakeVar("pushed_value", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    else
    {
      if (!(rInsn.Prefix() & X86_Prefix_OpSize))
      {
        rInsn.Prefix() |= X86_Prefix_REX_w; /* d64/df64 constraint */
      }
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Push);
      if (Operand__d64_rSP(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('pushed_value', stack.bit) */
        AllExpr.push_back(Expr::MakeVar("pushed_value", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()))));
        /* semantic: pushed_value = sign_extend(op0.val, int(stack.bit, stack.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pushed_value", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpSext, rInsn.GetOperand(0), Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()))))));
        /* semantic: stack.id -= stack.size */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
            Expr::MakeBitVector(
              m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())),
              m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())) / 8)))
        );
        /* semantic: stack.mem = pushed_value */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeMem(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), nullptr, Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo)),
          Expr::MakeVar("pushed_value", VariableExpression::Use)));
        /* semantic: free_var('pushed_value') */
        AllExpr.push_back(Expr::MakeVar("pushed_value", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
}

/** instructions
 * opcode: 55
 *
 * mnemonic: push
 * operand: ['d64_rBP']
 * semantic: alloc_var('pushed_value', stack.bit);
pushed_value = sign_extend(op0.val, int(stack.bit, stack.bit));
stack.id -= stack.size;
stack.mem = pushed_value;
free_var('pushed_value');

 * constraint: d64
 *
 * mnemonic: push
 * operand: ['d64_r13']
 * semantic: alloc_var('pushed_value', stack.bit);
pushed_value = sign_extend(op0.val, int(stack.bit, stack.bit));
stack.id -= stack.size;
stack.mem = pushed_value;
free_var('pushed_value');

 * attr: ['rexb', 'm64']
 * constraint: d64
 *
**/
bool X86Architecture::Table_1_55(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    if ((rInsn.GetPrefix() & X86_Prefix_REX_b) == X86_Prefix_REX_b && Mode == X86_Bit_64)
    {
      if (!(rInsn.Prefix() & X86_Prefix_OpSize))
      {
        rInsn.Prefix() |= X86_Prefix_REX_w; /* d64/df64 constraint */
      }
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Push);
      if (Operand__d64_r13(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('pushed_value', stack.bit) */
        AllExpr.push_back(Expr::MakeVar("pushed_value", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()))));
        /* semantic: pushed_value = sign_extend(op0.val, int(stack.bit, stack.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pushed_value", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpSext, rInsn.GetOperand(0), Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()))))));
        /* semantic: stack.id -= stack.size */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
            Expr::MakeBitVector(
              m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())),
              m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())) / 8)))
        );
        /* semantic: stack.mem = pushed_value */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeMem(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), nullptr, Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo)),
          Expr::MakeVar("pushed_value", VariableExpression::Use)));
        /* semantic: free_var('pushed_value') */
        AllExpr.push_back(Expr::MakeVar("pushed_value", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    else
    {
      if (!(rInsn.Prefix() & X86_Prefix_OpSize))
      {
        rInsn.Prefix() |= X86_Prefix_REX_w; /* d64/df64 constraint */
      }
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Push);
      if (Operand__d64_rBP(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('pushed_value', stack.bit) */
        AllExpr.push_back(Expr::MakeVar("pushed_value", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()))));
        /* semantic: pushed_value = sign_extend(op0.val, int(stack.bit, stack.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pushed_value", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpSext, rInsn.GetOperand(0), Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()))))));
        /* semantic: stack.id -= stack.size */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
            Expr::MakeBitVector(
              m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())),
              m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())) / 8)))
        );
        /* semantic: stack.mem = pushed_value */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeMem(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), nullptr, Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo)),
          Expr::MakeVar("pushed_value", VariableExpression::Use)));
        /* semantic: free_var('pushed_value') */
        AllExpr.push_back(Expr::MakeVar("pushed_value", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
}

/** instructions
 * opcode: 56
 *
 * mnemonic: push
 * operand: ['d64_rSI']
 * semantic: alloc_var('pushed_value', stack.bit);
pushed_value = sign_extend(op0.val, int(stack.bit, stack.bit));
stack.id -= stack.size;
stack.mem = pushed_value;
free_var('pushed_value');

 * constraint: d64
 *
 * mnemonic: push
 * operand: ['d64_r14']
 * semantic: alloc_var('pushed_value', stack.bit);
pushed_value = sign_extend(op0.val, int(stack.bit, stack.bit));
stack.id -= stack.size;
stack.mem = pushed_value;
free_var('pushed_value');

 * attr: ['rexb', 'm64']
 * constraint: d64
 *
**/
bool X86Architecture::Table_1_56(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    if ((rInsn.GetPrefix() & X86_Prefix_REX_b) == X86_Prefix_REX_b && Mode == X86_Bit_64)
    {
      if (!(rInsn.Prefix() & X86_Prefix_OpSize))
      {
        rInsn.Prefix() |= X86_Prefix_REX_w; /* d64/df64 constraint */
      }
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Push);
      if (Operand__d64_r14(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('pushed_value', stack.bit) */
        AllExpr.push_back(Expr::MakeVar("pushed_value", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()))));
        /* semantic: pushed_value = sign_extend(op0.val, int(stack.bit, stack.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pushed_value", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpSext, rInsn.GetOperand(0), Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()))))));
        /* semantic: stack.id -= stack.size */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
            Expr::MakeBitVector(
              m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())),
              m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())) / 8)))
        );
        /* semantic: stack.mem = pushed_value */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeMem(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), nullptr, Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo)),
          Expr::MakeVar("pushed_value", VariableExpression::Use)));
        /* semantic: free_var('pushed_value') */
        AllExpr.push_back(Expr::MakeVar("pushed_value", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    else
    {
      if (!(rInsn.Prefix() & X86_Prefix_OpSize))
      {
        rInsn.Prefix() |= X86_Prefix_REX_w; /* d64/df64 constraint */
      }
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Push);
      if (Operand__d64_rSI(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('pushed_value', stack.bit) */
        AllExpr.push_back(Expr::MakeVar("pushed_value", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()))));
        /* semantic: pushed_value = sign_extend(op0.val, int(stack.bit, stack.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pushed_value", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpSext, rInsn.GetOperand(0), Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()))))));
        /* semantic: stack.id -= stack.size */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
            Expr::MakeBitVector(
              m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())),
              m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())) / 8)))
        );
        /* semantic: stack.mem = pushed_value */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeMem(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), nullptr, Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo)),
          Expr::MakeVar("pushed_value", VariableExpression::Use)));
        /* semantic: free_var('pushed_value') */
        AllExpr.push_back(Expr::MakeVar("pushed_value", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
}

/** instructions
 * opcode: 57
 *
 * mnemonic: push
 * operand: ['d64_rDI']
 * semantic: alloc_var('pushed_value', stack.bit);
pushed_value = sign_extend(op0.val, int(stack.bit, stack.bit));
stack.id -= stack.size;
stack.mem = pushed_value;
free_var('pushed_value');

 * constraint: d64
 *
 * mnemonic: push
 * operand: ['d64_r15']
 * semantic: alloc_var('pushed_value', stack.bit);
pushed_value = sign_extend(op0.val, int(stack.bit, stack.bit));
stack.id -= stack.size;
stack.mem = pushed_value;
free_var('pushed_value');

 * attr: ['rexb', 'm64']
 * constraint: d64
 *
**/
bool X86Architecture::Table_1_57(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    if ((rInsn.GetPrefix() & X86_Prefix_REX_b) == X86_Prefix_REX_b && Mode == X86_Bit_64)
    {
      if (!(rInsn.Prefix() & X86_Prefix_OpSize))
      {
        rInsn.Prefix() |= X86_Prefix_REX_w; /* d64/df64 constraint */
      }
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Push);
      if (Operand__d64_r15(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('pushed_value', stack.bit) */
        AllExpr.push_back(Expr::MakeVar("pushed_value", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()))));
        /* semantic: pushed_value = sign_extend(op0.val, int(stack.bit, stack.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pushed_value", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpSext, rInsn.GetOperand(0), Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()))))));
        /* semantic: stack.id -= stack.size */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
            Expr::MakeBitVector(
              m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())),
              m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())) / 8)))
        );
        /* semantic: stack.mem = pushed_value */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeMem(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), nullptr, Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo)),
          Expr::MakeVar("pushed_value", VariableExpression::Use)));
        /* semantic: free_var('pushed_value') */
        AllExpr.push_back(Expr::MakeVar("pushed_value", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    else
    {
      if (!(rInsn.Prefix() & X86_Prefix_OpSize))
      {
        rInsn.Prefix() |= X86_Prefix_REX_w; /* d64/df64 constraint */
      }
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Push);
      if (Operand__d64_rDI(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('pushed_value', stack.bit) */
        AllExpr.push_back(Expr::MakeVar("pushed_value", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()))));
        /* semantic: pushed_value = sign_extend(op0.val, int(stack.bit, stack.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pushed_value", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpSext, rInsn.GetOperand(0), Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()))))));
        /* semantic: stack.id -= stack.size */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
            Expr::MakeBitVector(
              m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())),
              m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())) / 8)))
        );
        /* semantic: stack.mem = pushed_value */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeMem(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), nullptr, Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo)),
          Expr::MakeVar("pushed_value", VariableExpression::Use)));
        /* semantic: free_var('pushed_value') */
        AllExpr.push_back(Expr::MakeVar("pushed_value", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
}

/** instructions
 * opcode: 58
 *
 * mnemonic: pop
 * operand: ['d64_rAX']
 * semantic: alloc_var('popped_value', stack.bit);
popped_value = stack.mem;
stack.id += stack.size;
op0.val = popped_value;
free_var('popped_value');

 * constraint: d64
 *
 * mnemonic: pop
 * operand: ['d64_r8']
 * semantic: alloc_var('popped_value', stack.bit);
popped_value = stack.mem;
stack.id += stack.size;
op0.val = popped_value;
free_var('popped_value');

 * attr: ['rexb', 'm64']
 * constraint: d64
 *
**/
bool X86Architecture::Table_1_58(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    if ((rInsn.GetPrefix() & X86_Prefix_REX_b) == X86_Prefix_REX_b && Mode == X86_Bit_64)
    {
      if (!(rInsn.Prefix() & X86_Prefix_OpSize))
      {
        rInsn.Prefix() |= X86_Prefix_REX_w; /* d64/df64 constraint */
      }
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Pop);
      if (Operand__d64_r8(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('popped_value', stack.bit) */
        AllExpr.push_back(Expr::MakeVar("popped_value", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()))));
        /* semantic: popped_value = stack.mem */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("popped_value", VariableExpression::Use),
          Expr::MakeMem(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), nullptr, Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo))));
        /* semantic: stack.id += stack.size */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeBinOp(
            OperationExpression::OpAdd,
            Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
            Expr::MakeBitVector(
              m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())),
              m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())) / 8)))
        );
        /* semantic: op0.val = popped_value */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("popped_value", VariableExpression::Use)));
        /* semantic: free_var('popped_value') */
        AllExpr.push_back(Expr::MakeVar("popped_value", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    else
    {
      if (!(rInsn.Prefix() & X86_Prefix_OpSize))
      {
        rInsn.Prefix() |= X86_Prefix_REX_w; /* d64/df64 constraint */
      }
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Pop);
      if (Operand__d64_rAX(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('popped_value', stack.bit) */
        AllExpr.push_back(Expr::MakeVar("popped_value", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()))));
        /* semantic: popped_value = stack.mem */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("popped_value", VariableExpression::Use),
          Expr::MakeMem(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), nullptr, Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo))));
        /* semantic: stack.id += stack.size */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeBinOp(
            OperationExpression::OpAdd,
            Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
            Expr::MakeBitVector(
              m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())),
              m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())) / 8)))
        );
        /* semantic: op0.val = popped_value */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("popped_value", VariableExpression::Use)));
        /* semantic: free_var('popped_value') */
        AllExpr.push_back(Expr::MakeVar("popped_value", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
}

/** instructions
 * opcode: 59
 *
 * mnemonic: pop
 * operand: ['d64_rCX']
 * semantic: alloc_var('popped_value', stack.bit);
popped_value = stack.mem;
stack.id += stack.size;
op0.val = popped_value;
free_var('popped_value');

 * constraint: d64
 *
 * mnemonic: pop
 * operand: ['d64_r9']
 * semantic: alloc_var('popped_value', stack.bit);
popped_value = stack.mem;
stack.id += stack.size;
op0.val = popped_value;
free_var('popped_value');

 * attr: ['rexb', 'm64']
 * constraint: d64
 *
**/
bool X86Architecture::Table_1_59(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    if ((rInsn.GetPrefix() & X86_Prefix_REX_b) == X86_Prefix_REX_b && Mode == X86_Bit_64)
    {
      if (!(rInsn.Prefix() & X86_Prefix_OpSize))
      {
        rInsn.Prefix() |= X86_Prefix_REX_w; /* d64/df64 constraint */
      }
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Pop);
      if (Operand__d64_r9(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('popped_value', stack.bit) */
        AllExpr.push_back(Expr::MakeVar("popped_value", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()))));
        /* semantic: popped_value = stack.mem */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("popped_value", VariableExpression::Use),
          Expr::MakeMem(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), nullptr, Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo))));
        /* semantic: stack.id += stack.size */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeBinOp(
            OperationExpression::OpAdd,
            Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
            Expr::MakeBitVector(
              m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())),
              m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())) / 8)))
        );
        /* semantic: op0.val = popped_value */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("popped_value", VariableExpression::Use)));
        /* semantic: free_var('popped_value') */
        AllExpr.push_back(Expr::MakeVar("popped_value", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    else
    {
      if (!(rInsn.Prefix() & X86_Prefix_OpSize))
      {
        rInsn.Prefix() |= X86_Prefix_REX_w; /* d64/df64 constraint */
      }
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Pop);
      if (Operand__d64_rCX(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('popped_value', stack.bit) */
        AllExpr.push_back(Expr::MakeVar("popped_value", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()))));
        /* semantic: popped_value = stack.mem */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("popped_value", VariableExpression::Use),
          Expr::MakeMem(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), nullptr, Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo))));
        /* semantic: stack.id += stack.size */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeBinOp(
            OperationExpression::OpAdd,
            Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
            Expr::MakeBitVector(
              m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())),
              m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())) / 8)))
        );
        /* semantic: op0.val = popped_value */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("popped_value", VariableExpression::Use)));
        /* semantic: free_var('popped_value') */
        AllExpr.push_back(Expr::MakeVar("popped_value", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
}

/** instructions
 * opcode: 5a
 *
 * mnemonic: pop
 * operand: ['d64_rDX']
 * semantic: alloc_var('popped_value', stack.bit);
popped_value = stack.mem;
stack.id += stack.size;
op0.val = popped_value;
free_var('popped_value');

 * constraint: d64
 *
 * mnemonic: pop
 * operand: ['d64_r10']
 * semantic: alloc_var('popped_value', stack.bit);
popped_value = stack.mem;
stack.id += stack.size;
op0.val = popped_value;
free_var('popped_value');

 * attr: ['rexb', 'm64']
 * constraint: d64
 *
**/
bool X86Architecture::Table_1_5a(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    if ((rInsn.GetPrefix() & X86_Prefix_REX_b) == X86_Prefix_REX_b && Mode == X86_Bit_64)
    {
      if (!(rInsn.Prefix() & X86_Prefix_OpSize))
      {
        rInsn.Prefix() |= X86_Prefix_REX_w; /* d64/df64 constraint */
      }
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Pop);
      if (Operand__d64_r10(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('popped_value', stack.bit) */
        AllExpr.push_back(Expr::MakeVar("popped_value", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()))));
        /* semantic: popped_value = stack.mem */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("popped_value", VariableExpression::Use),
          Expr::MakeMem(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), nullptr, Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo))));
        /* semantic: stack.id += stack.size */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeBinOp(
            OperationExpression::OpAdd,
            Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
            Expr::MakeBitVector(
              m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())),
              m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())) / 8)))
        );
        /* semantic: op0.val = popped_value */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("popped_value", VariableExpression::Use)));
        /* semantic: free_var('popped_value') */
        AllExpr.push_back(Expr::MakeVar("popped_value", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    else
    {
      if (!(rInsn.Prefix() & X86_Prefix_OpSize))
      {
        rInsn.Prefix() |= X86_Prefix_REX_w; /* d64/df64 constraint */
      }
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Pop);
      if (Operand__d64_rDX(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('popped_value', stack.bit) */
        AllExpr.push_back(Expr::MakeVar("popped_value", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()))));
        /* semantic: popped_value = stack.mem */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("popped_value", VariableExpression::Use),
          Expr::MakeMem(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), nullptr, Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo))));
        /* semantic: stack.id += stack.size */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeBinOp(
            OperationExpression::OpAdd,
            Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
            Expr::MakeBitVector(
              m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())),
              m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())) / 8)))
        );
        /* semantic: op0.val = popped_value */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("popped_value", VariableExpression::Use)));
        /* semantic: free_var('popped_value') */
        AllExpr.push_back(Expr::MakeVar("popped_value", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
}

/** instructions
 * opcode: 5b
 *
 * mnemonic: pop
 * operand: ['d64_rBX']
 * semantic: alloc_var('popped_value', stack.bit);
popped_value = stack.mem;
stack.id += stack.size;
op0.val = popped_value;
free_var('popped_value');

 * constraint: d64
 *
 * mnemonic: pop
 * operand: ['d64_r11']
 * semantic: alloc_var('popped_value', stack.bit);
popped_value = stack.mem;
stack.id += stack.size;
op0.val = popped_value;
free_var('popped_value');

 * attr: ['rexb', 'm64']
 * constraint: d64
 *
**/
bool X86Architecture::Table_1_5b(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    if ((rInsn.GetPrefix() & X86_Prefix_REX_b) == X86_Prefix_REX_b && Mode == X86_Bit_64)
    {
      if (!(rInsn.Prefix() & X86_Prefix_OpSize))
      {
        rInsn.Prefix() |= X86_Prefix_REX_w; /* d64/df64 constraint */
      }
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Pop);
      if (Operand__d64_r11(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('popped_value', stack.bit) */
        AllExpr.push_back(Expr::MakeVar("popped_value", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()))));
        /* semantic: popped_value = stack.mem */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("popped_value", VariableExpression::Use),
          Expr::MakeMem(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), nullptr, Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo))));
        /* semantic: stack.id += stack.size */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeBinOp(
            OperationExpression::OpAdd,
            Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
            Expr::MakeBitVector(
              m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())),
              m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())) / 8)))
        );
        /* semantic: op0.val = popped_value */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("popped_value", VariableExpression::Use)));
        /* semantic: free_var('popped_value') */
        AllExpr.push_back(Expr::MakeVar("popped_value", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    else
    {
      if (!(rInsn.Prefix() & X86_Prefix_OpSize))
      {
        rInsn.Prefix() |= X86_Prefix_REX_w; /* d64/df64 constraint */
      }
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Pop);
      if (Operand__d64_rBX(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('popped_value', stack.bit) */
        AllExpr.push_back(Expr::MakeVar("popped_value", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()))));
        /* semantic: popped_value = stack.mem */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("popped_value", VariableExpression::Use),
          Expr::MakeMem(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), nullptr, Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo))));
        /* semantic: stack.id += stack.size */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeBinOp(
            OperationExpression::OpAdd,
            Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
            Expr::MakeBitVector(
              m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())),
              m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())) / 8)))
        );
        /* semantic: op0.val = popped_value */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("popped_value", VariableExpression::Use)));
        /* semantic: free_var('popped_value') */
        AllExpr.push_back(Expr::MakeVar("popped_value", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
}

/** instructions
 * opcode: 5c
 *
 * mnemonic: pop
 * operand: ['d64_rSP']
 * semantic: alloc_var('popped_value', stack.bit);
popped_value = stack.mem;
stack.id += stack.size;
op0.val = popped_value;
free_var('popped_value');

 * constraint: d64
 *
 * mnemonic: pop
 * operand: ['d64_r12']
 * semantic: alloc_var('popped_value', stack.bit);
popped_value = stack.mem;
stack.id += stack.size;
op0.val = popped_value;
free_var('popped_value');

 * attr: ['rexb', 'm64']
 * constraint: d64
 *
**/
bool X86Architecture::Table_1_5c(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    if ((rInsn.GetPrefix() & X86_Prefix_REX_b) == X86_Prefix_REX_b && Mode == X86_Bit_64)
    {
      if (!(rInsn.Prefix() & X86_Prefix_OpSize))
      {
        rInsn.Prefix() |= X86_Prefix_REX_w; /* d64/df64 constraint */
      }
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Pop);
      if (Operand__d64_r12(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('popped_value', stack.bit) */
        AllExpr.push_back(Expr::MakeVar("popped_value", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()))));
        /* semantic: popped_value = stack.mem */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("popped_value", VariableExpression::Use),
          Expr::MakeMem(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), nullptr, Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo))));
        /* semantic: stack.id += stack.size */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeBinOp(
            OperationExpression::OpAdd,
            Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
            Expr::MakeBitVector(
              m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())),
              m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())) / 8)))
        );
        /* semantic: op0.val = popped_value */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("popped_value", VariableExpression::Use)));
        /* semantic: free_var('popped_value') */
        AllExpr.push_back(Expr::MakeVar("popped_value", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    else
    {
      if (!(rInsn.Prefix() & X86_Prefix_OpSize))
      {
        rInsn.Prefix() |= X86_Prefix_REX_w; /* d64/df64 constraint */
      }
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Pop);
      if (Operand__d64_rSP(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('popped_value', stack.bit) */
        AllExpr.push_back(Expr::MakeVar("popped_value", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()))));
        /* semantic: popped_value = stack.mem */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("popped_value", VariableExpression::Use),
          Expr::MakeMem(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), nullptr, Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo))));
        /* semantic: stack.id += stack.size */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeBinOp(
            OperationExpression::OpAdd,
            Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
            Expr::MakeBitVector(
              m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())),
              m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())) / 8)))
        );
        /* semantic: op0.val = popped_value */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("popped_value", VariableExpression::Use)));
        /* semantic: free_var('popped_value') */
        AllExpr.push_back(Expr::MakeVar("popped_value", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
}

/** instructions
 * opcode: 5d
 *
 * mnemonic: pop
 * operand: ['d64_rBP']
 * semantic: alloc_var('popped_value', stack.bit);
popped_value = stack.mem;
stack.id += stack.size;
op0.val = popped_value;
free_var('popped_value');

 * constraint: d64
 *
 * mnemonic: pop
 * operand: ['d64_r13']
 * semantic: alloc_var('popped_value', stack.bit);
popped_value = stack.mem;
stack.id += stack.size;
op0.val = popped_value;
free_var('popped_value');

 * attr: ['rexb', 'm64']
 * constraint: d64
 *
**/
bool X86Architecture::Table_1_5d(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    if ((rInsn.GetPrefix() & X86_Prefix_REX_b) == X86_Prefix_REX_b && Mode == X86_Bit_64)
    {
      if (!(rInsn.Prefix() & X86_Prefix_OpSize))
      {
        rInsn.Prefix() |= X86_Prefix_REX_w; /* d64/df64 constraint */
      }
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Pop);
      if (Operand__d64_r13(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('popped_value', stack.bit) */
        AllExpr.push_back(Expr::MakeVar("popped_value", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()))));
        /* semantic: popped_value = stack.mem */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("popped_value", VariableExpression::Use),
          Expr::MakeMem(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), nullptr, Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo))));
        /* semantic: stack.id += stack.size */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeBinOp(
            OperationExpression::OpAdd,
            Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
            Expr::MakeBitVector(
              m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())),
              m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())) / 8)))
        );
        /* semantic: op0.val = popped_value */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("popped_value", VariableExpression::Use)));
        /* semantic: free_var('popped_value') */
        AllExpr.push_back(Expr::MakeVar("popped_value", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    else
    {
      if (!(rInsn.Prefix() & X86_Prefix_OpSize))
      {
        rInsn.Prefix() |= X86_Prefix_REX_w; /* d64/df64 constraint */
      }
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Pop);
      if (Operand__d64_rBP(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('popped_value', stack.bit) */
        AllExpr.push_back(Expr::MakeVar("popped_value", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()))));
        /* semantic: popped_value = stack.mem */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("popped_value", VariableExpression::Use),
          Expr::MakeMem(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), nullptr, Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo))));
        /* semantic: stack.id += stack.size */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeBinOp(
            OperationExpression::OpAdd,
            Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
            Expr::MakeBitVector(
              m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())),
              m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())) / 8)))
        );
        /* semantic: op0.val = popped_value */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("popped_value", VariableExpression::Use)));
        /* semantic: free_var('popped_value') */
        AllExpr.push_back(Expr::MakeVar("popped_value", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
}

/** instructions
 * opcode: 5e
 *
 * mnemonic: pop
 * operand: ['d64_rSI']
 * semantic: alloc_var('popped_value', stack.bit);
popped_value = stack.mem;
stack.id += stack.size;
op0.val = popped_value;
free_var('popped_value');

 * constraint: d64
 *
 * mnemonic: pop
 * operand: ['d64_r14']
 * semantic: alloc_var('popped_value', stack.bit);
popped_value = stack.mem;
stack.id += stack.size;
op0.val = popped_value;
free_var('popped_value');

 * attr: ['rexb', 'm64']
 * constraint: d64
 *
**/
bool X86Architecture::Table_1_5e(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    if ((rInsn.GetPrefix() & X86_Prefix_REX_b) == X86_Prefix_REX_b && Mode == X86_Bit_64)
    {
      if (!(rInsn.Prefix() & X86_Prefix_OpSize))
      {
        rInsn.Prefix() |= X86_Prefix_REX_w; /* d64/df64 constraint */
      }
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Pop);
      if (Operand__d64_r14(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('popped_value', stack.bit) */
        AllExpr.push_back(Expr::MakeVar("popped_value", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()))));
        /* semantic: popped_value = stack.mem */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("popped_value", VariableExpression::Use),
          Expr::MakeMem(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), nullptr, Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo))));
        /* semantic: stack.id += stack.size */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeBinOp(
            OperationExpression::OpAdd,
            Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
            Expr::MakeBitVector(
              m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())),
              m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())) / 8)))
        );
        /* semantic: op0.val = popped_value */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("popped_value", VariableExpression::Use)));
        /* semantic: free_var('popped_value') */
        AllExpr.push_back(Expr::MakeVar("popped_value", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    else
    {
      if (!(rInsn.Prefix() & X86_Prefix_OpSize))
      {
        rInsn.Prefix() |= X86_Prefix_REX_w; /* d64/df64 constraint */
      }
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Pop);
      if (Operand__d64_rSI(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('popped_value', stack.bit) */
        AllExpr.push_back(Expr::MakeVar("popped_value", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()))));
        /* semantic: popped_value = stack.mem */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("popped_value", VariableExpression::Use),
          Expr::MakeMem(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), nullptr, Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo))));
        /* semantic: stack.id += stack.size */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeBinOp(
            OperationExpression::OpAdd,
            Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
            Expr::MakeBitVector(
              m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())),
              m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())) / 8)))
        );
        /* semantic: op0.val = popped_value */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("popped_value", VariableExpression::Use)));
        /* semantic: free_var('popped_value') */
        AllExpr.push_back(Expr::MakeVar("popped_value", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
}

/** instructions
 * opcode: 5f
 *
 * mnemonic: pop
 * operand: ['d64_rDI']
 * semantic: alloc_var('popped_value', stack.bit);
popped_value = stack.mem;
stack.id += stack.size;
op0.val = popped_value;
free_var('popped_value');

 * constraint: d64
 *
 * mnemonic: pop
 * operand: ['d64_r15']
 * semantic: alloc_var('popped_value', stack.bit);
popped_value = stack.mem;
stack.id += stack.size;
op0.val = popped_value;
free_var('popped_value');

 * attr: ['rexb', 'm64']
 * constraint: d64
 *
**/
bool X86Architecture::Table_1_5f(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    if ((rInsn.GetPrefix() & X86_Prefix_REX_b) == X86_Prefix_REX_b && Mode == X86_Bit_64)
    {
      if (!(rInsn.Prefix() & X86_Prefix_OpSize))
      {
        rInsn.Prefix() |= X86_Prefix_REX_w; /* d64/df64 constraint */
      }
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Pop);
      if (Operand__d64_r15(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('popped_value', stack.bit) */
        AllExpr.push_back(Expr::MakeVar("popped_value", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()))));
        /* semantic: popped_value = stack.mem */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("popped_value", VariableExpression::Use),
          Expr::MakeMem(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), nullptr, Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo))));
        /* semantic: stack.id += stack.size */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeBinOp(
            OperationExpression::OpAdd,
            Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
            Expr::MakeBitVector(
              m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())),
              m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())) / 8)))
        );
        /* semantic: op0.val = popped_value */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("popped_value", VariableExpression::Use)));
        /* semantic: free_var('popped_value') */
        AllExpr.push_back(Expr::MakeVar("popped_value", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    else
    {
      if (!(rInsn.Prefix() & X86_Prefix_OpSize))
      {
        rInsn.Prefix() |= X86_Prefix_REX_w; /* d64/df64 constraint */
      }
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Pop);
      if (Operand__d64_rDI(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('popped_value', stack.bit) */
        AllExpr.push_back(Expr::MakeVar("popped_value", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()))));
        /* semantic: popped_value = stack.mem */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("popped_value", VariableExpression::Use),
          Expr::MakeMem(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), nullptr, Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo))));
        /* semantic: stack.id += stack.size */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeBinOp(
            OperationExpression::OpAdd,
            Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
            Expr::MakeBitVector(
              m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())),
              m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())) / 8)))
        );
        /* semantic: op0.val = popped_value */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("popped_value", VariableExpression::Use)));
        /* semantic: free_var('popped_value') */
        AllExpr.push_back(Expr::MakeVar("popped_value", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
}

/** instructions
 * opcode: 60
 *
 * mnemonic: pusha
 * semantic: stack.id -= int16(2);stack.mem = ax.id;
stack.id -= int16(2);stack.mem = cx.id;
stack.id -= int16(2);stack.mem = dx.id;
stack.id -= int16(2);stack.mem = bx.id;
stack.id -= int16(2);stack.mem = sp.id + int16(8);
stack.id -= int16(2);stack.mem = bp.id;
stack.id -= int16(2);stack.mem = si.id;
stack.id -= int16(2);stack.mem = di.id;

 * attr: ['nm64']
 * cpu_model: >= X86_Arch_80186
 *
 * mnemonic: pushad
 * semantic: stack.id -= int32(4);stack.mem = eax.id;
stack.id -= int32(4);stack.mem = ecx.id;
stack.id -= int32(4);stack.mem = edx.id;
stack.id -= int32(4);stack.mem = ebx.id;
stack.id -= int32(4);stack.mem = esp.id + int32(16);
stack.id -= int32(4);stack.mem = ebp.id;
stack.id -= int32(4);stack.mem = esi.id;
stack.id -= int32(4);stack.mem = edi.id;

 * attr: ['nm64', 'na16']
 * cpu_model: >= X86_Arch_80186
 *
**/
bool X86Architecture::Table_1_60(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_80186 && Mode != X86_Bit_64 && (Mode == X86_Bit_16 && rInsn.Prefix() & X86_Prefix_AdSize) || (Mode != X86_Bit_16 && !(rInsn.Prefix() & X86_Prefix_AdSize)))
    {
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Pushad);
      {
        Expression::LSPType AllExpr;
        /* semantic: stack.id -= int32(4) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
            Expr::MakeBitVector(32, 0x4)))
        );
        /* semantic: stack.mem = eax.id */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeMem(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), nullptr, Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo)),
          Expr::MakeId(X86_Reg_Eax, &m_CpuInfo)));
        /* semantic: stack.id -= int32(4) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
            Expr::MakeBitVector(32, 0x4)))
        );
        /* semantic: stack.mem = ecx.id */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeMem(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), nullptr, Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo)),
          Expr::MakeId(X86_Reg_Ecx, &m_CpuInfo)));
        /* semantic: stack.id -= int32(4) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
            Expr::MakeBitVector(32, 0x4)))
        );
        /* semantic: stack.mem = edx.id */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeMem(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), nullptr, Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo)),
          Expr::MakeId(X86_Reg_Edx, &m_CpuInfo)));
        /* semantic: stack.id -= int32(4) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
            Expr::MakeBitVector(32, 0x4)))
        );
        /* semantic: stack.mem = ebx.id */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeMem(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), nullptr, Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo)),
          Expr::MakeId(X86_Reg_Ebx, &m_CpuInfo)));
        /* semantic: stack.id -= int32(4) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
            Expr::MakeBitVector(32, 0x4)))
        );
        /* semantic: stack.mem = esp.id + int32(16) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeMem(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), nullptr, Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo)),
          Expr::MakeBinOp(
            OperationExpression::OpAdd,
            Expr::MakeId(X86_Reg_Esp, &m_CpuInfo),
            Expr::MakeBitVector(32, 0x10))));
        /* semantic: stack.id -= int32(4) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
            Expr::MakeBitVector(32, 0x4)))
        );
        /* semantic: stack.mem = ebp.id */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeMem(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), nullptr, Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo)),
          Expr::MakeId(X86_Reg_Ebp, &m_CpuInfo)));
        /* semantic: stack.id -= int32(4) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
            Expr::MakeBitVector(32, 0x4)))
        );
        /* semantic: stack.mem = esi.id */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeMem(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), nullptr, Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo)),
          Expr::MakeId(X86_Reg_Esi, &m_CpuInfo)));
        /* semantic: stack.id -= int32(4) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
            Expr::MakeBitVector(32, 0x4)))
        );
        /* semantic: stack.mem = edi.id */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeMem(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), nullptr, Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo)),
          Expr::MakeId(X86_Reg_Edi, &m_CpuInfo)));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_80186 && Mode != X86_Bit_64)
    {
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Pusha);
      {
        Expression::LSPType AllExpr;
        /* semantic: stack.id -= int16(2) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
            Expr::MakeBitVector(16, 0x2)))
        );
        /* semantic: stack.mem = ax.id */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeMem(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), nullptr, Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo)),
          Expr::MakeId(X86_Reg_Ax, &m_CpuInfo)));
        /* semantic: stack.id -= int16(2) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
            Expr::MakeBitVector(16, 0x2)))
        );
        /* semantic: stack.mem = cx.id */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeMem(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), nullptr, Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo)),
          Expr::MakeId(X86_Reg_Cx, &m_CpuInfo)));
        /* semantic: stack.id -= int16(2) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
            Expr::MakeBitVector(16, 0x2)))
        );
        /* semantic: stack.mem = dx.id */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeMem(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), nullptr, Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo)),
          Expr::MakeId(X86_Reg_Dx, &m_CpuInfo)));
        /* semantic: stack.id -= int16(2) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
            Expr::MakeBitVector(16, 0x2)))
        );
        /* semantic: stack.mem = bx.id */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeMem(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), nullptr, Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo)),
          Expr::MakeId(X86_Reg_Bx, &m_CpuInfo)));
        /* semantic: stack.id -= int16(2) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
            Expr::MakeBitVector(16, 0x2)))
        );
        /* semantic: stack.mem = sp.id + int16(8) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeMem(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), nullptr, Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo)),
          Expr::MakeBinOp(
            OperationExpression::OpAdd,
            Expr::MakeId(X86_Reg_Sp, &m_CpuInfo),
            Expr::MakeBitVector(16, 0x8))));
        /* semantic: stack.id -= int16(2) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
            Expr::MakeBitVector(16, 0x2)))
        );
        /* semantic: stack.mem = bp.id */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeMem(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), nullptr, Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo)),
          Expr::MakeId(X86_Reg_Bp, &m_CpuInfo)));
        /* semantic: stack.id -= int16(2) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
            Expr::MakeBitVector(16, 0x2)))
        );
        /* semantic: stack.mem = si.id */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeMem(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), nullptr, Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo)),
          Expr::MakeId(X86_Reg_Si, &m_CpuInfo)));
        /* semantic: stack.id -= int16(2) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
            Expr::MakeBitVector(16, 0x2)))
        );
        /* semantic: stack.mem = di.id */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeMem(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), nullptr, Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo)),
          Expr::MakeId(X86_Reg_Di, &m_CpuInfo)));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    return false;
}

/** instructions
 * opcode: 61
 *
 * mnemonic: popa
 * semantic: di.id = stack.mem;stack.id += int16(2);
si.id = stack.mem;stack.id += int16(2);
bp.id = stack.mem;stack.id += int16(2);
sp.id = stack.mem;stack.id += int16(2);
bx.id = stack.mem;stack.id += int16(2);
dx.id = stack.mem;stack.id += int16(2);
cx.id = stack.mem;stack.id += int16(2);
ax.id = stack.mem;stack.id += int16(2);

 * attr: ['nm64']
 * cpu_model: >= X86_Arch_80186
 *
 * mnemonic: popad
 * semantic: edi.id = stack.mem;stack.id += int32(4);
esi.id = stack.mem;stack.id += int32(4);
ebp.id = stack.mem;stack.id += int32(4);
esp.id = stack.mem;stack.id += int32(4);
ebx.id = stack.mem;stack.id += int32(4);
edx.id = stack.mem;stack.id += int32(4);
ecx.id = stack.mem;stack.id += int32(4);
eax.id = stack.mem;stack.id += int32(4);

 * attr: ['nm64', 'na16']
 * cpu_model: >= X86_Arch_80186
 *
**/
bool X86Architecture::Table_1_61(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_80186 && Mode != X86_Bit_64 && (Mode == X86_Bit_16 && rInsn.Prefix() & X86_Prefix_AdSize) || (Mode != X86_Bit_16 && !(rInsn.Prefix() & X86_Prefix_AdSize)))
    {
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Popad);
      {
        Expression::LSPType AllExpr;
        /* semantic: edi.id = stack.mem */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_Reg_Edi, &m_CpuInfo),
          Expr::MakeMem(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), nullptr, Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo))));
        /* semantic: stack.id += int32(4) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeBinOp(
            OperationExpression::OpAdd,
            Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
            Expr::MakeBitVector(32, 0x4)))
        );
        /* semantic: esi.id = stack.mem */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_Reg_Esi, &m_CpuInfo),
          Expr::MakeMem(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), nullptr, Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo))));
        /* semantic: stack.id += int32(4) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeBinOp(
            OperationExpression::OpAdd,
            Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
            Expr::MakeBitVector(32, 0x4)))
        );
        /* semantic: ebp.id = stack.mem */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_Reg_Ebp, &m_CpuInfo),
          Expr::MakeMem(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), nullptr, Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo))));
        /* semantic: stack.id += int32(4) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeBinOp(
            OperationExpression::OpAdd,
            Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
            Expr::MakeBitVector(32, 0x4)))
        );
        /* semantic: esp.id = stack.mem */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_Reg_Esp, &m_CpuInfo),
          Expr::MakeMem(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), nullptr, Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo))));
        /* semantic: stack.id += int32(4) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeBinOp(
            OperationExpression::OpAdd,
            Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
            Expr::MakeBitVector(32, 0x4)))
        );
        /* semantic: ebx.id = stack.mem */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_Reg_Ebx, &m_CpuInfo),
          Expr::MakeMem(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), nullptr, Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo))));
        /* semantic: stack.id += int32(4) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeBinOp(
            OperationExpression::OpAdd,
            Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
            Expr::MakeBitVector(32, 0x4)))
        );
        /* semantic: edx.id = stack.mem */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_Reg_Edx, &m_CpuInfo),
          Expr::MakeMem(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), nullptr, Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo))));
        /* semantic: stack.id += int32(4) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeBinOp(
            OperationExpression::OpAdd,
            Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
            Expr::MakeBitVector(32, 0x4)))
        );
        /* semantic: ecx.id = stack.mem */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_Reg_Ecx, &m_CpuInfo),
          Expr::MakeMem(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), nullptr, Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo))));
        /* semantic: stack.id += int32(4) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeBinOp(
            OperationExpression::OpAdd,
            Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
            Expr::MakeBitVector(32, 0x4)))
        );
        /* semantic: eax.id = stack.mem */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_Reg_Eax, &m_CpuInfo),
          Expr::MakeMem(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), nullptr, Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo))));
        /* semantic: stack.id += int32(4) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeBinOp(
            OperationExpression::OpAdd,
            Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
            Expr::MakeBitVector(32, 0x4)))
        );
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_80186 && Mode != X86_Bit_64)
    {
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Popa);
      {
        Expression::LSPType AllExpr;
        /* semantic: di.id = stack.mem */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_Reg_Di, &m_CpuInfo),
          Expr::MakeMem(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), nullptr, Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo))));
        /* semantic: stack.id += int16(2) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeBinOp(
            OperationExpression::OpAdd,
            Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
            Expr::MakeBitVector(16, 0x2)))
        );
        /* semantic: si.id = stack.mem */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_Reg_Si, &m_CpuInfo),
          Expr::MakeMem(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), nullptr, Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo))));
        /* semantic: stack.id += int16(2) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeBinOp(
            OperationExpression::OpAdd,
            Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
            Expr::MakeBitVector(16, 0x2)))
        );
        /* semantic: bp.id = stack.mem */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_Reg_Bp, &m_CpuInfo),
          Expr::MakeMem(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), nullptr, Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo))));
        /* semantic: stack.id += int16(2) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeBinOp(
            OperationExpression::OpAdd,
            Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
            Expr::MakeBitVector(16, 0x2)))
        );
        /* semantic: sp.id = stack.mem */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_Reg_Sp, &m_CpuInfo),
          Expr::MakeMem(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), nullptr, Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo))));
        /* semantic: stack.id += int16(2) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeBinOp(
            OperationExpression::OpAdd,
            Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
            Expr::MakeBitVector(16, 0x2)))
        );
        /* semantic: bx.id = stack.mem */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_Reg_Bx, &m_CpuInfo),
          Expr::MakeMem(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), nullptr, Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo))));
        /* semantic: stack.id += int16(2) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeBinOp(
            OperationExpression::OpAdd,
            Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
            Expr::MakeBitVector(16, 0x2)))
        );
        /* semantic: dx.id = stack.mem */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_Reg_Dx, &m_CpuInfo),
          Expr::MakeMem(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), nullptr, Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo))));
        /* semantic: stack.id += int16(2) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeBinOp(
            OperationExpression::OpAdd,
            Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
            Expr::MakeBitVector(16, 0x2)))
        );
        /* semantic: cx.id = stack.mem */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_Reg_Cx, &m_CpuInfo),
          Expr::MakeMem(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), nullptr, Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo))));
        /* semantic: stack.id += int16(2) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeBinOp(
            OperationExpression::OpAdd,
            Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
            Expr::MakeBitVector(16, 0x2)))
        );
        /* semantic: ax.id = stack.mem */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_Reg_Ax, &m_CpuInfo),
          Expr::MakeMem(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), nullptr, Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo))));
        /* semantic: stack.id += int16(2) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeBinOp(
            OperationExpression::OpAdd,
            Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
            Expr::MakeBitVector(16, 0x2)))
        );
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    return false;
}

/** instruction
 * mnemonic: bound
 * opcode: 62
 * attr: ['nm64']
 * operand: ['Gv', 'Ma']
 * update_flags: ['if']
 * cpu_model: >= X86_Arch_80186
**/
bool X86Architecture::Table_1_62(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_80186 && Mode != X86_Bit_64)
    {
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Bound);
      if (Operand__Gv_Ma(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        rInsn.SetUpdatedFlags(X86_FlIf);
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    else
      return false;
}

/** instructions
 * opcode: 63
 *
 * mnemonic: arpl
 * operand: ['Ew', 'Gw']
 * update_flags: ['zf']
 * attr: ['nm64']
 * cpu_model: == X86_Arch_80286
 *
 * mnemonic: movsx
 * operand: ['Gv', 'Ed']
 * semantic: op0.val = sign_extend(op1.val, int(op0.bit, op0.bit));

 * cpu_model: >= X86_Arch_80386
 *
**/
bool X86Architecture::Table_1_63(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_80386)
    {
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Movsx);
      if (Operand__Gv_Ed(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: op0.val = sign_extend(op1.val, int(op0.bit, op0.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeBinOp(OperationExpression::OpSext, rInsn.GetOperand(1), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()))));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") == X86_Arch_80286 && Mode != X86_Bit_64)
    {
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Arpl);
      if (Operand__Ew_Gw(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        rInsn.SetUpdatedFlags(X86_FlZf);
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    return false;
}

/** instruction
 * mnemonic: FS
 * opcode: 64
 * cpu_model: >= X86_Arch_80386
 * constraint: pfx1
**/
bool X86Architecture::Table_1_64(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_80386)
    {
      rInsn.Size()++;
      rInsn.Prefix() |= X86_Prefix_FS;
      return Disassemble(rBinStrm, Offset, rInsn, Mode);
    }
    else
      return false;
}

/** instruction
 * mnemonic: GS
 * opcode: 65
 * cpu_model: >= X86_Arch_80386
 * constraint: pfx1
**/
bool X86Architecture::Table_1_65(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_80386)
    {
      rInsn.Size()++;
      rInsn.Prefix() |= X86_Prefix_GS;
      return Disassemble(rBinStrm, Offset, rInsn, Mode);
    }
    else
      return false;
}

/** instruction
 * mnemonic: OpSize
 * opcode: 66
 * cpu_model: >= X86_Arch_80386
 * constraint: pfx1
**/
bool X86Architecture::Table_1_66(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_80386)
    {
      rInsn.Size()++;
      rInsn.Prefix() |= X86_Prefix_OpSize;
      return Disassemble(rBinStrm, Offset, rInsn, Mode);
    }
    else
      return false;
}

/** instruction
 * mnemonic: AdSize
 * opcode: 67
 * cpu_model: >= X86_Arch_80386
 * constraint: pfx1
**/
bool X86Architecture::Table_1_67(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_80386)
    {
      rInsn.Size()++;
      rInsn.Prefix() |= X86_Prefix_AdSize;
      return Disassemble(rBinStrm, Offset, rInsn, Mode);
    }
    else
      return false;
}

/** instruction
 * mnemonic: push
 * semantic: alloc_var('pushed_value', stack.bit);
pushed_value = sign_extend(op0.val, int(stack.bit, stack.bit));
stack.id -= stack.size;
stack.mem = pushed_value;
free_var('pushed_value');

 * constraint: d64
 * operand: ['Iz']
 * opcode: 68
 * cpu_model: >= X86_Arch_80186
**/
bool X86Architecture::Table_1_68(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_80186)
    {
      if (!(rInsn.Prefix() & X86_Prefix_OpSize))
      {
        rInsn.Prefix() |= X86_Prefix_REX_w; /* d64/df64 constraint */
      }
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Push);
      if (Operand__Iz(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('pushed_value', stack.bit) */
        AllExpr.push_back(Expr::MakeVar("pushed_value", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()))));
        /* semantic: pushed_value = sign_extend(op0.val, int(stack.bit, stack.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pushed_value", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpSext, rInsn.GetOperand(0), Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()))))));
        /* semantic: stack.id -= stack.size */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
            Expr::MakeBitVector(
              m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())),
              m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())) / 8)))
        );
        /* semantic: stack.mem = pushed_value */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeMem(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), nullptr, Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo)),
          Expr::MakeVar("pushed_value", VariableExpression::Use)));
        /* semantic: free_var('pushed_value') */
        AllExpr.push_back(Expr::MakeVar("pushed_value", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    else
      return false;
}

/** instruction
 * mnemonic: imul
 * clear_flags: ['sf', 'zf', 'af', 'pf']
 * semantic: alloc_var('res', op0.bit);
alloc_var('mul_res', concat(op0.bit, ignore(' * 2')));
alloc_var('extended', concat(op0.bit, ignore(' * 2')));
mul_res = sign_extend(op1.val, int_type(concat(op0.bit, ignore(' * 2')))) * sign_extend(op2.val, int_type(concat(op0.bit, ignore(' * 2'))));
res = bit_cast(mul_res, int_type(op0.bit));
call('sign_flag');
extended = sign_extend(res, int_type(concat(op0.bit, ignore(' * 2'))));
if __expr and extended == mul_res:
  of.id = int1(0)
  cf.id = int1(0)
else:
  of.id = int1(1)
  cf.id = int1(1);
op0.val = res;
free_var('extended');
free_var('mul_res');
free_var('res');

 * operand: ['Gv', 'Ev', 'Iz']
 * opcode: 69
 * update_flags: ['of', 'cf']
 * cpu_model: >= X86_Arch_80186
**/
bool X86Architecture::Table_1_69(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_80186)
    {
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Imul);
      if (Operand__Gv_Ev_Iz(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        rInsn.SetUpdatedFlags(X86_FlOf | X86_FlCf);
        rInsn.SetClearedFlags(X86_FlSf | X86_FlZf | X86_FlAf | X86_FlPf);
        AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlSf, &m_CpuInfo), Expr::MakeBoolean(false)));
        AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlZf, &m_CpuInfo), Expr::MakeBoolean(false)));
        AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlAf, &m_CpuInfo), Expr::MakeBoolean(false)));
        AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlPf, &m_CpuInfo), Expr::MakeBoolean(false)));
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: alloc_var('mul_res', concat(op0.bit, ignore(' * 2'))) */
        AllExpr.push_back(Expr::MakeVar("mul_res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize() * 2));
        /* semantic: alloc_var('extended', concat(op0.bit, ignore(' * 2'))) */
        AllExpr.push_back(Expr::MakeVar("extended", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize() * 2));
        /* semantic: mul_res = sign_extend(op1.val, int_type(concat(op0.bit, ignore(' * 2')))) * sign_extend(op2.val, int_type(concat(op0.bit, ignore(' * 2')))) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("mul_res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpMul,
            Expr::MakeBinOp(OperationExpression::OpSext, rInsn.GetOperand(1), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize() * 2, rInsn.GetOperand(0)->GetBitSize() * 2)),
            Expr::MakeBinOp(OperationExpression::OpSext, rInsn.GetOperand(2), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize() * 2, rInsn.GetOperand(0)->GetBitSize() * 2)))));
        /* semantic: res = bit_cast(mul_res, int_type(op0.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeVar("mul_res", VariableExpression::Use), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()))));
        /* semantic: call('sign_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlSf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        /* semantic: extended = sign_extend(res, int_type(concat(op0.bit, ignore(' * 2')))) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("extended", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpSext, Expr::MakeVar("res", VariableExpression::Use), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize() * 2, rInsn.GetOperand(0)->GetBitSize() * 2))));
        /* semantic: if __expr and extended == mul_res:
          of.id = int1(0)
          cf.id = int1(0)
        else:
          of.id = int1(1)
          cf.id = int1(1) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeVar("extended", VariableExpression::Use),
          Expr::MakeVar("mul_res", VariableExpression::Use),
          Expr::MakeBind({
          Expr::MakeAssign(
            Expr::MakeId(X86_FlOf, &m_CpuInfo),
            Expr::MakeBitVector(1, 0x0)),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlCf, &m_CpuInfo),
            Expr::MakeBitVector(1, 0x0))})
        ,
          Expr::MakeBind({
          Expr::MakeAssign(
            Expr::MakeId(X86_FlOf, &m_CpuInfo),
            Expr::MakeBitVector(1, 0x1)),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlCf, &m_CpuInfo),
            Expr::MakeBitVector(1, 0x1))})
        ));
        /* semantic: op0.val = res */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("res", VariableExpression::Use)));
        /* semantic: free_var('extended') */
        AllExpr.push_back(Expr::MakeVar("extended", VariableExpression::Free));
        /* semantic: free_var('mul_res') */
        AllExpr.push_back(Expr::MakeVar("mul_res", VariableExpression::Free));
        /* semantic: free_var('res') */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    else
      return false;
}

/** instruction
 * mnemonic: push
 * semantic: alloc_var('pushed_value', stack.bit);
pushed_value = sign_extend(op0.val, int(stack.bit, stack.bit));
stack.id -= stack.size;
stack.mem = pushed_value;
free_var('pushed_value');

 * constraint: d64
 * operand: ['Ib']
 * opcode: 6a
 * cpu_model: >= X86_Arch_80186
**/
bool X86Architecture::Table_1_6a(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_80186)
    {
      if (!(rInsn.Prefix() & X86_Prefix_OpSize))
      {
        rInsn.Prefix() |= X86_Prefix_REX_w; /* d64/df64 constraint */
      }
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Push);
      if (Operand__Ib(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('pushed_value', stack.bit) */
        AllExpr.push_back(Expr::MakeVar("pushed_value", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()))));
        /* semantic: pushed_value = sign_extend(op0.val, int(stack.bit, stack.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pushed_value", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpSext, rInsn.GetOperand(0), Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()))))));
        /* semantic: stack.id -= stack.size */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
            Expr::MakeBitVector(
              m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())),
              m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())) / 8)))
        );
        /* semantic: stack.mem = pushed_value */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeMem(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), nullptr, Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo)),
          Expr::MakeVar("pushed_value", VariableExpression::Use)));
        /* semantic: free_var('pushed_value') */
        AllExpr.push_back(Expr::MakeVar("pushed_value", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    else
      return false;
}

/** instruction
 * mnemonic: imul
 * clear_flags: ['sf', 'zf', 'af', 'pf']
 * semantic: alloc_var('res', op0.bit);
alloc_var('mul_res', concat(op0.bit, ignore(' * 2')));
alloc_var('extended', concat(op0.bit, ignore(' * 2')));
mul_res = sign_extend(op1.val, int_type(concat(op0.bit, ignore(' * 2')))) * sign_extend(op2.val, int_type(concat(op0.bit, ignore(' * 2'))));
res = bit_cast(mul_res, int_type(op0.bit));
call('sign_flag');
extended = sign_extend(res, int_type(concat(op0.bit, ignore(' * 2'))));
if __expr and extended == mul_res:
  of.id = int1(0)
  cf.id = int1(0)
else:
  of.id = int1(1)
  cf.id = int1(1);
op0.val = res;
free_var('extended');
free_var('mul_res');
free_var('res');

 * operand: ['Gv', 'Ev', 'Ibs']
 * opcode: 6b
 * update_flags: ['of', 'cf']
 * cpu_model: >= X86_Arch_80186
**/
bool X86Architecture::Table_1_6b(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_80186)
    {
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Imul);
      if (Operand__Gv_Ev_Ibs(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        rInsn.SetUpdatedFlags(X86_FlOf | X86_FlCf);
        rInsn.SetClearedFlags(X86_FlSf | X86_FlZf | X86_FlAf | X86_FlPf);
        AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlSf, &m_CpuInfo), Expr::MakeBoolean(false)));
        AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlZf, &m_CpuInfo), Expr::MakeBoolean(false)));
        AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlAf, &m_CpuInfo), Expr::MakeBoolean(false)));
        AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlPf, &m_CpuInfo), Expr::MakeBoolean(false)));
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: alloc_var('mul_res', concat(op0.bit, ignore(' * 2'))) */
        AllExpr.push_back(Expr::MakeVar("mul_res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize() * 2));
        /* semantic: alloc_var('extended', concat(op0.bit, ignore(' * 2'))) */
        AllExpr.push_back(Expr::MakeVar("extended", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize() * 2));
        /* semantic: mul_res = sign_extend(op1.val, int_type(concat(op0.bit, ignore(' * 2')))) * sign_extend(op2.val, int_type(concat(op0.bit, ignore(' * 2')))) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("mul_res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpMul,
            Expr::MakeBinOp(OperationExpression::OpSext, rInsn.GetOperand(1), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize() * 2, rInsn.GetOperand(0)->GetBitSize() * 2)),
            Expr::MakeBinOp(OperationExpression::OpSext, rInsn.GetOperand(2), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize() * 2, rInsn.GetOperand(0)->GetBitSize() * 2)))));
        /* semantic: res = bit_cast(mul_res, int_type(op0.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeVar("mul_res", VariableExpression::Use), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()))));
        /* semantic: call('sign_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlSf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        /* semantic: extended = sign_extend(res, int_type(concat(op0.bit, ignore(' * 2')))) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("extended", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpSext, Expr::MakeVar("res", VariableExpression::Use), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize() * 2, rInsn.GetOperand(0)->GetBitSize() * 2))));
        /* semantic: if __expr and extended == mul_res:
          of.id = int1(0)
          cf.id = int1(0)
        else:
          of.id = int1(1)
          cf.id = int1(1) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeVar("extended", VariableExpression::Use),
          Expr::MakeVar("mul_res", VariableExpression::Use),
          Expr::MakeBind({
          Expr::MakeAssign(
            Expr::MakeId(X86_FlOf, &m_CpuInfo),
            Expr::MakeBitVector(1, 0x0)),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlCf, &m_CpuInfo),
            Expr::MakeBitVector(1, 0x0))})
        ,
          Expr::MakeBind({
          Expr::MakeAssign(
            Expr::MakeId(X86_FlOf, &m_CpuInfo),
            Expr::MakeBitVector(1, 0x1)),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlCf, &m_CpuInfo),
            Expr::MakeBitVector(1, 0x1))})
        ));
        /* semantic: op0.val = res */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("res", VariableExpression::Use)));
        /* semantic: free_var('extended') */
        AllExpr.push_back(Expr::MakeVar("extended", VariableExpression::Free));
        /* semantic: free_var('mul_res') */
        AllExpr.push_back(Expr::MakeVar("mul_res", VariableExpression::Free));
        /* semantic: free_var('res') */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    else
      return false;
}

/** instruction
 * mnemonic: ins
 * operand: ['Yb', 'DX']
 * test_flags: ['df']
 * opcode: 6c
 * cpu_model: >= X86_Arch_80186
**/
bool X86Architecture::Table_1_6c(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_80186)
    {
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Ins);
      if (Operand__Yb_DX(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        rInsn.SetTestedFlags(X86_FlDf);
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    else
      return false;
}

/** instruction
 * mnemonic: ins
 * operand: ['Yz', 'DX']
 * test_flags: ['df']
 * opcode: 6d
 * cpu_model: >= X86_Arch_80186
**/
bool X86Architecture::Table_1_6d(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_80186)
    {
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Ins);
      if (Operand__Yz_DX(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        rInsn.SetTestedFlags(X86_FlDf);
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    else
      return false;
}

/** instruction
 * mnemonic: outs
 * operand: ['DX', 'Xb']
 * test_flags: ['df']
 * opcode: 6e
 * cpu_model: >= X86_Arch_80186
**/
bool X86Architecture::Table_1_6e(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_80186)
    {
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Outs);
      if (Operand__DX_Xb(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        rInsn.SetTestedFlags(X86_FlDf);
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    else
      return false;
}

/** instruction
 * mnemonic: outs
 * operand: ['DX', 'Xz']
 * test_flags: ['df']
 * opcode: 6f
 * cpu_model: >= X86_Arch_80186
**/
bool X86Architecture::Table_1_6f(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_80186)
    {
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Outs);
      if (Operand__DX_Xz(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        rInsn.SetTestedFlags(X86_FlDf);
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    else
      return false;
}

/** instruction
 * mnemonic: jo
 * operand: ['Jb']
 * test_flags: ['of']
 * semantic: if __expr and of.id == int1(1): program.id = op0.val;

 * operation_type: ['jmp', 'cond']
 * opcode: 70
**/
bool X86Architecture::Table_1_70(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Size()++;
    rInsn.SetOpcode(X86_Opcode_Jo);
    rInsn.SubType() |= Instruction::JumpType | Instruction::ConditionalType;
    if (Operand__Jb(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    {
      Expression::LSPType AllExpr;
      rInsn.SetTestedFlags(X86_FlOf);
      /* semantic: if __expr and of.id == int1(1): program.id = op0.val */
      AllExpr.push_back(Expr::MakeIfElseCond(
        ConditionExpression::CondEq,
        Expr::MakeId(X86_FlOf, &m_CpuInfo),
        Expr::MakeBitVector(1, 0x1),
        Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::ProgramPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          rInsn.GetOperand(0)), nullptr)
      );
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instruction
 * mnemonic: jno
 * operand: ['Jb']
 * test_flags: ['of']
 * semantic: if __expr and of.id == int1(0): program.id = op0.val;

 * operation_type: ['jmp', 'cond']
 * opcode: 71
**/
bool X86Architecture::Table_1_71(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Size()++;
    rInsn.SetOpcode(X86_Opcode_Jno);
    rInsn.SubType() |= Instruction::JumpType | Instruction::ConditionalType;
    if (Operand__Jb(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    {
      Expression::LSPType AllExpr;
      rInsn.SetTestedFlags(X86_FlOf);
      /* semantic: if __expr and of.id == int1(0): program.id = op0.val */
      AllExpr.push_back(Expr::MakeIfElseCond(
        ConditionExpression::CondEq,
        Expr::MakeId(X86_FlOf, &m_CpuInfo),
        Expr::MakeBitVector(1, 0x0),
        Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::ProgramPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          rInsn.GetOperand(0)), nullptr)
      );
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instruction
 * mnemonic: jb
 * operand: ['Jb']
 * test_flags: ['cf']
 * semantic: if __expr and cf.id == int1(1): program.id = op0.val;

 * operation_type: ['jmp', 'cond']
 * opcode: 72
**/
bool X86Architecture::Table_1_72(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Size()++;
    rInsn.SetOpcode(X86_Opcode_Jb);
    rInsn.SubType() |= Instruction::JumpType | Instruction::ConditionalType;
    if (Operand__Jb(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    {
      Expression::LSPType AllExpr;
      rInsn.SetTestedFlags(X86_FlCf);
      /* semantic: if __expr and cf.id == int1(1): program.id = op0.val */
      AllExpr.push_back(Expr::MakeIfElseCond(
        ConditionExpression::CondEq,
        Expr::MakeId(X86_FlCf, &m_CpuInfo),
        Expr::MakeBitVector(1, 0x1),
        Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::ProgramPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          rInsn.GetOperand(0)), nullptr)
      );
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instruction
 * mnemonic: jnb
 * operand: ['Jb']
 * test_flags: ['cf']
 * semantic: if __expr and cf.id == int1(0): program.id = op0.val;

 * operation_type: ['jmp', 'cond']
 * opcode: 73
**/
bool X86Architecture::Table_1_73(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Size()++;
    rInsn.SetOpcode(X86_Opcode_Jnb);
    rInsn.SubType() |= Instruction::JumpType | Instruction::ConditionalType;
    if (Operand__Jb(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    {
      Expression::LSPType AllExpr;
      rInsn.SetTestedFlags(X86_FlCf);
      /* semantic: if __expr and cf.id == int1(0): program.id = op0.val */
      AllExpr.push_back(Expr::MakeIfElseCond(
        ConditionExpression::CondEq,
        Expr::MakeId(X86_FlCf, &m_CpuInfo),
        Expr::MakeBitVector(1, 0x0),
        Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::ProgramPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          rInsn.GetOperand(0)), nullptr)
      );
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instruction
 * mnemonic: jz
 * operand: ['Jb']
 * test_flags: ['zf']
 * semantic: if __expr and zf.id == int1(1): program.id = op0.val;

 * operation_type: ['jmp', 'cond']
 * opcode: 74
**/
bool X86Architecture::Table_1_74(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Size()++;
    rInsn.SetOpcode(X86_Opcode_Jz);
    rInsn.SubType() |= Instruction::JumpType | Instruction::ConditionalType;
    if (Operand__Jb(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    {
      Expression::LSPType AllExpr;
      rInsn.SetTestedFlags(X86_FlZf);
      /* semantic: if __expr and zf.id == int1(1): program.id = op0.val */
      AllExpr.push_back(Expr::MakeIfElseCond(
        ConditionExpression::CondEq,
        Expr::MakeId(X86_FlZf, &m_CpuInfo),
        Expr::MakeBitVector(1, 0x1),
        Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::ProgramPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          rInsn.GetOperand(0)), nullptr)
      );
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instruction
 * mnemonic: jnz
 * operand: ['Jb']
 * test_flags: ['zf']
 * semantic: if __expr and zf.id == int1(0): program.id = op0.val;

 * operation_type: ['jmp', 'cond']
 * opcode: 75
**/
bool X86Architecture::Table_1_75(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Size()++;
    rInsn.SetOpcode(X86_Opcode_Jnz);
    rInsn.SubType() |= Instruction::JumpType | Instruction::ConditionalType;
    if (Operand__Jb(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    {
      Expression::LSPType AllExpr;
      rInsn.SetTestedFlags(X86_FlZf);
      /* semantic: if __expr and zf.id == int1(0): program.id = op0.val */
      AllExpr.push_back(Expr::MakeIfElseCond(
        ConditionExpression::CondEq,
        Expr::MakeId(X86_FlZf, &m_CpuInfo),
        Expr::MakeBitVector(1, 0x0),
        Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::ProgramPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          rInsn.GetOperand(0)), nullptr)
      );
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instruction
 * mnemonic: jbe
 * operand: ['Jb']
 * test_flags: ['cf', 'zf']
 * semantic: if __expr and (cf.id | zf.id) != int1(0): program.id = op0.val;

 * operation_type: ['jmp', 'cond']
 * opcode: 76
**/
bool X86Architecture::Table_1_76(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Size()++;
    rInsn.SetOpcode(X86_Opcode_Jbe);
    rInsn.SubType() |= Instruction::JumpType | Instruction::ConditionalType;
    if (Operand__Jb(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    {
      Expression::LSPType AllExpr;
      rInsn.SetTestedFlags(X86_FlCf | X86_FlZf);
      /* semantic: if __expr and (cf.id | zf.id) != int1(0): program.id = op0.val */
      AllExpr.push_back(Expr::MakeIfElseCond(
        ConditionExpression::CondNe,
        Expr::MakeBinOp(
          OperationExpression::OpOr,
          Expr::MakeId(X86_FlCf, &m_CpuInfo),
          Expr::MakeId(X86_FlZf, &m_CpuInfo)),
        Expr::MakeBitVector(1, 0x0),
        Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::ProgramPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          rInsn.GetOperand(0)), nullptr)
      );
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instruction
 * mnemonic: jnbe
 * operand: ['Jb']
 * test_flags: ['cf', 'zf']
 * semantic: if __expr and (cf.id | zf.id) == int1(0): program.id = op0.val;

 * operation_type: ['jmp', 'cond']
 * opcode: 77
**/
bool X86Architecture::Table_1_77(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Size()++;
    rInsn.SetOpcode(X86_Opcode_Jnbe);
    rInsn.SubType() |= Instruction::JumpType | Instruction::ConditionalType;
    if (Operand__Jb(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    {
      Expression::LSPType AllExpr;
      rInsn.SetTestedFlags(X86_FlCf | X86_FlZf);
      /* semantic: if __expr and (cf.id | zf.id) == int1(0): program.id = op0.val */
      AllExpr.push_back(Expr::MakeIfElseCond(
        ConditionExpression::CondEq,
        Expr::MakeBinOp(
          OperationExpression::OpOr,
          Expr::MakeId(X86_FlCf, &m_CpuInfo),
          Expr::MakeId(X86_FlZf, &m_CpuInfo)),
        Expr::MakeBitVector(1, 0x0),
        Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::ProgramPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          rInsn.GetOperand(0)), nullptr)
      );
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instruction
 * mnemonic: js
 * operand: ['Jb']
 * test_flags: ['sf']
 * semantic: if __expr and sf.id == int1(1): program.id = op0.val;

 * operation_type: ['jmp', 'cond']
 * opcode: 78
**/
bool X86Architecture::Table_1_78(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Size()++;
    rInsn.SetOpcode(X86_Opcode_Js);
    rInsn.SubType() |= Instruction::JumpType | Instruction::ConditionalType;
    if (Operand__Jb(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    {
      Expression::LSPType AllExpr;
      rInsn.SetTestedFlags(X86_FlSf);
      /* semantic: if __expr and sf.id == int1(1): program.id = op0.val */
      AllExpr.push_back(Expr::MakeIfElseCond(
        ConditionExpression::CondEq,
        Expr::MakeId(X86_FlSf, &m_CpuInfo),
        Expr::MakeBitVector(1, 0x1),
        Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::ProgramPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          rInsn.GetOperand(0)), nullptr)
      );
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instruction
 * mnemonic: jns
 * operand: ['Jb']
 * test_flags: ['sf']
 * semantic: if __expr and sf.id == int1(0): program.id = op0.val;

 * operation_type: ['jmp', 'cond']
 * opcode: 79
**/
bool X86Architecture::Table_1_79(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Size()++;
    rInsn.SetOpcode(X86_Opcode_Jns);
    rInsn.SubType() |= Instruction::JumpType | Instruction::ConditionalType;
    if (Operand__Jb(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    {
      Expression::LSPType AllExpr;
      rInsn.SetTestedFlags(X86_FlSf);
      /* semantic: if __expr and sf.id == int1(0): program.id = op0.val */
      AllExpr.push_back(Expr::MakeIfElseCond(
        ConditionExpression::CondEq,
        Expr::MakeId(X86_FlSf, &m_CpuInfo),
        Expr::MakeBitVector(1, 0x0),
        Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::ProgramPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          rInsn.GetOperand(0)), nullptr)
      );
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instruction
 * mnemonic: jp
 * operand: ['Jb']
 * test_flags: ['pf']
 * semantic: if __expr and pf.id == int1(1): program.id = op0.val;

 * operation_type: ['jmp', 'cond']
 * opcode: 7a
**/
bool X86Architecture::Table_1_7a(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Size()++;
    rInsn.SetOpcode(X86_Opcode_Jp);
    rInsn.SubType() |= Instruction::JumpType | Instruction::ConditionalType;
    if (Operand__Jb(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    {
      Expression::LSPType AllExpr;
      rInsn.SetTestedFlags(X86_FlPf);
      /* semantic: if __expr and pf.id == int1(1): program.id = op0.val */
      AllExpr.push_back(Expr::MakeIfElseCond(
        ConditionExpression::CondEq,
        Expr::MakeId(X86_FlPf, &m_CpuInfo),
        Expr::MakeBitVector(1, 0x1),
        Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::ProgramPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          rInsn.GetOperand(0)), nullptr)
      );
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instruction
 * mnemonic: jnp
 * operand: ['Jb']
 * test_flags: ['pf']
 * semantic: if __expr and pf.id == int1(0): program.id = op0.val;

 * operation_type: ['jmp', 'cond']
 * opcode: 7b
**/
bool X86Architecture::Table_1_7b(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Size()++;
    rInsn.SetOpcode(X86_Opcode_Jnp);
    rInsn.SubType() |= Instruction::JumpType | Instruction::ConditionalType;
    if (Operand__Jb(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    {
      Expression::LSPType AllExpr;
      rInsn.SetTestedFlags(X86_FlPf);
      /* semantic: if __expr and pf.id == int1(0): program.id = op0.val */
      AllExpr.push_back(Expr::MakeIfElseCond(
        ConditionExpression::CondEq,
        Expr::MakeId(X86_FlPf, &m_CpuInfo),
        Expr::MakeBitVector(1, 0x0),
        Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::ProgramPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          rInsn.GetOperand(0)), nullptr)
      );
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instruction
 * mnemonic: jl
 * operand: ['Jb']
 * test_flags: ['of', 'sf']
 * semantic: if __expr and (sf.id ^ of.id) != int1(0): program.id = op0.val;

 * operation_type: ['jmp', 'cond']
 * opcode: 7c
**/
bool X86Architecture::Table_1_7c(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Size()++;
    rInsn.SetOpcode(X86_Opcode_Jl);
    rInsn.SubType() |= Instruction::JumpType | Instruction::ConditionalType;
    if (Operand__Jb(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    {
      Expression::LSPType AllExpr;
      rInsn.SetTestedFlags(X86_FlOf | X86_FlSf);
      /* semantic: if __expr and (sf.id ^ of.id) != int1(0): program.id = op0.val */
      AllExpr.push_back(Expr::MakeIfElseCond(
        ConditionExpression::CondNe,
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeId(X86_FlSf, &m_CpuInfo),
          Expr::MakeId(X86_FlOf, &m_CpuInfo)),
        Expr::MakeBitVector(1, 0x0),
        Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::ProgramPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          rInsn.GetOperand(0)), nullptr)
      );
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instruction
 * mnemonic: jnl
 * operand: ['Jb']
 * test_flags: ['of', 'sf']
 * semantic: if __expr and (sf.id ^ of.id) == int1(0): program.id = op0.val;

 * operation_type: ['jmp', 'cond']
 * opcode: 7d
**/
bool X86Architecture::Table_1_7d(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Size()++;
    rInsn.SetOpcode(X86_Opcode_Jnl);
    rInsn.SubType() |= Instruction::JumpType | Instruction::ConditionalType;
    if (Operand__Jb(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    {
      Expression::LSPType AllExpr;
      rInsn.SetTestedFlags(X86_FlOf | X86_FlSf);
      /* semantic: if __expr and (sf.id ^ of.id) == int1(0): program.id = op0.val */
      AllExpr.push_back(Expr::MakeIfElseCond(
        ConditionExpression::CondEq,
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeId(X86_FlSf, &m_CpuInfo),
          Expr::MakeId(X86_FlOf, &m_CpuInfo)),
        Expr::MakeBitVector(1, 0x0),
        Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::ProgramPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          rInsn.GetOperand(0)), nullptr)
      );
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instruction
 * mnemonic: jle
 * operand: ['Jb']
 * test_flags: ['of', 'sf', 'zf']
 * semantic: if __expr and ((sf.id ^ of.id) | zf.id) != int1(0): program.id = op0.val;

 * operation_type: ['jmp', 'cond']
 * opcode: 7e
**/
bool X86Architecture::Table_1_7e(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Size()++;
    rInsn.SetOpcode(X86_Opcode_Jle);
    rInsn.SubType() |= Instruction::JumpType | Instruction::ConditionalType;
    if (Operand__Jb(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    {
      Expression::LSPType AllExpr;
      rInsn.SetTestedFlags(X86_FlOf | X86_FlSf | X86_FlZf);
      /* semantic: if __expr and ((sf.id ^ of.id) | zf.id) != int1(0): program.id = op0.val */
      AllExpr.push_back(Expr::MakeIfElseCond(
        ConditionExpression::CondNe,
        Expr::MakeBinOp(
          OperationExpression::OpOr,
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeId(X86_FlSf, &m_CpuInfo),
            Expr::MakeId(X86_FlOf, &m_CpuInfo)),
          Expr::MakeId(X86_FlZf, &m_CpuInfo)),
        Expr::MakeBitVector(1, 0x0),
        Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::ProgramPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          rInsn.GetOperand(0)), nullptr)
      );
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instruction
 * mnemonic: jnle
 * operand: ['Jb']
 * test_flags: ['of', 'sf', 'zf']
 * semantic: if __expr and ((sf.id ^ of.id) | zf.id) == int1(0): program.id = op0.val;

 * operation_type: ['jmp', 'cond']
 * opcode: 7f
**/
bool X86Architecture::Table_1_7f(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Size()++;
    rInsn.SetOpcode(X86_Opcode_Jnle);
    rInsn.SubType() |= Instruction::JumpType | Instruction::ConditionalType;
    if (Operand__Jb(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    {
      Expression::LSPType AllExpr;
      rInsn.SetTestedFlags(X86_FlOf | X86_FlSf | X86_FlZf);
      /* semantic: if __expr and ((sf.id ^ of.id) | zf.id) == int1(0): program.id = op0.val */
      AllExpr.push_back(Expr::MakeIfElseCond(
        ConditionExpression::CondEq,
        Expr::MakeBinOp(
          OperationExpression::OpOr,
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeId(X86_FlSf, &m_CpuInfo),
            Expr::MakeId(X86_FlOf, &m_CpuInfo)),
          Expr::MakeId(X86_FlZf, &m_CpuInfo)),
        Expr::MakeBitVector(1, 0x0),
        Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::ProgramPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          rInsn.GetOperand(0)), nullptr)
      );
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** group:
 * mnemonic: add
 * opcode: 00
 * update_flags: ['cf', 'pf', 'af', 'zf', 'sf', 'of']
 * semantic: alloc_var('res', op0.bit);
res.val = op0.val + op1.val;
call('overflow_flag_add');
call('carry_flag_add');
call('sign_flag');
call('zero_flag');
call('parity_flag');
call('adjust_flag');
op0.val = res.val;
free_var('res');

 *
 * mnemonic: or
 * clear_flags: ['af', 'of', 'cf']
 * update_flags: ['cf', 'pf', 'af', 'zf', 'sf', 'of']
 * opcode: 01
 * semantic: alloc_var('res', op0.bit);
res = op0.val | op1.val;
of.id = int1(0)
cf.id = int1(0)
call('sign_flag')
call('zero_flag')
call('parity_flag')
op0.val = res;
free_var('res');

 *
 * mnemonic: adc
 * opcode: 02
 * test_flags: ['cf']
 * update_flags: ['cf', 'pf', 'af', 'zf', 'sf', 'of']
 * semantic: alloc_var('res', op0.bit);
res.val = op0.val + op1.val + bit_cast(cf.id, int(op0.bit, op0.bit));
call('overflow_flag_add');
call('carry_flag_add');
call('sign_flag');
call('zero_flag');
call('parity_flag');
call('adjust_flag');
op0.val = res.val;
free_var('res');

 *
 * mnemonic: sbb
 * opcode: 03
 * test_flags: ['cf']
 * update_flags: ['cf', 'pf', 'af', 'zf', 'sf', 'of']
 * semantic: alloc_var('res', op0.bit);
res = op0.val - op1.val - bit_cast(cf.id, int(op0.bit, op0.bit));
call('overflow_flag_sub');
call('carry_flag_sub');
call('sign_flag');
call('zero_flag');
call('parity_flag');
call('adjust_flag');
op0.val = res.val;
free_var('res');

 *
 * mnemonic: and
 * clear_flags: ['af', 'of', 'cf']
 * update_flags: ['cf', 'pf', 'af', 'zf', 'sf', 'of']
 * opcode: 04
 * semantic: alloc_var('res', op0.bit);
res = op0.val & op1.val;
of.id = int1(0)
cf.id = int1(0)
call('sign_flag')
call('zero_flag')
call('parity_flag')
op0.val = res;
free_var('res');

 *
 * mnemonic: sub
 * opcode: 05
 * update_flags: ['cf', 'pf', 'af', 'zf', 'sf', 'of']
 * semantic: alloc_var('res', op0.bit);
res = op0.val - op1.val;
call('overflow_flag_sub');
call('carry_flag_sub');
call('sign_flag');
call('zero_flag');
call('parity_flag');
call('adjust_flag');
op0.val = res;
free_var('res');

 *
 * mnemonic: xor
 * clear_flags: ['af', 'of', 'cf']
 * update_flags: ['cf', 'pf', 'af', 'zf', 'sf', 'of']
 * opcode: 06
 * semantic: alloc_var('res', op0.bit);
res = op0.val ^ op1.val;
of.id = int1(0)
cf.id = int1(0)
call('sign_flag')
call('zero_flag')
call('parity_flag')
op0.val = res;
free_var('res');

 *
 * mnemonic: cmp
 * opcode: 07
 * update_flags: ['cf', 'pf', 'af', 'zf', 'sf', 'of']
 * semantic: alloc_var('res', op0.bit);
res = op0.val - op1.val;
call('overflow_flag_sub');
call('carry_flag_sub');
call('sign_flag');
call('zero_flag');
call('parity_flag');
call('adjust_flag');
free_var('res');

 *
**/
bool X86Architecture::Table_1_80(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    u8 ModRmByte;
    if (!rBinStrm.Read(Offset, ModRmByte))
      return false;

    x86::ModRM ModRm(ModRmByte);
    switch (ModRm.Reg())
    {
    case 0x0:
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Add);
      if (Operand__Eb_Ib(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        rInsn.SetUpdatedFlags(X86_FlCf | X86_FlPf | X86_FlAf | X86_FlZf | X86_FlSf | X86_FlOf);
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: res.val = op0.val + op1.val */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpAdd,
            rInsn.GetOperand(0),
            rInsn.GetOperand(1))));
        /* semantic: call('overflow_flag_add') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlOf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                Expr::MakeVar("res", VariableExpression::Use)),
              Expr::MakeUnOp(
                OperationExpression::OpNot,
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  rInsn.GetOperand(0),
                  rInsn.GetOperand(1)))),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        /* semantic: call('carry_flag_add') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlCf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(
                OperationExpression::OpAnd,
                rInsn.GetOperand(0),
                rInsn.GetOperand(1)),
              Expr::MakeBinOp(
                OperationExpression::OpAnd,
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  Expr::MakeBinOp(
                    OperationExpression::OpXor,
                    rInsn.GetOperand(0),
                    rInsn.GetOperand(1)),
                  Expr::MakeVar("res", VariableExpression::Use)),
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  rInsn.GetOperand(0),
                  rInsn.GetOperand(1)))),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        /* semantic: call('sign_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlSf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        /* semantic: call('zero_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlZf, &m_CpuInfo),
          Expr::MakeTernaryCond(ConditionExpression::CondEq,
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))));
        /* semantic: call('parity_flag') */
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBitVector(1, 0x1)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlPf, &m_CpuInfo),
          Expr::MakeVar("pf_tmp", VariableExpression::Use)));
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
        /* semantic: call('adjust_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlAf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                rInsn.GetOperand(1)),
              Expr::MakeVar("res", VariableExpression::Use)),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))));
        /* semantic: op0.val = res.val */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("res", VariableExpression::Use)));
        /* semantic: free_var('res') */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x1:
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Or);
      if (Operand__Eb_Ib(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        rInsn.SetUpdatedFlags(X86_FlCf | X86_FlPf | X86_FlAf | X86_FlZf | X86_FlSf | X86_FlOf);
        rInsn.SetClearedFlags(X86_FlAf | X86_FlOf | X86_FlCf);
        AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlAf, &m_CpuInfo), Expr::MakeBoolean(false)));
        AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlOf, &m_CpuInfo), Expr::MakeBoolean(false)));
        AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlCf, &m_CpuInfo), Expr::MakeBoolean(false)));
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: res = op0.val | op1.val */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpOr,
            rInsn.GetOperand(0),
            rInsn.GetOperand(1))));
        /* semantic: of.id = int1(0)
        cf.id = int1(0)
        call('sign_flag')
        call('zero_flag')
        call('parity_flag')
        op0.val = res */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlOf, &m_CpuInfo),
          Expr::MakeBitVector(1, 0x0)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlCf, &m_CpuInfo),
          Expr::MakeBitVector(1, 0x0)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlSf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlZf, &m_CpuInfo),
          Expr::MakeTernaryCond(ConditionExpression::CondEq,
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))));
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBitVector(1, 0x1)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlPf, &m_CpuInfo),
          Expr::MakeVar("pf_tmp", VariableExpression::Use)));
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("res", VariableExpression::Use)));
        /* semantic: free_var('res') */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x2:
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Adc);
      if (Operand__Eb_Ib(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        rInsn.SetTestedFlags(X86_FlCf);
        rInsn.SetUpdatedFlags(X86_FlCf | X86_FlPf | X86_FlAf | X86_FlZf | X86_FlSf | X86_FlOf);
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: res.val = op0.val + op1.val + bit_cast(cf.id, int(op0.bit, op0.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpAdd,
            Expr::MakeBinOp(
              OperationExpression::OpAdd,
              rInsn.GetOperand(0),
              rInsn.GetOperand(1)),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeId(X86_FlCf, &m_CpuInfo), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize())))));
        /* semantic: call('overflow_flag_add') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlOf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                Expr::MakeVar("res", VariableExpression::Use)),
              Expr::MakeUnOp(
                OperationExpression::OpNot,
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  rInsn.GetOperand(0),
                  rInsn.GetOperand(1)))),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        /* semantic: call('carry_flag_add') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlCf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(
                OperationExpression::OpAnd,
                rInsn.GetOperand(0),
                rInsn.GetOperand(1)),
              Expr::MakeBinOp(
                OperationExpression::OpAnd,
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  Expr::MakeBinOp(
                    OperationExpression::OpXor,
                    rInsn.GetOperand(0),
                    rInsn.GetOperand(1)),
                  Expr::MakeVar("res", VariableExpression::Use)),
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  rInsn.GetOperand(0),
                  rInsn.GetOperand(1)))),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        /* semantic: call('sign_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlSf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        /* semantic: call('zero_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlZf, &m_CpuInfo),
          Expr::MakeTernaryCond(ConditionExpression::CondEq,
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))));
        /* semantic: call('parity_flag') */
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBitVector(1, 0x1)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlPf, &m_CpuInfo),
          Expr::MakeVar("pf_tmp", VariableExpression::Use)));
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
        /* semantic: call('adjust_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlAf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                rInsn.GetOperand(1)),
              Expr::MakeVar("res", VariableExpression::Use)),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))));
        /* semantic: op0.val = res.val */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("res", VariableExpression::Use)));
        /* semantic: free_var('res') */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x3:
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Sbb);
      if (Operand__Eb_Ib(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        rInsn.SetTestedFlags(X86_FlCf);
        rInsn.SetUpdatedFlags(X86_FlCf | X86_FlPf | X86_FlAf | X86_FlZf | X86_FlSf | X86_FlOf);
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: res = op0.val - op1.val - bit_cast(cf.id, int(op0.bit, op0.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              rInsn.GetOperand(0),
              rInsn.GetOperand(1)),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeId(X86_FlCf, &m_CpuInfo), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize())))));
        /* semantic: call('overflow_flag_sub') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlOf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                Expr::MakeVar("res", VariableExpression::Use)),
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                rInsn.GetOperand(1))),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        /* semantic: call('carry_flag_sub') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlCf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  rInsn.GetOperand(0),
                  rInsn.GetOperand(1)),
                Expr::MakeVar("res", VariableExpression::Use)),
              Expr::MakeBinOp(
                OperationExpression::OpAnd,
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  rInsn.GetOperand(0),
                  Expr::MakeVar("res", VariableExpression::Use)),
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  rInsn.GetOperand(0),
                  rInsn.GetOperand(1)))),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        /* semantic: call('sign_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlSf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        /* semantic: call('zero_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlZf, &m_CpuInfo),
          Expr::MakeTernaryCond(ConditionExpression::CondEq,
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))));
        /* semantic: call('parity_flag') */
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBitVector(1, 0x1)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlPf, &m_CpuInfo),
          Expr::MakeVar("pf_tmp", VariableExpression::Use)));
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
        /* semantic: call('adjust_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlAf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                rInsn.GetOperand(1)),
              Expr::MakeVar("res", VariableExpression::Use)),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))));
        /* semantic: op0.val = res.val */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("res", VariableExpression::Use)));
        /* semantic: free_var('res') */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x4:
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_And);
      if (Operand__Eb_Ib(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        rInsn.SetUpdatedFlags(X86_FlCf | X86_FlPf | X86_FlAf | X86_FlZf | X86_FlSf | X86_FlOf);
        rInsn.SetClearedFlags(X86_FlAf | X86_FlOf | X86_FlCf);
        AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlAf, &m_CpuInfo), Expr::MakeBoolean(false)));
        AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlOf, &m_CpuInfo), Expr::MakeBoolean(false)));
        AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlCf, &m_CpuInfo), Expr::MakeBoolean(false)));
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: res = op0.val & op1.val */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpAnd,
            rInsn.GetOperand(0),
            rInsn.GetOperand(1))));
        /* semantic: of.id = int1(0)
        cf.id = int1(0)
        call('sign_flag')
        call('zero_flag')
        call('parity_flag')
        op0.val = res */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlOf, &m_CpuInfo),
          Expr::MakeBitVector(1, 0x0)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlCf, &m_CpuInfo),
          Expr::MakeBitVector(1, 0x0)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlSf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlZf, &m_CpuInfo),
          Expr::MakeTernaryCond(ConditionExpression::CondEq,
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))));
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBitVector(1, 0x1)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlPf, &m_CpuInfo),
          Expr::MakeVar("pf_tmp", VariableExpression::Use)));
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("res", VariableExpression::Use)));
        /* semantic: free_var('res') */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x5:
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Sub);
      if (Operand__Eb_Ib(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        rInsn.SetUpdatedFlags(X86_FlCf | X86_FlPf | X86_FlAf | X86_FlZf | X86_FlSf | X86_FlOf);
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: res = op0.val - op1.val */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            rInsn.GetOperand(0),
            rInsn.GetOperand(1))));
        /* semantic: call('overflow_flag_sub') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlOf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                Expr::MakeVar("res", VariableExpression::Use)),
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                rInsn.GetOperand(1))),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        /* semantic: call('carry_flag_sub') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlCf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  rInsn.GetOperand(0),
                  rInsn.GetOperand(1)),
                Expr::MakeVar("res", VariableExpression::Use)),
              Expr::MakeBinOp(
                OperationExpression::OpAnd,
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  rInsn.GetOperand(0),
                  Expr::MakeVar("res", VariableExpression::Use)),
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  rInsn.GetOperand(0),
                  rInsn.GetOperand(1)))),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        /* semantic: call('sign_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlSf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        /* semantic: call('zero_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlZf, &m_CpuInfo),
          Expr::MakeTernaryCond(ConditionExpression::CondEq,
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))));
        /* semantic: call('parity_flag') */
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBitVector(1, 0x1)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlPf, &m_CpuInfo),
          Expr::MakeVar("pf_tmp", VariableExpression::Use)));
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
        /* semantic: call('adjust_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlAf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                rInsn.GetOperand(1)),
              Expr::MakeVar("res", VariableExpression::Use)),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))));
        /* semantic: op0.val = res */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("res", VariableExpression::Use)));
        /* semantic: free_var('res') */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x6:
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Xor);
      if (Operand__Eb_Ib(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        rInsn.SetUpdatedFlags(X86_FlCf | X86_FlPf | X86_FlAf | X86_FlZf | X86_FlSf | X86_FlOf);
        rInsn.SetClearedFlags(X86_FlAf | X86_FlOf | X86_FlCf);
        AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlAf, &m_CpuInfo), Expr::MakeBoolean(false)));
        AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlOf, &m_CpuInfo), Expr::MakeBoolean(false)));
        AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlCf, &m_CpuInfo), Expr::MakeBoolean(false)));
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: res = op0.val ^ op1.val */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            rInsn.GetOperand(0),
            rInsn.GetOperand(1))));
        /* semantic: of.id = int1(0)
        cf.id = int1(0)
        call('sign_flag')
        call('zero_flag')
        call('parity_flag')
        op0.val = res */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlOf, &m_CpuInfo),
          Expr::MakeBitVector(1, 0x0)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlCf, &m_CpuInfo),
          Expr::MakeBitVector(1, 0x0)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlSf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlZf, &m_CpuInfo),
          Expr::MakeTernaryCond(ConditionExpression::CondEq,
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))));
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBitVector(1, 0x1)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlPf, &m_CpuInfo),
          Expr::MakeVar("pf_tmp", VariableExpression::Use)));
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("res", VariableExpression::Use)));
        /* semantic: free_var('res') */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x7:
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Cmp);
      if (Operand__Eb_Ib(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        rInsn.SetUpdatedFlags(X86_FlCf | X86_FlPf | X86_FlAf | X86_FlZf | X86_FlSf | X86_FlOf);
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: res = op0.val - op1.val */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            rInsn.GetOperand(0),
            rInsn.GetOperand(1))));
        /* semantic: call('overflow_flag_sub') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlOf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                Expr::MakeVar("res", VariableExpression::Use)),
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                rInsn.GetOperand(1))),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        /* semantic: call('carry_flag_sub') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlCf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  rInsn.GetOperand(0),
                  rInsn.GetOperand(1)),
                Expr::MakeVar("res", VariableExpression::Use)),
              Expr::MakeBinOp(
                OperationExpression::OpAnd,
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  rInsn.GetOperand(0),
                  Expr::MakeVar("res", VariableExpression::Use)),
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  rInsn.GetOperand(0),
                  rInsn.GetOperand(1)))),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        /* semantic: call('sign_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlSf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        /* semantic: call('zero_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlZf, &m_CpuInfo),
          Expr::MakeTernaryCond(ConditionExpression::CondEq,
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))));
        /* semantic: call('parity_flag') */
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBitVector(1, 0x1)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlPf, &m_CpuInfo),
          Expr::MakeVar("pf_tmp", VariableExpression::Use)));
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
        /* semantic: call('adjust_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlAf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                rInsn.GetOperand(1)),
              Expr::MakeVar("res", VariableExpression::Use)),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))));
        /* semantic: free_var('res') */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    default:
      return false;
    }
}

/** group:
 * mnemonic: add
 * opcode: 00
 * operand: ['Eb', 'Ib']
 * update_flags: ['cf', 'pf', 'af', 'zf', 'sf', 'of']
 * semantic: alloc_var('res', op0.bit);
res.val = op0.val + op1.val;
call('overflow_flag_add');
call('carry_flag_add');
call('sign_flag');
call('zero_flag');
call('parity_flag');
call('adjust_flag');
op0.val = res.val;
free_var('res');

 *
 * mnemonic: or
 * semantic: alloc_var('res', op0.bit);
res = op0.val | op1.val;
of.id = int1(0)
cf.id = int1(0)
call('sign_flag')
call('zero_flag')
call('parity_flag')
op0.val = res;
free_var('res');

 * update_flags: ['cf', 'pf', 'af', 'zf', 'sf', 'of']
 * clear_flags: ['af', 'of', 'cf']
 * opcode: 01
 * operand: ['Eb', 'Ib']
 *
 * mnemonic: adc
 * semantic: alloc_var('res', op0.bit);
res.val = op0.val + op1.val + bit_cast(cf.id, int(op0.bit, op0.bit));
call('overflow_flag_add');
call('carry_flag_add');
call('sign_flag');
call('zero_flag');
call('parity_flag');
call('adjust_flag');
op0.val = res.val;
free_var('res');

 * update_flags: ['cf', 'pf', 'af', 'zf', 'sf', 'of']
 * test_flags: ['cf']
 * opcode: 02
 * operand: ['Eb', 'Ib']
 *
 * mnemonic: sbb
 * semantic: alloc_var('res', op0.bit);
res = op0.val - op1.val - bit_cast(cf.id, int(op0.bit, op0.bit));
call('overflow_flag_sub');
call('carry_flag_sub');
call('sign_flag');
call('zero_flag');
call('parity_flag');
call('adjust_flag');
op0.val = res.val;
free_var('res');

 * update_flags: ['cf', 'pf', 'af', 'zf', 'sf', 'of']
 * test_flags: ['cf']
 * opcode: 03
 * operand: ['Eb', 'Ib']
 *
 * mnemonic: and
 * semantic: alloc_var('res', op0.bit);
res = op0.val & op1.val;
of.id = int1(0)
cf.id = int1(0)
call('sign_flag')
call('zero_flag')
call('parity_flag')
op0.val = res;
free_var('res');

 * update_flags: ['cf', 'pf', 'af', 'zf', 'sf', 'of']
 * clear_flags: ['af', 'of', 'cf']
 * opcode: 04
 * operand: ['Eb', 'Ib']
 *
 * mnemonic: sub
 * opcode: 05
 * operand: ['Eb', 'Ib']
 * update_flags: ['cf', 'pf', 'af', 'zf', 'sf', 'of']
 * semantic: alloc_var('res', op0.bit);
res = op0.val - op1.val;
call('overflow_flag_sub');
call('carry_flag_sub');
call('sign_flag');
call('zero_flag');
call('parity_flag');
call('adjust_flag');
op0.val = res;
free_var('res');

 *
 * mnemonic: xor
 * semantic: alloc_var('res', op0.bit);
res = op0.val ^ op1.val;
of.id = int1(0)
cf.id = int1(0)
call('sign_flag')
call('zero_flag')
call('parity_flag')
op0.val = res;
free_var('res');

 * update_flags: ['cf', 'pf', 'af', 'zf', 'sf', 'of']
 * clear_flags: ['af', 'of', 'cf']
 * opcode: 06
 * operand: ['Eb', 'Ib']
 *
 * mnemonic: cmp
 * opcode: 07
 * operand: ['Eb', 'Ib']
 * update_flags: ['cf', 'pf', 'af', 'zf', 'sf', 'of']
 * semantic: alloc_var('res', op0.bit);
res = op0.val - op1.val;
call('overflow_flag_sub');
call('carry_flag_sub');
call('sign_flag');
call('zero_flag');
call('parity_flag');
call('adjust_flag');
free_var('res');

 *
**/
bool X86Architecture::Table_1_81(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    u8 ModRmByte;
    if (!rBinStrm.Read(Offset, ModRmByte))
      return false;

    x86::ModRM ModRm(ModRmByte);
    switch (ModRm.Reg())
    {
    case 0x0:
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Add);
      if (Operand__Ev_Iz(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        rInsn.SetUpdatedFlags(X86_FlCf | X86_FlPf | X86_FlAf | X86_FlZf | X86_FlSf | X86_FlOf);
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: res.val = op0.val + op1.val */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpAdd,
            rInsn.GetOperand(0),
            rInsn.GetOperand(1))));
        /* semantic: call('overflow_flag_add') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlOf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                Expr::MakeVar("res", VariableExpression::Use)),
              Expr::MakeUnOp(
                OperationExpression::OpNot,
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  rInsn.GetOperand(0),
                  rInsn.GetOperand(1)))),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        /* semantic: call('carry_flag_add') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlCf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(
                OperationExpression::OpAnd,
                rInsn.GetOperand(0),
                rInsn.GetOperand(1)),
              Expr::MakeBinOp(
                OperationExpression::OpAnd,
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  Expr::MakeBinOp(
                    OperationExpression::OpXor,
                    rInsn.GetOperand(0),
                    rInsn.GetOperand(1)),
                  Expr::MakeVar("res", VariableExpression::Use)),
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  rInsn.GetOperand(0),
                  rInsn.GetOperand(1)))),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        /* semantic: call('sign_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlSf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        /* semantic: call('zero_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlZf, &m_CpuInfo),
          Expr::MakeTernaryCond(ConditionExpression::CondEq,
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))));
        /* semantic: call('parity_flag') */
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBitVector(1, 0x1)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlPf, &m_CpuInfo),
          Expr::MakeVar("pf_tmp", VariableExpression::Use)));
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
        /* semantic: call('adjust_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlAf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                rInsn.GetOperand(1)),
              Expr::MakeVar("res", VariableExpression::Use)),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))));
        /* semantic: op0.val = res.val */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("res", VariableExpression::Use)));
        /* semantic: free_var('res') */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x1:
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Or);
      if (Operand__Ev_Iz(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        rInsn.SetUpdatedFlags(X86_FlCf | X86_FlPf | X86_FlAf | X86_FlZf | X86_FlSf | X86_FlOf);
        rInsn.SetClearedFlags(X86_FlAf | X86_FlOf | X86_FlCf);
        AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlAf, &m_CpuInfo), Expr::MakeBoolean(false)));
        AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlOf, &m_CpuInfo), Expr::MakeBoolean(false)));
        AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlCf, &m_CpuInfo), Expr::MakeBoolean(false)));
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: res = op0.val | op1.val */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpOr,
            rInsn.GetOperand(0),
            rInsn.GetOperand(1))));
        /* semantic: of.id = int1(0)
        cf.id = int1(0)
        call('sign_flag')
        call('zero_flag')
        call('parity_flag')
        op0.val = res */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlOf, &m_CpuInfo),
          Expr::MakeBitVector(1, 0x0)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlCf, &m_CpuInfo),
          Expr::MakeBitVector(1, 0x0)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlSf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlZf, &m_CpuInfo),
          Expr::MakeTernaryCond(ConditionExpression::CondEq,
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))));
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBitVector(1, 0x1)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlPf, &m_CpuInfo),
          Expr::MakeVar("pf_tmp", VariableExpression::Use)));
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("res", VariableExpression::Use)));
        /* semantic: free_var('res') */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x2:
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Adc);
      if (Operand__Ev_Iz(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        rInsn.SetTestedFlags(X86_FlCf);
        rInsn.SetUpdatedFlags(X86_FlCf | X86_FlPf | X86_FlAf | X86_FlZf | X86_FlSf | X86_FlOf);
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: res.val = op0.val + op1.val + bit_cast(cf.id, int(op0.bit, op0.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpAdd,
            Expr::MakeBinOp(
              OperationExpression::OpAdd,
              rInsn.GetOperand(0),
              rInsn.GetOperand(1)),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeId(X86_FlCf, &m_CpuInfo), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize())))));
        /* semantic: call('overflow_flag_add') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlOf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                Expr::MakeVar("res", VariableExpression::Use)),
              Expr::MakeUnOp(
                OperationExpression::OpNot,
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  rInsn.GetOperand(0),
                  rInsn.GetOperand(1)))),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        /* semantic: call('carry_flag_add') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlCf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(
                OperationExpression::OpAnd,
                rInsn.GetOperand(0),
                rInsn.GetOperand(1)),
              Expr::MakeBinOp(
                OperationExpression::OpAnd,
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  Expr::MakeBinOp(
                    OperationExpression::OpXor,
                    rInsn.GetOperand(0),
                    rInsn.GetOperand(1)),
                  Expr::MakeVar("res", VariableExpression::Use)),
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  rInsn.GetOperand(0),
                  rInsn.GetOperand(1)))),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        /* semantic: call('sign_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlSf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        /* semantic: call('zero_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlZf, &m_CpuInfo),
          Expr::MakeTernaryCond(ConditionExpression::CondEq,
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))));
        /* semantic: call('parity_flag') */
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBitVector(1, 0x1)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlPf, &m_CpuInfo),
          Expr::MakeVar("pf_tmp", VariableExpression::Use)));
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
        /* semantic: call('adjust_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlAf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                rInsn.GetOperand(1)),
              Expr::MakeVar("res", VariableExpression::Use)),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))));
        /* semantic: op0.val = res.val */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("res", VariableExpression::Use)));
        /* semantic: free_var('res') */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x3:
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Sbb);
      if (Operand__Ev_Iz(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        rInsn.SetTestedFlags(X86_FlCf);
        rInsn.SetUpdatedFlags(X86_FlCf | X86_FlPf | X86_FlAf | X86_FlZf | X86_FlSf | X86_FlOf);
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: res = op0.val - op1.val - bit_cast(cf.id, int(op0.bit, op0.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              rInsn.GetOperand(0),
              rInsn.GetOperand(1)),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeId(X86_FlCf, &m_CpuInfo), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize())))));
        /* semantic: call('overflow_flag_sub') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlOf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                Expr::MakeVar("res", VariableExpression::Use)),
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                rInsn.GetOperand(1))),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        /* semantic: call('carry_flag_sub') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlCf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  rInsn.GetOperand(0),
                  rInsn.GetOperand(1)),
                Expr::MakeVar("res", VariableExpression::Use)),
              Expr::MakeBinOp(
                OperationExpression::OpAnd,
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  rInsn.GetOperand(0),
                  Expr::MakeVar("res", VariableExpression::Use)),
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  rInsn.GetOperand(0),
                  rInsn.GetOperand(1)))),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        /* semantic: call('sign_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlSf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        /* semantic: call('zero_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlZf, &m_CpuInfo),
          Expr::MakeTernaryCond(ConditionExpression::CondEq,
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))));
        /* semantic: call('parity_flag') */
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBitVector(1, 0x1)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlPf, &m_CpuInfo),
          Expr::MakeVar("pf_tmp", VariableExpression::Use)));
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
        /* semantic: call('adjust_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlAf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                rInsn.GetOperand(1)),
              Expr::MakeVar("res", VariableExpression::Use)),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))));
        /* semantic: op0.val = res.val */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("res", VariableExpression::Use)));
        /* semantic: free_var('res') */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x4:
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_And);
      if (Operand__Ev_Iz(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        rInsn.SetUpdatedFlags(X86_FlCf | X86_FlPf | X86_FlAf | X86_FlZf | X86_FlSf | X86_FlOf);
        rInsn.SetClearedFlags(X86_FlAf | X86_FlOf | X86_FlCf);
        AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlAf, &m_CpuInfo), Expr::MakeBoolean(false)));
        AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlOf, &m_CpuInfo), Expr::MakeBoolean(false)));
        AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlCf, &m_CpuInfo), Expr::MakeBoolean(false)));
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: res = op0.val & op1.val */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpAnd,
            rInsn.GetOperand(0),
            rInsn.GetOperand(1))));
        /* semantic: of.id = int1(0)
        cf.id = int1(0)
        call('sign_flag')
        call('zero_flag')
        call('parity_flag')
        op0.val = res */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlOf, &m_CpuInfo),
          Expr::MakeBitVector(1, 0x0)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlCf, &m_CpuInfo),
          Expr::MakeBitVector(1, 0x0)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlSf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlZf, &m_CpuInfo),
          Expr::MakeTernaryCond(ConditionExpression::CondEq,
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))));
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBitVector(1, 0x1)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlPf, &m_CpuInfo),
          Expr::MakeVar("pf_tmp", VariableExpression::Use)));
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("res", VariableExpression::Use)));
        /* semantic: free_var('res') */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x5:
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Sub);
      if (Operand__Ev_Iz(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        rInsn.SetUpdatedFlags(X86_FlCf | X86_FlPf | X86_FlAf | X86_FlZf | X86_FlSf | X86_FlOf);
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: res = op0.val - op1.val */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            rInsn.GetOperand(0),
            rInsn.GetOperand(1))));
        /* semantic: call('overflow_flag_sub') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlOf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                Expr::MakeVar("res", VariableExpression::Use)),
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                rInsn.GetOperand(1))),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        /* semantic: call('carry_flag_sub') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlCf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  rInsn.GetOperand(0),
                  rInsn.GetOperand(1)),
                Expr::MakeVar("res", VariableExpression::Use)),
              Expr::MakeBinOp(
                OperationExpression::OpAnd,
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  rInsn.GetOperand(0),
                  Expr::MakeVar("res", VariableExpression::Use)),
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  rInsn.GetOperand(0),
                  rInsn.GetOperand(1)))),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        /* semantic: call('sign_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlSf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        /* semantic: call('zero_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlZf, &m_CpuInfo),
          Expr::MakeTernaryCond(ConditionExpression::CondEq,
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))));
        /* semantic: call('parity_flag') */
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBitVector(1, 0x1)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlPf, &m_CpuInfo),
          Expr::MakeVar("pf_tmp", VariableExpression::Use)));
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
        /* semantic: call('adjust_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlAf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                rInsn.GetOperand(1)),
              Expr::MakeVar("res", VariableExpression::Use)),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))));
        /* semantic: op0.val = res */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("res", VariableExpression::Use)));
        /* semantic: free_var('res') */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x6:
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Xor);
      if (Operand__Ev_Iz(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        rInsn.SetUpdatedFlags(X86_FlCf | X86_FlPf | X86_FlAf | X86_FlZf | X86_FlSf | X86_FlOf);
        rInsn.SetClearedFlags(X86_FlAf | X86_FlOf | X86_FlCf);
        AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlAf, &m_CpuInfo), Expr::MakeBoolean(false)));
        AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlOf, &m_CpuInfo), Expr::MakeBoolean(false)));
        AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlCf, &m_CpuInfo), Expr::MakeBoolean(false)));
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: res = op0.val ^ op1.val */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            rInsn.GetOperand(0),
            rInsn.GetOperand(1))));
        /* semantic: of.id = int1(0)
        cf.id = int1(0)
        call('sign_flag')
        call('zero_flag')
        call('parity_flag')
        op0.val = res */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlOf, &m_CpuInfo),
          Expr::MakeBitVector(1, 0x0)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlCf, &m_CpuInfo),
          Expr::MakeBitVector(1, 0x0)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlSf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlZf, &m_CpuInfo),
          Expr::MakeTernaryCond(ConditionExpression::CondEq,
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))));
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBitVector(1, 0x1)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlPf, &m_CpuInfo),
          Expr::MakeVar("pf_tmp", VariableExpression::Use)));
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("res", VariableExpression::Use)));
        /* semantic: free_var('res') */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x7:
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Cmp);
      if (Operand__Ev_Iz(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        rInsn.SetUpdatedFlags(X86_FlCf | X86_FlPf | X86_FlAf | X86_FlZf | X86_FlSf | X86_FlOf);
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: res = op0.val - op1.val */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            rInsn.GetOperand(0),
            rInsn.GetOperand(1))));
        /* semantic: call('overflow_flag_sub') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlOf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                Expr::MakeVar("res", VariableExpression::Use)),
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                rInsn.GetOperand(1))),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        /* semantic: call('carry_flag_sub') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlCf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  rInsn.GetOperand(0),
                  rInsn.GetOperand(1)),
                Expr::MakeVar("res", VariableExpression::Use)),
              Expr::MakeBinOp(
                OperationExpression::OpAnd,
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  rInsn.GetOperand(0),
                  Expr::MakeVar("res", VariableExpression::Use)),
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  rInsn.GetOperand(0),
                  rInsn.GetOperand(1)))),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        /* semantic: call('sign_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlSf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        /* semantic: call('zero_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlZf, &m_CpuInfo),
          Expr::MakeTernaryCond(ConditionExpression::CondEq,
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))));
        /* semantic: call('parity_flag') */
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBitVector(1, 0x1)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlPf, &m_CpuInfo),
          Expr::MakeVar("pf_tmp", VariableExpression::Use)));
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
        /* semantic: call('adjust_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlAf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                rInsn.GetOperand(1)),
              Expr::MakeVar("res", VariableExpression::Use)),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))));
        /* semantic: free_var('res') */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    default:
      return false;
    }
}

/** group:
 * mnemonic: add
 * opcode: 00
 * operand: ['Ev', 'Iz']
 * update_flags: ['cf', 'pf', 'af', 'zf', 'sf', 'of']
 * semantic: alloc_var('res', op0.bit);
res.val = op0.val + op1.val;
call('overflow_flag_add');
call('carry_flag_add');
call('sign_flag');
call('zero_flag');
call('parity_flag');
call('adjust_flag');
op0.val = res.val;
free_var('res');

 *
 * mnemonic: or
 * semantic: alloc_var('res', op0.bit);
res = op0.val | op1.val;
of.id = int1(0)
cf.id = int1(0)
call('sign_flag')
call('zero_flag')
call('parity_flag')
op0.val = res;
free_var('res');

 * update_flags: ['cf', 'pf', 'af', 'zf', 'sf', 'of']
 * clear_flags: ['af', 'of', 'cf']
 * opcode: 01
 * operand: ['Ev', 'Iz']
 *
 * mnemonic: adc
 * semantic: alloc_var('res', op0.bit);
res.val = op0.val + op1.val + bit_cast(cf.id, int(op0.bit, op0.bit));
call('overflow_flag_add');
call('carry_flag_add');
call('sign_flag');
call('zero_flag');
call('parity_flag');
call('adjust_flag');
op0.val = res.val;
free_var('res');

 * update_flags: ['cf', 'pf', 'af', 'zf', 'sf', 'of']
 * test_flags: ['cf']
 * opcode: 02
 * operand: ['Ev', 'Iz']
 *
 * mnemonic: sbb
 * semantic: alloc_var('res', op0.bit);
res = op0.val - op1.val - bit_cast(cf.id, int(op0.bit, op0.bit));
call('overflow_flag_sub');
call('carry_flag_sub');
call('sign_flag');
call('zero_flag');
call('parity_flag');
call('adjust_flag');
op0.val = res.val;
free_var('res');

 * update_flags: ['cf', 'pf', 'af', 'zf', 'sf', 'of']
 * test_flags: ['cf']
 * opcode: 03
 * operand: ['Ev', 'Iz']
 *
 * mnemonic: and
 * semantic: alloc_var('res', op0.bit);
res = op0.val & op1.val;
of.id = int1(0)
cf.id = int1(0)
call('sign_flag')
call('zero_flag')
call('parity_flag')
op0.val = res;
free_var('res');

 * update_flags: ['cf', 'pf', 'af', 'zf', 'sf', 'of']
 * clear_flags: ['af', 'of', 'cf']
 * opcode: 04
 * operand: ['Ev', 'Iz']
 *
 * mnemonic: sub
 * opcode: 05
 * operand: ['Ev', 'Iz']
 * update_flags: ['cf', 'pf', 'af', 'zf', 'sf', 'of']
 * semantic: alloc_var('res', op0.bit);
res = op0.val - op1.val;
call('overflow_flag_sub');
call('carry_flag_sub');
call('sign_flag');
call('zero_flag');
call('parity_flag');
call('adjust_flag');
op0.val = res;
free_var('res');

 *
 * mnemonic: xor
 * semantic: alloc_var('res', op0.bit);
res = op0.val ^ op1.val;
of.id = int1(0)
cf.id = int1(0)
call('sign_flag')
call('zero_flag')
call('parity_flag')
op0.val = res;
free_var('res');

 * update_flags: ['cf', 'pf', 'af', 'zf', 'sf', 'of']
 * clear_flags: ['af', 'of', 'cf']
 * opcode: 06
 * operand: ['Ev', 'Iz']
 *
 * mnemonic: cmp
 * opcode: 07
 * operand: ['Ev', 'Iz']
 * update_flags: ['cf', 'pf', 'af', 'zf', 'sf', 'of']
 * semantic: alloc_var('res', op0.bit);
res = op0.val - op1.val;
call('overflow_flag_sub');
call('carry_flag_sub');
call('sign_flag');
call('zero_flag');
call('parity_flag');
call('adjust_flag');
free_var('res');

 *
**/
bool X86Architecture::Table_1_82(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    u8 ModRmByte;
    if (!rBinStrm.Read(Offset, ModRmByte))
      return false;

    x86::ModRM ModRm(ModRmByte);
    switch (ModRm.Reg())
    {
    case 0x0:
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Add);
      if (Operand__Eb_Ib(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        rInsn.SetUpdatedFlags(X86_FlCf | X86_FlPf | X86_FlAf | X86_FlZf | X86_FlSf | X86_FlOf);
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: res.val = op0.val + op1.val */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpAdd,
            rInsn.GetOperand(0),
            rInsn.GetOperand(1))));
        /* semantic: call('overflow_flag_add') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlOf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                Expr::MakeVar("res", VariableExpression::Use)),
              Expr::MakeUnOp(
                OperationExpression::OpNot,
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  rInsn.GetOperand(0),
                  rInsn.GetOperand(1)))),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        /* semantic: call('carry_flag_add') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlCf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(
                OperationExpression::OpAnd,
                rInsn.GetOperand(0),
                rInsn.GetOperand(1)),
              Expr::MakeBinOp(
                OperationExpression::OpAnd,
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  Expr::MakeBinOp(
                    OperationExpression::OpXor,
                    rInsn.GetOperand(0),
                    rInsn.GetOperand(1)),
                  Expr::MakeVar("res", VariableExpression::Use)),
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  rInsn.GetOperand(0),
                  rInsn.GetOperand(1)))),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        /* semantic: call('sign_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlSf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        /* semantic: call('zero_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlZf, &m_CpuInfo),
          Expr::MakeTernaryCond(ConditionExpression::CondEq,
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))));
        /* semantic: call('parity_flag') */
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBitVector(1, 0x1)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlPf, &m_CpuInfo),
          Expr::MakeVar("pf_tmp", VariableExpression::Use)));
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
        /* semantic: call('adjust_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlAf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                rInsn.GetOperand(1)),
              Expr::MakeVar("res", VariableExpression::Use)),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))));
        /* semantic: op0.val = res.val */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("res", VariableExpression::Use)));
        /* semantic: free_var('res') */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x1:
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Or);
      if (Operand__Eb_Ib(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        rInsn.SetUpdatedFlags(X86_FlCf | X86_FlPf | X86_FlAf | X86_FlZf | X86_FlSf | X86_FlOf);
        rInsn.SetClearedFlags(X86_FlAf | X86_FlOf | X86_FlCf);
        AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlAf, &m_CpuInfo), Expr::MakeBoolean(false)));
        AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlOf, &m_CpuInfo), Expr::MakeBoolean(false)));
        AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlCf, &m_CpuInfo), Expr::MakeBoolean(false)));
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: res = op0.val | op1.val */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpOr,
            rInsn.GetOperand(0),
            rInsn.GetOperand(1))));
        /* semantic: of.id = int1(0)
        cf.id = int1(0)
        call('sign_flag')
        call('zero_flag')
        call('parity_flag')
        op0.val = res */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlOf, &m_CpuInfo),
          Expr::MakeBitVector(1, 0x0)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlCf, &m_CpuInfo),
          Expr::MakeBitVector(1, 0x0)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlSf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlZf, &m_CpuInfo),
          Expr::MakeTernaryCond(ConditionExpression::CondEq,
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))));
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBitVector(1, 0x1)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlPf, &m_CpuInfo),
          Expr::MakeVar("pf_tmp", VariableExpression::Use)));
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("res", VariableExpression::Use)));
        /* semantic: free_var('res') */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x2:
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Adc);
      if (Operand__Eb_Ib(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        rInsn.SetTestedFlags(X86_FlCf);
        rInsn.SetUpdatedFlags(X86_FlCf | X86_FlPf | X86_FlAf | X86_FlZf | X86_FlSf | X86_FlOf);
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: res.val = op0.val + op1.val + bit_cast(cf.id, int(op0.bit, op0.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpAdd,
            Expr::MakeBinOp(
              OperationExpression::OpAdd,
              rInsn.GetOperand(0),
              rInsn.GetOperand(1)),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeId(X86_FlCf, &m_CpuInfo), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize())))));
        /* semantic: call('overflow_flag_add') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlOf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                Expr::MakeVar("res", VariableExpression::Use)),
              Expr::MakeUnOp(
                OperationExpression::OpNot,
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  rInsn.GetOperand(0),
                  rInsn.GetOperand(1)))),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        /* semantic: call('carry_flag_add') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlCf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(
                OperationExpression::OpAnd,
                rInsn.GetOperand(0),
                rInsn.GetOperand(1)),
              Expr::MakeBinOp(
                OperationExpression::OpAnd,
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  Expr::MakeBinOp(
                    OperationExpression::OpXor,
                    rInsn.GetOperand(0),
                    rInsn.GetOperand(1)),
                  Expr::MakeVar("res", VariableExpression::Use)),
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  rInsn.GetOperand(0),
                  rInsn.GetOperand(1)))),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        /* semantic: call('sign_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlSf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        /* semantic: call('zero_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlZf, &m_CpuInfo),
          Expr::MakeTernaryCond(ConditionExpression::CondEq,
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))));
        /* semantic: call('parity_flag') */
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBitVector(1, 0x1)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlPf, &m_CpuInfo),
          Expr::MakeVar("pf_tmp", VariableExpression::Use)));
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
        /* semantic: call('adjust_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlAf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                rInsn.GetOperand(1)),
              Expr::MakeVar("res", VariableExpression::Use)),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))));
        /* semantic: op0.val = res.val */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("res", VariableExpression::Use)));
        /* semantic: free_var('res') */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x3:
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Sbb);
      if (Operand__Eb_Ib(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        rInsn.SetTestedFlags(X86_FlCf);
        rInsn.SetUpdatedFlags(X86_FlCf | X86_FlPf | X86_FlAf | X86_FlZf | X86_FlSf | X86_FlOf);
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: res = op0.val - op1.val - bit_cast(cf.id, int(op0.bit, op0.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              rInsn.GetOperand(0),
              rInsn.GetOperand(1)),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeId(X86_FlCf, &m_CpuInfo), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize())))));
        /* semantic: call('overflow_flag_sub') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlOf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                Expr::MakeVar("res", VariableExpression::Use)),
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                rInsn.GetOperand(1))),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        /* semantic: call('carry_flag_sub') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlCf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  rInsn.GetOperand(0),
                  rInsn.GetOperand(1)),
                Expr::MakeVar("res", VariableExpression::Use)),
              Expr::MakeBinOp(
                OperationExpression::OpAnd,
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  rInsn.GetOperand(0),
                  Expr::MakeVar("res", VariableExpression::Use)),
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  rInsn.GetOperand(0),
                  rInsn.GetOperand(1)))),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        /* semantic: call('sign_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlSf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        /* semantic: call('zero_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlZf, &m_CpuInfo),
          Expr::MakeTernaryCond(ConditionExpression::CondEq,
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))));
        /* semantic: call('parity_flag') */
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBitVector(1, 0x1)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlPf, &m_CpuInfo),
          Expr::MakeVar("pf_tmp", VariableExpression::Use)));
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
        /* semantic: call('adjust_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlAf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                rInsn.GetOperand(1)),
              Expr::MakeVar("res", VariableExpression::Use)),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))));
        /* semantic: op0.val = res.val */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("res", VariableExpression::Use)));
        /* semantic: free_var('res') */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x4:
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_And);
      if (Operand__Eb_Ib(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        rInsn.SetUpdatedFlags(X86_FlCf | X86_FlPf | X86_FlAf | X86_FlZf | X86_FlSf | X86_FlOf);
        rInsn.SetClearedFlags(X86_FlAf | X86_FlOf | X86_FlCf);
        AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlAf, &m_CpuInfo), Expr::MakeBoolean(false)));
        AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlOf, &m_CpuInfo), Expr::MakeBoolean(false)));
        AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlCf, &m_CpuInfo), Expr::MakeBoolean(false)));
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: res = op0.val & op1.val */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpAnd,
            rInsn.GetOperand(0),
            rInsn.GetOperand(1))));
        /* semantic: of.id = int1(0)
        cf.id = int1(0)
        call('sign_flag')
        call('zero_flag')
        call('parity_flag')
        op0.val = res */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlOf, &m_CpuInfo),
          Expr::MakeBitVector(1, 0x0)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlCf, &m_CpuInfo),
          Expr::MakeBitVector(1, 0x0)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlSf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlZf, &m_CpuInfo),
          Expr::MakeTernaryCond(ConditionExpression::CondEq,
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))));
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBitVector(1, 0x1)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlPf, &m_CpuInfo),
          Expr::MakeVar("pf_tmp", VariableExpression::Use)));
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("res", VariableExpression::Use)));
        /* semantic: free_var('res') */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x5:
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Sub);
      if (Operand__Eb_Ib(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        rInsn.SetUpdatedFlags(X86_FlCf | X86_FlPf | X86_FlAf | X86_FlZf | X86_FlSf | X86_FlOf);
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: res = op0.val - op1.val */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            rInsn.GetOperand(0),
            rInsn.GetOperand(1))));
        /* semantic: call('overflow_flag_sub') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlOf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                Expr::MakeVar("res", VariableExpression::Use)),
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                rInsn.GetOperand(1))),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        /* semantic: call('carry_flag_sub') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlCf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  rInsn.GetOperand(0),
                  rInsn.GetOperand(1)),
                Expr::MakeVar("res", VariableExpression::Use)),
              Expr::MakeBinOp(
                OperationExpression::OpAnd,
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  rInsn.GetOperand(0),
                  Expr::MakeVar("res", VariableExpression::Use)),
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  rInsn.GetOperand(0),
                  rInsn.GetOperand(1)))),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        /* semantic: call('sign_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlSf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        /* semantic: call('zero_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlZf, &m_CpuInfo),
          Expr::MakeTernaryCond(ConditionExpression::CondEq,
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))));
        /* semantic: call('parity_flag') */
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBitVector(1, 0x1)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlPf, &m_CpuInfo),
          Expr::MakeVar("pf_tmp", VariableExpression::Use)));
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
        /* semantic: call('adjust_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlAf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                rInsn.GetOperand(1)),
              Expr::MakeVar("res", VariableExpression::Use)),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))));
        /* semantic: op0.val = res */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("res", VariableExpression::Use)));
        /* semantic: free_var('res') */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x6:
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Xor);
      if (Operand__Eb_Ib(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        rInsn.SetUpdatedFlags(X86_FlCf | X86_FlPf | X86_FlAf | X86_FlZf | X86_FlSf | X86_FlOf);
        rInsn.SetClearedFlags(X86_FlAf | X86_FlOf | X86_FlCf);
        AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlAf, &m_CpuInfo), Expr::MakeBoolean(false)));
        AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlOf, &m_CpuInfo), Expr::MakeBoolean(false)));
        AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlCf, &m_CpuInfo), Expr::MakeBoolean(false)));
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: res = op0.val ^ op1.val */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            rInsn.GetOperand(0),
            rInsn.GetOperand(1))));
        /* semantic: of.id = int1(0)
        cf.id = int1(0)
        call('sign_flag')
        call('zero_flag')
        call('parity_flag')
        op0.val = res */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlOf, &m_CpuInfo),
          Expr::MakeBitVector(1, 0x0)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlCf, &m_CpuInfo),
          Expr::MakeBitVector(1, 0x0)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlSf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlZf, &m_CpuInfo),
          Expr::MakeTernaryCond(ConditionExpression::CondEq,
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))));
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBitVector(1, 0x1)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlPf, &m_CpuInfo),
          Expr::MakeVar("pf_tmp", VariableExpression::Use)));
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("res", VariableExpression::Use)));
        /* semantic: free_var('res') */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x7:
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Cmp);
      if (Operand__Eb_Ib(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        rInsn.SetUpdatedFlags(X86_FlCf | X86_FlPf | X86_FlAf | X86_FlZf | X86_FlSf | X86_FlOf);
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: res = op0.val - op1.val */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            rInsn.GetOperand(0),
            rInsn.GetOperand(1))));
        /* semantic: call('overflow_flag_sub') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlOf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                Expr::MakeVar("res", VariableExpression::Use)),
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                rInsn.GetOperand(1))),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        /* semantic: call('carry_flag_sub') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlCf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  rInsn.GetOperand(0),
                  rInsn.GetOperand(1)),
                Expr::MakeVar("res", VariableExpression::Use)),
              Expr::MakeBinOp(
                OperationExpression::OpAnd,
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  rInsn.GetOperand(0),
                  Expr::MakeVar("res", VariableExpression::Use)),
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  rInsn.GetOperand(0),
                  rInsn.GetOperand(1)))),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        /* semantic: call('sign_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlSf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        /* semantic: call('zero_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlZf, &m_CpuInfo),
          Expr::MakeTernaryCond(ConditionExpression::CondEq,
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))));
        /* semantic: call('parity_flag') */
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBitVector(1, 0x1)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlPf, &m_CpuInfo),
          Expr::MakeVar("pf_tmp", VariableExpression::Use)));
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
        /* semantic: call('adjust_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlAf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                rInsn.GetOperand(1)),
              Expr::MakeVar("res", VariableExpression::Use)),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))));
        /* semantic: free_var('res') */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    default:
      return false;
    }
}

/** group:
 * mnemonic: add
 * opcode: 00
 * operand: ['Eb', 'Ib']
 * update_flags: ['cf', 'pf', 'af', 'zf', 'sf', 'of']
 * semantic: alloc_var('res', op0.bit);
res.val = op0.val + op1.val;
call('overflow_flag_add');
call('carry_flag_add');
call('sign_flag');
call('zero_flag');
call('parity_flag');
call('adjust_flag');
op0.val = res.val;
free_var('res');

 *
 * mnemonic: or
 * semantic: alloc_var('res', op0.bit);
res = op0.val | op1.val;
of.id = int1(0)
cf.id = int1(0)
call('sign_flag')
call('zero_flag')
call('parity_flag')
op0.val = res;
free_var('res');

 * update_flags: ['cf', 'pf', 'af', 'zf', 'sf', 'of']
 * clear_flags: ['af', 'of', 'cf']
 * opcode: 01
 * operand: ['Eb', 'Ib']
 *
 * mnemonic: adc
 * semantic: alloc_var('res', op0.bit);
res.val = op0.val + op1.val + bit_cast(cf.id, int(op0.bit, op0.bit));
call('overflow_flag_add');
call('carry_flag_add');
call('sign_flag');
call('zero_flag');
call('parity_flag');
call('adjust_flag');
op0.val = res.val;
free_var('res');

 * update_flags: ['cf', 'pf', 'af', 'zf', 'sf', 'of']
 * test_flags: ['cf']
 * opcode: 02
 * operand: ['Eb', 'Ib']
 *
 * mnemonic: sbb
 * semantic: alloc_var('res', op0.bit);
res = op0.val - op1.val - bit_cast(cf.id, int(op0.bit, op0.bit));
call('overflow_flag_sub');
call('carry_flag_sub');
call('sign_flag');
call('zero_flag');
call('parity_flag');
call('adjust_flag');
op0.val = res.val;
free_var('res');

 * update_flags: ['cf', 'pf', 'af', 'zf', 'sf', 'of']
 * test_flags: ['cf']
 * opcode: 03
 * operand: ['Eb', 'Ib']
 *
 * mnemonic: and
 * semantic: alloc_var('res', op0.bit);
res = op0.val & op1.val;
of.id = int1(0)
cf.id = int1(0)
call('sign_flag')
call('zero_flag')
call('parity_flag')
op0.val = res;
free_var('res');

 * update_flags: ['cf', 'pf', 'af', 'zf', 'sf', 'of']
 * clear_flags: ['af', 'of', 'cf']
 * opcode: 04
 * operand: ['Eb', 'Ib']
 *
 * mnemonic: sub
 * opcode: 05
 * operand: ['Eb', 'Ib']
 * update_flags: ['cf', 'pf', 'af', 'zf', 'sf', 'of']
 * semantic: alloc_var('res', op0.bit);
res = op0.val - op1.val;
call('overflow_flag_sub');
call('carry_flag_sub');
call('sign_flag');
call('zero_flag');
call('parity_flag');
call('adjust_flag');
op0.val = res;
free_var('res');

 *
 * mnemonic: xor
 * semantic: alloc_var('res', op0.bit);
res = op0.val ^ op1.val;
of.id = int1(0)
cf.id = int1(0)
call('sign_flag')
call('zero_flag')
call('parity_flag')
op0.val = res;
free_var('res');

 * update_flags: ['cf', 'pf', 'af', 'zf', 'sf', 'of']
 * clear_flags: ['af', 'of', 'cf']
 * opcode: 06
 * operand: ['Eb', 'Ib']
 *
 * mnemonic: cmp
 * opcode: 07
 * operand: ['Eb', 'Ib']
 * update_flags: ['cf', 'pf', 'af', 'zf', 'sf', 'of']
 * semantic: alloc_var('res', op0.bit);
res = op0.val - op1.val;
call('overflow_flag_sub');
call('carry_flag_sub');
call('sign_flag');
call('zero_flag');
call('parity_flag');
call('adjust_flag');
free_var('res');

 *
**/
bool X86Architecture::Table_1_83(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    u8 ModRmByte;
    if (!rBinStrm.Read(Offset, ModRmByte))
      return false;

    x86::ModRM ModRm(ModRmByte);
    switch (ModRm.Reg())
    {
    case 0x0:
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Add);
      if (Operand__Ev_Ibs(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        rInsn.SetUpdatedFlags(X86_FlCf | X86_FlPf | X86_FlAf | X86_FlZf | X86_FlSf | X86_FlOf);
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: res.val = op0.val + op1.val */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpAdd,
            rInsn.GetOperand(0),
            rInsn.GetOperand(1))));
        /* semantic: call('overflow_flag_add') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlOf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                Expr::MakeVar("res", VariableExpression::Use)),
              Expr::MakeUnOp(
                OperationExpression::OpNot,
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  rInsn.GetOperand(0),
                  rInsn.GetOperand(1)))),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        /* semantic: call('carry_flag_add') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlCf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(
                OperationExpression::OpAnd,
                rInsn.GetOperand(0),
                rInsn.GetOperand(1)),
              Expr::MakeBinOp(
                OperationExpression::OpAnd,
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  Expr::MakeBinOp(
                    OperationExpression::OpXor,
                    rInsn.GetOperand(0),
                    rInsn.GetOperand(1)),
                  Expr::MakeVar("res", VariableExpression::Use)),
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  rInsn.GetOperand(0),
                  rInsn.GetOperand(1)))),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        /* semantic: call('sign_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlSf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        /* semantic: call('zero_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlZf, &m_CpuInfo),
          Expr::MakeTernaryCond(ConditionExpression::CondEq,
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))));
        /* semantic: call('parity_flag') */
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBitVector(1, 0x1)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlPf, &m_CpuInfo),
          Expr::MakeVar("pf_tmp", VariableExpression::Use)));
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
        /* semantic: call('adjust_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlAf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                rInsn.GetOperand(1)),
              Expr::MakeVar("res", VariableExpression::Use)),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))));
        /* semantic: op0.val = res.val */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("res", VariableExpression::Use)));
        /* semantic: free_var('res') */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x1:
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Or);
      if (Operand__Ev_Ibs(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        rInsn.SetUpdatedFlags(X86_FlCf | X86_FlPf | X86_FlAf | X86_FlZf | X86_FlSf | X86_FlOf);
        rInsn.SetClearedFlags(X86_FlAf | X86_FlOf | X86_FlCf);
        AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlAf, &m_CpuInfo), Expr::MakeBoolean(false)));
        AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlOf, &m_CpuInfo), Expr::MakeBoolean(false)));
        AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlCf, &m_CpuInfo), Expr::MakeBoolean(false)));
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: res = op0.val | op1.val */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpOr,
            rInsn.GetOperand(0),
            rInsn.GetOperand(1))));
        /* semantic: of.id = int1(0)
        cf.id = int1(0)
        call('sign_flag')
        call('zero_flag')
        call('parity_flag')
        op0.val = res */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlOf, &m_CpuInfo),
          Expr::MakeBitVector(1, 0x0)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlCf, &m_CpuInfo),
          Expr::MakeBitVector(1, 0x0)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlSf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlZf, &m_CpuInfo),
          Expr::MakeTernaryCond(ConditionExpression::CondEq,
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))));
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBitVector(1, 0x1)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlPf, &m_CpuInfo),
          Expr::MakeVar("pf_tmp", VariableExpression::Use)));
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("res", VariableExpression::Use)));
        /* semantic: free_var('res') */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x2:
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Adc);
      if (Operand__Ev_Ibs(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        rInsn.SetTestedFlags(X86_FlCf);
        rInsn.SetUpdatedFlags(X86_FlCf | X86_FlPf | X86_FlAf | X86_FlZf | X86_FlSf | X86_FlOf);
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: res.val = op0.val + op1.val + bit_cast(cf.id, int(op0.bit, op0.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpAdd,
            Expr::MakeBinOp(
              OperationExpression::OpAdd,
              rInsn.GetOperand(0),
              rInsn.GetOperand(1)),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeId(X86_FlCf, &m_CpuInfo), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize())))));
        /* semantic: call('overflow_flag_add') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlOf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                Expr::MakeVar("res", VariableExpression::Use)),
              Expr::MakeUnOp(
                OperationExpression::OpNot,
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  rInsn.GetOperand(0),
                  rInsn.GetOperand(1)))),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        /* semantic: call('carry_flag_add') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlCf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(
                OperationExpression::OpAnd,
                rInsn.GetOperand(0),
                rInsn.GetOperand(1)),
              Expr::MakeBinOp(
                OperationExpression::OpAnd,
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  Expr::MakeBinOp(
                    OperationExpression::OpXor,
                    rInsn.GetOperand(0),
                    rInsn.GetOperand(1)),
                  Expr::MakeVar("res", VariableExpression::Use)),
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  rInsn.GetOperand(0),
                  rInsn.GetOperand(1)))),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        /* semantic: call('sign_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlSf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        /* semantic: call('zero_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlZf, &m_CpuInfo),
          Expr::MakeTernaryCond(ConditionExpression::CondEq,
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))));
        /* semantic: call('parity_flag') */
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBitVector(1, 0x1)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlPf, &m_CpuInfo),
          Expr::MakeVar("pf_tmp", VariableExpression::Use)));
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
        /* semantic: call('adjust_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlAf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                rInsn.GetOperand(1)),
              Expr::MakeVar("res", VariableExpression::Use)),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))));
        /* semantic: op0.val = res.val */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("res", VariableExpression::Use)));
        /* semantic: free_var('res') */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x3:
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Sbb);
      if (Operand__Ev_Ibs(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        rInsn.SetTestedFlags(X86_FlCf);
        rInsn.SetUpdatedFlags(X86_FlCf | X86_FlPf | X86_FlAf | X86_FlZf | X86_FlSf | X86_FlOf);
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: res = op0.val - op1.val - bit_cast(cf.id, int(op0.bit, op0.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              rInsn.GetOperand(0),
              rInsn.GetOperand(1)),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeId(X86_FlCf, &m_CpuInfo), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize())))));
        /* semantic: call('overflow_flag_sub') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlOf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                Expr::MakeVar("res", VariableExpression::Use)),
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                rInsn.GetOperand(1))),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        /* semantic: call('carry_flag_sub') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlCf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  rInsn.GetOperand(0),
                  rInsn.GetOperand(1)),
                Expr::MakeVar("res", VariableExpression::Use)),
              Expr::MakeBinOp(
                OperationExpression::OpAnd,
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  rInsn.GetOperand(0),
                  Expr::MakeVar("res", VariableExpression::Use)),
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  rInsn.GetOperand(0),
                  rInsn.GetOperand(1)))),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        /* semantic: call('sign_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlSf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        /* semantic: call('zero_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlZf, &m_CpuInfo),
          Expr::MakeTernaryCond(ConditionExpression::CondEq,
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))));
        /* semantic: call('parity_flag') */
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBitVector(1, 0x1)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlPf, &m_CpuInfo),
          Expr::MakeVar("pf_tmp", VariableExpression::Use)));
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
        /* semantic: call('adjust_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlAf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                rInsn.GetOperand(1)),
              Expr::MakeVar("res", VariableExpression::Use)),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))));
        /* semantic: op0.val = res.val */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("res", VariableExpression::Use)));
        /* semantic: free_var('res') */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x4:
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_And);
      if (Operand__Ev_Ibs(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        rInsn.SetUpdatedFlags(X86_FlCf | X86_FlPf | X86_FlAf | X86_FlZf | X86_FlSf | X86_FlOf);
        rInsn.SetClearedFlags(X86_FlAf | X86_FlOf | X86_FlCf);
        AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlAf, &m_CpuInfo), Expr::MakeBoolean(false)));
        AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlOf, &m_CpuInfo), Expr::MakeBoolean(false)));
        AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlCf, &m_CpuInfo), Expr::MakeBoolean(false)));
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: res = op0.val & op1.val */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpAnd,
            rInsn.GetOperand(0),
            rInsn.GetOperand(1))));
        /* semantic: of.id = int1(0)
        cf.id = int1(0)
        call('sign_flag')
        call('zero_flag')
        call('parity_flag')
        op0.val = res */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlOf, &m_CpuInfo),
          Expr::MakeBitVector(1, 0x0)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlCf, &m_CpuInfo),
          Expr::MakeBitVector(1, 0x0)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlSf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlZf, &m_CpuInfo),
          Expr::MakeTernaryCond(ConditionExpression::CondEq,
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))));
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBitVector(1, 0x1)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlPf, &m_CpuInfo),
          Expr::MakeVar("pf_tmp", VariableExpression::Use)));
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("res", VariableExpression::Use)));
        /* semantic: free_var('res') */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x5:
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Sub);
      if (Operand__Ev_Ibs(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        rInsn.SetUpdatedFlags(X86_FlCf | X86_FlPf | X86_FlAf | X86_FlZf | X86_FlSf | X86_FlOf);
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: res = op0.val - op1.val */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            rInsn.GetOperand(0),
            rInsn.GetOperand(1))));
        /* semantic: call('overflow_flag_sub') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlOf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                Expr::MakeVar("res", VariableExpression::Use)),
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                rInsn.GetOperand(1))),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        /* semantic: call('carry_flag_sub') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlCf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  rInsn.GetOperand(0),
                  rInsn.GetOperand(1)),
                Expr::MakeVar("res", VariableExpression::Use)),
              Expr::MakeBinOp(
                OperationExpression::OpAnd,
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  rInsn.GetOperand(0),
                  Expr::MakeVar("res", VariableExpression::Use)),
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  rInsn.GetOperand(0),
                  rInsn.GetOperand(1)))),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        /* semantic: call('sign_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlSf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        /* semantic: call('zero_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlZf, &m_CpuInfo),
          Expr::MakeTernaryCond(ConditionExpression::CondEq,
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))));
        /* semantic: call('parity_flag') */
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBitVector(1, 0x1)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlPf, &m_CpuInfo),
          Expr::MakeVar("pf_tmp", VariableExpression::Use)));
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
        /* semantic: call('adjust_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlAf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                rInsn.GetOperand(1)),
              Expr::MakeVar("res", VariableExpression::Use)),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))));
        /* semantic: op0.val = res */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("res", VariableExpression::Use)));
        /* semantic: free_var('res') */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x6:
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Xor);
      if (Operand__Ev_Ibs(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        rInsn.SetUpdatedFlags(X86_FlCf | X86_FlPf | X86_FlAf | X86_FlZf | X86_FlSf | X86_FlOf);
        rInsn.SetClearedFlags(X86_FlAf | X86_FlOf | X86_FlCf);
        AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlAf, &m_CpuInfo), Expr::MakeBoolean(false)));
        AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlOf, &m_CpuInfo), Expr::MakeBoolean(false)));
        AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlCf, &m_CpuInfo), Expr::MakeBoolean(false)));
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: res = op0.val ^ op1.val */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            rInsn.GetOperand(0),
            rInsn.GetOperand(1))));
        /* semantic: of.id = int1(0)
        cf.id = int1(0)
        call('sign_flag')
        call('zero_flag')
        call('parity_flag')
        op0.val = res */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlOf, &m_CpuInfo),
          Expr::MakeBitVector(1, 0x0)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlCf, &m_CpuInfo),
          Expr::MakeBitVector(1, 0x0)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlSf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlZf, &m_CpuInfo),
          Expr::MakeTernaryCond(ConditionExpression::CondEq,
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))));
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBitVector(1, 0x1)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlPf, &m_CpuInfo),
          Expr::MakeVar("pf_tmp", VariableExpression::Use)));
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("res", VariableExpression::Use)));
        /* semantic: free_var('res') */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x7:
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Cmp);
      if (Operand__Ev_Ibs(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        rInsn.SetUpdatedFlags(X86_FlCf | X86_FlPf | X86_FlAf | X86_FlZf | X86_FlSf | X86_FlOf);
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: res = op0.val - op1.val */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            rInsn.GetOperand(0),
            rInsn.GetOperand(1))));
        /* semantic: call('overflow_flag_sub') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlOf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                Expr::MakeVar("res", VariableExpression::Use)),
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                rInsn.GetOperand(1))),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        /* semantic: call('carry_flag_sub') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlCf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  rInsn.GetOperand(0),
                  rInsn.GetOperand(1)),
                Expr::MakeVar("res", VariableExpression::Use)),
              Expr::MakeBinOp(
                OperationExpression::OpAnd,
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  rInsn.GetOperand(0),
                  Expr::MakeVar("res", VariableExpression::Use)),
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  rInsn.GetOperand(0),
                  rInsn.GetOperand(1)))),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        /* semantic: call('sign_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlSf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        /* semantic: call('zero_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlZf, &m_CpuInfo),
          Expr::MakeTernaryCond(ConditionExpression::CondEq,
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))));
        /* semantic: call('parity_flag') */
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBitVector(1, 0x1)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlPf, &m_CpuInfo),
          Expr::MakeVar("pf_tmp", VariableExpression::Use)));
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
        /* semantic: call('adjust_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlAf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                rInsn.GetOperand(1)),
              Expr::MakeVar("res", VariableExpression::Use)),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))));
        /* semantic: free_var('res') */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    default:
      return false;
    }
}

/** instruction
 * mnemonic: test
 * clear_flags: ['af']
 * semantic: alloc_var('res', op0.bit);
res = op0.val & op1.val;
of.id = int1(0)
cf.id = int1(0)
call('sign_flag')
call('zero_flag')
call('parity_flag')
free_var('res');

 * operand: ['Eb', 'Gb']
 * opcode: 84
 * update_flags: ['of', 'sf', 'zf', 'pf', 'cf']
**/
bool X86Architecture::Table_1_84(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Size()++;
    rInsn.SetOpcode(X86_Opcode_Test);
    if (Operand__Eb_Gb(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    {
      Expression::LSPType AllExpr;
      rInsn.SetUpdatedFlags(X86_FlOf | X86_FlSf | X86_FlZf | X86_FlPf | X86_FlCf);
      rInsn.SetClearedFlags(X86_FlAf);
      AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlAf, &m_CpuInfo), Expr::MakeBoolean(false)));
      /* semantic: alloc_var('res', op0.bit) */
      AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
      /* semantic: res = op0.val & op1.val */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("res", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpAnd,
          rInsn.GetOperand(0),
          rInsn.GetOperand(1))));
      /* semantic: of.id = int1(0)
      cf.id = int1(0)
      call('sign_flag')
      call('zero_flag')
      call('parity_flag')
      free_var('res') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlOf, &m_CpuInfo),
        Expr::MakeBitVector(1, 0x0)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlCf, &m_CpuInfo),
        Expr::MakeBitVector(1, 0x0)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlSf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlZf, &m_CpuInfo),
        Expr::MakeTernaryCond(ConditionExpression::CondEq,
        Expr::MakeVar("res", VariableExpression::Use),
        Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
        Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))));
      AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBitVector(1, 0x1)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlPf, &m_CpuInfo),
        Expr::MakeVar("pf_tmp", VariableExpression::Use)));
      AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
      AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instruction
 * mnemonic: test
 * clear_flags: ['af']
 * semantic: alloc_var('res', op0.bit);
res = op0.val & op1.val;
of.id = int1(0)
cf.id = int1(0)
call('sign_flag')
call('zero_flag')
call('parity_flag')
free_var('res');

 * operand: ['Ev', 'Gv']
 * opcode: 85
 * update_flags: ['of', 'sf', 'zf', 'pf', 'cf']
**/
bool X86Architecture::Table_1_85(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Size()++;
    rInsn.SetOpcode(X86_Opcode_Test);
    if (Operand__Ev_Gv(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    {
      Expression::LSPType AllExpr;
      rInsn.SetUpdatedFlags(X86_FlOf | X86_FlSf | X86_FlZf | X86_FlPf | X86_FlCf);
      rInsn.SetClearedFlags(X86_FlAf);
      AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlAf, &m_CpuInfo), Expr::MakeBoolean(false)));
      /* semantic: alloc_var('res', op0.bit) */
      AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
      /* semantic: res = op0.val & op1.val */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("res", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpAnd,
          rInsn.GetOperand(0),
          rInsn.GetOperand(1))));
      /* semantic: of.id = int1(0)
      cf.id = int1(0)
      call('sign_flag')
      call('zero_flag')
      call('parity_flag')
      free_var('res') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlOf, &m_CpuInfo),
        Expr::MakeBitVector(1, 0x0)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlCf, &m_CpuInfo),
        Expr::MakeBitVector(1, 0x0)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlSf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlZf, &m_CpuInfo),
        Expr::MakeTernaryCond(ConditionExpression::CondEq,
        Expr::MakeVar("res", VariableExpression::Use),
        Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
        Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))));
      AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBitVector(1, 0x1)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlPf, &m_CpuInfo),
        Expr::MakeVar("pf_tmp", VariableExpression::Use)));
      AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
      AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instruction
 * mnemonic: xchg
 * operand: ['Eb', 'Gb']
 * opcode: 86
 * semantic: alloc_var('tmp_val', op0.bit);
tmp_val = op0.val;
op0.val = op1.val;
op1.val = tmp_val;
free_var('tmp_val');

**/
bool X86Architecture::Table_1_86(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Size()++;
    rInsn.SetOpcode(X86_Opcode_Xchg);
    if (Operand__Eb_Gb(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    {
      Expression::LSPType AllExpr;
      /* semantic: alloc_var('tmp_val', op0.bit) */
      AllExpr.push_back(Expr::MakeVar("tmp_val", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
      /* semantic: tmp_val = op0.val */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("tmp_val", VariableExpression::Use),
        rInsn.GetOperand(0)));
      /* semantic: op0.val = op1.val */
      AllExpr.push_back(Expr::MakeAssign(
        rInsn.GetOperand(0),
        rInsn.GetOperand(1)));
      /* semantic: op1.val = tmp_val */
      AllExpr.push_back(Expr::MakeAssign(
        rInsn.GetOperand(1),
        Expr::MakeVar("tmp_val", VariableExpression::Use)));
      /* semantic: free_var('tmp_val') */
      AllExpr.push_back(Expr::MakeVar("tmp_val", VariableExpression::Free));
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instruction
 * mnemonic: xchg
 * operand: ['Ev', 'Gv']
 * opcode: 87
 * semantic: alloc_var('tmp_val', op0.bit);
tmp_val = op0.val;
op0.val = op1.val;
op1.val = tmp_val;
free_var('tmp_val');

**/
bool X86Architecture::Table_1_87(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Size()++;
    rInsn.SetOpcode(X86_Opcode_Xchg);
    if (Operand__Ev_Gv(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    {
      Expression::LSPType AllExpr;
      /* semantic: alloc_var('tmp_val', op0.bit) */
      AllExpr.push_back(Expr::MakeVar("tmp_val", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
      /* semantic: tmp_val = op0.val */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("tmp_val", VariableExpression::Use),
        rInsn.GetOperand(0)));
      /* semantic: op0.val = op1.val */
      AllExpr.push_back(Expr::MakeAssign(
        rInsn.GetOperand(0),
        rInsn.GetOperand(1)));
      /* semantic: op1.val = tmp_val */
      AllExpr.push_back(Expr::MakeAssign(
        rInsn.GetOperand(1),
        Expr::MakeVar("tmp_val", VariableExpression::Use)));
      /* semantic: free_var('tmp_val') */
      AllExpr.push_back(Expr::MakeVar("tmp_val", VariableExpression::Free));
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instruction
 * mnemonic: mov
 * operand: ['Eb', 'Gb']
 * opcode: 88
 * semantic: op0.val = op1.val;

**/
bool X86Architecture::Table_1_88(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Size()++;
    rInsn.SetOpcode(X86_Opcode_Mov);
    if (Operand__Eb_Gb(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    {
      Expression::LSPType AllExpr;
      /* semantic: op0.val = op1.val */
      AllExpr.push_back(Expr::MakeAssign(
        rInsn.GetOperand(0),
        rInsn.GetOperand(1)));
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instruction
 * mnemonic: mov
 * operand: ['Ev', 'Gv']
 * opcode: 89
 * semantic: op0.val = op1.val;

**/
bool X86Architecture::Table_1_89(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Size()++;
    rInsn.SetOpcode(X86_Opcode_Mov);
    if (Operand__Ev_Gv(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    {
      Expression::LSPType AllExpr;
      /* semantic: op0.val = op1.val */
      AllExpr.push_back(Expr::MakeAssign(
        rInsn.GetOperand(0),
        rInsn.GetOperand(1)));
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instruction
 * mnemonic: mov
 * operand: ['Gb', 'Eb']
 * opcode: 8a
 * semantic: op0.val = op1.val;

**/
bool X86Architecture::Table_1_8a(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Size()++;
    rInsn.SetOpcode(X86_Opcode_Mov);
    if (Operand__Gb_Eb(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    {
      Expression::LSPType AllExpr;
      /* semantic: op0.val = op1.val */
      AllExpr.push_back(Expr::MakeAssign(
        rInsn.GetOperand(0),
        rInsn.GetOperand(1)));
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instruction
 * mnemonic: mov
 * operand: ['Gv', 'Ev']
 * opcode: 8b
 * semantic: op0.val = op1.val;

**/
bool X86Architecture::Table_1_8b(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Size()++;
    rInsn.SetOpcode(X86_Opcode_Mov);
    if (Operand__Gv_Ev(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    {
      Expression::LSPType AllExpr;
      /* semantic: op0.val = op1.val */
      AllExpr.push_back(Expr::MakeAssign(
        rInsn.GetOperand(0),
        rInsn.GetOperand(1)));
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instruction
 * mnemonic: mov
 * operand: ['Ew', 'Sw']
 * opcode: 8c
 * semantic: op0.val = op1.val;

**/
bool X86Architecture::Table_1_8c(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Size()++;
    rInsn.SetOpcode(X86_Opcode_Mov);
    if (Operand__Ew_Sw(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    {
      Expression::LSPType AllExpr;
      /* semantic: op0.val = op1.val */
      AllExpr.push_back(Expr::MakeAssign(
        rInsn.GetOperand(0),
        rInsn.GetOperand(1)));
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instruction
 * mnemonic: lea
 * operand: ['Gv', 'M']
 * opcode: 8d
 * semantic: ['op0.val = op1.addr']
**/
bool X86Architecture::Table_1_8d(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Size()++;
    rInsn.SetOpcode(X86_Opcode_Lea);
    if (Operand__Gv_M(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    {
      Expression::LSPType AllExpr;
      /* semantic: op0.val = op1.addr */
      AllExpr.push_back(Expr::MakeAssign(
        rInsn.GetOperand(0),
        rInsn.GetOperand(1)->ToAddress()));
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instruction
 * mnemonic: mov
 * operand: ['Sw', 'Ew']
 * opcode: 8e
 * semantic: op0.val = op1.val;

**/
bool X86Architecture::Table_1_8e(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Size()++;
    rInsn.SetOpcode(X86_Opcode_Mov);
    if (Operand__Sw_Ew(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    {
      Expression::LSPType AllExpr;
      /* semantic: op0.val = op1.val */
      AllExpr.push_back(Expr::MakeAssign(
        rInsn.GetOperand(0),
        rInsn.GetOperand(1)));
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** group:
 * mnemonic: pop
 * operand: ['Ev']
 * opcode: 00
 * semantic: alloc_var('popped_value', stack.bit);
popped_value = stack.mem;
stack.id += stack.size;
op0.val = popped_value;
free_var('popped_value');

 * constraint: d64
 *
 * mnemonic: Xop
 * opcode: 01
 * constraint: pfx1
 *
 * opcode: 02
 * invalid
 *
 * opcode: 03
 * invalid
 *
 * opcode: 04
 * invalid
 *
 * opcode: 05
 * invalid
 *
 * opcode: 06
 * invalid
 *
**/
bool X86Architecture::Table_1_8f(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    u8 ModRmByte;
    if (!rBinStrm.Read(Offset, ModRmByte))
      return false;

    x86::ModRM ModRm(ModRmByte);
    switch (ModRm.Reg())
    {
    case 0x0:
      if (!(rInsn.Prefix() & X86_Prefix_OpSize))
      {
        rInsn.Prefix() |= X86_Prefix_REX_w; /* d64/df64 constraint */
      }
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Pop);
      if (Operand__Ev(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('popped_value', stack.bit) */
        AllExpr.push_back(Expr::MakeVar("popped_value", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()))));
        /* semantic: popped_value = stack.mem */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("popped_value", VariableExpression::Use),
          Expr::MakeMem(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), nullptr, Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo))));
        /* semantic: stack.id += stack.size */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeBinOp(
            OperationExpression::OpAdd,
            Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
            Expr::MakeBitVector(
              m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())),
              m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())) / 8)))
        );
        /* semantic: op0.val = popped_value */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("popped_value", VariableExpression::Use)));
        /* semantic: free_var('popped_value') */
        AllExpr.push_back(Expr::MakeVar("popped_value", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x1:
      rInsn.Size()++;
      rInsn.Prefix() |= X86_Prefix_Xop;
      return Disassemble(rBinStrm, Offset, rInsn, Mode);
    case 0x2:
      return false;
    case 0x3:
      return false;
    case 0x4:
      return false;
    case 0x5:
      return false;
    case 0x6:
      return false;
    default:
      return false;
    }
}

/** instructions
 * opcode: 90
 *
 * mnemonic: nop
 * semantic: program.id = program.id;

 *
 * mnemonic: xchg
 * operand: ['r8', 'rAX']
 * semantic: alloc_var('tmp_val', op0.bit);
tmp_val = op0.val;
op0.val = op1.val;
op1.val = tmp_val;
free_var('tmp_val');

 * attr: ['rexb']
 *
**/
bool X86Architecture::Table_1_90(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    if ((rInsn.GetPrefix() & X86_Prefix_REX_b) == X86_Prefix_REX_b)
    {
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Xchg);
      if (Operand__r8_rAX(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('tmp_val', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("tmp_val", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: tmp_val = op0.val */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("tmp_val", VariableExpression::Use),
          rInsn.GetOperand(0)));
        /* semantic: op0.val = op1.val */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          rInsn.GetOperand(1)));
        /* semantic: op1.val = tmp_val */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(1),
          Expr::MakeVar("tmp_val", VariableExpression::Use)));
        /* semantic: free_var('tmp_val') */
        AllExpr.push_back(Expr::MakeVar("tmp_val", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    else
    {
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Nop);
      {
        Expression::LSPType AllExpr;
        /* semantic: program.id = program.id */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::ProgramPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::ProgramPointerRegister, rInsn.GetMode()), &m_CpuInfo)));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
}

/** instructions
 * opcode: 91
 *
 * mnemonic: xchg
 * operand: ['rCX', 'rAX']
 * semantic: alloc_var('tmp_val', op0.bit);
tmp_val = op0.val;
op0.val = op1.val;
op1.val = tmp_val;
free_var('tmp_val');

 *
 * mnemonic: xchg
 * operand: ['r9', 'rAX']
 * semantic: alloc_var('tmp_val', op0.bit);
tmp_val = op0.val;
op0.val = op1.val;
op1.val = tmp_val;
free_var('tmp_val');

 * attr: ['rexb']
 *
**/
bool X86Architecture::Table_1_91(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    if ((rInsn.GetPrefix() & X86_Prefix_REX_b) == X86_Prefix_REX_b)
    {
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Xchg);
      if (Operand__r9_rAX(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('tmp_val', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("tmp_val", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: tmp_val = op0.val */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("tmp_val", VariableExpression::Use),
          rInsn.GetOperand(0)));
        /* semantic: op0.val = op1.val */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          rInsn.GetOperand(1)));
        /* semantic: op1.val = tmp_val */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(1),
          Expr::MakeVar("tmp_val", VariableExpression::Use)));
        /* semantic: free_var('tmp_val') */
        AllExpr.push_back(Expr::MakeVar("tmp_val", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    else
    {
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Xchg);
      if (Operand__rCX_rAX(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('tmp_val', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("tmp_val", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: tmp_val = op0.val */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("tmp_val", VariableExpression::Use),
          rInsn.GetOperand(0)));
        /* semantic: op0.val = op1.val */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          rInsn.GetOperand(1)));
        /* semantic: op1.val = tmp_val */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(1),
          Expr::MakeVar("tmp_val", VariableExpression::Use)));
        /* semantic: free_var('tmp_val') */
        AllExpr.push_back(Expr::MakeVar("tmp_val", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
}

/** instructions
 * opcode: 92
 *
 * mnemonic: xchg
 * operand: ['rDX', 'rAX']
 * semantic: alloc_var('tmp_val', op0.bit);
tmp_val = op0.val;
op0.val = op1.val;
op1.val = tmp_val;
free_var('tmp_val');

 *
 * mnemonic: xchg
 * operand: ['r10', 'rAX']
 * semantic: alloc_var('tmp_val', op0.bit);
tmp_val = op0.val;
op0.val = op1.val;
op1.val = tmp_val;
free_var('tmp_val');

 * attr: ['rexb']
 *
**/
bool X86Architecture::Table_1_92(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    if ((rInsn.GetPrefix() & X86_Prefix_REX_b) == X86_Prefix_REX_b)
    {
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Xchg);
      if (Operand__r10_rAX(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('tmp_val', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("tmp_val", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: tmp_val = op0.val */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("tmp_val", VariableExpression::Use),
          rInsn.GetOperand(0)));
        /* semantic: op0.val = op1.val */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          rInsn.GetOperand(1)));
        /* semantic: op1.val = tmp_val */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(1),
          Expr::MakeVar("tmp_val", VariableExpression::Use)));
        /* semantic: free_var('tmp_val') */
        AllExpr.push_back(Expr::MakeVar("tmp_val", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    else
    {
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Xchg);
      if (Operand__rDX_rAX(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('tmp_val', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("tmp_val", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: tmp_val = op0.val */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("tmp_val", VariableExpression::Use),
          rInsn.GetOperand(0)));
        /* semantic: op0.val = op1.val */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          rInsn.GetOperand(1)));
        /* semantic: op1.val = tmp_val */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(1),
          Expr::MakeVar("tmp_val", VariableExpression::Use)));
        /* semantic: free_var('tmp_val') */
        AllExpr.push_back(Expr::MakeVar("tmp_val", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
}

/** instructions
 * opcode: 93
 *
 * mnemonic: xchg
 * operand: ['rBX', 'rAX']
 * semantic: alloc_var('tmp_val', op0.bit);
tmp_val = op0.val;
op0.val = op1.val;
op1.val = tmp_val;
free_var('tmp_val');

 *
 * mnemonic: xchg
 * operand: ['r11', 'rAX']
 * semantic: alloc_var('tmp_val', op0.bit);
tmp_val = op0.val;
op0.val = op1.val;
op1.val = tmp_val;
free_var('tmp_val');

 * attr: ['rexb']
 *
**/
bool X86Architecture::Table_1_93(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    if ((rInsn.GetPrefix() & X86_Prefix_REX_b) == X86_Prefix_REX_b)
    {
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Xchg);
      if (Operand__r11_rAX(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('tmp_val', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("tmp_val", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: tmp_val = op0.val */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("tmp_val", VariableExpression::Use),
          rInsn.GetOperand(0)));
        /* semantic: op0.val = op1.val */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          rInsn.GetOperand(1)));
        /* semantic: op1.val = tmp_val */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(1),
          Expr::MakeVar("tmp_val", VariableExpression::Use)));
        /* semantic: free_var('tmp_val') */
        AllExpr.push_back(Expr::MakeVar("tmp_val", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    else
    {
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Xchg);
      if (Operand__rBX_rAX(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('tmp_val', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("tmp_val", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: tmp_val = op0.val */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("tmp_val", VariableExpression::Use),
          rInsn.GetOperand(0)));
        /* semantic: op0.val = op1.val */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          rInsn.GetOperand(1)));
        /* semantic: op1.val = tmp_val */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(1),
          Expr::MakeVar("tmp_val", VariableExpression::Use)));
        /* semantic: free_var('tmp_val') */
        AllExpr.push_back(Expr::MakeVar("tmp_val", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
}

/** instructions
 * opcode: 94
 *
 * mnemonic: xchg
 * operand: ['rSP', 'rAX']
 * semantic: alloc_var('tmp_val', op0.bit);
tmp_val = op0.val;
op0.val = op1.val;
op1.val = tmp_val;
free_var('tmp_val');

 *
 * mnemonic: xchg
 * operand: ['r12', 'rAX']
 * semantic: alloc_var('tmp_val', op0.bit);
tmp_val = op0.val;
op0.val = op1.val;
op1.val = tmp_val;
free_var('tmp_val');

 * attr: ['rexb']
 *
**/
bool X86Architecture::Table_1_94(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    if ((rInsn.GetPrefix() & X86_Prefix_REX_b) == X86_Prefix_REX_b)
    {
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Xchg);
      if (Operand__r12_rAX(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('tmp_val', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("tmp_val", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: tmp_val = op0.val */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("tmp_val", VariableExpression::Use),
          rInsn.GetOperand(0)));
        /* semantic: op0.val = op1.val */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          rInsn.GetOperand(1)));
        /* semantic: op1.val = tmp_val */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(1),
          Expr::MakeVar("tmp_val", VariableExpression::Use)));
        /* semantic: free_var('tmp_val') */
        AllExpr.push_back(Expr::MakeVar("tmp_val", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    else
    {
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Xchg);
      if (Operand__rSP_rAX(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('tmp_val', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("tmp_val", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: tmp_val = op0.val */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("tmp_val", VariableExpression::Use),
          rInsn.GetOperand(0)));
        /* semantic: op0.val = op1.val */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          rInsn.GetOperand(1)));
        /* semantic: op1.val = tmp_val */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(1),
          Expr::MakeVar("tmp_val", VariableExpression::Use)));
        /* semantic: free_var('tmp_val') */
        AllExpr.push_back(Expr::MakeVar("tmp_val", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
}

/** instructions
 * opcode: 95
 *
 * mnemonic: xchg
 * operand: ['rBP', 'rAX']
 * semantic: alloc_var('tmp_val', op0.bit);
tmp_val = op0.val;
op0.val = op1.val;
op1.val = tmp_val;
free_var('tmp_val');

 *
 * mnemonic: xchg
 * operand: ['r13', 'rAX']
 * semantic: alloc_var('tmp_val', op0.bit);
tmp_val = op0.val;
op0.val = op1.val;
op1.val = tmp_val;
free_var('tmp_val');

 * attr: ['rexb']
 *
**/
bool X86Architecture::Table_1_95(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    if ((rInsn.GetPrefix() & X86_Prefix_REX_b) == X86_Prefix_REX_b)
    {
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Xchg);
      if (Operand__r13_rAX(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('tmp_val', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("tmp_val", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: tmp_val = op0.val */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("tmp_val", VariableExpression::Use),
          rInsn.GetOperand(0)));
        /* semantic: op0.val = op1.val */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          rInsn.GetOperand(1)));
        /* semantic: op1.val = tmp_val */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(1),
          Expr::MakeVar("tmp_val", VariableExpression::Use)));
        /* semantic: free_var('tmp_val') */
        AllExpr.push_back(Expr::MakeVar("tmp_val", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    else
    {
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Xchg);
      if (Operand__rBP_rAX(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('tmp_val', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("tmp_val", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: tmp_val = op0.val */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("tmp_val", VariableExpression::Use),
          rInsn.GetOperand(0)));
        /* semantic: op0.val = op1.val */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          rInsn.GetOperand(1)));
        /* semantic: op1.val = tmp_val */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(1),
          Expr::MakeVar("tmp_val", VariableExpression::Use)));
        /* semantic: free_var('tmp_val') */
        AllExpr.push_back(Expr::MakeVar("tmp_val", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
}

/** instructions
 * opcode: 96
 *
 * mnemonic: xchg
 * operand: ['rSI', 'rAX']
 * semantic: alloc_var('tmp_val', op0.bit);
tmp_val = op0.val;
op0.val = op1.val;
op1.val = tmp_val;
free_var('tmp_val');

 *
 * mnemonic: xchg
 * operand: ['r14', 'rAX']
 * semantic: alloc_var('tmp_val', op0.bit);
tmp_val = op0.val;
op0.val = op1.val;
op1.val = tmp_val;
free_var('tmp_val');

 * attr: ['rexb']
 *
**/
bool X86Architecture::Table_1_96(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    if ((rInsn.GetPrefix() & X86_Prefix_REX_b) == X86_Prefix_REX_b)
    {
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Xchg);
      if (Operand__r14_rAX(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('tmp_val', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("tmp_val", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: tmp_val = op0.val */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("tmp_val", VariableExpression::Use),
          rInsn.GetOperand(0)));
        /* semantic: op0.val = op1.val */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          rInsn.GetOperand(1)));
        /* semantic: op1.val = tmp_val */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(1),
          Expr::MakeVar("tmp_val", VariableExpression::Use)));
        /* semantic: free_var('tmp_val') */
        AllExpr.push_back(Expr::MakeVar("tmp_val", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    else
    {
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Xchg);
      if (Operand__rSI_rAX(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('tmp_val', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("tmp_val", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: tmp_val = op0.val */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("tmp_val", VariableExpression::Use),
          rInsn.GetOperand(0)));
        /* semantic: op0.val = op1.val */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          rInsn.GetOperand(1)));
        /* semantic: op1.val = tmp_val */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(1),
          Expr::MakeVar("tmp_val", VariableExpression::Use)));
        /* semantic: free_var('tmp_val') */
        AllExpr.push_back(Expr::MakeVar("tmp_val", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
}

/** instructions
 * opcode: 97
 *
 * mnemonic: xchg
 * operand: ['rDI', 'rAX']
 * semantic: alloc_var('tmp_val', op0.bit);
tmp_val = op0.val;
op0.val = op1.val;
op1.val = tmp_val;
free_var('tmp_val');

 *
 * mnemonic: xchg
 * operand: ['r15', 'rAX']
 * semantic: alloc_var('tmp_val', op0.bit);
tmp_val = op0.val;
op0.val = op1.val;
op1.val = tmp_val;
free_var('tmp_val');

 * attr: ['rexb']
 *
**/
bool X86Architecture::Table_1_97(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    if ((rInsn.GetPrefix() & X86_Prefix_REX_b) == X86_Prefix_REX_b)
    {
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Xchg);
      if (Operand__r15_rAX(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('tmp_val', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("tmp_val", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: tmp_val = op0.val */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("tmp_val", VariableExpression::Use),
          rInsn.GetOperand(0)));
        /* semantic: op0.val = op1.val */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          rInsn.GetOperand(1)));
        /* semantic: op1.val = tmp_val */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(1),
          Expr::MakeVar("tmp_val", VariableExpression::Use)));
        /* semantic: free_var('tmp_val') */
        AllExpr.push_back(Expr::MakeVar("tmp_val", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    else
    {
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Xchg);
      if (Operand__rDI_rAX(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('tmp_val', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("tmp_val", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: tmp_val = op0.val */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("tmp_val", VariableExpression::Use),
          rInsn.GetOperand(0)));
        /* semantic: op0.val = op1.val */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          rInsn.GetOperand(1)));
        /* semantic: op1.val = tmp_val */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(1),
          Expr::MakeVar("tmp_val", VariableExpression::Use)));
        /* semantic: free_var('tmp_val') */
        AllExpr.push_back(Expr::MakeVar("tmp_val", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
}

/** instructions
 * opcode: 98
 *
 * mnemonic: cwde
 * semantic: eax.id = sign_extend(ax.id, int(eax.bit, eax.bit));

 * cpu_model: >= X86_Arch_80386
 *
 * mnemonic: cbw
 * semantic: ax.id = sign_extend(al.id, int(ax.bit, ax.bit));

 * cpu_model: >= X86_Arch_8088
 * attr: ['op_size']
 *
 * mnemonic: cdqe
 * semantic: rax.id = sign_extend(eax.id, int(rax.bit, rax.bit));

 * attr: ['rexw']
 *
**/
bool X86Architecture::Table_1_98(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    if ((rInsn.GetPrefix() & X86_Prefix_REX_w) == X86_Prefix_REX_w)
    {
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Cdqe);
      {
        Expression::LSPType AllExpr;
        /* semantic: rax.id = sign_extend(eax.id, int(rax.bit, rax.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_Reg_Rax, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpSext, Expr::MakeId(X86_Reg_Eax, &m_CpuInfo), Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(X86_Reg_Rax), m_CpuInfo.GetSizeOfRegisterInBit(X86_Reg_Rax)))));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_8088 && (rInsn.GetPrefix() & X86_Prefix_OpSize))
    {
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Cbw);
      {
        Expression::LSPType AllExpr;
        /* semantic: ax.id = sign_extend(al.id, int(ax.bit, ax.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_Reg_Ax, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpSext, Expr::MakeId(X86_Reg_Al, &m_CpuInfo), Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(X86_Reg_Ax), m_CpuInfo.GetSizeOfRegisterInBit(X86_Reg_Ax)))));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_80386)
    {
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Cwde);
      {
        Expression::LSPType AllExpr;
        /* semantic: eax.id = sign_extend(ax.id, int(eax.bit, eax.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_Reg_Eax, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpSext, Expr::MakeId(X86_Reg_Ax, &m_CpuInfo), Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(X86_Reg_Eax), m_CpuInfo.GetSizeOfRegisterInBit(X86_Reg_Eax)))));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    return false;
}

/** instructions
 * opcode: 99
 *
 * mnemonic: cdq
 * semantic: ['if __expr and (eax.id & int32(0x80000000)) == int32(0x80000000): edx.id = int32(0xffffffff)\nelse: edx.id = int32(0)']
 * cpu_model: >= X86_Arch_80386
 *
 * mnemonic: cwd
 * semantic: ['if __expr and (ax.id & int16(0x8000)) == int16(0x8000): dx.id = int16(0xffff)\nelse: dx.id = int16(0)']
 * cpu_model: >= X86_Arch_8088
 * attr: ['op_size']
 *
 * mnemonic: cqo
 * semantic: ['if __expr and (rax.id & int64(0x8000000000000000)) == int64(0x8000000000000000): rdx.id = int64(0xffffffffffffffff)\nelse: rdx.id = int64(0)']
 * attr: ['rexw']
 *
**/
bool X86Architecture::Table_1_99(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    if ((rInsn.GetPrefix() & X86_Prefix_REX_w) == X86_Prefix_REX_w)
    {
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Cqo);
      {
        Expression::LSPType AllExpr;
        /* semantic: if __expr and (rax.id & int64(0x8000000000000000)) == int64(0x8000000000000000): rdx.id = int64(0xffffffffffffffff)
        else: rdx.id = int64(0) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeBinOp(
            OperationExpression::OpAnd,
            Expr::MakeId(X86_Reg_Rax, &m_CpuInfo),
            Expr::MakeBitVector(64, 0x8000000000000000)),
          Expr::MakeBitVector(64, 0x8000000000000000),
          Expr::MakeAssign(
            Expr::MakeId(X86_Reg_Rdx, &m_CpuInfo),
            Expr::MakeBitVector(64, 0xffffffffffffffff)),
          Expr::MakeAssign(
            Expr::MakeId(X86_Reg_Rdx, &m_CpuInfo),
            Expr::MakeBitVector(64, 0x0))));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_8088 && (rInsn.GetPrefix() & X86_Prefix_OpSize))
    {
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Cwd);
      {
        Expression::LSPType AllExpr;
        /* semantic: if __expr and (ax.id & int16(0x8000)) == int16(0x8000): dx.id = int16(0xffff)
        else: dx.id = int16(0) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeBinOp(
            OperationExpression::OpAnd,
            Expr::MakeId(X86_Reg_Ax, &m_CpuInfo),
            Expr::MakeBitVector(16, 0x8000)),
          Expr::MakeBitVector(16, 0x8000),
          Expr::MakeAssign(
            Expr::MakeId(X86_Reg_Dx, &m_CpuInfo),
            Expr::MakeBitVector(16, 0xffff)),
          Expr::MakeAssign(
            Expr::MakeId(X86_Reg_Dx, &m_CpuInfo),
            Expr::MakeBitVector(16, 0x0))));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    else if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_80386)
    {
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Cdq);
      {
        Expression::LSPType AllExpr;
        /* semantic: if __expr and (eax.id & int32(0x80000000)) == int32(0x80000000): edx.id = int32(0xffffffff)
        else: edx.id = int32(0) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeBinOp(
            OperationExpression::OpAnd,
            Expr::MakeId(X86_Reg_Eax, &m_CpuInfo),
            Expr::MakeBitVector(32, 0x80000000)),
          Expr::MakeBitVector(32, 0x80000000),
          Expr::MakeAssign(
            Expr::MakeId(X86_Reg_Edx, &m_CpuInfo),
            Expr::MakeBitVector(32, 0xffffffff)),
          Expr::MakeAssign(
            Expr::MakeId(X86_Reg_Edx, &m_CpuInfo),
            Expr::MakeBitVector(32, 0x0))));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    return false;
}

/** instruction
 * mnemonic: call
 * operand: ['Ap']
 * opcode: 9a
 * operation_type: ['call']
 * attr: ['nm64']
**/
bool X86Architecture::Table_1_9a(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    if (Mode != X86_Bit_64)
    {
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Call);
      rInsn.SubType() |= Instruction::CallType;
      if (Operand__Ap(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else
      return false;
}

/** instruction
 * mnemonic: fwait
 * opcode: 9b
**/
bool X86Architecture::Table_1_9b(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Size()++;
    rInsn.SetOpcode(X86_Opcode_Fwait);
    return true;
}

/** instruction
 * mnemonic: pushf
 * opcode: 9c
 * semantic: stack.id -= stack.size;
stack.mem =\
  (  bit_cast(cf.id, int(stack.bit, stack.bit))
  | (int64(1)                                   << int(stack.bit, 1))
  | (bit_cast(pf.id, int(stack.bit, stack.bit)) << int(stack.bit, 2))
  | (bit_cast(af.id, int(stack.bit, stack.bit)) << int(stack.bit, 4))
  | (bit_cast(zf.id, int(stack.bit, stack.bit)) << int(stack.bit, 6))
  | (bit_cast(sf.id, int(stack.bit, stack.bit)) << int(stack.bit, 7))
  | (bit_cast(tf.id, int(stack.bit, stack.bit)) << int(stack.bit, 8))
  | (int64(1)                                   << int(stack.bit, 9))
  | (bit_cast(df.id, int(stack.bit, stack.bit)) << int(stack.bit, 10))
  | (bit_cast(of.id, int(stack.bit, stack.bit)) << int(stack.bit, 11)));

 * constraint: d64
**/
bool X86Architecture::Table_1_9c(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    if (!(rInsn.Prefix() & X86_Prefix_OpSize))
    {
      rInsn.Prefix() |= X86_Prefix_REX_w; /* d64/df64 constraint */
    }
    rInsn.Size()++;
    rInsn.SetOpcode(X86_Opcode_Pushf);
    {
      Expression::LSPType AllExpr;
      /* semantic: stack.id -= stack.size */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
        Expr::MakeBinOp(
          OperationExpression::OpSub,
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeBitVector(
            m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())),
            m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())) / 8)))
      );
      /* semantic: stack.mem =\
        (  bit_cast(cf.id, int(stack.bit, stack.bit))
        | (int64(1)                                   << int(stack.bit, 1))
        | (bit_cast(pf.id, int(stack.bit, stack.bit)) << int(stack.bit, 2))
        | (bit_cast(af.id, int(stack.bit, stack.bit)) << int(stack.bit, 4))
        | (bit_cast(zf.id, int(stack.bit, stack.bit)) << int(stack.bit, 6))
        | (bit_cast(sf.id, int(stack.bit, stack.bit)) << int(stack.bit, 7))
        | (bit_cast(tf.id, int(stack.bit, stack.bit)) << int(stack.bit, 8))
        | (int64(1)                                   << int(stack.bit, 9))
        | (bit_cast(df.id, int(stack.bit, stack.bit)) << int(stack.bit, 10))
        | (bit_cast(of.id, int(stack.bit, stack.bit)) << int(stack.bit, 11))) */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeMem(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), nullptr, Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo)),
        Expr::MakeBinOp(
          OperationExpression::OpOr,
          Expr::MakeBinOp(
            OperationExpression::OpOr,
            Expr::MakeBinOp(
              OperationExpression::OpOr,
              Expr::MakeBinOp(
                OperationExpression::OpOr,
                Expr::MakeBinOp(
                  OperationExpression::OpOr,
                  Expr::MakeBinOp(
                    OperationExpression::OpOr,
                    Expr::MakeBinOp(
                      OperationExpression::OpOr,
                      Expr::MakeBinOp(
                        OperationExpression::OpOr,
                        Expr::MakeBinOp(
                          OperationExpression::OpOr,
                          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeId(X86_FlCf, &m_CpuInfo), Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())))),
                          Expr::MakeBinOp(
                            OperationExpression::OpLls,
                            Expr::MakeBitVector(64, 0x1),
                            Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), 0x1))),
                        Expr::MakeBinOp(
                          OperationExpression::OpLls,
                          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeId(X86_FlPf, &m_CpuInfo), Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())))),
                          Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), 0x2))),
                      Expr::MakeBinOp(
                        OperationExpression::OpLls,
                        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeId(X86_FlAf, &m_CpuInfo), Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())))),
                        Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), 0x4))),
                    Expr::MakeBinOp(
                      OperationExpression::OpLls,
                      Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeId(X86_FlZf, &m_CpuInfo), Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())))),
                      Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), 0x6))),
                  Expr::MakeBinOp(
                    OperationExpression::OpLls,
                    Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeId(X86_FlSf, &m_CpuInfo), Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())))),
                    Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), 0x7))),
                Expr::MakeBinOp(
                  OperationExpression::OpLls,
                  Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeId(X86_FlTf, &m_CpuInfo), Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())))),
                  Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), 0x8))),
              Expr::MakeBinOp(
                OperationExpression::OpLls,
                Expr::MakeBitVector(64, 0x1),
                Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), 0x9))),
            Expr::MakeBinOp(
              OperationExpression::OpLls,
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeId(X86_FlDf, &m_CpuInfo), Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())))),
              Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), 0xa))),
          Expr::MakeBinOp(
            OperationExpression::OpLls,
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeId(X86_FlOf, &m_CpuInfo), Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())))),
            Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), 0xb)))));
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instruction
 * mnemonic: popf
 * opcode: 9d
 * semantic: alloc_var('flags', stack.bit);
flags = stack.mem;
stack.id += stack.size;
cf.id = bit_cast(flags, int1(1));
pf.id = bit_cast((flags >> int(stack.bit,  2)), int1(1));
af.id = bit_cast((flags >> int(stack.bit,  4)), int1(1));
zf.id = bit_cast((flags >> int(stack.bit,  6)), int1(1));
sf.id = bit_cast((flags >> int(stack.bit,  7)), int1(1));
tf.id = bit_cast((flags >> int(stack.bit,  8)), int1(1));
df.id = bit_cast((flags >> int(stack.bit, 10)), int1(1));
of.id = bit_cast((flags >> int(stack.bit, 11)), int1(1));
free_var('flags');

 * constraint: d64
**/
bool X86Architecture::Table_1_9d(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    if (!(rInsn.Prefix() & X86_Prefix_OpSize))
    {
      rInsn.Prefix() |= X86_Prefix_REX_w; /* d64/df64 constraint */
    }
    rInsn.Size()++;
    rInsn.SetOpcode(X86_Opcode_Popf);
    {
      Expression::LSPType AllExpr;
      /* semantic: alloc_var('flags', stack.bit) */
      AllExpr.push_back(Expr::MakeVar("flags", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()))));
      /* semantic: flags = stack.mem */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("flags", VariableExpression::Use),
        Expr::MakeMem(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), nullptr, Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo))));
      /* semantic: stack.id += stack.size */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
        Expr::MakeBinOp(
          OperationExpression::OpAdd,
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeBitVector(
            m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())),
            m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())) / 8)))
      );
      /* semantic: cf.id = bit_cast(flags, int1(1)) */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlCf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeVar("flags", VariableExpression::Use), Expr::MakeBitVector(1, 0x1))));
      /* semantic: pf.id = bit_cast((flags >> int(stack.bit,  2)), int1(1)) */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlPf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeVar("flags", VariableExpression::Use),
          Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), 0x2)), Expr::MakeBitVector(1, 0x1))));
      /* semantic: af.id = bit_cast((flags >> int(stack.bit,  4)), int1(1)) */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlAf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeVar("flags", VariableExpression::Use),
          Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), 0x4)), Expr::MakeBitVector(1, 0x1))));
      /* semantic: zf.id = bit_cast((flags >> int(stack.bit,  6)), int1(1)) */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlZf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeVar("flags", VariableExpression::Use),
          Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), 0x6)), Expr::MakeBitVector(1, 0x1))));
      /* semantic: sf.id = bit_cast((flags >> int(stack.bit,  7)), int1(1)) */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlSf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeVar("flags", VariableExpression::Use),
          Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), 0x7)), Expr::MakeBitVector(1, 0x1))));
      /* semantic: tf.id = bit_cast((flags >> int(stack.bit,  8)), int1(1)) */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlTf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeVar("flags", VariableExpression::Use),
          Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), 0x8)), Expr::MakeBitVector(1, 0x1))));
      /* semantic: df.id = bit_cast((flags >> int(stack.bit, 10)), int1(1)) */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlDf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeVar("flags", VariableExpression::Use),
          Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), 0xa)), Expr::MakeBitVector(1, 0x1))));
      /* semantic: of.id = bit_cast((flags >> int(stack.bit, 11)), int1(1)) */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlOf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeVar("flags", VariableExpression::Use),
          Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), 0xb)), Expr::MakeBitVector(1, 0x1))));
      /* semantic: free_var('flags') */
      AllExpr.push_back(Expr::MakeVar("flags", VariableExpression::Free));
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instruction
 * mnemonic: sahf
 * update_flags: ['sf', 'zf', 'af', 'pf', 'cf']
 * opcode: 9e
**/
bool X86Architecture::Table_1_9e(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Size()++;
    rInsn.SetOpcode(X86_Opcode_Sahf);
    {
      Expression::LSPType AllExpr;
      rInsn.SetUpdatedFlags(X86_FlSf | X86_FlZf | X86_FlAf | X86_FlPf | X86_FlCf);
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instruction
 * mnemonic: lahf
 * opcode: 9f
 * test_flags: ['sf', 'zf', 'af', 'pf', 'cf']
 * semantic: ah.id =\
    (  bit_cast(cf.id, int8(ah.bit))
    | (int(ah.bit, 1)                << int(ah.bit, 1))
    | (bit_cast(pf.id, int8(ah.bit)) << int(ah.bit, 2))
    | (int(ah.bit, 0)                << int(ah.bit, 3))
    | (bit_cast(af.id, int8(ah.bit)) << int(ah.bit, 4))
    | (int(ah.bit, 0)                << int(ah.bit, 5))
    | (bit_cast(zf.id, int8(ah.bit)) << int(ah.bit, 6))
    | (bit_cast(sf.id, int8(ah.bit)) << int(ah.bit, 7)));

**/
bool X86Architecture::Table_1_9f(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Size()++;
    rInsn.SetOpcode(X86_Opcode_Lahf);
    {
      Expression::LSPType AllExpr;
      rInsn.SetTestedFlags(X86_FlSf | X86_FlZf | X86_FlAf | X86_FlPf | X86_FlCf);
      /* semantic: ah.id =\
          (  bit_cast(cf.id, int8(ah.bit))
          | (int(ah.bit, 1)                << int(ah.bit, 1))
          | (bit_cast(pf.id, int8(ah.bit)) << int(ah.bit, 2))
          | (int(ah.bit, 0)                << int(ah.bit, 3))
          | (bit_cast(af.id, int8(ah.bit)) << int(ah.bit, 4))
          | (int(ah.bit, 0)                << int(ah.bit, 5))
          | (bit_cast(zf.id, int8(ah.bit)) << int(ah.bit, 6))
          | (bit_cast(sf.id, int8(ah.bit)) << int(ah.bit, 7))) */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_Reg_Ah, &m_CpuInfo),
        Expr::MakeBinOp(
          OperationExpression::OpOr,
          Expr::MakeBinOp(
            OperationExpression::OpOr,
            Expr::MakeBinOp(
              OperationExpression::OpOr,
              Expr::MakeBinOp(
                OperationExpression::OpOr,
                Expr::MakeBinOp(
                  OperationExpression::OpOr,
                  Expr::MakeBinOp(
                    OperationExpression::OpOr,
                    Expr::MakeBinOp(
                      OperationExpression::OpOr,
                      Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeId(X86_FlCf, &m_CpuInfo), Expr::MakeBitVector(8, m_CpuInfo.GetSizeOfRegisterInBit(X86_Reg_Ah))),
                      Expr::MakeBinOp(
                        OperationExpression::OpLls,
                        Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(X86_Reg_Ah), 0x1),
                        Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(X86_Reg_Ah), 0x1))),
                    Expr::MakeBinOp(
                      OperationExpression::OpLls,
                      Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeId(X86_FlPf, &m_CpuInfo), Expr::MakeBitVector(8, m_CpuInfo.GetSizeOfRegisterInBit(X86_Reg_Ah))),
                      Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(X86_Reg_Ah), 0x2))),
                  Expr::MakeBinOp(
                    OperationExpression::OpLls,
                    Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(X86_Reg_Ah), 0x0),
                    Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(X86_Reg_Ah), 0x3))),
                Expr::MakeBinOp(
                  OperationExpression::OpLls,
                  Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeId(X86_FlAf, &m_CpuInfo), Expr::MakeBitVector(8, m_CpuInfo.GetSizeOfRegisterInBit(X86_Reg_Ah))),
                  Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(X86_Reg_Ah), 0x4))),
              Expr::MakeBinOp(
                OperationExpression::OpLls,
                Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(X86_Reg_Ah), 0x0),
                Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(X86_Reg_Ah), 0x5))),
            Expr::MakeBinOp(
              OperationExpression::OpLls,
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeId(X86_FlZf, &m_CpuInfo), Expr::MakeBitVector(8, m_CpuInfo.GetSizeOfRegisterInBit(X86_Reg_Ah))),
              Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(X86_Reg_Ah), 0x6))),
          Expr::MakeBinOp(
            OperationExpression::OpLls,
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeId(X86_FlSf, &m_CpuInfo), Expr::MakeBitVector(8, m_CpuInfo.GetSizeOfRegisterInBit(X86_Reg_Ah))),
            Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(X86_Reg_Ah), 0x7)))));
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instruction
 * mnemonic: mov
 * operand: ['AL', 'Ob']
 * opcode: a0
 * semantic: op0.val = op1.val;

**/
bool X86Architecture::Table_1_a0(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Size()++;
    rInsn.SetOpcode(X86_Opcode_Mov);
    if (Operand__AL_Ob(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    {
      Expression::LSPType AllExpr;
      /* semantic: op0.val = op1.val */
      AllExpr.push_back(Expr::MakeAssign(
        rInsn.GetOperand(0),
        rInsn.GetOperand(1)));
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instruction
 * mnemonic: mov
 * operand: ['rAX', 'Ov']
 * opcode: a1
 * semantic: op0.val = op1.val;

**/
bool X86Architecture::Table_1_a1(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Size()++;
    rInsn.SetOpcode(X86_Opcode_Mov);
    if (Operand__rAX_Ov(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    {
      Expression::LSPType AllExpr;
      /* semantic: op0.val = op1.val */
      AllExpr.push_back(Expr::MakeAssign(
        rInsn.GetOperand(0),
        rInsn.GetOperand(1)));
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instruction
 * mnemonic: mov
 * operand: ['Ob', 'AL']
 * opcode: a2
 * semantic: op0.val = op1.val;

**/
bool X86Architecture::Table_1_a2(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Size()++;
    rInsn.SetOpcode(X86_Opcode_Mov);
    if (Operand__Ob_AL(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    {
      Expression::LSPType AllExpr;
      /* semantic: op0.val = op1.val */
      AllExpr.push_back(Expr::MakeAssign(
        rInsn.GetOperand(0),
        rInsn.GetOperand(1)));
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instruction
 * mnemonic: mov
 * operand: ['Ov', 'rAX']
 * opcode: a3
 * semantic: op0.val = op1.val;

**/
bool X86Architecture::Table_1_a3(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Size()++;
    rInsn.SetOpcode(X86_Opcode_Mov);
    if (Operand__Ov_rAX(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    {
      Expression::LSPType AllExpr;
      /* semantic: op0.val = op1.val */
      AllExpr.push_back(Expr::MakeAssign(
        rInsn.GetOperand(0),
        rInsn.GetOperand(1)));
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instruction
 * mnemonic: movs
 * operand: ['Xb', 'Yb']
 * test_flags: ['df']
 * opcode: a4
 * semantic: if __code and instruction_has_prefix(rep):
  while cnt.id != int(cnt.bit, 0):
    call('move_string')
    cnt.id -= int(cnt.bit, 1);
if __code and instruction_has_no_prefix(rep):
  call('move_string');

**/
bool X86Architecture::Table_1_a4(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Size()++;
    rInsn.SetOpcode(X86_Opcode_Movs);
    if (Operand__Xb_Yb(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    {
      Expression::LSPType AllExpr;
      rInsn.SetTestedFlags(X86_FlDf);
      /* semantic: if __code and instruction_has_prefix(rep):
        while cnt.id != int(cnt.bit, 0):
          call('move_string')
          cnt.id -= int(cnt.bit, 1) */
      if (rInsn.GetPrefix() & (X86_Prefix_Rep))
      {
        /* block glb expressions */
        AllExpr.push_back(Expr::MakeWhileCond(
          ConditionExpression::CondNe,
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::CounterRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::CounterRegister, rInsn.GetMode())), 0x0),
          Expr::MakeBind({
          Expr::MakeAssign(
            rInsn.GetOperand(1),
            rInsn.GetOperand(0)),
          Expr::MakeIfElseCond(
            ConditionExpression::CondEq,
            Expr::MakeId(X86_FlDf, &m_CpuInfo),
            Expr::MakeBitVector(1, 0x1),
            Expr::MakeBind({
            Expr::MakeAssign(
              expr_cast<MemoryExpression>(rInsn.GetOperand(0))->GetOffsetExpression(),
              Expr::MakeBinOp(
                OperationExpression::OpSub,
                expr_cast<MemoryExpression>(rInsn.GetOperand(0))->GetOffsetExpression(),
                Expr::MakeBitVector(expr_cast<MemoryExpression>(rInsn.GetOperand(0))->GetOffsetExpression()->GetBitSize(), rInsn.GetOperand(0)->GetBitSize() / 8)))
            ,
            Expr::MakeAssign(
              expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression(),
              Expr::MakeBinOp(
                OperationExpression::OpSub,
                expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression(),
                Expr::MakeBitVector(expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression()->GetBitSize(), rInsn.GetOperand(1)->GetBitSize() / 8)))
            })
          ,
            Expr::MakeBind({
            Expr::MakeAssign(
              expr_cast<MemoryExpression>(rInsn.GetOperand(0))->GetOffsetExpression(),
              Expr::MakeBinOp(
                OperationExpression::OpAdd,
                expr_cast<MemoryExpression>(rInsn.GetOperand(0))->GetOffsetExpression(),
                Expr::MakeBitVector(expr_cast<MemoryExpression>(rInsn.GetOperand(0))->GetOffsetExpression()->GetBitSize(), rInsn.GetOperand(0)->GetBitSize() / 8)))
            ,
            Expr::MakeAssign(
              expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression(),
              Expr::MakeBinOp(
                OperationExpression::OpAdd,
                expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression(),
                Expr::MakeBitVector(expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression()->GetBitSize(), rInsn.GetOperand(1)->GetBitSize() / 8)))
            })
          ),
          Expr::MakeAssign(
            Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::CounterRegister, rInsn.GetMode()), &m_CpuInfo),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::CounterRegister, rInsn.GetMode()), &m_CpuInfo),
              Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::CounterRegister, rInsn.GetMode())), 0x1)))
          })
        ));
      }
      /* semantic: if __code and instruction_has_no_prefix(rep):
        call('move_string') */
      if (!(rInsn.GetPrefix() & (X86_Prefix_Rep)))
      {
        /* block glb expressions */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(1),
          rInsn.GetOperand(0)));
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeId(X86_FlDf, &m_CpuInfo),
          Expr::MakeBitVector(1, 0x1),
          Expr::MakeBind({
          Expr::MakeAssign(
            expr_cast<MemoryExpression>(rInsn.GetOperand(0))->GetOffsetExpression(),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              expr_cast<MemoryExpression>(rInsn.GetOperand(0))->GetOffsetExpression(),
              Expr::MakeBitVector(expr_cast<MemoryExpression>(rInsn.GetOperand(0))->GetOffsetExpression()->GetBitSize(), rInsn.GetOperand(0)->GetBitSize() / 8)))
          ,
          Expr::MakeAssign(
            expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression(),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression(),
              Expr::MakeBitVector(expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression()->GetBitSize(), rInsn.GetOperand(1)->GetBitSize() / 8)))
          })
        ,
          Expr::MakeBind({
          Expr::MakeAssign(
            expr_cast<MemoryExpression>(rInsn.GetOperand(0))->GetOffsetExpression(),
            Expr::MakeBinOp(
              OperationExpression::OpAdd,
              expr_cast<MemoryExpression>(rInsn.GetOperand(0))->GetOffsetExpression(),
              Expr::MakeBitVector(expr_cast<MemoryExpression>(rInsn.GetOperand(0))->GetOffsetExpression()->GetBitSize(), rInsn.GetOperand(0)->GetBitSize() / 8)))
          ,
          Expr::MakeAssign(
            expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression(),
            Expr::MakeBinOp(
              OperationExpression::OpAdd,
              expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression(),
              Expr::MakeBitVector(expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression()->GetBitSize(), rInsn.GetOperand(1)->GetBitSize() / 8)))
          })
        ));
      }
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instruction
 * mnemonic: movs
 * operand: ['Xv', 'Yv']
 * test_flags: ['df']
 * opcode: a5
 * semantic: if __code and instruction_has_prefix(rep):
  while cnt.id != int(cnt.bit, 0):
    call('move_string')
    cnt.id -= int(cnt.bit, 1);
if __code and instruction_has_no_prefix(rep):
  call('move_string');

**/
bool X86Architecture::Table_1_a5(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Size()++;
    rInsn.SetOpcode(X86_Opcode_Movs);
    if (Operand__Xv_Yv(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    {
      Expression::LSPType AllExpr;
      rInsn.SetTestedFlags(X86_FlDf);
      /* semantic: if __code and instruction_has_prefix(rep):
        while cnt.id != int(cnt.bit, 0):
          call('move_string')
          cnt.id -= int(cnt.bit, 1) */
      if (rInsn.GetPrefix() & (X86_Prefix_Rep))
      {
        /* block glb expressions */
        AllExpr.push_back(Expr::MakeWhileCond(
          ConditionExpression::CondNe,
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::CounterRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::CounterRegister, rInsn.GetMode())), 0x0),
          Expr::MakeBind({
          Expr::MakeAssign(
            rInsn.GetOperand(1),
            rInsn.GetOperand(0)),
          Expr::MakeIfElseCond(
            ConditionExpression::CondEq,
            Expr::MakeId(X86_FlDf, &m_CpuInfo),
            Expr::MakeBitVector(1, 0x1),
            Expr::MakeBind({
            Expr::MakeAssign(
              expr_cast<MemoryExpression>(rInsn.GetOperand(0))->GetOffsetExpression(),
              Expr::MakeBinOp(
                OperationExpression::OpSub,
                expr_cast<MemoryExpression>(rInsn.GetOperand(0))->GetOffsetExpression(),
                Expr::MakeBitVector(expr_cast<MemoryExpression>(rInsn.GetOperand(0))->GetOffsetExpression()->GetBitSize(), rInsn.GetOperand(0)->GetBitSize() / 8)))
            ,
            Expr::MakeAssign(
              expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression(),
              Expr::MakeBinOp(
                OperationExpression::OpSub,
                expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression(),
                Expr::MakeBitVector(expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression()->GetBitSize(), rInsn.GetOperand(1)->GetBitSize() / 8)))
            })
          ,
            Expr::MakeBind({
            Expr::MakeAssign(
              expr_cast<MemoryExpression>(rInsn.GetOperand(0))->GetOffsetExpression(),
              Expr::MakeBinOp(
                OperationExpression::OpAdd,
                expr_cast<MemoryExpression>(rInsn.GetOperand(0))->GetOffsetExpression(),
                Expr::MakeBitVector(expr_cast<MemoryExpression>(rInsn.GetOperand(0))->GetOffsetExpression()->GetBitSize(), rInsn.GetOperand(0)->GetBitSize() / 8)))
            ,
            Expr::MakeAssign(
              expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression(),
              Expr::MakeBinOp(
                OperationExpression::OpAdd,
                expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression(),
                Expr::MakeBitVector(expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression()->GetBitSize(), rInsn.GetOperand(1)->GetBitSize() / 8)))
            })
          ),
          Expr::MakeAssign(
            Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::CounterRegister, rInsn.GetMode()), &m_CpuInfo),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::CounterRegister, rInsn.GetMode()), &m_CpuInfo),
              Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::CounterRegister, rInsn.GetMode())), 0x1)))
          })
        ));
      }
      /* semantic: if __code and instruction_has_no_prefix(rep):
        call('move_string') */
      if (!(rInsn.GetPrefix() & (X86_Prefix_Rep)))
      {
        /* block glb expressions */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(1),
          rInsn.GetOperand(0)));
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeId(X86_FlDf, &m_CpuInfo),
          Expr::MakeBitVector(1, 0x1),
          Expr::MakeBind({
          Expr::MakeAssign(
            expr_cast<MemoryExpression>(rInsn.GetOperand(0))->GetOffsetExpression(),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              expr_cast<MemoryExpression>(rInsn.GetOperand(0))->GetOffsetExpression(),
              Expr::MakeBitVector(expr_cast<MemoryExpression>(rInsn.GetOperand(0))->GetOffsetExpression()->GetBitSize(), rInsn.GetOperand(0)->GetBitSize() / 8)))
          ,
          Expr::MakeAssign(
            expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression(),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression(),
              Expr::MakeBitVector(expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression()->GetBitSize(), rInsn.GetOperand(1)->GetBitSize() / 8)))
          })
        ,
          Expr::MakeBind({
          Expr::MakeAssign(
            expr_cast<MemoryExpression>(rInsn.GetOperand(0))->GetOffsetExpression(),
            Expr::MakeBinOp(
              OperationExpression::OpAdd,
              expr_cast<MemoryExpression>(rInsn.GetOperand(0))->GetOffsetExpression(),
              Expr::MakeBitVector(expr_cast<MemoryExpression>(rInsn.GetOperand(0))->GetOffsetExpression()->GetBitSize(), rInsn.GetOperand(0)->GetBitSize() / 8)))
          ,
          Expr::MakeAssign(
            expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression(),
            Expr::MakeBinOp(
              OperationExpression::OpAdd,
              expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression(),
              Expr::MakeBitVector(expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression()->GetBitSize(), rInsn.GetOperand(1)->GetBitSize() / 8)))
          })
        ));
      }
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instruction
 * mnemonic: cmps
 * test_flags: ['df']
 * semantic: alloc_var('loop', 1);
loop = int1(1);
if __code and instruction_has_prefix(repz):
  if __expr and cnt.id == int(cnt.bit, 0): loop = int1(0)
  while loop == int1(1):
    call('compare_string')
    cnt.id -= int(cnt.bit, 1)
    if __expr and cnt.id == int(cnt.bit, 0): loop = int1(0)
    if __expr and zf.id == int1(0): loop = int1(0);
if __code and instruction_has_prefix(repnz):
  if __expr and cnt.id == int(cnt.bit, 0): loop = int1(0)
  while loop == int1(1):
    call('compare_string')
    cnt.id -= int(cnt.bit, 1)
    if __expr and cnt.id == int(cnt.bit, 0): loop = int1(0)
    if __expr and zf.id == int1(1): loop = int1(0);
if __code and instruction_has_no_prefix(repz, repnz):
  call('compare_string');
free_var('loop');

 * operand: ['Xb', 'Yb']
 * opcode: a6
 * update_flags: ['of', 'sf', 'zf', 'af', 'pf', 'cf']
**/
bool X86Architecture::Table_1_a6(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Size()++;
    rInsn.SetOpcode(X86_Opcode_Cmps);
    if (Operand__Xb_Yb(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    {
      Expression::LSPType AllExpr;
      rInsn.SetTestedFlags(X86_FlDf);
      rInsn.SetUpdatedFlags(X86_FlOf | X86_FlSf | X86_FlZf | X86_FlAf | X86_FlPf | X86_FlCf);
      /* semantic: alloc_var('loop', 1) */
      AllExpr.push_back(Expr::MakeVar("loop", VariableExpression::Alloc, 0x1));
      /* semantic: loop = int1(1) */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("loop", VariableExpression::Use),
        Expr::MakeBitVector(1, 0x1)));
      /* semantic: if __code and instruction_has_prefix(repz):
        if __expr and cnt.id == int(cnt.bit, 0): loop = int1(0)
        while loop == int1(1):
          call('compare_string')
          cnt.id -= int(cnt.bit, 1)
          if __expr and cnt.id == int(cnt.bit, 0): loop = int1(0)
          if __expr and zf.id == int1(0): loop = int1(0) */
      if (rInsn.GetPrefix() & (X86_Prefix_Rep))
      {
        /* block glb expressions */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::CounterRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::CounterRegister, rInsn.GetMode())), 0x0),
          Expr::MakeAssign(
            Expr::MakeVar("loop", VariableExpression::Use),
            Expr::MakeBitVector(1, 0x0)), nullptr)
        );
        AllExpr.push_back(Expr::MakeWhileCond(
          ConditionExpression::CondEq,
          Expr::MakeVar("loop", VariableExpression::Use),
          Expr::MakeBitVector(1, 0x1),
          Expr::MakeBind({
          Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()),
          Expr::MakeAssign(
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              rInsn.GetOperand(0),
              rInsn.GetOperand(1))),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlOf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeBinOp(
                OperationExpression::OpAnd,
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  rInsn.GetOperand(0),
                  Expr::MakeVar("res", VariableExpression::Use)),
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  rInsn.GetOperand(0),
                  rInsn.GetOperand(1))),
              Expr::MakeBinOp(
                OperationExpression::OpSub,
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlCf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  Expr::MakeBinOp(
                    OperationExpression::OpXor,
                    rInsn.GetOperand(0),
                    rInsn.GetOperand(1)),
                  Expr::MakeVar("res", VariableExpression::Use)),
                Expr::MakeBinOp(
                  OperationExpression::OpAnd,
                  Expr::MakeBinOp(
                    OperationExpression::OpXor,
                    rInsn.GetOperand(0),
                    Expr::MakeVar("res", VariableExpression::Use)),
                  Expr::MakeBinOp(
                    OperationExpression::OpXor,
                    rInsn.GetOperand(0),
                    rInsn.GetOperand(1)))),
              Expr::MakeBinOp(
                OperationExpression::OpSub,
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlSf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBinOp(
                OperationExpression::OpSub,
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlZf, &m_CpuInfo),
            Expr::MakeTernaryCond(ConditionExpression::CondEq,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
            Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))),
          Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)),
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBitVector(1, 0x1)),
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeId(X86_FlPf, &m_CpuInfo),
            Expr::MakeVar("pf_tmp", VariableExpression::Use)),
          Expr::MakeVar("pf_tmp", VariableExpression::Free),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlAf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  rInsn.GetOperand(0),
                  rInsn.GetOperand(1)),
                Expr::MakeVar("res", VariableExpression::Use)),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))),
          Expr::MakeIfElseCond(
            ConditionExpression::CondEq,
            Expr::MakeId(X86_FlDf, &m_CpuInfo),
            Expr::MakeBitVector(1, 0x1),
            Expr::MakeBind({
            Expr::MakeAssign(
              expr_cast<MemoryExpression>(rInsn.GetOperand(0))->GetOffsetExpression(),
              Expr::MakeBinOp(
                OperationExpression::OpSub,
                expr_cast<MemoryExpression>(rInsn.GetOperand(0))->GetOffsetExpression(),
                Expr::MakeBitVector(expr_cast<MemoryExpression>(rInsn.GetOperand(0))->GetOffsetExpression()->GetBitSize(), rInsn.GetOperand(0)->GetBitSize() / 8)))
            ,
            Expr::MakeAssign(
              expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression(),
              Expr::MakeBinOp(
                OperationExpression::OpSub,
                expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression(),
                Expr::MakeBitVector(expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression()->GetBitSize(), rInsn.GetOperand(1)->GetBitSize() / 8)))
            })
          ,
            Expr::MakeBind({
            Expr::MakeAssign(
              expr_cast<MemoryExpression>(rInsn.GetOperand(0))->GetOffsetExpression(),
              Expr::MakeBinOp(
                OperationExpression::OpAdd,
                expr_cast<MemoryExpression>(rInsn.GetOperand(0))->GetOffsetExpression(),
                Expr::MakeBitVector(expr_cast<MemoryExpression>(rInsn.GetOperand(0))->GetOffsetExpression()->GetBitSize(), rInsn.GetOperand(0)->GetBitSize() / 8)))
            ,
            Expr::MakeAssign(
              expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression(),
              Expr::MakeBinOp(
                OperationExpression::OpAdd,
                expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression(),
                Expr::MakeBitVector(expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression()->GetBitSize(), rInsn.GetOperand(1)->GetBitSize() / 8)))
            })
          ),
          Expr::MakeVar("res", VariableExpression::Free),
          Expr::MakeAssign(
            Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::CounterRegister, rInsn.GetMode()), &m_CpuInfo),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::CounterRegister, rInsn.GetMode()), &m_CpuInfo),
              Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::CounterRegister, rInsn.GetMode())), 0x1)))
          ,
          Expr::MakeIfElseCond(
            ConditionExpression::CondEq,
            Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::CounterRegister, rInsn.GetMode()), &m_CpuInfo),
            Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::CounterRegister, rInsn.GetMode())), 0x0),
            Expr::MakeAssign(
              Expr::MakeVar("loop", VariableExpression::Use),
              Expr::MakeBitVector(1, 0x0)), nullptr)
          ,
          Expr::MakeIfElseCond(
            ConditionExpression::CondEq,
            Expr::MakeId(X86_FlZf, &m_CpuInfo),
            Expr::MakeBitVector(1, 0x0),
            Expr::MakeAssign(
              Expr::MakeVar("loop", VariableExpression::Use),
              Expr::MakeBitVector(1, 0x0)), nullptr)
          })
        ));
      }
      /* semantic: if __code and instruction_has_prefix(repnz):
        if __expr and cnt.id == int(cnt.bit, 0): loop = int1(0)
        while loop == int1(1):
          call('compare_string')
          cnt.id -= int(cnt.bit, 1)
          if __expr and cnt.id == int(cnt.bit, 0): loop = int1(0)
          if __expr and zf.id == int1(1): loop = int1(0) */
      if (rInsn.GetPrefix() & (X86_Prefix_RepNz))
      {
        /* block glb expressions */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::CounterRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::CounterRegister, rInsn.GetMode())), 0x0),
          Expr::MakeAssign(
            Expr::MakeVar("loop", VariableExpression::Use),
            Expr::MakeBitVector(1, 0x0)), nullptr)
        );
        AllExpr.push_back(Expr::MakeWhileCond(
          ConditionExpression::CondEq,
          Expr::MakeVar("loop", VariableExpression::Use),
          Expr::MakeBitVector(1, 0x1),
          Expr::MakeBind({
          Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()),
          Expr::MakeAssign(
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              rInsn.GetOperand(0),
              rInsn.GetOperand(1))),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlOf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeBinOp(
                OperationExpression::OpAnd,
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  rInsn.GetOperand(0),
                  Expr::MakeVar("res", VariableExpression::Use)),
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  rInsn.GetOperand(0),
                  rInsn.GetOperand(1))),
              Expr::MakeBinOp(
                OperationExpression::OpSub,
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlCf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  Expr::MakeBinOp(
                    OperationExpression::OpXor,
                    rInsn.GetOperand(0),
                    rInsn.GetOperand(1)),
                  Expr::MakeVar("res", VariableExpression::Use)),
                Expr::MakeBinOp(
                  OperationExpression::OpAnd,
                  Expr::MakeBinOp(
                    OperationExpression::OpXor,
                    rInsn.GetOperand(0),
                    Expr::MakeVar("res", VariableExpression::Use)),
                  Expr::MakeBinOp(
                    OperationExpression::OpXor,
                    rInsn.GetOperand(0),
                    rInsn.GetOperand(1)))),
              Expr::MakeBinOp(
                OperationExpression::OpSub,
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlSf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBinOp(
                OperationExpression::OpSub,
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlZf, &m_CpuInfo),
            Expr::MakeTernaryCond(ConditionExpression::CondEq,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
            Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))),
          Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)),
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBitVector(1, 0x1)),
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeId(X86_FlPf, &m_CpuInfo),
            Expr::MakeVar("pf_tmp", VariableExpression::Use)),
          Expr::MakeVar("pf_tmp", VariableExpression::Free),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlAf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  rInsn.GetOperand(0),
                  rInsn.GetOperand(1)),
                Expr::MakeVar("res", VariableExpression::Use)),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))),
          Expr::MakeIfElseCond(
            ConditionExpression::CondEq,
            Expr::MakeId(X86_FlDf, &m_CpuInfo),
            Expr::MakeBitVector(1, 0x1),
            Expr::MakeBind({
            Expr::MakeAssign(
              expr_cast<MemoryExpression>(rInsn.GetOperand(0))->GetOffsetExpression(),
              Expr::MakeBinOp(
                OperationExpression::OpSub,
                expr_cast<MemoryExpression>(rInsn.GetOperand(0))->GetOffsetExpression(),
                Expr::MakeBitVector(expr_cast<MemoryExpression>(rInsn.GetOperand(0))->GetOffsetExpression()->GetBitSize(), rInsn.GetOperand(0)->GetBitSize() / 8)))
            ,
            Expr::MakeAssign(
              expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression(),
              Expr::MakeBinOp(
                OperationExpression::OpSub,
                expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression(),
                Expr::MakeBitVector(expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression()->GetBitSize(), rInsn.GetOperand(1)->GetBitSize() / 8)))
            })
          ,
            Expr::MakeBind({
            Expr::MakeAssign(
              expr_cast<MemoryExpression>(rInsn.GetOperand(0))->GetOffsetExpression(),
              Expr::MakeBinOp(
                OperationExpression::OpAdd,
                expr_cast<MemoryExpression>(rInsn.GetOperand(0))->GetOffsetExpression(),
                Expr::MakeBitVector(expr_cast<MemoryExpression>(rInsn.GetOperand(0))->GetOffsetExpression()->GetBitSize(), rInsn.GetOperand(0)->GetBitSize() / 8)))
            ,
            Expr::MakeAssign(
              expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression(),
              Expr::MakeBinOp(
                OperationExpression::OpAdd,
                expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression(),
                Expr::MakeBitVector(expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression()->GetBitSize(), rInsn.GetOperand(1)->GetBitSize() / 8)))
            })
          ),
          Expr::MakeVar("res", VariableExpression::Free),
          Expr::MakeAssign(
            Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::CounterRegister, rInsn.GetMode()), &m_CpuInfo),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::CounterRegister, rInsn.GetMode()), &m_CpuInfo),
              Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::CounterRegister, rInsn.GetMode())), 0x1)))
          ,
          Expr::MakeIfElseCond(
            ConditionExpression::CondEq,
            Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::CounterRegister, rInsn.GetMode()), &m_CpuInfo),
            Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::CounterRegister, rInsn.GetMode())), 0x0),
            Expr::MakeAssign(
              Expr::MakeVar("loop", VariableExpression::Use),
              Expr::MakeBitVector(1, 0x0)), nullptr)
          ,
          Expr::MakeIfElseCond(
            ConditionExpression::CondEq,
            Expr::MakeId(X86_FlZf, &m_CpuInfo),
            Expr::MakeBitVector(1, 0x1),
            Expr::MakeAssign(
              Expr::MakeVar("loop", VariableExpression::Use),
              Expr::MakeBitVector(1, 0x0)), nullptr)
          })
        ));
      }
      /* semantic: if __code and instruction_has_no_prefix(repz, repnz):
        call('compare_string') */
      if (!(rInsn.GetPrefix() & (X86_Prefix_Rep | X86_Prefix_RepNz)))
      {
        /* block glb expressions */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            rInsn.GetOperand(0),
            rInsn.GetOperand(1))));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlOf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                Expr::MakeVar("res", VariableExpression::Use)),
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                rInsn.GetOperand(1))),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlCf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  rInsn.GetOperand(0),
                  rInsn.GetOperand(1)),
                Expr::MakeVar("res", VariableExpression::Use)),
              Expr::MakeBinOp(
                OperationExpression::OpAnd,
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  rInsn.GetOperand(0),
                  Expr::MakeVar("res", VariableExpression::Use)),
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  rInsn.GetOperand(0),
                  rInsn.GetOperand(1)))),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlSf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlZf, &m_CpuInfo),
          Expr::MakeTernaryCond(ConditionExpression::CondEq,
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))));
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBitVector(1, 0x1)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlPf, &m_CpuInfo),
          Expr::MakeVar("pf_tmp", VariableExpression::Use)));
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlAf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                rInsn.GetOperand(1)),
              Expr::MakeVar("res", VariableExpression::Use)),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))));
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeId(X86_FlDf, &m_CpuInfo),
          Expr::MakeBitVector(1, 0x1),
          Expr::MakeBind({
          Expr::MakeAssign(
            expr_cast<MemoryExpression>(rInsn.GetOperand(0))->GetOffsetExpression(),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              expr_cast<MemoryExpression>(rInsn.GetOperand(0))->GetOffsetExpression(),
              Expr::MakeBitVector(expr_cast<MemoryExpression>(rInsn.GetOperand(0))->GetOffsetExpression()->GetBitSize(), rInsn.GetOperand(0)->GetBitSize() / 8)))
          ,
          Expr::MakeAssign(
            expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression(),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression(),
              Expr::MakeBitVector(expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression()->GetBitSize(), rInsn.GetOperand(1)->GetBitSize() / 8)))
          })
        ,
          Expr::MakeBind({
          Expr::MakeAssign(
            expr_cast<MemoryExpression>(rInsn.GetOperand(0))->GetOffsetExpression(),
            Expr::MakeBinOp(
              OperationExpression::OpAdd,
              expr_cast<MemoryExpression>(rInsn.GetOperand(0))->GetOffsetExpression(),
              Expr::MakeBitVector(expr_cast<MemoryExpression>(rInsn.GetOperand(0))->GetOffsetExpression()->GetBitSize(), rInsn.GetOperand(0)->GetBitSize() / 8)))
          ,
          Expr::MakeAssign(
            expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression(),
            Expr::MakeBinOp(
              OperationExpression::OpAdd,
              expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression(),
              Expr::MakeBitVector(expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression()->GetBitSize(), rInsn.GetOperand(1)->GetBitSize() / 8)))
          })
        ));
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
      }
      /* semantic: free_var('loop') */
      AllExpr.push_back(Expr::MakeVar("loop", VariableExpression::Free));
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instruction
 * mnemonic: cmps
 * test_flags: ['df']
 * semantic: alloc_var('loop', 1);
loop = int1(1);
if __code and instruction_has_prefix(repz):
  if __expr and cnt.id == int(cnt.bit, 0): loop = int1(0)
  while loop == int1(1):
    call('compare_string')
    cnt.id -= int(cnt.bit, 1)
    if __expr and cnt.id == int(cnt.bit, 0): loop = int1(0)
    if __expr and zf.id == int1(0): loop = int1(0);
if __code and instruction_has_prefix(repnz):
  if __expr and cnt.id == int(cnt.bit, 0): loop = int1(0)
  while loop == int1(1):
    call('compare_string')
    cnt.id -= int(cnt.bit, 1)
    if __expr and cnt.id == int(cnt.bit, 0): loop = int1(0)
    if __expr and zf.id == int1(1): loop = int1(0);
if __code and instruction_has_no_prefix(repz, repnz):
  call('compare_string');
free_var('loop');

 * operand: ['Xv', 'Yv']
 * opcode: a7
 * update_flags: ['of', 'sf', 'zf', 'af', 'pf', 'cf']
**/
bool X86Architecture::Table_1_a7(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Size()++;
    rInsn.SetOpcode(X86_Opcode_Cmps);
    if (Operand__Xv_Yv(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    {
      Expression::LSPType AllExpr;
      rInsn.SetTestedFlags(X86_FlDf);
      rInsn.SetUpdatedFlags(X86_FlOf | X86_FlSf | X86_FlZf | X86_FlAf | X86_FlPf | X86_FlCf);
      /* semantic: alloc_var('loop', 1) */
      AllExpr.push_back(Expr::MakeVar("loop", VariableExpression::Alloc, 0x1));
      /* semantic: loop = int1(1) */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("loop", VariableExpression::Use),
        Expr::MakeBitVector(1, 0x1)));
      /* semantic: if __code and instruction_has_prefix(repz):
        if __expr and cnt.id == int(cnt.bit, 0): loop = int1(0)
        while loop == int1(1):
          call('compare_string')
          cnt.id -= int(cnt.bit, 1)
          if __expr and cnt.id == int(cnt.bit, 0): loop = int1(0)
          if __expr and zf.id == int1(0): loop = int1(0) */
      if (rInsn.GetPrefix() & (X86_Prefix_Rep))
      {
        /* block glb expressions */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::CounterRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::CounterRegister, rInsn.GetMode())), 0x0),
          Expr::MakeAssign(
            Expr::MakeVar("loop", VariableExpression::Use),
            Expr::MakeBitVector(1, 0x0)), nullptr)
        );
        AllExpr.push_back(Expr::MakeWhileCond(
          ConditionExpression::CondEq,
          Expr::MakeVar("loop", VariableExpression::Use),
          Expr::MakeBitVector(1, 0x1),
          Expr::MakeBind({
          Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()),
          Expr::MakeAssign(
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              rInsn.GetOperand(0),
              rInsn.GetOperand(1))),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlOf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeBinOp(
                OperationExpression::OpAnd,
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  rInsn.GetOperand(0),
                  Expr::MakeVar("res", VariableExpression::Use)),
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  rInsn.GetOperand(0),
                  rInsn.GetOperand(1))),
              Expr::MakeBinOp(
                OperationExpression::OpSub,
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlCf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  Expr::MakeBinOp(
                    OperationExpression::OpXor,
                    rInsn.GetOperand(0),
                    rInsn.GetOperand(1)),
                  Expr::MakeVar("res", VariableExpression::Use)),
                Expr::MakeBinOp(
                  OperationExpression::OpAnd,
                  Expr::MakeBinOp(
                    OperationExpression::OpXor,
                    rInsn.GetOperand(0),
                    Expr::MakeVar("res", VariableExpression::Use)),
                  Expr::MakeBinOp(
                    OperationExpression::OpXor,
                    rInsn.GetOperand(0),
                    rInsn.GetOperand(1)))),
              Expr::MakeBinOp(
                OperationExpression::OpSub,
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlSf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBinOp(
                OperationExpression::OpSub,
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlZf, &m_CpuInfo),
            Expr::MakeTernaryCond(ConditionExpression::CondEq,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
            Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))),
          Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)),
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBitVector(1, 0x1)),
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeId(X86_FlPf, &m_CpuInfo),
            Expr::MakeVar("pf_tmp", VariableExpression::Use)),
          Expr::MakeVar("pf_tmp", VariableExpression::Free),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlAf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  rInsn.GetOperand(0),
                  rInsn.GetOperand(1)),
                Expr::MakeVar("res", VariableExpression::Use)),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))),
          Expr::MakeIfElseCond(
            ConditionExpression::CondEq,
            Expr::MakeId(X86_FlDf, &m_CpuInfo),
            Expr::MakeBitVector(1, 0x1),
            Expr::MakeBind({
            Expr::MakeAssign(
              expr_cast<MemoryExpression>(rInsn.GetOperand(0))->GetOffsetExpression(),
              Expr::MakeBinOp(
                OperationExpression::OpSub,
                expr_cast<MemoryExpression>(rInsn.GetOperand(0))->GetOffsetExpression(),
                Expr::MakeBitVector(expr_cast<MemoryExpression>(rInsn.GetOperand(0))->GetOffsetExpression()->GetBitSize(), rInsn.GetOperand(0)->GetBitSize() / 8)))
            ,
            Expr::MakeAssign(
              expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression(),
              Expr::MakeBinOp(
                OperationExpression::OpSub,
                expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression(),
                Expr::MakeBitVector(expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression()->GetBitSize(), rInsn.GetOperand(1)->GetBitSize() / 8)))
            })
          ,
            Expr::MakeBind({
            Expr::MakeAssign(
              expr_cast<MemoryExpression>(rInsn.GetOperand(0))->GetOffsetExpression(),
              Expr::MakeBinOp(
                OperationExpression::OpAdd,
                expr_cast<MemoryExpression>(rInsn.GetOperand(0))->GetOffsetExpression(),
                Expr::MakeBitVector(expr_cast<MemoryExpression>(rInsn.GetOperand(0))->GetOffsetExpression()->GetBitSize(), rInsn.GetOperand(0)->GetBitSize() / 8)))
            ,
            Expr::MakeAssign(
              expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression(),
              Expr::MakeBinOp(
                OperationExpression::OpAdd,
                expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression(),
                Expr::MakeBitVector(expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression()->GetBitSize(), rInsn.GetOperand(1)->GetBitSize() / 8)))
            })
          ),
          Expr::MakeVar("res", VariableExpression::Free),
          Expr::MakeAssign(
            Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::CounterRegister, rInsn.GetMode()), &m_CpuInfo),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::CounterRegister, rInsn.GetMode()), &m_CpuInfo),
              Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::CounterRegister, rInsn.GetMode())), 0x1)))
          ,
          Expr::MakeIfElseCond(
            ConditionExpression::CondEq,
            Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::CounterRegister, rInsn.GetMode()), &m_CpuInfo),
            Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::CounterRegister, rInsn.GetMode())), 0x0),
            Expr::MakeAssign(
              Expr::MakeVar("loop", VariableExpression::Use),
              Expr::MakeBitVector(1, 0x0)), nullptr)
          ,
          Expr::MakeIfElseCond(
            ConditionExpression::CondEq,
            Expr::MakeId(X86_FlZf, &m_CpuInfo),
            Expr::MakeBitVector(1, 0x0),
            Expr::MakeAssign(
              Expr::MakeVar("loop", VariableExpression::Use),
              Expr::MakeBitVector(1, 0x0)), nullptr)
          })
        ));
      }
      /* semantic: if __code and instruction_has_prefix(repnz):
        if __expr and cnt.id == int(cnt.bit, 0): loop = int1(0)
        while loop == int1(1):
          call('compare_string')
          cnt.id -= int(cnt.bit, 1)
          if __expr and cnt.id == int(cnt.bit, 0): loop = int1(0)
          if __expr and zf.id == int1(1): loop = int1(0) */
      if (rInsn.GetPrefix() & (X86_Prefix_RepNz))
      {
        /* block glb expressions */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::CounterRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::CounterRegister, rInsn.GetMode())), 0x0),
          Expr::MakeAssign(
            Expr::MakeVar("loop", VariableExpression::Use),
            Expr::MakeBitVector(1, 0x0)), nullptr)
        );
        AllExpr.push_back(Expr::MakeWhileCond(
          ConditionExpression::CondEq,
          Expr::MakeVar("loop", VariableExpression::Use),
          Expr::MakeBitVector(1, 0x1),
          Expr::MakeBind({
          Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()),
          Expr::MakeAssign(
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              rInsn.GetOperand(0),
              rInsn.GetOperand(1))),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlOf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeBinOp(
                OperationExpression::OpAnd,
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  rInsn.GetOperand(0),
                  Expr::MakeVar("res", VariableExpression::Use)),
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  rInsn.GetOperand(0),
                  rInsn.GetOperand(1))),
              Expr::MakeBinOp(
                OperationExpression::OpSub,
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlCf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  Expr::MakeBinOp(
                    OperationExpression::OpXor,
                    rInsn.GetOperand(0),
                    rInsn.GetOperand(1)),
                  Expr::MakeVar("res", VariableExpression::Use)),
                Expr::MakeBinOp(
                  OperationExpression::OpAnd,
                  Expr::MakeBinOp(
                    OperationExpression::OpXor,
                    rInsn.GetOperand(0),
                    Expr::MakeVar("res", VariableExpression::Use)),
                  Expr::MakeBinOp(
                    OperationExpression::OpXor,
                    rInsn.GetOperand(0),
                    rInsn.GetOperand(1)))),
              Expr::MakeBinOp(
                OperationExpression::OpSub,
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlSf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBinOp(
                OperationExpression::OpSub,
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlZf, &m_CpuInfo),
            Expr::MakeTernaryCond(ConditionExpression::CondEq,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
            Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))),
          Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)),
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBitVector(1, 0x1)),
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeId(X86_FlPf, &m_CpuInfo),
            Expr::MakeVar("pf_tmp", VariableExpression::Use)),
          Expr::MakeVar("pf_tmp", VariableExpression::Free),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlAf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  rInsn.GetOperand(0),
                  rInsn.GetOperand(1)),
                Expr::MakeVar("res", VariableExpression::Use)),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))),
          Expr::MakeIfElseCond(
            ConditionExpression::CondEq,
            Expr::MakeId(X86_FlDf, &m_CpuInfo),
            Expr::MakeBitVector(1, 0x1),
            Expr::MakeBind({
            Expr::MakeAssign(
              expr_cast<MemoryExpression>(rInsn.GetOperand(0))->GetOffsetExpression(),
              Expr::MakeBinOp(
                OperationExpression::OpSub,
                expr_cast<MemoryExpression>(rInsn.GetOperand(0))->GetOffsetExpression(),
                Expr::MakeBitVector(expr_cast<MemoryExpression>(rInsn.GetOperand(0))->GetOffsetExpression()->GetBitSize(), rInsn.GetOperand(0)->GetBitSize() / 8)))
            ,
            Expr::MakeAssign(
              expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression(),
              Expr::MakeBinOp(
                OperationExpression::OpSub,
                expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression(),
                Expr::MakeBitVector(expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression()->GetBitSize(), rInsn.GetOperand(1)->GetBitSize() / 8)))
            })
          ,
            Expr::MakeBind({
            Expr::MakeAssign(
              expr_cast<MemoryExpression>(rInsn.GetOperand(0))->GetOffsetExpression(),
              Expr::MakeBinOp(
                OperationExpression::OpAdd,
                expr_cast<MemoryExpression>(rInsn.GetOperand(0))->GetOffsetExpression(),
                Expr::MakeBitVector(expr_cast<MemoryExpression>(rInsn.GetOperand(0))->GetOffsetExpression()->GetBitSize(), rInsn.GetOperand(0)->GetBitSize() / 8)))
            ,
            Expr::MakeAssign(
              expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression(),
              Expr::MakeBinOp(
                OperationExpression::OpAdd,
                expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression(),
                Expr::MakeBitVector(expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression()->GetBitSize(), rInsn.GetOperand(1)->GetBitSize() / 8)))
            })
          ),
          Expr::MakeVar("res", VariableExpression::Free),
          Expr::MakeAssign(
            Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::CounterRegister, rInsn.GetMode()), &m_CpuInfo),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::CounterRegister, rInsn.GetMode()), &m_CpuInfo),
              Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::CounterRegister, rInsn.GetMode())), 0x1)))
          ,
          Expr::MakeIfElseCond(
            ConditionExpression::CondEq,
            Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::CounterRegister, rInsn.GetMode()), &m_CpuInfo),
            Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::CounterRegister, rInsn.GetMode())), 0x0),
            Expr::MakeAssign(
              Expr::MakeVar("loop", VariableExpression::Use),
              Expr::MakeBitVector(1, 0x0)), nullptr)
          ,
          Expr::MakeIfElseCond(
            ConditionExpression::CondEq,
            Expr::MakeId(X86_FlZf, &m_CpuInfo),
            Expr::MakeBitVector(1, 0x1),
            Expr::MakeAssign(
              Expr::MakeVar("loop", VariableExpression::Use),
              Expr::MakeBitVector(1, 0x0)), nullptr)
          })
        ));
      }
      /* semantic: if __code and instruction_has_no_prefix(repz, repnz):
        call('compare_string') */
      if (!(rInsn.GetPrefix() & (X86_Prefix_Rep | X86_Prefix_RepNz)))
      {
        /* block glb expressions */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            rInsn.GetOperand(0),
            rInsn.GetOperand(1))));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlOf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                Expr::MakeVar("res", VariableExpression::Use)),
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                rInsn.GetOperand(1))),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlCf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  rInsn.GetOperand(0),
                  rInsn.GetOperand(1)),
                Expr::MakeVar("res", VariableExpression::Use)),
              Expr::MakeBinOp(
                OperationExpression::OpAnd,
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  rInsn.GetOperand(0),
                  Expr::MakeVar("res", VariableExpression::Use)),
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  rInsn.GetOperand(0),
                  rInsn.GetOperand(1)))),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlSf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlZf, &m_CpuInfo),
          Expr::MakeTernaryCond(ConditionExpression::CondEq,
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))));
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBitVector(1, 0x1)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlPf, &m_CpuInfo),
          Expr::MakeVar("pf_tmp", VariableExpression::Use)));
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlAf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                rInsn.GetOperand(1)),
              Expr::MakeVar("res", VariableExpression::Use)),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))));
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeId(X86_FlDf, &m_CpuInfo),
          Expr::MakeBitVector(1, 0x1),
          Expr::MakeBind({
          Expr::MakeAssign(
            expr_cast<MemoryExpression>(rInsn.GetOperand(0))->GetOffsetExpression(),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              expr_cast<MemoryExpression>(rInsn.GetOperand(0))->GetOffsetExpression(),
              Expr::MakeBitVector(expr_cast<MemoryExpression>(rInsn.GetOperand(0))->GetOffsetExpression()->GetBitSize(), rInsn.GetOperand(0)->GetBitSize() / 8)))
          ,
          Expr::MakeAssign(
            expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression(),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression(),
              Expr::MakeBitVector(expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression()->GetBitSize(), rInsn.GetOperand(1)->GetBitSize() / 8)))
          })
        ,
          Expr::MakeBind({
          Expr::MakeAssign(
            expr_cast<MemoryExpression>(rInsn.GetOperand(0))->GetOffsetExpression(),
            Expr::MakeBinOp(
              OperationExpression::OpAdd,
              expr_cast<MemoryExpression>(rInsn.GetOperand(0))->GetOffsetExpression(),
              Expr::MakeBitVector(expr_cast<MemoryExpression>(rInsn.GetOperand(0))->GetOffsetExpression()->GetBitSize(), rInsn.GetOperand(0)->GetBitSize() / 8)))
          ,
          Expr::MakeAssign(
            expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression(),
            Expr::MakeBinOp(
              OperationExpression::OpAdd,
              expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression(),
              Expr::MakeBitVector(expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression()->GetBitSize(), rInsn.GetOperand(1)->GetBitSize() / 8)))
          })
        ));
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
      }
      /* semantic: free_var('loop') */
      AllExpr.push_back(Expr::MakeVar("loop", VariableExpression::Free));
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instruction
 * mnemonic: test
 * clear_flags: ['af']
 * semantic: alloc_var('res', op0.bit);
res = op0.val & op1.val;
of.id = int1(0)
cf.id = int1(0)
call('sign_flag')
call('zero_flag')
call('parity_flag')
free_var('res');

 * operand: ['AL', 'Ib']
 * opcode: a8
 * update_flags: ['of', 'sf', 'zf', 'pf', 'cf']
**/
bool X86Architecture::Table_1_a8(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Size()++;
    rInsn.SetOpcode(X86_Opcode_Test);
    if (Operand__AL_Ib(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    {
      Expression::LSPType AllExpr;
      rInsn.SetUpdatedFlags(X86_FlOf | X86_FlSf | X86_FlZf | X86_FlPf | X86_FlCf);
      rInsn.SetClearedFlags(X86_FlAf);
      AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlAf, &m_CpuInfo), Expr::MakeBoolean(false)));
      /* semantic: alloc_var('res', op0.bit) */
      AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
      /* semantic: res = op0.val & op1.val */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("res", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpAnd,
          rInsn.GetOperand(0),
          rInsn.GetOperand(1))));
      /* semantic: of.id = int1(0)
      cf.id = int1(0)
      call('sign_flag')
      call('zero_flag')
      call('parity_flag')
      free_var('res') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlOf, &m_CpuInfo),
        Expr::MakeBitVector(1, 0x0)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlCf, &m_CpuInfo),
        Expr::MakeBitVector(1, 0x0)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlSf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlZf, &m_CpuInfo),
        Expr::MakeTernaryCond(ConditionExpression::CondEq,
        Expr::MakeVar("res", VariableExpression::Use),
        Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
        Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))));
      AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBitVector(1, 0x1)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlPf, &m_CpuInfo),
        Expr::MakeVar("pf_tmp", VariableExpression::Use)));
      AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
      AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instruction
 * mnemonic: test
 * clear_flags: ['af']
 * semantic: alloc_var('res', op0.bit);
res = op0.val & op1.val;
of.id = int1(0)
cf.id = int1(0)
call('sign_flag')
call('zero_flag')
call('parity_flag')
free_var('res');

 * operand: ['rAX', 'Iz']
 * opcode: a9
 * update_flags: ['of', 'sf', 'zf', 'pf', 'cf']
**/
bool X86Architecture::Table_1_a9(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Size()++;
    rInsn.SetOpcode(X86_Opcode_Test);
    if (Operand__rAX_Iz(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    {
      Expression::LSPType AllExpr;
      rInsn.SetUpdatedFlags(X86_FlOf | X86_FlSf | X86_FlZf | X86_FlPf | X86_FlCf);
      rInsn.SetClearedFlags(X86_FlAf);
      AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlAf, &m_CpuInfo), Expr::MakeBoolean(false)));
      /* semantic: alloc_var('res', op0.bit) */
      AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
      /* semantic: res = op0.val & op1.val */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("res", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpAnd,
          rInsn.GetOperand(0),
          rInsn.GetOperand(1))));
      /* semantic: of.id = int1(0)
      cf.id = int1(0)
      call('sign_flag')
      call('zero_flag')
      call('parity_flag')
      free_var('res') */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlOf, &m_CpuInfo),
        Expr::MakeBitVector(1, 0x0)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlCf, &m_CpuInfo),
        Expr::MakeBitVector(1, 0x0)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlSf, &m_CpuInfo),
        Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
          OperationExpression::OpLrs,
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlZf, &m_CpuInfo),
        Expr::MakeTernaryCond(ConditionExpression::CondEq,
        Expr::MakeVar("res", VariableExpression::Use),
        Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
        Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))));
      AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBitVector(1, 0x1)));
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("pf_tmp", VariableExpression::Use),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
      );
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlPf, &m_CpuInfo),
        Expr::MakeVar("pf_tmp", VariableExpression::Use)));
      AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
      AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instruction
 * mnemonic: stos
 * operand: ['AL', 'Yb']
 * test_flags: ['df']
 * opcode: aa
 * semantic: if __code and instruction_has_prefix(rep):
  while cnt.id != int(cnt.bit, 0):
    call('store_string')
    cnt.id -= int(cnt.bit, 1);
if __code and instruction_has_no_prefix(rep):
  call('store_string');

**/
bool X86Architecture::Table_1_aa(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Size()++;
    rInsn.SetOpcode(X86_Opcode_Stos);
    if (Operand__AL_Yb(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    {
      Expression::LSPType AllExpr;
      rInsn.SetTestedFlags(X86_FlDf);
      /* semantic: if __code and instruction_has_prefix(rep):
        while cnt.id != int(cnt.bit, 0):
          call('store_string')
          cnt.id -= int(cnt.bit, 1) */
      if (rInsn.GetPrefix() & (X86_Prefix_Rep))
      {
        /* block glb expressions */
        AllExpr.push_back(Expr::MakeWhileCond(
          ConditionExpression::CondNe,
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::CounterRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::CounterRegister, rInsn.GetMode())), 0x0),
          Expr::MakeBind({
          Expr::MakeAssign(
            rInsn.GetOperand(1),
            rInsn.GetOperand(0)),
          Expr::MakeIfElseCond(
            ConditionExpression::CondEq,
            Expr::MakeId(X86_FlDf, &m_CpuInfo),
            Expr::MakeBitVector(1, 0x1),
            Expr::MakeAssign(
              expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression(),
              Expr::MakeBinOp(
                OperationExpression::OpSub,
                expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression(),
                Expr::MakeBitVector(expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression()->GetBitSize(), rInsn.GetOperand(1)->GetBitSize() / 8)))
          ,
            Expr::MakeAssign(
              expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression(),
              Expr::MakeBinOp(
                OperationExpression::OpAdd,
                expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression(),
                Expr::MakeBitVector(expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression()->GetBitSize(), rInsn.GetOperand(1)->GetBitSize() / 8)))
          ),
          Expr::MakeAssign(
            Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::CounterRegister, rInsn.GetMode()), &m_CpuInfo),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::CounterRegister, rInsn.GetMode()), &m_CpuInfo),
              Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::CounterRegister, rInsn.GetMode())), 0x1)))
          })
        ));
      }
      /* semantic: if __code and instruction_has_no_prefix(rep):
        call('store_string') */
      if (!(rInsn.GetPrefix() & (X86_Prefix_Rep)))
      {
        /* block glb expressions */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(1),
          rInsn.GetOperand(0)));
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeId(X86_FlDf, &m_CpuInfo),
          Expr::MakeBitVector(1, 0x1),
          Expr::MakeAssign(
            expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression(),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression(),
              Expr::MakeBitVector(expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression()->GetBitSize(), rInsn.GetOperand(1)->GetBitSize() / 8)))
        ,
          Expr::MakeAssign(
            expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression(),
            Expr::MakeBinOp(
              OperationExpression::OpAdd,
              expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression(),
              Expr::MakeBitVector(expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression()->GetBitSize(), rInsn.GetOperand(1)->GetBitSize() / 8)))
        ));
      }
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instruction
 * mnemonic: stos
 * operand: ['rAX', 'Yv']
 * test_flags: ['df']
 * opcode: ab
 * semantic: if __code and instruction_has_prefix(rep):
  while cnt.id != int(cnt.bit, 0):
    call('store_string')
    cnt.id -= int(cnt.bit, 1);
if __code and instruction_has_no_prefix(rep):
  call('store_string');

**/
bool X86Architecture::Table_1_ab(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Size()++;
    rInsn.SetOpcode(X86_Opcode_Stos);
    if (Operand__rAX_Yv(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    {
      Expression::LSPType AllExpr;
      rInsn.SetTestedFlags(X86_FlDf);
      /* semantic: if __code and instruction_has_prefix(rep):
        while cnt.id != int(cnt.bit, 0):
          call('store_string')
          cnt.id -= int(cnt.bit, 1) */
      if (rInsn.GetPrefix() & (X86_Prefix_Rep))
      {
        /* block glb expressions */
        AllExpr.push_back(Expr::MakeWhileCond(
          ConditionExpression::CondNe,
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::CounterRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::CounterRegister, rInsn.GetMode())), 0x0),
          Expr::MakeBind({
          Expr::MakeAssign(
            rInsn.GetOperand(1),
            rInsn.GetOperand(0)),
          Expr::MakeIfElseCond(
            ConditionExpression::CondEq,
            Expr::MakeId(X86_FlDf, &m_CpuInfo),
            Expr::MakeBitVector(1, 0x1),
            Expr::MakeAssign(
              expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression(),
              Expr::MakeBinOp(
                OperationExpression::OpSub,
                expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression(),
                Expr::MakeBitVector(expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression()->GetBitSize(), rInsn.GetOperand(1)->GetBitSize() / 8)))
          ,
            Expr::MakeAssign(
              expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression(),
              Expr::MakeBinOp(
                OperationExpression::OpAdd,
                expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression(),
                Expr::MakeBitVector(expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression()->GetBitSize(), rInsn.GetOperand(1)->GetBitSize() / 8)))
          ),
          Expr::MakeAssign(
            Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::CounterRegister, rInsn.GetMode()), &m_CpuInfo),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::CounterRegister, rInsn.GetMode()), &m_CpuInfo),
              Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::CounterRegister, rInsn.GetMode())), 0x1)))
          })
        ));
      }
      /* semantic: if __code and instruction_has_no_prefix(rep):
        call('store_string') */
      if (!(rInsn.GetPrefix() & (X86_Prefix_Rep)))
      {
        /* block glb expressions */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(1),
          rInsn.GetOperand(0)));
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeId(X86_FlDf, &m_CpuInfo),
          Expr::MakeBitVector(1, 0x1),
          Expr::MakeAssign(
            expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression(),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression(),
              Expr::MakeBitVector(expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression()->GetBitSize(), rInsn.GetOperand(1)->GetBitSize() / 8)))
        ,
          Expr::MakeAssign(
            expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression(),
            Expr::MakeBinOp(
              OperationExpression::OpAdd,
              expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression(),
              Expr::MakeBitVector(expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression()->GetBitSize(), rInsn.GetOperand(1)->GetBitSize() / 8)))
        ));
      }
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instruction
 * mnemonic: lods
 * operand: ['AL', 'Xb']
 * test_flags: ['df']
 * opcode: ac
 * semantic: if __code and instruction_has_prefix(rep):
  while cnt.id != int(cnt.bit, 0):
    call('load_string')
    cnt.id -= int(cnt.bit, 1);
if __code and instruction_has_no_prefix(rep):
  call('load_string')

**/
bool X86Architecture::Table_1_ac(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Size()++;
    rInsn.SetOpcode(X86_Opcode_Lods);
    if (Operand__AL_Xb(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    {
      Expression::LSPType AllExpr;
      rInsn.SetTestedFlags(X86_FlDf);
      /* semantic: if __code and instruction_has_prefix(rep):
        while cnt.id != int(cnt.bit, 0):
          call('load_string')
          cnt.id -= int(cnt.bit, 1) */
      if (rInsn.GetPrefix() & (X86_Prefix_Rep))
      {
        /* block glb expressions */
        AllExpr.push_back(Expr::MakeWhileCond(
          ConditionExpression::CondNe,
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::CounterRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::CounterRegister, rInsn.GetMode())), 0x0),
          Expr::MakeBind({
          Expr::MakeAssign(
            rInsn.GetOperand(0),
            rInsn.GetOperand(1)),
          Expr::MakeIfElseCond(
            ConditionExpression::CondEq,
            Expr::MakeId(X86_FlDf, &m_CpuInfo),
            Expr::MakeBitVector(1, 0x1),
            Expr::MakeAssign(
              expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression(),
              Expr::MakeBinOp(
                OperationExpression::OpSub,
                expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression(),
                Expr::MakeBitVector(expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression()->GetBitSize(), rInsn.GetOperand(1)->GetBitSize() / 8)))
          ,
            Expr::MakeAssign(
              expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression(),
              Expr::MakeBinOp(
                OperationExpression::OpAdd,
                expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression(),
                Expr::MakeBitVector(expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression()->GetBitSize(), rInsn.GetOperand(1)->GetBitSize() / 8)))
          ),
          Expr::MakeAssign(
            Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::CounterRegister, rInsn.GetMode()), &m_CpuInfo),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::CounterRegister, rInsn.GetMode()), &m_CpuInfo),
              Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::CounterRegister, rInsn.GetMode())), 0x1)))
          })
        ));
      }
      /* semantic: if __code and instruction_has_no_prefix(rep):
        call('load_string')
       */
      if (!(rInsn.GetPrefix() & (X86_Prefix_Rep)))
      {
        /* block glb expressions */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          rInsn.GetOperand(1)));
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeId(X86_FlDf, &m_CpuInfo),
          Expr::MakeBitVector(1, 0x1),
          Expr::MakeAssign(
            expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression(),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression(),
              Expr::MakeBitVector(expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression()->GetBitSize(), rInsn.GetOperand(1)->GetBitSize() / 8)))
        ,
          Expr::MakeAssign(
            expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression(),
            Expr::MakeBinOp(
              OperationExpression::OpAdd,
              expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression(),
              Expr::MakeBitVector(expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression()->GetBitSize(), rInsn.GetOperand(1)->GetBitSize() / 8)))
        ));
      }
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instruction
 * mnemonic: lods
 * operand: ['rAX', 'Xv']
 * test_flags: ['df']
 * opcode: ad
 * semantic: if __code and instruction_has_prefix(rep):
  while cnt.id != int(cnt.bit, 0):
    call('load_string')
    cnt.id -= int(cnt.bit, 1);
if __code and instruction_has_no_prefix(rep):
  call('load_string')

**/
bool X86Architecture::Table_1_ad(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Size()++;
    rInsn.SetOpcode(X86_Opcode_Lods);
    if (Operand__rAX_Xv(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    {
      Expression::LSPType AllExpr;
      rInsn.SetTestedFlags(X86_FlDf);
      /* semantic: if __code and instruction_has_prefix(rep):
        while cnt.id != int(cnt.bit, 0):
          call('load_string')
          cnt.id -= int(cnt.bit, 1) */
      if (rInsn.GetPrefix() & (X86_Prefix_Rep))
      {
        /* block glb expressions */
        AllExpr.push_back(Expr::MakeWhileCond(
          ConditionExpression::CondNe,
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::CounterRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::CounterRegister, rInsn.GetMode())), 0x0),
          Expr::MakeBind({
          Expr::MakeAssign(
            rInsn.GetOperand(0),
            rInsn.GetOperand(1)),
          Expr::MakeIfElseCond(
            ConditionExpression::CondEq,
            Expr::MakeId(X86_FlDf, &m_CpuInfo),
            Expr::MakeBitVector(1, 0x1),
            Expr::MakeAssign(
              expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression(),
              Expr::MakeBinOp(
                OperationExpression::OpSub,
                expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression(),
                Expr::MakeBitVector(expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression()->GetBitSize(), rInsn.GetOperand(1)->GetBitSize() / 8)))
          ,
            Expr::MakeAssign(
              expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression(),
              Expr::MakeBinOp(
                OperationExpression::OpAdd,
                expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression(),
                Expr::MakeBitVector(expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression()->GetBitSize(), rInsn.GetOperand(1)->GetBitSize() / 8)))
          ),
          Expr::MakeAssign(
            Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::CounterRegister, rInsn.GetMode()), &m_CpuInfo),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::CounterRegister, rInsn.GetMode()), &m_CpuInfo),
              Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::CounterRegister, rInsn.GetMode())), 0x1)))
          })
        ));
      }
      /* semantic: if __code and instruction_has_no_prefix(rep):
        call('load_string')
       */
      if (!(rInsn.GetPrefix() & (X86_Prefix_Rep)))
      {
        /* block glb expressions */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          rInsn.GetOperand(1)));
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeId(X86_FlDf, &m_CpuInfo),
          Expr::MakeBitVector(1, 0x1),
          Expr::MakeAssign(
            expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression(),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression(),
              Expr::MakeBitVector(expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression()->GetBitSize(), rInsn.GetOperand(1)->GetBitSize() / 8)))
        ,
          Expr::MakeAssign(
            expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression(),
            Expr::MakeBinOp(
              OperationExpression::OpAdd,
              expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression(),
              Expr::MakeBitVector(expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression()->GetBitSize(), rInsn.GetOperand(1)->GetBitSize() / 8)))
        ));
      }
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instruction
 * mnemonic: scas
 * test_flags: ['df']
 * semantic: alloc_var('loop', 1);
loop = int1(1);
if __code and instruction_has_prefix(repz):
  if __expr and cnt.id == int(cnt.bit, 0): loop = int1(0)
  while loop == int1(1):
    call('scan_string')
    cnt.id -= int(cnt.bit, 1)
    if __expr and cnt.id == int(cnt.bit, 0): loop = int1(0)
    if __expr and zf.id == int1(0): loop = int1(0);
if __code and instruction_has_prefix(repnz):
  if __expr and cnt.id == int(cnt.bit, 0): loop = int1(0)
  while loop == int1(1):
    call('scan_string')
    cnt.id -= int(cnt.bit, 1)
    if __expr and cnt.id == int(cnt.bit, 0): loop = int1(0)
    if __expr and zf.id == int1(1): loop = int1(0);
if __code and instruction_has_no_prefix(repz, repnz):
  call('scan_string');
free_var('loop');

 * operand: ['AL', 'Yb']
 * opcode: ae
 * update_flags: ['of', 'sf', 'zf', 'af', 'pf', 'cf']
**/
bool X86Architecture::Table_1_ae(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Size()++;
    rInsn.SetOpcode(X86_Opcode_Scas);
    if (Operand__AL_Yb(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    {
      Expression::LSPType AllExpr;
      rInsn.SetTestedFlags(X86_FlDf);
      rInsn.SetUpdatedFlags(X86_FlOf | X86_FlSf | X86_FlZf | X86_FlAf | X86_FlPf | X86_FlCf);
      /* semantic: alloc_var('loop', 1) */
      AllExpr.push_back(Expr::MakeVar("loop", VariableExpression::Alloc, 0x1));
      /* semantic: loop = int1(1) */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("loop", VariableExpression::Use),
        Expr::MakeBitVector(1, 0x1)));
      /* semantic: if __code and instruction_has_prefix(repz):
        if __expr and cnt.id == int(cnt.bit, 0): loop = int1(0)
        while loop == int1(1):
          call('scan_string')
          cnt.id -= int(cnt.bit, 1)
          if __expr and cnt.id == int(cnt.bit, 0): loop = int1(0)
          if __expr and zf.id == int1(0): loop = int1(0) */
      if (rInsn.GetPrefix() & (X86_Prefix_Rep))
      {
        /* block glb expressions */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::CounterRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::CounterRegister, rInsn.GetMode())), 0x0),
          Expr::MakeAssign(
            Expr::MakeVar("loop", VariableExpression::Use),
            Expr::MakeBitVector(1, 0x0)), nullptr)
        );
        AllExpr.push_back(Expr::MakeWhileCond(
          ConditionExpression::CondEq,
          Expr::MakeVar("loop", VariableExpression::Use),
          Expr::MakeBitVector(1, 0x1),
          Expr::MakeBind({
          Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()),
          Expr::MakeAssign(
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              rInsn.GetOperand(0),
              rInsn.GetOperand(1))),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlOf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeBinOp(
                OperationExpression::OpAnd,
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  rInsn.GetOperand(0),
                  Expr::MakeVar("res", VariableExpression::Use)),
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  rInsn.GetOperand(0),
                  rInsn.GetOperand(1))),
              Expr::MakeBinOp(
                OperationExpression::OpSub,
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlCf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  Expr::MakeBinOp(
                    OperationExpression::OpXor,
                    rInsn.GetOperand(0),
                    rInsn.GetOperand(1)),
                  Expr::MakeVar("res", VariableExpression::Use)),
                Expr::MakeBinOp(
                  OperationExpression::OpAnd,
                  Expr::MakeBinOp(
                    OperationExpression::OpXor,
                    rInsn.GetOperand(0),
                    Expr::MakeVar("res", VariableExpression::Use)),
                  Expr::MakeBinOp(
                    OperationExpression::OpXor,
                    rInsn.GetOperand(0),
                    rInsn.GetOperand(1)))),
              Expr::MakeBinOp(
                OperationExpression::OpSub,
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlSf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBinOp(
                OperationExpression::OpSub,
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlZf, &m_CpuInfo),
            Expr::MakeTernaryCond(ConditionExpression::CondEq,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
            Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))),
          Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)),
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBitVector(1, 0x1)),
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeId(X86_FlPf, &m_CpuInfo),
            Expr::MakeVar("pf_tmp", VariableExpression::Use)),
          Expr::MakeVar("pf_tmp", VariableExpression::Free),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlAf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  rInsn.GetOperand(0),
                  rInsn.GetOperand(1)),
                Expr::MakeVar("res", VariableExpression::Use)),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))),
          Expr::MakeIfElseCond(
            ConditionExpression::CondEq,
            Expr::MakeId(X86_FlDf, &m_CpuInfo),
            Expr::MakeBitVector(1, 0x1),
            Expr::MakeAssign(
              expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression(),
              Expr::MakeBinOp(
                OperationExpression::OpSub,
                expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression(),
                Expr::MakeBitVector(expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression()->GetBitSize(), rInsn.GetOperand(1)->GetBitSize() / 8)))
          ,
            Expr::MakeAssign(
              expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression(),
              Expr::MakeBinOp(
                OperationExpression::OpAdd,
                expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression(),
                Expr::MakeBitVector(expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression()->GetBitSize(), rInsn.GetOperand(1)->GetBitSize() / 8)))
          ),
          Expr::MakeVar("res", VariableExpression::Free),
          Expr::MakeAssign(
            Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::CounterRegister, rInsn.GetMode()), &m_CpuInfo),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::CounterRegister, rInsn.GetMode()), &m_CpuInfo),
              Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::CounterRegister, rInsn.GetMode())), 0x1)))
          ,
          Expr::MakeIfElseCond(
            ConditionExpression::CondEq,
            Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::CounterRegister, rInsn.GetMode()), &m_CpuInfo),
            Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::CounterRegister, rInsn.GetMode())), 0x0),
            Expr::MakeAssign(
              Expr::MakeVar("loop", VariableExpression::Use),
              Expr::MakeBitVector(1, 0x0)), nullptr)
          ,
          Expr::MakeIfElseCond(
            ConditionExpression::CondEq,
            Expr::MakeId(X86_FlZf, &m_CpuInfo),
            Expr::MakeBitVector(1, 0x0),
            Expr::MakeAssign(
              Expr::MakeVar("loop", VariableExpression::Use),
              Expr::MakeBitVector(1, 0x0)), nullptr)
          })
        ));
      }
      /* semantic: if __code and instruction_has_prefix(repnz):
        if __expr and cnt.id == int(cnt.bit, 0): loop = int1(0)
        while loop == int1(1):
          call('scan_string')
          cnt.id -= int(cnt.bit, 1)
          if __expr and cnt.id == int(cnt.bit, 0): loop = int1(0)
          if __expr and zf.id == int1(1): loop = int1(0) */
      if (rInsn.GetPrefix() & (X86_Prefix_RepNz))
      {
        /* block glb expressions */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::CounterRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::CounterRegister, rInsn.GetMode())), 0x0),
          Expr::MakeAssign(
            Expr::MakeVar("loop", VariableExpression::Use),
            Expr::MakeBitVector(1, 0x0)), nullptr)
        );
        AllExpr.push_back(Expr::MakeWhileCond(
          ConditionExpression::CondEq,
          Expr::MakeVar("loop", VariableExpression::Use),
          Expr::MakeBitVector(1, 0x1),
          Expr::MakeBind({
          Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()),
          Expr::MakeAssign(
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              rInsn.GetOperand(0),
              rInsn.GetOperand(1))),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlOf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeBinOp(
                OperationExpression::OpAnd,
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  rInsn.GetOperand(0),
                  Expr::MakeVar("res", VariableExpression::Use)),
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  rInsn.GetOperand(0),
                  rInsn.GetOperand(1))),
              Expr::MakeBinOp(
                OperationExpression::OpSub,
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlCf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  Expr::MakeBinOp(
                    OperationExpression::OpXor,
                    rInsn.GetOperand(0),
                    rInsn.GetOperand(1)),
                  Expr::MakeVar("res", VariableExpression::Use)),
                Expr::MakeBinOp(
                  OperationExpression::OpAnd,
                  Expr::MakeBinOp(
                    OperationExpression::OpXor,
                    rInsn.GetOperand(0),
                    Expr::MakeVar("res", VariableExpression::Use)),
                  Expr::MakeBinOp(
                    OperationExpression::OpXor,
                    rInsn.GetOperand(0),
                    rInsn.GetOperand(1)))),
              Expr::MakeBinOp(
                OperationExpression::OpSub,
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlSf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBinOp(
                OperationExpression::OpSub,
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlZf, &m_CpuInfo),
            Expr::MakeTernaryCond(ConditionExpression::CondEq,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
            Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))),
          Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)),
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBitVector(1, 0x1)),
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeId(X86_FlPf, &m_CpuInfo),
            Expr::MakeVar("pf_tmp", VariableExpression::Use)),
          Expr::MakeVar("pf_tmp", VariableExpression::Free),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlAf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  rInsn.GetOperand(0),
                  rInsn.GetOperand(1)),
                Expr::MakeVar("res", VariableExpression::Use)),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))),
          Expr::MakeIfElseCond(
            ConditionExpression::CondEq,
            Expr::MakeId(X86_FlDf, &m_CpuInfo),
            Expr::MakeBitVector(1, 0x1),
            Expr::MakeAssign(
              expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression(),
              Expr::MakeBinOp(
                OperationExpression::OpSub,
                expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression(),
                Expr::MakeBitVector(expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression()->GetBitSize(), rInsn.GetOperand(1)->GetBitSize() / 8)))
          ,
            Expr::MakeAssign(
              expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression(),
              Expr::MakeBinOp(
                OperationExpression::OpAdd,
                expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression(),
                Expr::MakeBitVector(expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression()->GetBitSize(), rInsn.GetOperand(1)->GetBitSize() / 8)))
          ),
          Expr::MakeVar("res", VariableExpression::Free),
          Expr::MakeAssign(
            Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::CounterRegister, rInsn.GetMode()), &m_CpuInfo),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::CounterRegister, rInsn.GetMode()), &m_CpuInfo),
              Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::CounterRegister, rInsn.GetMode())), 0x1)))
          ,
          Expr::MakeIfElseCond(
            ConditionExpression::CondEq,
            Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::CounterRegister, rInsn.GetMode()), &m_CpuInfo),
            Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::CounterRegister, rInsn.GetMode())), 0x0),
            Expr::MakeAssign(
              Expr::MakeVar("loop", VariableExpression::Use),
              Expr::MakeBitVector(1, 0x0)), nullptr)
          ,
          Expr::MakeIfElseCond(
            ConditionExpression::CondEq,
            Expr::MakeId(X86_FlZf, &m_CpuInfo),
            Expr::MakeBitVector(1, 0x1),
            Expr::MakeAssign(
              Expr::MakeVar("loop", VariableExpression::Use),
              Expr::MakeBitVector(1, 0x0)), nullptr)
          })
        ));
      }
      /* semantic: if __code and instruction_has_no_prefix(repz, repnz):
        call('scan_string') */
      if (!(rInsn.GetPrefix() & (X86_Prefix_Rep | X86_Prefix_RepNz)))
      {
        /* block glb expressions */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            rInsn.GetOperand(0),
            rInsn.GetOperand(1))));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlOf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                Expr::MakeVar("res", VariableExpression::Use)),
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                rInsn.GetOperand(1))),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlCf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  rInsn.GetOperand(0),
                  rInsn.GetOperand(1)),
                Expr::MakeVar("res", VariableExpression::Use)),
              Expr::MakeBinOp(
                OperationExpression::OpAnd,
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  rInsn.GetOperand(0),
                  Expr::MakeVar("res", VariableExpression::Use)),
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  rInsn.GetOperand(0),
                  rInsn.GetOperand(1)))),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlSf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlZf, &m_CpuInfo),
          Expr::MakeTernaryCond(ConditionExpression::CondEq,
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))));
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBitVector(1, 0x1)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlPf, &m_CpuInfo),
          Expr::MakeVar("pf_tmp", VariableExpression::Use)));
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlAf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                rInsn.GetOperand(1)),
              Expr::MakeVar("res", VariableExpression::Use)),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))));
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeId(X86_FlDf, &m_CpuInfo),
          Expr::MakeBitVector(1, 0x1),
          Expr::MakeAssign(
            expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression(),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression(),
              Expr::MakeBitVector(expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression()->GetBitSize(), rInsn.GetOperand(1)->GetBitSize() / 8)))
        ,
          Expr::MakeAssign(
            expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression(),
            Expr::MakeBinOp(
              OperationExpression::OpAdd,
              expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression(),
              Expr::MakeBitVector(expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression()->GetBitSize(), rInsn.GetOperand(1)->GetBitSize() / 8)))
        ));
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
      }
      /* semantic: free_var('loop') */
      AllExpr.push_back(Expr::MakeVar("loop", VariableExpression::Free));
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instruction
 * mnemonic: scas
 * test_flags: ['df']
 * semantic: alloc_var('loop', 1);
loop = int1(1);
if __code and instruction_has_prefix(repz):
  if __expr and cnt.id == int(cnt.bit, 0): loop = int1(0)
  while loop == int1(1):
    call('scan_string')
    cnt.id -= int(cnt.bit, 1)
    if __expr and cnt.id == int(cnt.bit, 0): loop = int1(0)
    if __expr and zf.id == int1(0): loop = int1(0);
if __code and instruction_has_prefix(repnz):
  if __expr and cnt.id == int(cnt.bit, 0): loop = int1(0)
  while loop == int1(1):
    call('scan_string')
    cnt.id -= int(cnt.bit, 1)
    if __expr and cnt.id == int(cnt.bit, 0): loop = int1(0)
    if __expr and zf.id == int1(1): loop = int1(0);
if __code and instruction_has_no_prefix(repz, repnz):
  call('scan_string');
free_var('loop');

 * operand: ['rAX', 'Yv']
 * opcode: af
 * update_flags: ['of', 'sf', 'zf', 'af', 'pf', 'cf']
**/
bool X86Architecture::Table_1_af(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Size()++;
    rInsn.SetOpcode(X86_Opcode_Scas);
    if (Operand__rAX_Yv(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    {
      Expression::LSPType AllExpr;
      rInsn.SetTestedFlags(X86_FlDf);
      rInsn.SetUpdatedFlags(X86_FlOf | X86_FlSf | X86_FlZf | X86_FlAf | X86_FlPf | X86_FlCf);
      /* semantic: alloc_var('loop', 1) */
      AllExpr.push_back(Expr::MakeVar("loop", VariableExpression::Alloc, 0x1));
      /* semantic: loop = int1(1) */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("loop", VariableExpression::Use),
        Expr::MakeBitVector(1, 0x1)));
      /* semantic: if __code and instruction_has_prefix(repz):
        if __expr and cnt.id == int(cnt.bit, 0): loop = int1(0)
        while loop == int1(1):
          call('scan_string')
          cnt.id -= int(cnt.bit, 1)
          if __expr and cnt.id == int(cnt.bit, 0): loop = int1(0)
          if __expr and zf.id == int1(0): loop = int1(0) */
      if (rInsn.GetPrefix() & (X86_Prefix_Rep))
      {
        /* block glb expressions */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::CounterRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::CounterRegister, rInsn.GetMode())), 0x0),
          Expr::MakeAssign(
            Expr::MakeVar("loop", VariableExpression::Use),
            Expr::MakeBitVector(1, 0x0)), nullptr)
        );
        AllExpr.push_back(Expr::MakeWhileCond(
          ConditionExpression::CondEq,
          Expr::MakeVar("loop", VariableExpression::Use),
          Expr::MakeBitVector(1, 0x1),
          Expr::MakeBind({
          Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()),
          Expr::MakeAssign(
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              rInsn.GetOperand(0),
              rInsn.GetOperand(1))),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlOf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeBinOp(
                OperationExpression::OpAnd,
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  rInsn.GetOperand(0),
                  Expr::MakeVar("res", VariableExpression::Use)),
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  rInsn.GetOperand(0),
                  rInsn.GetOperand(1))),
              Expr::MakeBinOp(
                OperationExpression::OpSub,
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlCf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  Expr::MakeBinOp(
                    OperationExpression::OpXor,
                    rInsn.GetOperand(0),
                    rInsn.GetOperand(1)),
                  Expr::MakeVar("res", VariableExpression::Use)),
                Expr::MakeBinOp(
                  OperationExpression::OpAnd,
                  Expr::MakeBinOp(
                    OperationExpression::OpXor,
                    rInsn.GetOperand(0),
                    Expr::MakeVar("res", VariableExpression::Use)),
                  Expr::MakeBinOp(
                    OperationExpression::OpXor,
                    rInsn.GetOperand(0),
                    rInsn.GetOperand(1)))),
              Expr::MakeBinOp(
                OperationExpression::OpSub,
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlSf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBinOp(
                OperationExpression::OpSub,
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlZf, &m_CpuInfo),
            Expr::MakeTernaryCond(ConditionExpression::CondEq,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
            Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))),
          Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)),
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBitVector(1, 0x1)),
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeId(X86_FlPf, &m_CpuInfo),
            Expr::MakeVar("pf_tmp", VariableExpression::Use)),
          Expr::MakeVar("pf_tmp", VariableExpression::Free),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlAf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  rInsn.GetOperand(0),
                  rInsn.GetOperand(1)),
                Expr::MakeVar("res", VariableExpression::Use)),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))),
          Expr::MakeIfElseCond(
            ConditionExpression::CondEq,
            Expr::MakeId(X86_FlDf, &m_CpuInfo),
            Expr::MakeBitVector(1, 0x1),
            Expr::MakeAssign(
              expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression(),
              Expr::MakeBinOp(
                OperationExpression::OpSub,
                expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression(),
                Expr::MakeBitVector(expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression()->GetBitSize(), rInsn.GetOperand(1)->GetBitSize() / 8)))
          ,
            Expr::MakeAssign(
              expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression(),
              Expr::MakeBinOp(
                OperationExpression::OpAdd,
                expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression(),
                Expr::MakeBitVector(expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression()->GetBitSize(), rInsn.GetOperand(1)->GetBitSize() / 8)))
          ),
          Expr::MakeVar("res", VariableExpression::Free),
          Expr::MakeAssign(
            Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::CounterRegister, rInsn.GetMode()), &m_CpuInfo),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::CounterRegister, rInsn.GetMode()), &m_CpuInfo),
              Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::CounterRegister, rInsn.GetMode())), 0x1)))
          ,
          Expr::MakeIfElseCond(
            ConditionExpression::CondEq,
            Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::CounterRegister, rInsn.GetMode()), &m_CpuInfo),
            Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::CounterRegister, rInsn.GetMode())), 0x0),
            Expr::MakeAssign(
              Expr::MakeVar("loop", VariableExpression::Use),
              Expr::MakeBitVector(1, 0x0)), nullptr)
          ,
          Expr::MakeIfElseCond(
            ConditionExpression::CondEq,
            Expr::MakeId(X86_FlZf, &m_CpuInfo),
            Expr::MakeBitVector(1, 0x0),
            Expr::MakeAssign(
              Expr::MakeVar("loop", VariableExpression::Use),
              Expr::MakeBitVector(1, 0x0)), nullptr)
          })
        ));
      }
      /* semantic: if __code and instruction_has_prefix(repnz):
        if __expr and cnt.id == int(cnt.bit, 0): loop = int1(0)
        while loop == int1(1):
          call('scan_string')
          cnt.id -= int(cnt.bit, 1)
          if __expr and cnt.id == int(cnt.bit, 0): loop = int1(0)
          if __expr and zf.id == int1(1): loop = int1(0) */
      if (rInsn.GetPrefix() & (X86_Prefix_RepNz))
      {
        /* block glb expressions */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::CounterRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::CounterRegister, rInsn.GetMode())), 0x0),
          Expr::MakeAssign(
            Expr::MakeVar("loop", VariableExpression::Use),
            Expr::MakeBitVector(1, 0x0)), nullptr)
        );
        AllExpr.push_back(Expr::MakeWhileCond(
          ConditionExpression::CondEq,
          Expr::MakeVar("loop", VariableExpression::Use),
          Expr::MakeBitVector(1, 0x1),
          Expr::MakeBind({
          Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()),
          Expr::MakeAssign(
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              rInsn.GetOperand(0),
              rInsn.GetOperand(1))),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlOf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeBinOp(
                OperationExpression::OpAnd,
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  rInsn.GetOperand(0),
                  Expr::MakeVar("res", VariableExpression::Use)),
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  rInsn.GetOperand(0),
                  rInsn.GetOperand(1))),
              Expr::MakeBinOp(
                OperationExpression::OpSub,
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlCf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  Expr::MakeBinOp(
                    OperationExpression::OpXor,
                    rInsn.GetOperand(0),
                    rInsn.GetOperand(1)),
                  Expr::MakeVar("res", VariableExpression::Use)),
                Expr::MakeBinOp(
                  OperationExpression::OpAnd,
                  Expr::MakeBinOp(
                    OperationExpression::OpXor,
                    rInsn.GetOperand(0),
                    Expr::MakeVar("res", VariableExpression::Use)),
                  Expr::MakeBinOp(
                    OperationExpression::OpXor,
                    rInsn.GetOperand(0),
                    rInsn.GetOperand(1)))),
              Expr::MakeBinOp(
                OperationExpression::OpSub,
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlSf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBinOp(
                OperationExpression::OpSub,
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlZf, &m_CpuInfo),
            Expr::MakeTernaryCond(ConditionExpression::CondEq,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
            Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))),
          Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)),
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBitVector(1, 0x1)),
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeId(X86_FlPf, &m_CpuInfo),
            Expr::MakeVar("pf_tmp", VariableExpression::Use)),
          Expr::MakeVar("pf_tmp", VariableExpression::Free),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlAf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  rInsn.GetOperand(0),
                  rInsn.GetOperand(1)),
                Expr::MakeVar("res", VariableExpression::Use)),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))),
          Expr::MakeIfElseCond(
            ConditionExpression::CondEq,
            Expr::MakeId(X86_FlDf, &m_CpuInfo),
            Expr::MakeBitVector(1, 0x1),
            Expr::MakeAssign(
              expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression(),
              Expr::MakeBinOp(
                OperationExpression::OpSub,
                expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression(),
                Expr::MakeBitVector(expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression()->GetBitSize(), rInsn.GetOperand(1)->GetBitSize() / 8)))
          ,
            Expr::MakeAssign(
              expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression(),
              Expr::MakeBinOp(
                OperationExpression::OpAdd,
                expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression(),
                Expr::MakeBitVector(expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression()->GetBitSize(), rInsn.GetOperand(1)->GetBitSize() / 8)))
          ),
          Expr::MakeVar("res", VariableExpression::Free),
          Expr::MakeAssign(
            Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::CounterRegister, rInsn.GetMode()), &m_CpuInfo),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::CounterRegister, rInsn.GetMode()), &m_CpuInfo),
              Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::CounterRegister, rInsn.GetMode())), 0x1)))
          ,
          Expr::MakeIfElseCond(
            ConditionExpression::CondEq,
            Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::CounterRegister, rInsn.GetMode()), &m_CpuInfo),
            Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::CounterRegister, rInsn.GetMode())), 0x0),
            Expr::MakeAssign(
              Expr::MakeVar("loop", VariableExpression::Use),
              Expr::MakeBitVector(1, 0x0)), nullptr)
          ,
          Expr::MakeIfElseCond(
            ConditionExpression::CondEq,
            Expr::MakeId(X86_FlZf, &m_CpuInfo),
            Expr::MakeBitVector(1, 0x1),
            Expr::MakeAssign(
              Expr::MakeVar("loop", VariableExpression::Use),
              Expr::MakeBitVector(1, 0x0)), nullptr)
          })
        ));
      }
      /* semantic: if __code and instruction_has_no_prefix(repz, repnz):
        call('scan_string') */
      if (!(rInsn.GetPrefix() & (X86_Prefix_Rep | X86_Prefix_RepNz)))
      {
        /* block glb expressions */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            rInsn.GetOperand(0),
            rInsn.GetOperand(1))));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlOf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                Expr::MakeVar("res", VariableExpression::Use)),
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                rInsn.GetOperand(1))),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlCf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  rInsn.GetOperand(0),
                  rInsn.GetOperand(1)),
                Expr::MakeVar("res", VariableExpression::Use)),
              Expr::MakeBinOp(
                OperationExpression::OpAnd,
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  rInsn.GetOperand(0),
                  Expr::MakeVar("res", VariableExpression::Use)),
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  rInsn.GetOperand(0),
                  rInsn.GetOperand(1)))),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlSf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlZf, &m_CpuInfo),
          Expr::MakeTernaryCond(ConditionExpression::CondEq,
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))));
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBitVector(1, 0x1)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlPf, &m_CpuInfo),
          Expr::MakeVar("pf_tmp", VariableExpression::Use)));
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlAf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                rInsn.GetOperand(1)),
              Expr::MakeVar("res", VariableExpression::Use)),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))));
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeId(X86_FlDf, &m_CpuInfo),
          Expr::MakeBitVector(1, 0x1),
          Expr::MakeAssign(
            expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression(),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression(),
              Expr::MakeBitVector(expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression()->GetBitSize(), rInsn.GetOperand(1)->GetBitSize() / 8)))
        ,
          Expr::MakeAssign(
            expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression(),
            Expr::MakeBinOp(
              OperationExpression::OpAdd,
              expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression(),
              Expr::MakeBitVector(expr_cast<MemoryExpression>(rInsn.GetOperand(1))->GetOffsetExpression()->GetBitSize(), rInsn.GetOperand(1)->GetBitSize() / 8)))
        ));
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
      }
      /* semantic: free_var('loop') */
      AllExpr.push_back(Expr::MakeVar("loop", VariableExpression::Free));
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instructions
 * opcode: b0
 *
 * mnemonic: mov
 * operand: ['AL', 'Ib']
 * semantic: op0.val = op1.val;

 *
 * mnemonic: mov
 * operand: ['r8b', 'Ib']
 * semantic: op0.val = op1.val;

 * attr: ['rexb']
 *
**/
bool X86Architecture::Table_1_b0(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    if ((rInsn.GetPrefix() & X86_Prefix_REX_b) == X86_Prefix_REX_b)
    {
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Mov);
      if (Operand__r8b_Ib(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: op0.val = op1.val */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          rInsn.GetOperand(1)));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    else
    {
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Mov);
      if (Operand__AL_Ib(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: op0.val = op1.val */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          rInsn.GetOperand(1)));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
}

/** instructions
 * opcode: b1
 *
 * mnemonic: mov
 * operand: ['CL', 'Ib']
 * semantic: op0.val = op1.val;

 *
 * mnemonic: mov
 * operand: ['r9b', 'Ib']
 * semantic: op0.val = op1.val;

 * attr: ['rexb']
 *
**/
bool X86Architecture::Table_1_b1(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    if ((rInsn.GetPrefix() & X86_Prefix_REX_b) == X86_Prefix_REX_b)
    {
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Mov);
      if (Operand__r9b_Ib(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: op0.val = op1.val */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          rInsn.GetOperand(1)));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    else
    {
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Mov);
      if (Operand__CL_Ib(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: op0.val = op1.val */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          rInsn.GetOperand(1)));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
}

/** instructions
 * opcode: b2
 *
 * mnemonic: mov
 * operand: ['DL', 'Ib']
 * semantic: op0.val = op1.val;

 *
 * mnemonic: mov
 * operand: ['r10b', 'Ib']
 * semantic: op0.val = op1.val;

 * attr: ['rexb']
 *
**/
bool X86Architecture::Table_1_b2(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    if ((rInsn.GetPrefix() & X86_Prefix_REX_b) == X86_Prefix_REX_b)
    {
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Mov);
      if (Operand__r10b_Ib(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: op0.val = op1.val */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          rInsn.GetOperand(1)));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    else
    {
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Mov);
      if (Operand__DL_Ib(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: op0.val = op1.val */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          rInsn.GetOperand(1)));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
}

/** instructions
 * opcode: b3
 *
 * mnemonic: mov
 * operand: ['BL', 'Ib']
 * semantic: op0.val = op1.val;

 *
 * mnemonic: mov
 * operand: ['r11b', 'Ib']
 * semantic: op0.val = op1.val;

 * attr: ['rexb']
 *
**/
bool X86Architecture::Table_1_b3(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    if ((rInsn.GetPrefix() & X86_Prefix_REX_b) == X86_Prefix_REX_b)
    {
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Mov);
      if (Operand__r11b_Ib(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: op0.val = op1.val */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          rInsn.GetOperand(1)));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    else
    {
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Mov);
      if (Operand__BL_Ib(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: op0.val = op1.val */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          rInsn.GetOperand(1)));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
}

/** instructions
 * opcode: b4
 *
 * mnemonic: mov
 * operand: ['AH', 'Ib']
 * semantic: op0.val = op1.val;

 *
 * mnemonic: mov
 * operand: ['r12b', 'Ib']
 * semantic: op0.val = op1.val;

 * attr: ['rexb']
 *
**/
bool X86Architecture::Table_1_b4(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    if ((rInsn.GetPrefix() & X86_Prefix_REX_b) == X86_Prefix_REX_b)
    {
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Mov);
      if (Operand__r12b_Ib(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: op0.val = op1.val */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          rInsn.GetOperand(1)));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    else
    {
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Mov);
      if (Operand__AH_Ib(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: op0.val = op1.val */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          rInsn.GetOperand(1)));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
}

/** instructions
 * opcode: b5
 *
 * mnemonic: mov
 * operand: ['CH', 'Ib']
 * semantic: op0.val = op1.val;

 *
 * mnemonic: mov
 * operand: ['r13b', 'Ib']
 * semantic: op0.val = op1.val;

 * attr: ['rexb']
 *
**/
bool X86Architecture::Table_1_b5(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    if ((rInsn.GetPrefix() & X86_Prefix_REX_b) == X86_Prefix_REX_b)
    {
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Mov);
      if (Operand__r13b_Ib(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: op0.val = op1.val */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          rInsn.GetOperand(1)));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    else
    {
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Mov);
      if (Operand__CH_Ib(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: op0.val = op1.val */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          rInsn.GetOperand(1)));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
}

/** instructions
 * opcode: b6
 *
 * mnemonic: mov
 * operand: ['DH', 'Ib']
 * semantic: op0.val = op1.val;

 *
 * mnemonic: mov
 * operand: ['r14b', 'Ib']
 * semantic: op0.val = op1.val;

 * attr: ['rexb']
 *
**/
bool X86Architecture::Table_1_b6(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    if ((rInsn.GetPrefix() & X86_Prefix_REX_b) == X86_Prefix_REX_b)
    {
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Mov);
      if (Operand__r14b_Ib(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: op0.val = op1.val */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          rInsn.GetOperand(1)));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    else
    {
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Mov);
      if (Operand__DH_Ib(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: op0.val = op1.val */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          rInsn.GetOperand(1)));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
}

/** instructions
 * opcode: b7
 *
 * mnemonic: mov
 * operand: ['BH', 'Ib']
 * semantic: op0.val = op1.val;

 *
 * mnemonic: mov
 * operand: ['r15b', 'Ib']
 * semantic: op0.val = op1.val;

 * attr: ['rexb']
 *
**/
bool X86Architecture::Table_1_b7(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    if ((rInsn.GetPrefix() & X86_Prefix_REX_b) == X86_Prefix_REX_b)
    {
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Mov);
      if (Operand__r15b_Ib(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: op0.val = op1.val */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          rInsn.GetOperand(1)));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    else
    {
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Mov);
      if (Operand__BH_Ib(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: op0.val = op1.val */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          rInsn.GetOperand(1)));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
}

/** instructions
 * opcode: b8
 *
 * mnemonic: mov
 * operand: ['rAX', 'Iv']
 * semantic: op0.val = op1.val;

 *
 * mnemonic: mov
 * operand: ['r8', 'Iv']
 * semantic: op0.val = op1.val;

 * attr: ['rexb']
 *
**/
bool X86Architecture::Table_1_b8(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    if ((rInsn.GetPrefix() & X86_Prefix_REX_b) == X86_Prefix_REX_b)
    {
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Mov);
      if (Operand__r8_Iv(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: op0.val = op1.val */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          rInsn.GetOperand(1)));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    else
    {
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Mov);
      if (Operand__rAX_Iv(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: op0.val = op1.val */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          rInsn.GetOperand(1)));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
}

/** instructions
 * opcode: b9
 *
 * mnemonic: mov
 * operand: ['rCX', 'Iv']
 * semantic: op0.val = op1.val;

 *
 * mnemonic: mov
 * operand: ['r9', 'Iv']
 * semantic: op0.val = op1.val;

 * attr: ['rexb']
 *
**/
bool X86Architecture::Table_1_b9(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    if ((rInsn.GetPrefix() & X86_Prefix_REX_b) == X86_Prefix_REX_b)
    {
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Mov);
      if (Operand__r9_Iv(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: op0.val = op1.val */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          rInsn.GetOperand(1)));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    else
    {
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Mov);
      if (Operand__rCX_Iv(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: op0.val = op1.val */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          rInsn.GetOperand(1)));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
}

/** instructions
 * opcode: ba
 *
 * mnemonic: mov
 * operand: ['rDX', 'Iv']
 * semantic: op0.val = op1.val;

 *
 * mnemonic: mov
 * operand: ['r10', 'Iv']
 * semantic: op0.val = op1.val;

 * attr: ['rexb']
 *
**/
bool X86Architecture::Table_1_ba(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    if ((rInsn.GetPrefix() & X86_Prefix_REX_b) == X86_Prefix_REX_b)
    {
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Mov);
      if (Operand__r10_Iv(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: op0.val = op1.val */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          rInsn.GetOperand(1)));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    else
    {
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Mov);
      if (Operand__rDX_Iv(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: op0.val = op1.val */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          rInsn.GetOperand(1)));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
}

/** instructions
 * opcode: bb
 *
 * mnemonic: mov
 * operand: ['rBX', 'Iv']
 * semantic: op0.val = op1.val;

 *
 * mnemonic: mov
 * operand: ['r11', 'Iv']
 * semantic: op0.val = op1.val;

 * attr: ['rexb']
 *
**/
bool X86Architecture::Table_1_bb(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    if ((rInsn.GetPrefix() & X86_Prefix_REX_b) == X86_Prefix_REX_b)
    {
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Mov);
      if (Operand__r11_Iv(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: op0.val = op1.val */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          rInsn.GetOperand(1)));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    else
    {
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Mov);
      if (Operand__rBX_Iv(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: op0.val = op1.val */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          rInsn.GetOperand(1)));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
}

/** instructions
 * opcode: bc
 *
 * mnemonic: mov
 * operand: ['rSP', 'Iv']
 * semantic: op0.val = op1.val;

 *
 * mnemonic: mov
 * operand: ['r12', 'Iv']
 * semantic: op0.val = op1.val;

 * attr: ['rexb']
 *
**/
bool X86Architecture::Table_1_bc(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    if ((rInsn.GetPrefix() & X86_Prefix_REX_b) == X86_Prefix_REX_b)
    {
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Mov);
      if (Operand__r12_Iv(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: op0.val = op1.val */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          rInsn.GetOperand(1)));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    else
    {
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Mov);
      if (Operand__rSP_Iv(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: op0.val = op1.val */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          rInsn.GetOperand(1)));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
}

/** instructions
 * opcode: bd
 *
 * mnemonic: mov
 * operand: ['rBP', 'Iv']
 * semantic: op0.val = op1.val;

 *
 * mnemonic: mov
 * operand: ['r13', 'Iv']
 * semantic: op0.val = op1.val;

 * attr: ['rexb']
 *
**/
bool X86Architecture::Table_1_bd(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    if ((rInsn.GetPrefix() & X86_Prefix_REX_b) == X86_Prefix_REX_b)
    {
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Mov);
      if (Operand__r13_Iv(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: op0.val = op1.val */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          rInsn.GetOperand(1)));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    else
    {
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Mov);
      if (Operand__rBP_Iv(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: op0.val = op1.val */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          rInsn.GetOperand(1)));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
}

/** instructions
 * opcode: be
 *
 * mnemonic: mov
 * operand: ['rSI', 'Iv']
 * semantic: op0.val = op1.val;

 *
 * mnemonic: mov
 * operand: ['r14', 'Iv']
 * semantic: op0.val = op1.val;

 * attr: ['rexb']
 *
**/
bool X86Architecture::Table_1_be(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    if ((rInsn.GetPrefix() & X86_Prefix_REX_b) == X86_Prefix_REX_b)
    {
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Mov);
      if (Operand__r14_Iv(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: op0.val = op1.val */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          rInsn.GetOperand(1)));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    else
    {
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Mov);
      if (Operand__rSI_Iv(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: op0.val = op1.val */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          rInsn.GetOperand(1)));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
}

/** instructions
 * opcode: bf
 *
 * mnemonic: mov
 * operand: ['rDI', 'Iv']
 * semantic: op0.val = op1.val;

 *
 * mnemonic: mov
 * operand: ['r15', 'Iv']
 * semantic: op0.val = op1.val;

 * attr: ['rexb']
 *
**/
bool X86Architecture::Table_1_bf(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    if ((rInsn.GetPrefix() & X86_Prefix_REX_b) == X86_Prefix_REX_b)
    {
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Mov);
      if (Operand__r15_Iv(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: op0.val = op1.val */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          rInsn.GetOperand(1)));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    else
    {
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Mov);
      if (Operand__rDI_Iv(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: op0.val = op1.val */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          rInsn.GetOperand(1)));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
}

/** group:
 * mnemonic: rol
 * opcode: 00
 * semantic: alloc_var('res', op0.bit);
alloc_var('count', op0.bit);
count = bit_cast(op1.val, int(op0.bit, op0.bit));
call('count_mask');
res = rol(op0.val, count);
if __expr and count != int(op0.bit, 0):
  cf.id = bit_cast(res, int_type1);
if __expr and count == int(op0.bit, 1):
  of.id = bit_cast(bit_cast(cf.id, int_type(op0.bit)) ^ (res >> (int(op0.bit,op0.bit) - int(op0.bit, 1))), int_type1);
op0.val = res;
free_var('count');
free_var('res');

 *
 * mnemonic: ror
 * opcode: 01
 * semantic: alloc_var('res', op0.bit);
alloc_var('count', op0.bit);
count = bit_cast(op1.val, int_type(op0.bit));
call('count_mask');
res = ror(op0.val, count);
if __expr and count != int(op0.bit, 0):
  cf.id = bit_cast(res >> (int(op0.bit, op0.bit) - int(op0.bit, 1)), int_type1);
if __expr and count == int(op0.bit, 1):
  of.id = bit_cast((res >> (int(op0.bit, op0.bit) - int(op0.bit, 1))) ^ (res >> (int(op0.bit, op0.bit) - int(op0.bit, 2))), int_type1);
op0.val = res;
free_var('count');
free_var('res');

 *
 * mnemonic: rcl
 * opcode: 02
 * semantic: alloc_var('res', op0.bit);
alloc_var('count', op0.bit);
count = bit_cast(op1.val, int_type(op0.bit));
call('count_mask');
alloc_var('rol_val', concat(op0.bit, ignore(' + 1')));
rol_val = bit_cast(op0.val, int_type(concat(op0.bit, ignore(' + 1'))));
rol_val |= (bit_cast(cf.id, int_type(concat(op0.bit, ignore(' + 1')))) << int(concat(op0.bit, ignore(' + 1')), op0.bit));
rol_val = rol(rol_val, bit_cast(count, int_type(concat(op0.bit, ignore(' + 1')))));
res = bit_cast(rol_val, int_type(op0.bit));
if __expr and count != int(op0.bit, 0):
  cf.id = bit_cast(rol_val >> int(concat(op0.bit, ignore(' + 1')), op0.bit), int_type1);
if __expr and count == int(op0.bit, 1):
  of.id = bit_cast(cf.id ^ bit_cast(res >> (int(op0.bit, op0.bit) - int(op0.bit, 1)), int_type1), int_type1);
op0.val = res;
free_var('rol_val');
free_var('count');
free_var('res');

 *
 * mnemonic: rcr
 * opcode: 03
 * semantic: alloc_var('res', op0.bit);
alloc_var('count', op0.bit);
count = bit_cast(op1.val, int(op0.bit, op0.bit));
call('count_mask');
alloc_var('ror_val', concat(op0.bit, ignore(' + 1')));
ror_val = bit_cast(op0.val, int_type(concat(op0.bit, ignore(' + 1'))));
ror_val |= (bit_cast(cf.id, int_type(concat(op0.bit, ignore(' + 1')))) << int(concat(op0.bit, ignore(' + 1')), op0.bit));
ror_val = ror(ror_val, bit_cast(count, int_type(concat(op0.bit, ignore(' + 1')))));
res = bit_cast(ror_val, int_type(op0.bit));
if __expr and count != int(op0.bit, 0):
  cf.id = bit_cast(ror_val >> int(concat(op0.bit, ignore(' + 1')), op0.bit), int_type1);
if __expr and count == int(op0.bit, 1):
  of.id = bit_cast((res >> (int(op0.bit, op0.bit) - int(op0.bit, 1))) ^ (res >> (int(op0.bit, op0.bit) - int(op0.bit, 2))), int_type1);
op0.val = res;
free_var('ror_val');
free_var('count');
free_var('res');

 *
 * mnemonic: shl
 * opcode: 04
 * semantic: alloc_var('res', op0.bit);
alloc_var('count', op0.bit);
count = bit_cast(op1.val, int(op0.bit, op0.bit));
call('count_mask');
res = op0.val << count;
if __expr and count != int(op0.bit, 0):
  cf.id = bit_cast(op0.val >> (int(op0.bit, op0.bit) - count), int1(1))
  call('sign_flag')
  call('zero_flag')
  call('parity_flag');
if __expr and count == int(op0.bit, 1):
  of.id = bit_cast((op0.val >> (int(op0.bit, op0.bit) - int(op0.bit, 1))) ^ (op0.val >> (int(op0.bit, op0.bit) - int(op0.bit, 2))), int1(1));
op0.val = res;
free_var('count');
free_var('res');

 *
 * mnemonic: shr
 * opcode: 05
 * semantic: alloc_var('res', op0.bit);
alloc_var('count', op0.bit);
count = bit_cast(op1.val, int(op0.bit, op0.bit));
call('count_mask');
res = op0.val >> count;
if __expr and count != int(op0.bit, 0):
  cf.id = bit_cast(op0.val >> (count - int(op0.bit, 1)), int1(1))
  call('sign_flag')
  call('zero_flag')
  call('parity_flag');
if __expr and count == int(op0.bit, 1):
  of.id = bit_cast((op0.val >> (int(op0.bit, op0.bit) - int(op0.bit, 1))), int1(1));
op0.val = res;
free_var('count');
free_var('res');

 *
 * mnemonic: sal
 * opcode: 06
 * semantic: alloc_var('res', op0.bit);
alloc_var('count', op0.bit);
count = bit_cast(op1.val, int(op0.bit, op0.bit));
call('count_mask');
res = op0.val << count;
if __expr and count != int(op0.bit, 0):
  cf.id = bit_cast(op0.val >> (int(op0.bit, op0.bit) - count), int1(1))
  call('sign_flag')
  call('zero_flag')
  call('parity_flag');
if __expr and count == int(op0.bit, 1):
  of.id = bit_cast((op0.val >> (int(op0.bit, op0.bit) - int(op0.bit, 1))) ^ (op0.val >> (int(op0.bit, op0.bit) - int(op0.bit, 2))), int1(1));
op0.val = res;
free_var('count');
free_var('res');

 *
 * mnemonic: sar
 * opcode: 07
 * semantic: alloc_var('res', op0.bit);
alloc_var('count', op0.bit);
count = bit_cast(op1.val, int(op0.bit, op0.bit));
call('count_mask');
res = ars(op0.val, count);
if __expr and count != int(op0.bit, 0):
  if __expr and count > int(op0.bit, op0.bit): cf.id = bit_cast(op0.val >> (int(op0.bit, op0.bit) - int(op0.bit, 1)), int1(1))
  else: cf.id = bit_cast(op0.val >> (count - int(op0.bit, 1)), int1(1))
  call('sign_flag')
  call('zero_flag')
  call('parity_flag');
if __expr and count == int(op0.bit, 1):
  of.id = int1(0);
op0.val = res;
free_var('count');
free_var('res');

 *
**/
bool X86Architecture::Table_1_c0(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    u8 ModRmByte;
    if (!rBinStrm.Read(Offset, ModRmByte))
      return false;

    x86::ModRM ModRm(ModRmByte);
    switch (ModRm.Reg())
    {
    case 0x0:
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Rol);
      if (Operand__Eb_Ib(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: alloc_var('count', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("count", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: count = bit_cast(op1.val, int(op0.bit, op0.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, rInsn.GetOperand(1), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()))));
        /* semantic: call('count_mask') */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x40),
          Expr::MakeAssign(
            Expr::MakeVar("count", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeVar("count", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3f))),
          Expr::MakeAssign(
            Expr::MakeVar("count", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeVar("count", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1f)))));
        /* semantic: res = rol(op0.val, count) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpRol, rInsn.GetOperand(0), Expr::MakeVar("count", VariableExpression::Use))));
        /* semantic: if __expr and count != int(op0.bit, 0):
          cf.id = bit_cast(res, int_type1) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondNe,
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlCf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeVar("res", VariableExpression::Use), Expr::MakeBitVector(1, 1))), nullptr)
        );
        /* semantic: if __expr and count == int(op0.bit, 1):
          of.id = bit_cast(bit_cast(cf.id, int_type(op0.bit)) ^ (res >> (int(op0.bit,op0.bit) - int(op0.bit, 1))), int_type1) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlOf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeId(X86_FlCf, &m_CpuInfo), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize())),
              Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBinOp(
                  OperationExpression::OpSub,
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)))), Expr::MakeBitVector(1, 1))), nullptr)
        );
        /* semantic: op0.val = res */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("res", VariableExpression::Use)));
        /* semantic: free_var('count') */
        AllExpr.push_back(Expr::MakeVar("count", VariableExpression::Free));
        /* semantic: free_var('res') */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x1:
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Ror);
      if (Operand__Eb_Ib(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: alloc_var('count', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("count", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: count = bit_cast(op1.val, int_type(op0.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, rInsn.GetOperand(1), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()))));
        /* semantic: call('count_mask') */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x40),
          Expr::MakeAssign(
            Expr::MakeVar("count", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeVar("count", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3f))),
          Expr::MakeAssign(
            Expr::MakeVar("count", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeVar("count", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1f)))));
        /* semantic: res = ror(op0.val, count) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpRor, rInsn.GetOperand(0), Expr::MakeVar("count", VariableExpression::Use))));
        /* semantic: if __expr and count != int(op0.bit, 0):
          cf.id = bit_cast(res >> (int(op0.bit, op0.bit) - int(op0.bit, 1)), int_type1) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondNe,
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlCf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBinOp(
                OperationExpression::OpSub,
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 1))), nullptr)
        );
        /* semantic: if __expr and count == int(op0.bit, 1):
          of.id = bit_cast((res >> (int(op0.bit, op0.bit) - int(op0.bit, 1))) ^ (res >> (int(op0.bit, op0.bit) - int(op0.bit, 2))), int_type1) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlOf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBinOp(
                  OperationExpression::OpSub,
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))),
              Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBinOp(
                  OperationExpression::OpSub,
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)))), Expr::MakeBitVector(1, 1))), nullptr)
        );
        /* semantic: op0.val = res */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("res", VariableExpression::Use)));
        /* semantic: free_var('count') */
        AllExpr.push_back(Expr::MakeVar("count", VariableExpression::Free));
        /* semantic: free_var('res') */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x2:
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Rcl);
      if (Operand__Eb_Ib(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: alloc_var('count', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("count", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: count = bit_cast(op1.val, int_type(op0.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, rInsn.GetOperand(1), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()))));
        /* semantic: call('count_mask') */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x40),
          Expr::MakeAssign(
            Expr::MakeVar("count", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeVar("count", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3f))),
          Expr::MakeAssign(
            Expr::MakeVar("count", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeVar("count", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1f)))));
        /* semantic: alloc_var('rol_val', concat(op0.bit, ignore(' + 1'))) */
        AllExpr.push_back(Expr::MakeVar("rol_val", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize() + 1));
        /* semantic: rol_val = bit_cast(op0.val, int_type(concat(op0.bit, ignore(' + 1')))) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("rol_val", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, rInsn.GetOperand(0), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize() + 1, rInsn.GetOperand(0)->GetBitSize() + 1))));
        /* semantic: rol_val |= (bit_cast(cf.id, int_type(concat(op0.bit, ignore(' + 1')))) << int(concat(op0.bit, ignore(' + 1')), op0.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("rol_val", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpOr,
            Expr::MakeVar("rol_val", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpLls,
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeId(X86_FlCf, &m_CpuInfo), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize() + 1, rInsn.GetOperand(0)->GetBitSize() + 1)),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize() + 1, rInsn.GetOperand(0)->GetBitSize()))))
        );
        /* semantic: rol_val = rol(rol_val, bit_cast(count, int_type(concat(op0.bit, ignore(' + 1'))))) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("rol_val", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpRol, Expr::MakeVar("rol_val", VariableExpression::Use), Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeVar("count", VariableExpression::Use), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize() + 1, rInsn.GetOperand(0)->GetBitSize() + 1)))));
        /* semantic: res = bit_cast(rol_val, int_type(op0.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeVar("rol_val", VariableExpression::Use), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()))));
        /* semantic: if __expr and count != int(op0.bit, 0):
          cf.id = bit_cast(rol_val >> int(concat(op0.bit, ignore(' + 1')), op0.bit), int_type1) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondNe,
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlCf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("rol_val", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize() + 1, rInsn.GetOperand(0)->GetBitSize())), Expr::MakeBitVector(1, 1))), nullptr)
        );
        /* semantic: if __expr and count == int(op0.bit, 1):
          of.id = bit_cast(cf.id ^ bit_cast(res >> (int(op0.bit, op0.bit) - int(op0.bit, 1)), int_type1), int_type1) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlOf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeId(X86_FlCf, &m_CpuInfo),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBinOp(
                  OperationExpression::OpSub,
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 1))), Expr::MakeBitVector(1, 1))), nullptr)
        );
        /* semantic: op0.val = res */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("res", VariableExpression::Use)));
        /* semantic: free_var('rol_val') */
        AllExpr.push_back(Expr::MakeVar("rol_val", VariableExpression::Free));
        /* semantic: free_var('count') */
        AllExpr.push_back(Expr::MakeVar("count", VariableExpression::Free));
        /* semantic: free_var('res') */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x3:
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Rcr);
      if (Operand__Eb_Ib(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: alloc_var('count', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("count", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: count = bit_cast(op1.val, int(op0.bit, op0.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, rInsn.GetOperand(1), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()))));
        /* semantic: call('count_mask') */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x40),
          Expr::MakeAssign(
            Expr::MakeVar("count", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeVar("count", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3f))),
          Expr::MakeAssign(
            Expr::MakeVar("count", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeVar("count", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1f)))));
        /* semantic: alloc_var('ror_val', concat(op0.bit, ignore(' + 1'))) */
        AllExpr.push_back(Expr::MakeVar("ror_val", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize() + 1));
        /* semantic: ror_val = bit_cast(op0.val, int_type(concat(op0.bit, ignore(' + 1')))) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("ror_val", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, rInsn.GetOperand(0), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize() + 1, rInsn.GetOperand(0)->GetBitSize() + 1))));
        /* semantic: ror_val |= (bit_cast(cf.id, int_type(concat(op0.bit, ignore(' + 1')))) << int(concat(op0.bit, ignore(' + 1')), op0.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("ror_val", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpOr,
            Expr::MakeVar("ror_val", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpLls,
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeId(X86_FlCf, &m_CpuInfo), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize() + 1, rInsn.GetOperand(0)->GetBitSize() + 1)),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize() + 1, rInsn.GetOperand(0)->GetBitSize()))))
        );
        /* semantic: ror_val = ror(ror_val, bit_cast(count, int_type(concat(op0.bit, ignore(' + 1'))))) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("ror_val", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpRor, Expr::MakeVar("ror_val", VariableExpression::Use), Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeVar("count", VariableExpression::Use), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize() + 1, rInsn.GetOperand(0)->GetBitSize() + 1)))));
        /* semantic: res = bit_cast(ror_val, int_type(op0.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeVar("ror_val", VariableExpression::Use), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()))));
        /* semantic: if __expr and count != int(op0.bit, 0):
          cf.id = bit_cast(ror_val >> int(concat(op0.bit, ignore(' + 1')), op0.bit), int_type1) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondNe,
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlCf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("ror_val", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize() + 1, rInsn.GetOperand(0)->GetBitSize())), Expr::MakeBitVector(1, 1))), nullptr)
        );
        /* semantic: if __expr and count == int(op0.bit, 1):
          of.id = bit_cast((res >> (int(op0.bit, op0.bit) - int(op0.bit, 1))) ^ (res >> (int(op0.bit, op0.bit) - int(op0.bit, 2))), int_type1) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlOf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBinOp(
                  OperationExpression::OpSub,
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))),
              Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBinOp(
                  OperationExpression::OpSub,
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)))), Expr::MakeBitVector(1, 1))), nullptr)
        );
        /* semantic: op0.val = res */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("res", VariableExpression::Use)));
        /* semantic: free_var('ror_val') */
        AllExpr.push_back(Expr::MakeVar("ror_val", VariableExpression::Free));
        /* semantic: free_var('count') */
        AllExpr.push_back(Expr::MakeVar("count", VariableExpression::Free));
        /* semantic: free_var('res') */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x4:
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Shl);
      if (Operand__Eb_Ib(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: alloc_var('count', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("count", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: count = bit_cast(op1.val, int(op0.bit, op0.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, rInsn.GetOperand(1), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()))));
        /* semantic: call('count_mask') */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x40),
          Expr::MakeAssign(
            Expr::MakeVar("count", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeVar("count", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3f))),
          Expr::MakeAssign(
            Expr::MakeVar("count", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeVar("count", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1f)))));
        /* semantic: res = op0.val << count */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpLls,
            rInsn.GetOperand(0),
            Expr::MakeVar("count", VariableExpression::Use))));
        /* semantic: if __expr and count != int(op0.bit, 0):
          cf.id = bit_cast(op0.val >> (int(op0.bit, op0.bit) - count), int1(1))
          call('sign_flag')
          call('zero_flag')
          call('parity_flag') */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondNe,
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeBind({
          Expr::MakeAssign(
            Expr::MakeId(X86_FlCf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              rInsn.GetOperand(0),
              Expr::MakeBinOp(
                OperationExpression::OpSub,
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                Expr::MakeVar("count", VariableExpression::Use))), Expr::MakeBitVector(1, 0x1))),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlSf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBinOp(
                OperationExpression::OpSub,
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlZf, &m_CpuInfo),
            Expr::MakeTernaryCond(ConditionExpression::CondEq,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
            Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))),
          Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)),
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBitVector(1, 0x1)),
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeId(X86_FlPf, &m_CpuInfo),
            Expr::MakeVar("pf_tmp", VariableExpression::Use)),
          Expr::MakeVar("pf_tmp", VariableExpression::Free)})
        , nullptr)
        );
        /* semantic: if __expr and count == int(op0.bit, 1):
          of.id = bit_cast((op0.val >> (int(op0.bit, op0.bit) - int(op0.bit, 1))) ^ (op0.val >> (int(op0.bit, op0.bit) - int(op0.bit, 2))), int1(1)) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlOf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(
                OperationExpression::OpLrs,
                rInsn.GetOperand(0),
                Expr::MakeBinOp(
                  OperationExpression::OpSub,
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))),
              Expr::MakeBinOp(
                OperationExpression::OpLrs,
                rInsn.GetOperand(0),
                Expr::MakeBinOp(
                  OperationExpression::OpSub,
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)))), Expr::MakeBitVector(1, 0x1))), nullptr)
        );
        /* semantic: op0.val = res */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("res", VariableExpression::Use)));
        /* semantic: free_var('count') */
        AllExpr.push_back(Expr::MakeVar("count", VariableExpression::Free));
        /* semantic: free_var('res') */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x5:
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Shr);
      if (Operand__Eb_Ib(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: alloc_var('count', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("count", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: count = bit_cast(op1.val, int(op0.bit, op0.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, rInsn.GetOperand(1), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()))));
        /* semantic: call('count_mask') */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x40),
          Expr::MakeAssign(
            Expr::MakeVar("count", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeVar("count", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3f))),
          Expr::MakeAssign(
            Expr::MakeVar("count", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeVar("count", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1f)))));
        /* semantic: res = op0.val >> count */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpLrs,
            rInsn.GetOperand(0),
            Expr::MakeVar("count", VariableExpression::Use))));
        /* semantic: if __expr and count != int(op0.bit, 0):
          cf.id = bit_cast(op0.val >> (count - int(op0.bit, 1)), int1(1))
          call('sign_flag')
          call('zero_flag')
          call('parity_flag') */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondNe,
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeBind({
          Expr::MakeAssign(
            Expr::MakeId(X86_FlCf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              rInsn.GetOperand(0),
              Expr::MakeBinOp(
                OperationExpression::OpSub,
                Expr::MakeVar("count", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlSf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBinOp(
                OperationExpression::OpSub,
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlZf, &m_CpuInfo),
            Expr::MakeTernaryCond(ConditionExpression::CondEq,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
            Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))),
          Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)),
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBitVector(1, 0x1)),
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeId(X86_FlPf, &m_CpuInfo),
            Expr::MakeVar("pf_tmp", VariableExpression::Use)),
          Expr::MakeVar("pf_tmp", VariableExpression::Free)})
        , nullptr)
        );
        /* semantic: if __expr and count == int(op0.bit, 1):
          of.id = bit_cast((op0.val >> (int(op0.bit, op0.bit) - int(op0.bit, 1))), int1(1)) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlOf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              rInsn.GetOperand(0),
              Expr::MakeBinOp(
                OperationExpression::OpSub,
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))), nullptr)
        );
        /* semantic: op0.val = res */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("res", VariableExpression::Use)));
        /* semantic: free_var('count') */
        AllExpr.push_back(Expr::MakeVar("count", VariableExpression::Free));
        /* semantic: free_var('res') */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x6:
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Sal);
      if (Operand__Eb_Ib(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: alloc_var('count', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("count", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: count = bit_cast(op1.val, int(op0.bit, op0.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, rInsn.GetOperand(1), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()))));
        /* semantic: call('count_mask') */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x40),
          Expr::MakeAssign(
            Expr::MakeVar("count", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeVar("count", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3f))),
          Expr::MakeAssign(
            Expr::MakeVar("count", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeVar("count", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1f)))));
        /* semantic: res = op0.val << count */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpLls,
            rInsn.GetOperand(0),
            Expr::MakeVar("count", VariableExpression::Use))));
        /* semantic: if __expr and count != int(op0.bit, 0):
          cf.id = bit_cast(op0.val >> (int(op0.bit, op0.bit) - count), int1(1))
          call('sign_flag')
          call('zero_flag')
          call('parity_flag') */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondNe,
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeBind({
          Expr::MakeAssign(
            Expr::MakeId(X86_FlCf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              rInsn.GetOperand(0),
              Expr::MakeBinOp(
                OperationExpression::OpSub,
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                Expr::MakeVar("count", VariableExpression::Use))), Expr::MakeBitVector(1, 0x1))),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlSf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBinOp(
                OperationExpression::OpSub,
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlZf, &m_CpuInfo),
            Expr::MakeTernaryCond(ConditionExpression::CondEq,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
            Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))),
          Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)),
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBitVector(1, 0x1)),
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeId(X86_FlPf, &m_CpuInfo),
            Expr::MakeVar("pf_tmp", VariableExpression::Use)),
          Expr::MakeVar("pf_tmp", VariableExpression::Free)})
        , nullptr)
        );
        /* semantic: if __expr and count == int(op0.bit, 1):
          of.id = bit_cast((op0.val >> (int(op0.bit, op0.bit) - int(op0.bit, 1))) ^ (op0.val >> (int(op0.bit, op0.bit) - int(op0.bit, 2))), int1(1)) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlOf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(
                OperationExpression::OpLrs,
                rInsn.GetOperand(0),
                Expr::MakeBinOp(
                  OperationExpression::OpSub,
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))),
              Expr::MakeBinOp(
                OperationExpression::OpLrs,
                rInsn.GetOperand(0),
                Expr::MakeBinOp(
                  OperationExpression::OpSub,
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)))), Expr::MakeBitVector(1, 0x1))), nullptr)
        );
        /* semantic: op0.val = res */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("res", VariableExpression::Use)));
        /* semantic: free_var('count') */
        AllExpr.push_back(Expr::MakeVar("count", VariableExpression::Free));
        /* semantic: free_var('res') */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x7:
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Sar);
      if (Operand__Eb_Ib(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: alloc_var('count', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("count", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: count = bit_cast(op1.val, int(op0.bit, op0.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, rInsn.GetOperand(1), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()))));
        /* semantic: call('count_mask') */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x40),
          Expr::MakeAssign(
            Expr::MakeVar("count", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeVar("count", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3f))),
          Expr::MakeAssign(
            Expr::MakeVar("count", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeVar("count", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1f)))));
        /* semantic: res = ars(op0.val, count) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpArs, rInsn.GetOperand(0), Expr::MakeVar("count", VariableExpression::Use))));
        /* semantic: if __expr and count != int(op0.bit, 0):
          if __expr and count > int(op0.bit, op0.bit): cf.id = bit_cast(op0.val >> (int(op0.bit, op0.bit) - int(op0.bit, 1)), int1(1))
          else: cf.id = bit_cast(op0.val >> (count - int(op0.bit, 1)), int1(1))
          call('sign_flag')
          call('zero_flag')
          call('parity_flag') */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondNe,
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeBind({
          Expr::MakeIfElseCond(
            ConditionExpression::CondUgt,
            Expr::MakeVar("count", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeAssign(
              Expr::MakeId(X86_FlCf, &m_CpuInfo),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                rInsn.GetOperand(0),
                Expr::MakeBinOp(
                  OperationExpression::OpSub,
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))),
            Expr::MakeAssign(
              Expr::MakeId(X86_FlCf, &m_CpuInfo),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                rInsn.GetOperand(0),
                Expr::MakeBinOp(
                  OperationExpression::OpSub,
                  Expr::MakeVar("count", VariableExpression::Use),
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1)))),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlSf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBinOp(
                OperationExpression::OpSub,
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlZf, &m_CpuInfo),
            Expr::MakeTernaryCond(ConditionExpression::CondEq,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
            Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))),
          Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)),
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBitVector(1, 0x1)),
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeId(X86_FlPf, &m_CpuInfo),
            Expr::MakeVar("pf_tmp", VariableExpression::Use)),
          Expr::MakeVar("pf_tmp", VariableExpression::Free)})
        , nullptr)
        );
        /* semantic: if __expr and count == int(op0.bit, 1):
          of.id = int1(0) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlOf, &m_CpuInfo),
            Expr::MakeBitVector(1, 0x0)), nullptr)
        );
        /* semantic: op0.val = res */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("res", VariableExpression::Use)));
        /* semantic: free_var('count') */
        AllExpr.push_back(Expr::MakeVar("count", VariableExpression::Free));
        /* semantic: free_var('res') */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    default:
      return false;
    }
}

/** group:
 * mnemonic: rol
 * opcode: 00
 * operand: ['Eb', 'Ib']
 * semantic: alloc_var('res', op0.bit);
alloc_var('count', op0.bit);
count = bit_cast(op1.val, int(op0.bit, op0.bit));
call('count_mask');
res = rol(op0.val, count);
if __expr and count != int(op0.bit, 0):
  cf.id = bit_cast(res, int_type1);
if __expr and count == int(op0.bit, 1):
  of.id = bit_cast(bit_cast(cf.id, int_type(op0.bit)) ^ (res >> (int(op0.bit,op0.bit) - int(op0.bit, 1))), int_type1);
op0.val = res;
free_var('count');
free_var('res');

 *
 * mnemonic: ror
 * opcode: 01
 * operand: ['Eb', 'Ib']
 * semantic: alloc_var('res', op0.bit);
alloc_var('count', op0.bit);
count = bit_cast(op1.val, int_type(op0.bit));
call('count_mask');
res = ror(op0.val, count);
if __expr and count != int(op0.bit, 0):
  cf.id = bit_cast(res >> (int(op0.bit, op0.bit) - int(op0.bit, 1)), int_type1);
if __expr and count == int(op0.bit, 1):
  of.id = bit_cast((res >> (int(op0.bit, op0.bit) - int(op0.bit, 1))) ^ (res >> (int(op0.bit, op0.bit) - int(op0.bit, 2))), int_type1);
op0.val = res;
free_var('count');
free_var('res');

 *
 * mnemonic: rcl
 * opcode: 02
 * operand: ['Eb', 'Ib']
 * semantic: alloc_var('res', op0.bit);
alloc_var('count', op0.bit);
count = bit_cast(op1.val, int_type(op0.bit));
call('count_mask');
alloc_var('rol_val', concat(op0.bit, ignore(' + 1')));
rol_val = bit_cast(op0.val, int_type(concat(op0.bit, ignore(' + 1'))));
rol_val |= (bit_cast(cf.id, int_type(concat(op0.bit, ignore(' + 1')))) << int(concat(op0.bit, ignore(' + 1')), op0.bit));
rol_val = rol(rol_val, bit_cast(count, int_type(concat(op0.bit, ignore(' + 1')))));
res = bit_cast(rol_val, int_type(op0.bit));
if __expr and count != int(op0.bit, 0):
  cf.id = bit_cast(rol_val >> int(concat(op0.bit, ignore(' + 1')), op0.bit), int_type1);
if __expr and count == int(op0.bit, 1):
  of.id = bit_cast(cf.id ^ bit_cast(res >> (int(op0.bit, op0.bit) - int(op0.bit, 1)), int_type1), int_type1);
op0.val = res;
free_var('rol_val');
free_var('count');
free_var('res');

 *
 * mnemonic: rcr
 * opcode: 03
 * operand: ['Eb', 'Ib']
 * semantic: alloc_var('res', op0.bit);
alloc_var('count', op0.bit);
count = bit_cast(op1.val, int(op0.bit, op0.bit));
call('count_mask');
alloc_var('ror_val', concat(op0.bit, ignore(' + 1')));
ror_val = bit_cast(op0.val, int_type(concat(op0.bit, ignore(' + 1'))));
ror_val |= (bit_cast(cf.id, int_type(concat(op0.bit, ignore(' + 1')))) << int(concat(op0.bit, ignore(' + 1')), op0.bit));
ror_val = ror(ror_val, bit_cast(count, int_type(concat(op0.bit, ignore(' + 1')))));
res = bit_cast(ror_val, int_type(op0.bit));
if __expr and count != int(op0.bit, 0):
  cf.id = bit_cast(ror_val >> int(concat(op0.bit, ignore(' + 1')), op0.bit), int_type1);
if __expr and count == int(op0.bit, 1):
  of.id = bit_cast((res >> (int(op0.bit, op0.bit) - int(op0.bit, 1))) ^ (res >> (int(op0.bit, op0.bit) - int(op0.bit, 2))), int_type1);
op0.val = res;
free_var('ror_val');
free_var('count');
free_var('res');

 *
 * mnemonic: shl
 * opcode: 04
 * operand: ['Eb', 'Ib']
 * semantic: alloc_var('res', op0.bit);
alloc_var('count', op0.bit);
count = bit_cast(op1.val, int(op0.bit, op0.bit));
call('count_mask');
res = op0.val << count;
if __expr and count != int(op0.bit, 0):
  cf.id = bit_cast(op0.val >> (int(op0.bit, op0.bit) - count), int1(1))
  call('sign_flag')
  call('zero_flag')
  call('parity_flag');
if __expr and count == int(op0.bit, 1):
  of.id = bit_cast((op0.val >> (int(op0.bit, op0.bit) - int(op0.bit, 1))) ^ (op0.val >> (int(op0.bit, op0.bit) - int(op0.bit, 2))), int1(1));
op0.val = res;
free_var('count');
free_var('res');

 *
 * mnemonic: shr
 * opcode: 05
 * operand: ['Eb', 'Ib']
 * semantic: alloc_var('res', op0.bit);
alloc_var('count', op0.bit);
count = bit_cast(op1.val, int(op0.bit, op0.bit));
call('count_mask');
res = op0.val >> count;
if __expr and count != int(op0.bit, 0):
  cf.id = bit_cast(op0.val >> (count - int(op0.bit, 1)), int1(1))
  call('sign_flag')
  call('zero_flag')
  call('parity_flag');
if __expr and count == int(op0.bit, 1):
  of.id = bit_cast((op0.val >> (int(op0.bit, op0.bit) - int(op0.bit, 1))), int1(1));
op0.val = res;
free_var('count');
free_var('res');

 *
 * mnemonic: sal
 * opcode: 06
 * operand: ['Eb', 'Ib']
 * semantic: alloc_var('res', op0.bit);
alloc_var('count', op0.bit);
count = bit_cast(op1.val, int(op0.bit, op0.bit));
call('count_mask');
res = op0.val << count;
if __expr and count != int(op0.bit, 0):
  cf.id = bit_cast(op0.val >> (int(op0.bit, op0.bit) - count), int1(1))
  call('sign_flag')
  call('zero_flag')
  call('parity_flag');
if __expr and count == int(op0.bit, 1):
  of.id = bit_cast((op0.val >> (int(op0.bit, op0.bit) - int(op0.bit, 1))) ^ (op0.val >> (int(op0.bit, op0.bit) - int(op0.bit, 2))), int1(1));
op0.val = res;
free_var('count');
free_var('res');

 *
 * mnemonic: sar
 * opcode: 07
 * operand: ['Eb', 'Ib']
 * semantic: alloc_var('res', op0.bit);
alloc_var('count', op0.bit);
count = bit_cast(op1.val, int(op0.bit, op0.bit));
call('count_mask');
res = ars(op0.val, count);
if __expr and count != int(op0.bit, 0):
  if __expr and count > int(op0.bit, op0.bit): cf.id = bit_cast(op0.val >> (int(op0.bit, op0.bit) - int(op0.bit, 1)), int1(1))
  else: cf.id = bit_cast(op0.val >> (count - int(op0.bit, 1)), int1(1))
  call('sign_flag')
  call('zero_flag')
  call('parity_flag');
if __expr and count == int(op0.bit, 1):
  of.id = int1(0);
op0.val = res;
free_var('count');
free_var('res');

 *
**/
bool X86Architecture::Table_1_c1(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    u8 ModRmByte;
    if (!rBinStrm.Read(Offset, ModRmByte))
      return false;

    x86::ModRM ModRm(ModRmByte);
    switch (ModRm.Reg())
    {
    case 0x0:
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Rol);
      if (Operand__Ev_Ib(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: alloc_var('count', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("count", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: count = bit_cast(op1.val, int(op0.bit, op0.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, rInsn.GetOperand(1), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()))));
        /* semantic: call('count_mask') */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x40),
          Expr::MakeAssign(
            Expr::MakeVar("count", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeVar("count", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3f))),
          Expr::MakeAssign(
            Expr::MakeVar("count", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeVar("count", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1f)))));
        /* semantic: res = rol(op0.val, count) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpRol, rInsn.GetOperand(0), Expr::MakeVar("count", VariableExpression::Use))));
        /* semantic: if __expr and count != int(op0.bit, 0):
          cf.id = bit_cast(res, int_type1) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondNe,
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlCf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeVar("res", VariableExpression::Use), Expr::MakeBitVector(1, 1))), nullptr)
        );
        /* semantic: if __expr and count == int(op0.bit, 1):
          of.id = bit_cast(bit_cast(cf.id, int_type(op0.bit)) ^ (res >> (int(op0.bit,op0.bit) - int(op0.bit, 1))), int_type1) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlOf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeId(X86_FlCf, &m_CpuInfo), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize())),
              Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBinOp(
                  OperationExpression::OpSub,
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)))), Expr::MakeBitVector(1, 1))), nullptr)
        );
        /* semantic: op0.val = res */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("res", VariableExpression::Use)));
        /* semantic: free_var('count') */
        AllExpr.push_back(Expr::MakeVar("count", VariableExpression::Free));
        /* semantic: free_var('res') */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x1:
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Ror);
      if (Operand__Ev_Ib(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: alloc_var('count', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("count", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: count = bit_cast(op1.val, int_type(op0.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, rInsn.GetOperand(1), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()))));
        /* semantic: call('count_mask') */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x40),
          Expr::MakeAssign(
            Expr::MakeVar("count", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeVar("count", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3f))),
          Expr::MakeAssign(
            Expr::MakeVar("count", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeVar("count", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1f)))));
        /* semantic: res = ror(op0.val, count) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpRor, rInsn.GetOperand(0), Expr::MakeVar("count", VariableExpression::Use))));
        /* semantic: if __expr and count != int(op0.bit, 0):
          cf.id = bit_cast(res >> (int(op0.bit, op0.bit) - int(op0.bit, 1)), int_type1) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondNe,
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlCf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBinOp(
                OperationExpression::OpSub,
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 1))), nullptr)
        );
        /* semantic: if __expr and count == int(op0.bit, 1):
          of.id = bit_cast((res >> (int(op0.bit, op0.bit) - int(op0.bit, 1))) ^ (res >> (int(op0.bit, op0.bit) - int(op0.bit, 2))), int_type1) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlOf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBinOp(
                  OperationExpression::OpSub,
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))),
              Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBinOp(
                  OperationExpression::OpSub,
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)))), Expr::MakeBitVector(1, 1))), nullptr)
        );
        /* semantic: op0.val = res */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("res", VariableExpression::Use)));
        /* semantic: free_var('count') */
        AllExpr.push_back(Expr::MakeVar("count", VariableExpression::Free));
        /* semantic: free_var('res') */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x2:
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Rcl);
      if (Operand__Ev_Ib(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: alloc_var('count', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("count", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: count = bit_cast(op1.val, int_type(op0.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, rInsn.GetOperand(1), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()))));
        /* semantic: call('count_mask') */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x40),
          Expr::MakeAssign(
            Expr::MakeVar("count", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeVar("count", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3f))),
          Expr::MakeAssign(
            Expr::MakeVar("count", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeVar("count", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1f)))));
        /* semantic: alloc_var('rol_val', concat(op0.bit, ignore(' + 1'))) */
        AllExpr.push_back(Expr::MakeVar("rol_val", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize() + 1));
        /* semantic: rol_val = bit_cast(op0.val, int_type(concat(op0.bit, ignore(' + 1')))) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("rol_val", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, rInsn.GetOperand(0), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize() + 1, rInsn.GetOperand(0)->GetBitSize() + 1))));
        /* semantic: rol_val |= (bit_cast(cf.id, int_type(concat(op0.bit, ignore(' + 1')))) << int(concat(op0.bit, ignore(' + 1')), op0.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("rol_val", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpOr,
            Expr::MakeVar("rol_val", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpLls,
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeId(X86_FlCf, &m_CpuInfo), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize() + 1, rInsn.GetOperand(0)->GetBitSize() + 1)),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize() + 1, rInsn.GetOperand(0)->GetBitSize()))))
        );
        /* semantic: rol_val = rol(rol_val, bit_cast(count, int_type(concat(op0.bit, ignore(' + 1'))))) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("rol_val", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpRol, Expr::MakeVar("rol_val", VariableExpression::Use), Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeVar("count", VariableExpression::Use), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize() + 1, rInsn.GetOperand(0)->GetBitSize() + 1)))));
        /* semantic: res = bit_cast(rol_val, int_type(op0.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeVar("rol_val", VariableExpression::Use), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()))));
        /* semantic: if __expr and count != int(op0.bit, 0):
          cf.id = bit_cast(rol_val >> int(concat(op0.bit, ignore(' + 1')), op0.bit), int_type1) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondNe,
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlCf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("rol_val", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize() + 1, rInsn.GetOperand(0)->GetBitSize())), Expr::MakeBitVector(1, 1))), nullptr)
        );
        /* semantic: if __expr and count == int(op0.bit, 1):
          of.id = bit_cast(cf.id ^ bit_cast(res >> (int(op0.bit, op0.bit) - int(op0.bit, 1)), int_type1), int_type1) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlOf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeId(X86_FlCf, &m_CpuInfo),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBinOp(
                  OperationExpression::OpSub,
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 1))), Expr::MakeBitVector(1, 1))), nullptr)
        );
        /* semantic: op0.val = res */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("res", VariableExpression::Use)));
        /* semantic: free_var('rol_val') */
        AllExpr.push_back(Expr::MakeVar("rol_val", VariableExpression::Free));
        /* semantic: free_var('count') */
        AllExpr.push_back(Expr::MakeVar("count", VariableExpression::Free));
        /* semantic: free_var('res') */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x3:
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Rcr);
      if (Operand__Ev_Ib(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: alloc_var('count', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("count", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: count = bit_cast(op1.val, int(op0.bit, op0.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, rInsn.GetOperand(1), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()))));
        /* semantic: call('count_mask') */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x40),
          Expr::MakeAssign(
            Expr::MakeVar("count", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeVar("count", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3f))),
          Expr::MakeAssign(
            Expr::MakeVar("count", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeVar("count", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1f)))));
        /* semantic: alloc_var('ror_val', concat(op0.bit, ignore(' + 1'))) */
        AllExpr.push_back(Expr::MakeVar("ror_val", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize() + 1));
        /* semantic: ror_val = bit_cast(op0.val, int_type(concat(op0.bit, ignore(' + 1')))) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("ror_val", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, rInsn.GetOperand(0), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize() + 1, rInsn.GetOperand(0)->GetBitSize() + 1))));
        /* semantic: ror_val |= (bit_cast(cf.id, int_type(concat(op0.bit, ignore(' + 1')))) << int(concat(op0.bit, ignore(' + 1')), op0.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("ror_val", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpOr,
            Expr::MakeVar("ror_val", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpLls,
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeId(X86_FlCf, &m_CpuInfo), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize() + 1, rInsn.GetOperand(0)->GetBitSize() + 1)),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize() + 1, rInsn.GetOperand(0)->GetBitSize()))))
        );
        /* semantic: ror_val = ror(ror_val, bit_cast(count, int_type(concat(op0.bit, ignore(' + 1'))))) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("ror_val", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpRor, Expr::MakeVar("ror_val", VariableExpression::Use), Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeVar("count", VariableExpression::Use), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize() + 1, rInsn.GetOperand(0)->GetBitSize() + 1)))));
        /* semantic: res = bit_cast(ror_val, int_type(op0.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeVar("ror_val", VariableExpression::Use), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()))));
        /* semantic: if __expr and count != int(op0.bit, 0):
          cf.id = bit_cast(ror_val >> int(concat(op0.bit, ignore(' + 1')), op0.bit), int_type1) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondNe,
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlCf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("ror_val", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize() + 1, rInsn.GetOperand(0)->GetBitSize())), Expr::MakeBitVector(1, 1))), nullptr)
        );
        /* semantic: if __expr and count == int(op0.bit, 1):
          of.id = bit_cast((res >> (int(op0.bit, op0.bit) - int(op0.bit, 1))) ^ (res >> (int(op0.bit, op0.bit) - int(op0.bit, 2))), int_type1) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlOf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBinOp(
                  OperationExpression::OpSub,
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))),
              Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBinOp(
                  OperationExpression::OpSub,
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)))), Expr::MakeBitVector(1, 1))), nullptr)
        );
        /* semantic: op0.val = res */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("res", VariableExpression::Use)));
        /* semantic: free_var('ror_val') */
        AllExpr.push_back(Expr::MakeVar("ror_val", VariableExpression::Free));
        /* semantic: free_var('count') */
        AllExpr.push_back(Expr::MakeVar("count", VariableExpression::Free));
        /* semantic: free_var('res') */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x4:
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Shl);
      if (Operand__Ev_Ib(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: alloc_var('count', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("count", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: count = bit_cast(op1.val, int(op0.bit, op0.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, rInsn.GetOperand(1), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()))));
        /* semantic: call('count_mask') */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x40),
          Expr::MakeAssign(
            Expr::MakeVar("count", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeVar("count", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3f))),
          Expr::MakeAssign(
            Expr::MakeVar("count", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeVar("count", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1f)))));
        /* semantic: res = op0.val << count */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpLls,
            rInsn.GetOperand(0),
            Expr::MakeVar("count", VariableExpression::Use))));
        /* semantic: if __expr and count != int(op0.bit, 0):
          cf.id = bit_cast(op0.val >> (int(op0.bit, op0.bit) - count), int1(1))
          call('sign_flag')
          call('zero_flag')
          call('parity_flag') */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondNe,
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeBind({
          Expr::MakeAssign(
            Expr::MakeId(X86_FlCf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              rInsn.GetOperand(0),
              Expr::MakeBinOp(
                OperationExpression::OpSub,
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                Expr::MakeVar("count", VariableExpression::Use))), Expr::MakeBitVector(1, 0x1))),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlSf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBinOp(
                OperationExpression::OpSub,
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlZf, &m_CpuInfo),
            Expr::MakeTernaryCond(ConditionExpression::CondEq,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
            Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))),
          Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)),
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBitVector(1, 0x1)),
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeId(X86_FlPf, &m_CpuInfo),
            Expr::MakeVar("pf_tmp", VariableExpression::Use)),
          Expr::MakeVar("pf_tmp", VariableExpression::Free)})
        , nullptr)
        );
        /* semantic: if __expr and count == int(op0.bit, 1):
          of.id = bit_cast((op0.val >> (int(op0.bit, op0.bit) - int(op0.bit, 1))) ^ (op0.val >> (int(op0.bit, op0.bit) - int(op0.bit, 2))), int1(1)) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlOf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(
                OperationExpression::OpLrs,
                rInsn.GetOperand(0),
                Expr::MakeBinOp(
                  OperationExpression::OpSub,
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))),
              Expr::MakeBinOp(
                OperationExpression::OpLrs,
                rInsn.GetOperand(0),
                Expr::MakeBinOp(
                  OperationExpression::OpSub,
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)))), Expr::MakeBitVector(1, 0x1))), nullptr)
        );
        /* semantic: op0.val = res */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("res", VariableExpression::Use)));
        /* semantic: free_var('count') */
        AllExpr.push_back(Expr::MakeVar("count", VariableExpression::Free));
        /* semantic: free_var('res') */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x5:
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Shr);
      if (Operand__Ev_Ib(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: alloc_var('count', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("count", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: count = bit_cast(op1.val, int(op0.bit, op0.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, rInsn.GetOperand(1), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()))));
        /* semantic: call('count_mask') */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x40),
          Expr::MakeAssign(
            Expr::MakeVar("count", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeVar("count", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3f))),
          Expr::MakeAssign(
            Expr::MakeVar("count", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeVar("count", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1f)))));
        /* semantic: res = op0.val >> count */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpLrs,
            rInsn.GetOperand(0),
            Expr::MakeVar("count", VariableExpression::Use))));
        /* semantic: if __expr and count != int(op0.bit, 0):
          cf.id = bit_cast(op0.val >> (count - int(op0.bit, 1)), int1(1))
          call('sign_flag')
          call('zero_flag')
          call('parity_flag') */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondNe,
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeBind({
          Expr::MakeAssign(
            Expr::MakeId(X86_FlCf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              rInsn.GetOperand(0),
              Expr::MakeBinOp(
                OperationExpression::OpSub,
                Expr::MakeVar("count", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlSf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBinOp(
                OperationExpression::OpSub,
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlZf, &m_CpuInfo),
            Expr::MakeTernaryCond(ConditionExpression::CondEq,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
            Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))),
          Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)),
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBitVector(1, 0x1)),
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeId(X86_FlPf, &m_CpuInfo),
            Expr::MakeVar("pf_tmp", VariableExpression::Use)),
          Expr::MakeVar("pf_tmp", VariableExpression::Free)})
        , nullptr)
        );
        /* semantic: if __expr and count == int(op0.bit, 1):
          of.id = bit_cast((op0.val >> (int(op0.bit, op0.bit) - int(op0.bit, 1))), int1(1)) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlOf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              rInsn.GetOperand(0),
              Expr::MakeBinOp(
                OperationExpression::OpSub,
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))), nullptr)
        );
        /* semantic: op0.val = res */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("res", VariableExpression::Use)));
        /* semantic: free_var('count') */
        AllExpr.push_back(Expr::MakeVar("count", VariableExpression::Free));
        /* semantic: free_var('res') */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x6:
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Sal);
      if (Operand__Ev_Ib(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: alloc_var('count', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("count", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: count = bit_cast(op1.val, int(op0.bit, op0.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, rInsn.GetOperand(1), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()))));
        /* semantic: call('count_mask') */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x40),
          Expr::MakeAssign(
            Expr::MakeVar("count", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeVar("count", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3f))),
          Expr::MakeAssign(
            Expr::MakeVar("count", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeVar("count", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1f)))));
        /* semantic: res = op0.val << count */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpLls,
            rInsn.GetOperand(0),
            Expr::MakeVar("count", VariableExpression::Use))));
        /* semantic: if __expr and count != int(op0.bit, 0):
          cf.id = bit_cast(op0.val >> (int(op0.bit, op0.bit) - count), int1(1))
          call('sign_flag')
          call('zero_flag')
          call('parity_flag') */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondNe,
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeBind({
          Expr::MakeAssign(
            Expr::MakeId(X86_FlCf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              rInsn.GetOperand(0),
              Expr::MakeBinOp(
                OperationExpression::OpSub,
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                Expr::MakeVar("count", VariableExpression::Use))), Expr::MakeBitVector(1, 0x1))),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlSf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBinOp(
                OperationExpression::OpSub,
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlZf, &m_CpuInfo),
            Expr::MakeTernaryCond(ConditionExpression::CondEq,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
            Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))),
          Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)),
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBitVector(1, 0x1)),
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeId(X86_FlPf, &m_CpuInfo),
            Expr::MakeVar("pf_tmp", VariableExpression::Use)),
          Expr::MakeVar("pf_tmp", VariableExpression::Free)})
        , nullptr)
        );
        /* semantic: if __expr and count == int(op0.bit, 1):
          of.id = bit_cast((op0.val >> (int(op0.bit, op0.bit) - int(op0.bit, 1))) ^ (op0.val >> (int(op0.bit, op0.bit) - int(op0.bit, 2))), int1(1)) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlOf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(
                OperationExpression::OpLrs,
                rInsn.GetOperand(0),
                Expr::MakeBinOp(
                  OperationExpression::OpSub,
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))),
              Expr::MakeBinOp(
                OperationExpression::OpLrs,
                rInsn.GetOperand(0),
                Expr::MakeBinOp(
                  OperationExpression::OpSub,
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)))), Expr::MakeBitVector(1, 0x1))), nullptr)
        );
        /* semantic: op0.val = res */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("res", VariableExpression::Use)));
        /* semantic: free_var('count') */
        AllExpr.push_back(Expr::MakeVar("count", VariableExpression::Free));
        /* semantic: free_var('res') */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x7:
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Sar);
      if (Operand__Ev_Ib(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: alloc_var('count', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("count", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: count = bit_cast(op1.val, int(op0.bit, op0.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, rInsn.GetOperand(1), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()))));
        /* semantic: call('count_mask') */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x40),
          Expr::MakeAssign(
            Expr::MakeVar("count", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeVar("count", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3f))),
          Expr::MakeAssign(
            Expr::MakeVar("count", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeVar("count", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1f)))));
        /* semantic: res = ars(op0.val, count) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpArs, rInsn.GetOperand(0), Expr::MakeVar("count", VariableExpression::Use))));
        /* semantic: if __expr and count != int(op0.bit, 0):
          if __expr and count > int(op0.bit, op0.bit): cf.id = bit_cast(op0.val >> (int(op0.bit, op0.bit) - int(op0.bit, 1)), int1(1))
          else: cf.id = bit_cast(op0.val >> (count - int(op0.bit, 1)), int1(1))
          call('sign_flag')
          call('zero_flag')
          call('parity_flag') */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondNe,
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeBind({
          Expr::MakeIfElseCond(
            ConditionExpression::CondUgt,
            Expr::MakeVar("count", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeAssign(
              Expr::MakeId(X86_FlCf, &m_CpuInfo),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                rInsn.GetOperand(0),
                Expr::MakeBinOp(
                  OperationExpression::OpSub,
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))),
            Expr::MakeAssign(
              Expr::MakeId(X86_FlCf, &m_CpuInfo),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                rInsn.GetOperand(0),
                Expr::MakeBinOp(
                  OperationExpression::OpSub,
                  Expr::MakeVar("count", VariableExpression::Use),
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1)))),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlSf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBinOp(
                OperationExpression::OpSub,
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlZf, &m_CpuInfo),
            Expr::MakeTernaryCond(ConditionExpression::CondEq,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
            Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))),
          Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)),
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBitVector(1, 0x1)),
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeId(X86_FlPf, &m_CpuInfo),
            Expr::MakeVar("pf_tmp", VariableExpression::Use)),
          Expr::MakeVar("pf_tmp", VariableExpression::Free)})
        , nullptr)
        );
        /* semantic: if __expr and count == int(op0.bit, 1):
          of.id = int1(0) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlOf, &m_CpuInfo),
            Expr::MakeBitVector(1, 0x0)), nullptr)
        );
        /* semantic: op0.val = res */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("res", VariableExpression::Use)));
        /* semantic: free_var('count') */
        AllExpr.push_back(Expr::MakeVar("count", VariableExpression::Free));
        /* semantic: free_var('res') */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    default:
      return false;
    }
}

/** instruction
 * mnemonic: retn
 * operand: ['Iw']
 * opcode: c2
 * operation_type: ['ret']
 * semantic: program.id = stack.mem;
stack.id += stack.size;
stack.id += bit_cast(op0.val, int(stack.bit, stack.bit));

**/
bool X86Architecture::Table_1_c2(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Size()++;
    rInsn.SetOpcode(X86_Opcode_Retn);
    rInsn.SubType() |= Instruction::ReturnType;
    if (Operand__Iw(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    {
      Expression::LSPType AllExpr;
      /* semantic: program.id = stack.mem */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::ProgramPointerRegister, rInsn.GetMode()), &m_CpuInfo),
        Expr::MakeMem(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), nullptr, Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo))));
      /* semantic: stack.id += stack.size */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
        Expr::MakeBinOp(
          OperationExpression::OpAdd,
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeBitVector(
            m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())),
            m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())) / 8)))
      );
      /* semantic: stack.id += bit_cast(op0.val, int(stack.bit, stack.bit)) */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
        Expr::MakeBinOp(
          OperationExpression::OpAdd,
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, rInsn.GetOperand(0), Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()))))))
      );
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instruction
 * mnemonic: ret
 * operation_type: ['ret']
 * opcode: c3
 * semantic: program.id = stack.mem;
stack.id += stack.size;

**/
bool X86Architecture::Table_1_c3(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Size()++;
    rInsn.SetOpcode(X86_Opcode_Ret);
    rInsn.SubType() |= Instruction::ReturnType;
    {
      Expression::LSPType AllExpr;
      /* semantic: program.id = stack.mem */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::ProgramPointerRegister, rInsn.GetMode()), &m_CpuInfo),
        Expr::MakeMem(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), nullptr, Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo))));
      /* semantic: stack.id += stack.size */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
        Expr::MakeBinOp(
          OperationExpression::OpAdd,
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeBitVector(
            m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())),
            m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())) / 8)))
      );
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instructions
 * opcode: c4
 *
 * mnemonic: les
 * operand: ['Gv', 'Mp']
 *
 * mnemonic: VEX3
 * attr: ['m64']
 * constraint: pfx3
 *
**/
bool X86Architecture::Table_1_c4(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    if (Mode == X86_Bit_64)
    {
      rInsn.Size()++;
      rInsn.Prefix() |= X86_Prefix_VEX3;
      return Disassemble(rBinStrm, Offset, rInsn, Mode);
    }
    else
    {
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Les);
      if (Operand__Gv_Mp(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
}

/** instructions
 * opcode: c5
 *
 * mnemonic: lds
 * operand: ['Gv', 'Mp']
 *
 * mnemonic: VEX2
 * attr: ['m64']
 * constraint: pfx2
 *
**/
bool X86Architecture::Table_1_c5(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    if (Mode == X86_Bit_64)
    {
      rInsn.Size()++;
      rInsn.Prefix() |= X86_Prefix_VEX2;
      return Disassemble(rBinStrm, Offset, rInsn, Mode);
    }
    else
    {
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Lds);
      if (Operand__Gv_Mp(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
}

/** group:
 * mnemonic: mov
 * opcode: 00
 * semantic: op0.val = op1.val;

 *
 * opcode: 01
 * invalid
 *
 * opcode: 02
 * invalid
 *
 * opcode: 03
 * invalid
 *
 * opcode: 04
 * invalid
 *
 * opcode: 05
 * invalid
 *
 * opcode: 06
 * invalid
 *
 * opcode: 07
 * invalid
 *
**/
bool X86Architecture::Table_1_c6(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    u8 ModRmByte;
    if (!rBinStrm.Read(Offset, ModRmByte))
      return false;

    x86::ModRM ModRm(ModRmByte);
    switch (ModRm.Reg())
    {
    case 0x0:
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Mov);
      if (Operand__Eb_Ib(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: op0.val = op1.val */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          rInsn.GetOperand(1)));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x1:
      return false; /* INVALID */
    case 0x2:
      return false; /* INVALID */
    case 0x3:
      return false; /* INVALID */
    case 0x4:
      return false; /* INVALID */
    case 0x5:
      return false; /* INVALID */
    case 0x6:
      return false; /* INVALID */
    case 0x7:
      return false; /* INVALID */
    default:
      return false;
    }
}

/** group:
 * mnemonic: mov
 * opcode: 00
 * operand: ['Eb', 'Ib']
 * semantic: op0.val = op1.val;

 *
 * operand: ['Eb', 'Ib']
 * opcode: 01
 * invalid
 *
 * operand: ['Eb', 'Ib']
 * opcode: 02
 * invalid
 *
 * operand: ['Eb', 'Ib']
 * opcode: 03
 * invalid
 *
 * operand: ['Eb', 'Ib']
 * opcode: 04
 * invalid
 *
 * operand: ['Eb', 'Ib']
 * opcode: 05
 * invalid
 *
 * operand: ['Eb', 'Ib']
 * opcode: 06
 * invalid
 *
 * operand: ['Eb', 'Ib']
 * opcode: 07
 * invalid
 *
**/
bool X86Architecture::Table_1_c7(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    u8 ModRmByte;
    if (!rBinStrm.Read(Offset, ModRmByte))
      return false;

    x86::ModRM ModRm(ModRmByte);
    switch (ModRm.Reg())
    {
    case 0x0:
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Mov);
      if (Operand__Ev_Iz(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: op0.val = op1.val */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          rInsn.GetOperand(1)));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x1:
      return false; /* INVALID */
    case 0x2:
      return false; /* INVALID */
    case 0x3:
      return false; /* INVALID */
    case 0x4:
      return false; /* INVALID */
    case 0x5:
      return false; /* INVALID */
    case 0x6:
      return false; /* INVALID */
    case 0x7:
      return false; /* INVALID */
    default:
      return false;
    }
}

/** instruction
 * mnemonic: enter
 * operand: ['Iw', 'Ib']
 * opcode: c8
 * cpu_model: >= X86_Arch_80186
 * constraint: d64
**/
bool X86Architecture::Table_1_c8(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_80186)
    {
      if (!(rInsn.Prefix() & X86_Prefix_OpSize))
      {
        rInsn.Prefix() |= X86_Prefix_REX_w; /* d64/df64 constraint */
      }
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Enter);
      if (Operand__Iw_Ib(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    }
    else
      return false;
}

/** instruction
 * mnemonic: leave
 * opcode: c9
 * semantic: ['stack.id = frame.id', 'frame.id = stack.mem', 'stack.id += stack.size']
 * cpu_model: >= X86_Arch_80186
 * constraint: d64
**/
bool X86Architecture::Table_1_c9(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    if (m_CfgMdl.GetEnum("Architecture") >= X86_Arch_80186)
    {
      if (!(rInsn.Prefix() & X86_Prefix_OpSize))
      {
        rInsn.Prefix() |= X86_Prefix_REX_w; /* d64/df64 constraint */
      }
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Leave);
      {
        Expression::LSPType AllExpr;
        /* semantic: stack.id = frame.id */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackFrameRegister, rInsn.GetMode()), &m_CpuInfo)));
        /* semantic: frame.id = stack.mem */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackFrameRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeMem(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), nullptr, Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo))));
        /* semantic: stack.id += stack.size */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeBinOp(
            OperationExpression::OpAdd,
            Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
            Expr::MakeBitVector(
              m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())),
              m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())) / 8)))
        );
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    else
      return false;
}

/** instruction
 * mnemonic: retf
 * operand: ['Iw']
 * opcode: ca
 * operation_type: ['ret']
**/
bool X86Architecture::Table_1_ca(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Size()++;
    rInsn.SetOpcode(X86_Opcode_Retf);
    rInsn.SubType() |= Instruction::ReturnType;
    if (Operand__Iw(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: retf
 * operation_type: ['ret']
 * opcode: cb
**/
bool X86Architecture::Table_1_cb(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Size()++;
    rInsn.SetOpcode(X86_Opcode_Retf);
    rInsn.SubType() |= Instruction::ReturnType;
    return true;
}

/** instruction
 * mnemonic: int
 * operand: ['3']
 * opcode: cc
**/
bool X86Architecture::Table_1_cc(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Size()++;
    rInsn.SetOpcode(X86_Opcode_Int);
    if (Operand__3(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: int
 * operand: ['Ib']
 * opcode: cd
**/
bool X86Architecture::Table_1_cd(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Size()++;
    rInsn.SetOpcode(X86_Opcode_Int);
    if (Operand__Ib(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: into
 * opcode: ce
 * attr: ['nm64']
**/
bool X86Architecture::Table_1_ce(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    if (Mode != X86_Bit_64)
    {
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Into);
      return true;
    }
    else
      return false;
}

/** instruction
 * mnemonic: iret
 * operation_type: ['ret']
 * opcode: cf
**/
bool X86Architecture::Table_1_cf(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Size()++;
    rInsn.SetOpcode(X86_Opcode_Iret);
    rInsn.SubType() |= Instruction::ReturnType;
    return true;
}

/** group:
 * mnemonic: rol
 * opcode: 00
 * operand: ['Ev', 'Ib']
 * semantic: alloc_var('res', op0.bit);
alloc_var('count', op0.bit);
count = bit_cast(op1.val, int(op0.bit, op0.bit));
call('count_mask');
res = rol(op0.val, count);
if __expr and count != int(op0.bit, 0):
  cf.id = bit_cast(res, int_type1);
if __expr and count == int(op0.bit, 1):
  of.id = bit_cast(bit_cast(cf.id, int_type(op0.bit)) ^ (res >> (int(op0.bit,op0.bit) - int(op0.bit, 1))), int_type1);
op0.val = res;
free_var('count');
free_var('res');

 *
 * mnemonic: ror
 * opcode: 01
 * operand: ['Ev', 'Ib']
 * semantic: alloc_var('res', op0.bit);
alloc_var('count', op0.bit);
count = bit_cast(op1.val, int_type(op0.bit));
call('count_mask');
res = ror(op0.val, count);
if __expr and count != int(op0.bit, 0):
  cf.id = bit_cast(res >> (int(op0.bit, op0.bit) - int(op0.bit, 1)), int_type1);
if __expr and count == int(op0.bit, 1):
  of.id = bit_cast((res >> (int(op0.bit, op0.bit) - int(op0.bit, 1))) ^ (res >> (int(op0.bit, op0.bit) - int(op0.bit, 2))), int_type1);
op0.val = res;
free_var('count');
free_var('res');

 *
 * mnemonic: rcl
 * opcode: 02
 * operand: ['Ev', 'Ib']
 * semantic: alloc_var('res', op0.bit);
alloc_var('count', op0.bit);
count = bit_cast(op1.val, int_type(op0.bit));
call('count_mask');
alloc_var('rol_val', concat(op0.bit, ignore(' + 1')));
rol_val = bit_cast(op0.val, int_type(concat(op0.bit, ignore(' + 1'))));
rol_val |= (bit_cast(cf.id, int_type(concat(op0.bit, ignore(' + 1')))) << int(concat(op0.bit, ignore(' + 1')), op0.bit));
rol_val = rol(rol_val, bit_cast(count, int_type(concat(op0.bit, ignore(' + 1')))));
res = bit_cast(rol_val, int_type(op0.bit));
if __expr and count != int(op0.bit, 0):
  cf.id = bit_cast(rol_val >> int(concat(op0.bit, ignore(' + 1')), op0.bit), int_type1);
if __expr and count == int(op0.bit, 1):
  of.id = bit_cast(cf.id ^ bit_cast(res >> (int(op0.bit, op0.bit) - int(op0.bit, 1)), int_type1), int_type1);
op0.val = res;
free_var('rol_val');
free_var('count');
free_var('res');

 *
 * mnemonic: rcr
 * opcode: 03
 * operand: ['Ev', 'Ib']
 * semantic: alloc_var('res', op0.bit);
alloc_var('count', op0.bit);
count = bit_cast(op1.val, int(op0.bit, op0.bit));
call('count_mask');
alloc_var('ror_val', concat(op0.bit, ignore(' + 1')));
ror_val = bit_cast(op0.val, int_type(concat(op0.bit, ignore(' + 1'))));
ror_val |= (bit_cast(cf.id, int_type(concat(op0.bit, ignore(' + 1')))) << int(concat(op0.bit, ignore(' + 1')), op0.bit));
ror_val = ror(ror_val, bit_cast(count, int_type(concat(op0.bit, ignore(' + 1')))));
res = bit_cast(ror_val, int_type(op0.bit));
if __expr and count != int(op0.bit, 0):
  cf.id = bit_cast(ror_val >> int(concat(op0.bit, ignore(' + 1')), op0.bit), int_type1);
if __expr and count == int(op0.bit, 1):
  of.id = bit_cast((res >> (int(op0.bit, op0.bit) - int(op0.bit, 1))) ^ (res >> (int(op0.bit, op0.bit) - int(op0.bit, 2))), int_type1);
op0.val = res;
free_var('ror_val');
free_var('count');
free_var('res');

 *
 * mnemonic: shl
 * opcode: 04
 * operand: ['Ev', 'Ib']
 * semantic: alloc_var('res', op0.bit);
alloc_var('count', op0.bit);
count = bit_cast(op1.val, int(op0.bit, op0.bit));
call('count_mask');
res = op0.val << count;
if __expr and count != int(op0.bit, 0):
  cf.id = bit_cast(op0.val >> (int(op0.bit, op0.bit) - count), int1(1))
  call('sign_flag')
  call('zero_flag')
  call('parity_flag');
if __expr and count == int(op0.bit, 1):
  of.id = bit_cast((op0.val >> (int(op0.bit, op0.bit) - int(op0.bit, 1))) ^ (op0.val >> (int(op0.bit, op0.bit) - int(op0.bit, 2))), int1(1));
op0.val = res;
free_var('count');
free_var('res');

 *
 * mnemonic: shr
 * opcode: 05
 * operand: ['Ev', 'Ib']
 * semantic: alloc_var('res', op0.bit);
alloc_var('count', op0.bit);
count = bit_cast(op1.val, int(op0.bit, op0.bit));
call('count_mask');
res = op0.val >> count;
if __expr and count != int(op0.bit, 0):
  cf.id = bit_cast(op0.val >> (count - int(op0.bit, 1)), int1(1))
  call('sign_flag')
  call('zero_flag')
  call('parity_flag');
if __expr and count == int(op0.bit, 1):
  of.id = bit_cast((op0.val >> (int(op0.bit, op0.bit) - int(op0.bit, 1))), int1(1));
op0.val = res;
free_var('count');
free_var('res');

 *
 * mnemonic: sal
 * opcode: 06
 * operand: ['Ev', 'Ib']
 * semantic: alloc_var('res', op0.bit);
alloc_var('count', op0.bit);
count = bit_cast(op1.val, int(op0.bit, op0.bit));
call('count_mask');
res = op0.val << count;
if __expr and count != int(op0.bit, 0):
  cf.id = bit_cast(op0.val >> (int(op0.bit, op0.bit) - count), int1(1))
  call('sign_flag')
  call('zero_flag')
  call('parity_flag');
if __expr and count == int(op0.bit, 1):
  of.id = bit_cast((op0.val >> (int(op0.bit, op0.bit) - int(op0.bit, 1))) ^ (op0.val >> (int(op0.bit, op0.bit) - int(op0.bit, 2))), int1(1));
op0.val = res;
free_var('count');
free_var('res');

 *
 * mnemonic: sar
 * opcode: 07
 * operand: ['Ev', 'Ib']
 * semantic: alloc_var('res', op0.bit);
alloc_var('count', op0.bit);
count = bit_cast(op1.val, int(op0.bit, op0.bit));
call('count_mask');
res = ars(op0.val, count);
if __expr and count != int(op0.bit, 0):
  if __expr and count > int(op0.bit, op0.bit): cf.id = bit_cast(op0.val >> (int(op0.bit, op0.bit) - int(op0.bit, 1)), int1(1))
  else: cf.id = bit_cast(op0.val >> (count - int(op0.bit, 1)), int1(1))
  call('sign_flag')
  call('zero_flag')
  call('parity_flag');
if __expr and count == int(op0.bit, 1):
  of.id = int1(0);
op0.val = res;
free_var('count');
free_var('res');

 *
**/
bool X86Architecture::Table_1_d0(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    u8 ModRmByte;
    if (!rBinStrm.Read(Offset, ModRmByte))
      return false;

    x86::ModRM ModRm(ModRmByte);
    switch (ModRm.Reg())
    {
    case 0x0:
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Rol);
      if (Operand__Eb_1(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: alloc_var('count', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("count", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: count = bit_cast(op1.val, int(op0.bit, op0.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, rInsn.GetOperand(1), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()))));
        /* semantic: call('count_mask') */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x40),
          Expr::MakeAssign(
            Expr::MakeVar("count", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeVar("count", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3f))),
          Expr::MakeAssign(
            Expr::MakeVar("count", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeVar("count", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1f)))));
        /* semantic: res = rol(op0.val, count) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpRol, rInsn.GetOperand(0), Expr::MakeVar("count", VariableExpression::Use))));
        /* semantic: if __expr and count != int(op0.bit, 0):
          cf.id = bit_cast(res, int_type1) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondNe,
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlCf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeVar("res", VariableExpression::Use), Expr::MakeBitVector(1, 1))), nullptr)
        );
        /* semantic: if __expr and count == int(op0.bit, 1):
          of.id = bit_cast(bit_cast(cf.id, int_type(op0.bit)) ^ (res >> (int(op0.bit,op0.bit) - int(op0.bit, 1))), int_type1) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlOf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeId(X86_FlCf, &m_CpuInfo), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize())),
              Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBinOp(
                  OperationExpression::OpSub,
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)))), Expr::MakeBitVector(1, 1))), nullptr)
        );
        /* semantic: op0.val = res */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("res", VariableExpression::Use)));
        /* semantic: free_var('count') */
        AllExpr.push_back(Expr::MakeVar("count", VariableExpression::Free));
        /* semantic: free_var('res') */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x1:
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Ror);
      if (Operand__Eb_1(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: alloc_var('count', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("count", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: count = bit_cast(op1.val, int_type(op0.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, rInsn.GetOperand(1), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()))));
        /* semantic: call('count_mask') */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x40),
          Expr::MakeAssign(
            Expr::MakeVar("count", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeVar("count", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3f))),
          Expr::MakeAssign(
            Expr::MakeVar("count", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeVar("count", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1f)))));
        /* semantic: res = ror(op0.val, count) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpRor, rInsn.GetOperand(0), Expr::MakeVar("count", VariableExpression::Use))));
        /* semantic: if __expr and count != int(op0.bit, 0):
          cf.id = bit_cast(res >> (int(op0.bit, op0.bit) - int(op0.bit, 1)), int_type1) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondNe,
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlCf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBinOp(
                OperationExpression::OpSub,
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 1))), nullptr)
        );
        /* semantic: if __expr and count == int(op0.bit, 1):
          of.id = bit_cast((res >> (int(op0.bit, op0.bit) - int(op0.bit, 1))) ^ (res >> (int(op0.bit, op0.bit) - int(op0.bit, 2))), int_type1) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlOf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBinOp(
                  OperationExpression::OpSub,
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))),
              Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBinOp(
                  OperationExpression::OpSub,
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)))), Expr::MakeBitVector(1, 1))), nullptr)
        );
        /* semantic: op0.val = res */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("res", VariableExpression::Use)));
        /* semantic: free_var('count') */
        AllExpr.push_back(Expr::MakeVar("count", VariableExpression::Free));
        /* semantic: free_var('res') */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x2:
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Rcl);
      if (Operand__Eb_1(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: alloc_var('count', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("count", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: count = bit_cast(op1.val, int_type(op0.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, rInsn.GetOperand(1), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()))));
        /* semantic: call('count_mask') */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x40),
          Expr::MakeAssign(
            Expr::MakeVar("count", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeVar("count", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3f))),
          Expr::MakeAssign(
            Expr::MakeVar("count", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeVar("count", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1f)))));
        /* semantic: alloc_var('rol_val', concat(op0.bit, ignore(' + 1'))) */
        AllExpr.push_back(Expr::MakeVar("rol_val", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize() + 1));
        /* semantic: rol_val = bit_cast(op0.val, int_type(concat(op0.bit, ignore(' + 1')))) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("rol_val", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, rInsn.GetOperand(0), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize() + 1, rInsn.GetOperand(0)->GetBitSize() + 1))));
        /* semantic: rol_val |= (bit_cast(cf.id, int_type(concat(op0.bit, ignore(' + 1')))) << int(concat(op0.bit, ignore(' + 1')), op0.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("rol_val", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpOr,
            Expr::MakeVar("rol_val", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpLls,
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeId(X86_FlCf, &m_CpuInfo), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize() + 1, rInsn.GetOperand(0)->GetBitSize() + 1)),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize() + 1, rInsn.GetOperand(0)->GetBitSize()))))
        );
        /* semantic: rol_val = rol(rol_val, bit_cast(count, int_type(concat(op0.bit, ignore(' + 1'))))) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("rol_val", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpRol, Expr::MakeVar("rol_val", VariableExpression::Use), Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeVar("count", VariableExpression::Use), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize() + 1, rInsn.GetOperand(0)->GetBitSize() + 1)))));
        /* semantic: res = bit_cast(rol_val, int_type(op0.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeVar("rol_val", VariableExpression::Use), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()))));
        /* semantic: if __expr and count != int(op0.bit, 0):
          cf.id = bit_cast(rol_val >> int(concat(op0.bit, ignore(' + 1')), op0.bit), int_type1) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondNe,
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlCf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("rol_val", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize() + 1, rInsn.GetOperand(0)->GetBitSize())), Expr::MakeBitVector(1, 1))), nullptr)
        );
        /* semantic: if __expr and count == int(op0.bit, 1):
          of.id = bit_cast(cf.id ^ bit_cast(res >> (int(op0.bit, op0.bit) - int(op0.bit, 1)), int_type1), int_type1) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlOf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeId(X86_FlCf, &m_CpuInfo),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBinOp(
                  OperationExpression::OpSub,
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 1))), Expr::MakeBitVector(1, 1))), nullptr)
        );
        /* semantic: op0.val = res */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("res", VariableExpression::Use)));
        /* semantic: free_var('rol_val') */
        AllExpr.push_back(Expr::MakeVar("rol_val", VariableExpression::Free));
        /* semantic: free_var('count') */
        AllExpr.push_back(Expr::MakeVar("count", VariableExpression::Free));
        /* semantic: free_var('res') */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x3:
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Rcr);
      if (Operand__Eb_1(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: alloc_var('count', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("count", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: count = bit_cast(op1.val, int(op0.bit, op0.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, rInsn.GetOperand(1), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()))));
        /* semantic: call('count_mask') */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x40),
          Expr::MakeAssign(
            Expr::MakeVar("count", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeVar("count", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3f))),
          Expr::MakeAssign(
            Expr::MakeVar("count", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeVar("count", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1f)))));
        /* semantic: alloc_var('ror_val', concat(op0.bit, ignore(' + 1'))) */
        AllExpr.push_back(Expr::MakeVar("ror_val", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize() + 1));
        /* semantic: ror_val = bit_cast(op0.val, int_type(concat(op0.bit, ignore(' + 1')))) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("ror_val", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, rInsn.GetOperand(0), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize() + 1, rInsn.GetOperand(0)->GetBitSize() + 1))));
        /* semantic: ror_val |= (bit_cast(cf.id, int_type(concat(op0.bit, ignore(' + 1')))) << int(concat(op0.bit, ignore(' + 1')), op0.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("ror_val", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpOr,
            Expr::MakeVar("ror_val", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpLls,
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeId(X86_FlCf, &m_CpuInfo), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize() + 1, rInsn.GetOperand(0)->GetBitSize() + 1)),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize() + 1, rInsn.GetOperand(0)->GetBitSize()))))
        );
        /* semantic: ror_val = ror(ror_val, bit_cast(count, int_type(concat(op0.bit, ignore(' + 1'))))) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("ror_val", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpRor, Expr::MakeVar("ror_val", VariableExpression::Use), Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeVar("count", VariableExpression::Use), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize() + 1, rInsn.GetOperand(0)->GetBitSize() + 1)))));
        /* semantic: res = bit_cast(ror_val, int_type(op0.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeVar("ror_val", VariableExpression::Use), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()))));
        /* semantic: if __expr and count != int(op0.bit, 0):
          cf.id = bit_cast(ror_val >> int(concat(op0.bit, ignore(' + 1')), op0.bit), int_type1) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondNe,
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlCf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("ror_val", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize() + 1, rInsn.GetOperand(0)->GetBitSize())), Expr::MakeBitVector(1, 1))), nullptr)
        );
        /* semantic: if __expr and count == int(op0.bit, 1):
          of.id = bit_cast((res >> (int(op0.bit, op0.bit) - int(op0.bit, 1))) ^ (res >> (int(op0.bit, op0.bit) - int(op0.bit, 2))), int_type1) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlOf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBinOp(
                  OperationExpression::OpSub,
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))),
              Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBinOp(
                  OperationExpression::OpSub,
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)))), Expr::MakeBitVector(1, 1))), nullptr)
        );
        /* semantic: op0.val = res */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("res", VariableExpression::Use)));
        /* semantic: free_var('ror_val') */
        AllExpr.push_back(Expr::MakeVar("ror_val", VariableExpression::Free));
        /* semantic: free_var('count') */
        AllExpr.push_back(Expr::MakeVar("count", VariableExpression::Free));
        /* semantic: free_var('res') */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x4:
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Shl);
      if (Operand__Eb_1(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: alloc_var('count', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("count", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: count = bit_cast(op1.val, int(op0.bit, op0.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, rInsn.GetOperand(1), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()))));
        /* semantic: call('count_mask') */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x40),
          Expr::MakeAssign(
            Expr::MakeVar("count", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeVar("count", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3f))),
          Expr::MakeAssign(
            Expr::MakeVar("count", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeVar("count", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1f)))));
        /* semantic: res = op0.val << count */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpLls,
            rInsn.GetOperand(0),
            Expr::MakeVar("count", VariableExpression::Use))));
        /* semantic: if __expr and count != int(op0.bit, 0):
          cf.id = bit_cast(op0.val >> (int(op0.bit, op0.bit) - count), int1(1))
          call('sign_flag')
          call('zero_flag')
          call('parity_flag') */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondNe,
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeBind({
          Expr::MakeAssign(
            Expr::MakeId(X86_FlCf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              rInsn.GetOperand(0),
              Expr::MakeBinOp(
                OperationExpression::OpSub,
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                Expr::MakeVar("count", VariableExpression::Use))), Expr::MakeBitVector(1, 0x1))),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlSf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBinOp(
                OperationExpression::OpSub,
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlZf, &m_CpuInfo),
            Expr::MakeTernaryCond(ConditionExpression::CondEq,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
            Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))),
          Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)),
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBitVector(1, 0x1)),
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeId(X86_FlPf, &m_CpuInfo),
            Expr::MakeVar("pf_tmp", VariableExpression::Use)),
          Expr::MakeVar("pf_tmp", VariableExpression::Free)})
        , nullptr)
        );
        /* semantic: if __expr and count == int(op0.bit, 1):
          of.id = bit_cast((op0.val >> (int(op0.bit, op0.bit) - int(op0.bit, 1))) ^ (op0.val >> (int(op0.bit, op0.bit) - int(op0.bit, 2))), int1(1)) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlOf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(
                OperationExpression::OpLrs,
                rInsn.GetOperand(0),
                Expr::MakeBinOp(
                  OperationExpression::OpSub,
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))),
              Expr::MakeBinOp(
                OperationExpression::OpLrs,
                rInsn.GetOperand(0),
                Expr::MakeBinOp(
                  OperationExpression::OpSub,
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)))), Expr::MakeBitVector(1, 0x1))), nullptr)
        );
        /* semantic: op0.val = res */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("res", VariableExpression::Use)));
        /* semantic: free_var('count') */
        AllExpr.push_back(Expr::MakeVar("count", VariableExpression::Free));
        /* semantic: free_var('res') */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x5:
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Shr);
      if (Operand__Eb_1(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: alloc_var('count', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("count", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: count = bit_cast(op1.val, int(op0.bit, op0.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, rInsn.GetOperand(1), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()))));
        /* semantic: call('count_mask') */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x40),
          Expr::MakeAssign(
            Expr::MakeVar("count", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeVar("count", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3f))),
          Expr::MakeAssign(
            Expr::MakeVar("count", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeVar("count", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1f)))));
        /* semantic: res = op0.val >> count */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpLrs,
            rInsn.GetOperand(0),
            Expr::MakeVar("count", VariableExpression::Use))));
        /* semantic: if __expr and count != int(op0.bit, 0):
          cf.id = bit_cast(op0.val >> (count - int(op0.bit, 1)), int1(1))
          call('sign_flag')
          call('zero_flag')
          call('parity_flag') */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondNe,
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeBind({
          Expr::MakeAssign(
            Expr::MakeId(X86_FlCf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              rInsn.GetOperand(0),
              Expr::MakeBinOp(
                OperationExpression::OpSub,
                Expr::MakeVar("count", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlSf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBinOp(
                OperationExpression::OpSub,
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlZf, &m_CpuInfo),
            Expr::MakeTernaryCond(ConditionExpression::CondEq,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
            Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))),
          Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)),
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBitVector(1, 0x1)),
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeId(X86_FlPf, &m_CpuInfo),
            Expr::MakeVar("pf_tmp", VariableExpression::Use)),
          Expr::MakeVar("pf_tmp", VariableExpression::Free)})
        , nullptr)
        );
        /* semantic: if __expr and count == int(op0.bit, 1):
          of.id = bit_cast((op0.val >> (int(op0.bit, op0.bit) - int(op0.bit, 1))), int1(1)) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlOf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              rInsn.GetOperand(0),
              Expr::MakeBinOp(
                OperationExpression::OpSub,
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))), nullptr)
        );
        /* semantic: op0.val = res */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("res", VariableExpression::Use)));
        /* semantic: free_var('count') */
        AllExpr.push_back(Expr::MakeVar("count", VariableExpression::Free));
        /* semantic: free_var('res') */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x6:
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Sal);
      if (Operand__Eb_1(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: alloc_var('count', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("count", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: count = bit_cast(op1.val, int(op0.bit, op0.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, rInsn.GetOperand(1), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()))));
        /* semantic: call('count_mask') */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x40),
          Expr::MakeAssign(
            Expr::MakeVar("count", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeVar("count", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3f))),
          Expr::MakeAssign(
            Expr::MakeVar("count", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeVar("count", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1f)))));
        /* semantic: res = op0.val << count */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpLls,
            rInsn.GetOperand(0),
            Expr::MakeVar("count", VariableExpression::Use))));
        /* semantic: if __expr and count != int(op0.bit, 0):
          cf.id = bit_cast(op0.val >> (int(op0.bit, op0.bit) - count), int1(1))
          call('sign_flag')
          call('zero_flag')
          call('parity_flag') */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondNe,
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeBind({
          Expr::MakeAssign(
            Expr::MakeId(X86_FlCf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              rInsn.GetOperand(0),
              Expr::MakeBinOp(
                OperationExpression::OpSub,
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                Expr::MakeVar("count", VariableExpression::Use))), Expr::MakeBitVector(1, 0x1))),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlSf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBinOp(
                OperationExpression::OpSub,
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlZf, &m_CpuInfo),
            Expr::MakeTernaryCond(ConditionExpression::CondEq,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
            Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))),
          Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)),
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBitVector(1, 0x1)),
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeId(X86_FlPf, &m_CpuInfo),
            Expr::MakeVar("pf_tmp", VariableExpression::Use)),
          Expr::MakeVar("pf_tmp", VariableExpression::Free)})
        , nullptr)
        );
        /* semantic: if __expr and count == int(op0.bit, 1):
          of.id = bit_cast((op0.val >> (int(op0.bit, op0.bit) - int(op0.bit, 1))) ^ (op0.val >> (int(op0.bit, op0.bit) - int(op0.bit, 2))), int1(1)) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlOf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(
                OperationExpression::OpLrs,
                rInsn.GetOperand(0),
                Expr::MakeBinOp(
                  OperationExpression::OpSub,
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))),
              Expr::MakeBinOp(
                OperationExpression::OpLrs,
                rInsn.GetOperand(0),
                Expr::MakeBinOp(
                  OperationExpression::OpSub,
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)))), Expr::MakeBitVector(1, 0x1))), nullptr)
        );
        /* semantic: op0.val = res */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("res", VariableExpression::Use)));
        /* semantic: free_var('count') */
        AllExpr.push_back(Expr::MakeVar("count", VariableExpression::Free));
        /* semantic: free_var('res') */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x7:
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Sar);
      if (Operand__Eb_1(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: alloc_var('count', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("count", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: count = bit_cast(op1.val, int(op0.bit, op0.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, rInsn.GetOperand(1), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()))));
        /* semantic: call('count_mask') */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x40),
          Expr::MakeAssign(
            Expr::MakeVar("count", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeVar("count", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3f))),
          Expr::MakeAssign(
            Expr::MakeVar("count", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeVar("count", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1f)))));
        /* semantic: res = ars(op0.val, count) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpArs, rInsn.GetOperand(0), Expr::MakeVar("count", VariableExpression::Use))));
        /* semantic: if __expr and count != int(op0.bit, 0):
          if __expr and count > int(op0.bit, op0.bit): cf.id = bit_cast(op0.val >> (int(op0.bit, op0.bit) - int(op0.bit, 1)), int1(1))
          else: cf.id = bit_cast(op0.val >> (count - int(op0.bit, 1)), int1(1))
          call('sign_flag')
          call('zero_flag')
          call('parity_flag') */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondNe,
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeBind({
          Expr::MakeIfElseCond(
            ConditionExpression::CondUgt,
            Expr::MakeVar("count", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeAssign(
              Expr::MakeId(X86_FlCf, &m_CpuInfo),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                rInsn.GetOperand(0),
                Expr::MakeBinOp(
                  OperationExpression::OpSub,
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))),
            Expr::MakeAssign(
              Expr::MakeId(X86_FlCf, &m_CpuInfo),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                rInsn.GetOperand(0),
                Expr::MakeBinOp(
                  OperationExpression::OpSub,
                  Expr::MakeVar("count", VariableExpression::Use),
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1)))),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlSf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBinOp(
                OperationExpression::OpSub,
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlZf, &m_CpuInfo),
            Expr::MakeTernaryCond(ConditionExpression::CondEq,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
            Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))),
          Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)),
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBitVector(1, 0x1)),
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeId(X86_FlPf, &m_CpuInfo),
            Expr::MakeVar("pf_tmp", VariableExpression::Use)),
          Expr::MakeVar("pf_tmp", VariableExpression::Free)})
        , nullptr)
        );
        /* semantic: if __expr and count == int(op0.bit, 1):
          of.id = int1(0) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlOf, &m_CpuInfo),
            Expr::MakeBitVector(1, 0x0)), nullptr)
        );
        /* semantic: op0.val = res */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("res", VariableExpression::Use)));
        /* semantic: free_var('count') */
        AllExpr.push_back(Expr::MakeVar("count", VariableExpression::Free));
        /* semantic: free_var('res') */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    default:
      return false;
    }
}

/** group:
 * mnemonic: rol
 * opcode: 00
 * operand: ['Eb', '1']
 * semantic: alloc_var('res', op0.bit);
alloc_var('count', op0.bit);
count = bit_cast(op1.val, int(op0.bit, op0.bit));
call('count_mask');
res = rol(op0.val, count);
if __expr and count != int(op0.bit, 0):
  cf.id = bit_cast(res, int_type1);
if __expr and count == int(op0.bit, 1):
  of.id = bit_cast(bit_cast(cf.id, int_type(op0.bit)) ^ (res >> (int(op0.bit,op0.bit) - int(op0.bit, 1))), int_type1);
op0.val = res;
free_var('count');
free_var('res');

 *
 * mnemonic: ror
 * opcode: 01
 * operand: ['Eb', '1']
 * semantic: alloc_var('res', op0.bit);
alloc_var('count', op0.bit);
count = bit_cast(op1.val, int_type(op0.bit));
call('count_mask');
res = ror(op0.val, count);
if __expr and count != int(op0.bit, 0):
  cf.id = bit_cast(res >> (int(op0.bit, op0.bit) - int(op0.bit, 1)), int_type1);
if __expr and count == int(op0.bit, 1):
  of.id = bit_cast((res >> (int(op0.bit, op0.bit) - int(op0.bit, 1))) ^ (res >> (int(op0.bit, op0.bit) - int(op0.bit, 2))), int_type1);
op0.val = res;
free_var('count');
free_var('res');

 *
 * mnemonic: rcl
 * opcode: 02
 * operand: ['Eb', '1']
 * semantic: alloc_var('res', op0.bit);
alloc_var('count', op0.bit);
count = bit_cast(op1.val, int_type(op0.bit));
call('count_mask');
alloc_var('rol_val', concat(op0.bit, ignore(' + 1')));
rol_val = bit_cast(op0.val, int_type(concat(op0.bit, ignore(' + 1'))));
rol_val |= (bit_cast(cf.id, int_type(concat(op0.bit, ignore(' + 1')))) << int(concat(op0.bit, ignore(' + 1')), op0.bit));
rol_val = rol(rol_val, bit_cast(count, int_type(concat(op0.bit, ignore(' + 1')))));
res = bit_cast(rol_val, int_type(op0.bit));
if __expr and count != int(op0.bit, 0):
  cf.id = bit_cast(rol_val >> int(concat(op0.bit, ignore(' + 1')), op0.bit), int_type1);
if __expr and count == int(op0.bit, 1):
  of.id = bit_cast(cf.id ^ bit_cast(res >> (int(op0.bit, op0.bit) - int(op0.bit, 1)), int_type1), int_type1);
op0.val = res;
free_var('rol_val');
free_var('count');
free_var('res');

 *
 * mnemonic: rcr
 * opcode: 03
 * operand: ['Eb', '1']
 * semantic: alloc_var('res', op0.bit);
alloc_var('count', op0.bit);
count = bit_cast(op1.val, int(op0.bit, op0.bit));
call('count_mask');
alloc_var('ror_val', concat(op0.bit, ignore(' + 1')));
ror_val = bit_cast(op0.val, int_type(concat(op0.bit, ignore(' + 1'))));
ror_val |= (bit_cast(cf.id, int_type(concat(op0.bit, ignore(' + 1')))) << int(concat(op0.bit, ignore(' + 1')), op0.bit));
ror_val = ror(ror_val, bit_cast(count, int_type(concat(op0.bit, ignore(' + 1')))));
res = bit_cast(ror_val, int_type(op0.bit));
if __expr and count != int(op0.bit, 0):
  cf.id = bit_cast(ror_val >> int(concat(op0.bit, ignore(' + 1')), op0.bit), int_type1);
if __expr and count == int(op0.bit, 1):
  of.id = bit_cast((res >> (int(op0.bit, op0.bit) - int(op0.bit, 1))) ^ (res >> (int(op0.bit, op0.bit) - int(op0.bit, 2))), int_type1);
op0.val = res;
free_var('ror_val');
free_var('count');
free_var('res');

 *
 * mnemonic: shl
 * opcode: 04
 * operand: ['Eb', '1']
 * semantic: alloc_var('res', op0.bit);
alloc_var('count', op0.bit);
count = bit_cast(op1.val, int(op0.bit, op0.bit));
call('count_mask');
res = op0.val << count;
if __expr and count != int(op0.bit, 0):
  cf.id = bit_cast(op0.val >> (int(op0.bit, op0.bit) - count), int1(1))
  call('sign_flag')
  call('zero_flag')
  call('parity_flag');
if __expr and count == int(op0.bit, 1):
  of.id = bit_cast((op0.val >> (int(op0.bit, op0.bit) - int(op0.bit, 1))) ^ (op0.val >> (int(op0.bit, op0.bit) - int(op0.bit, 2))), int1(1));
op0.val = res;
free_var('count');
free_var('res');

 *
 * mnemonic: shr
 * opcode: 05
 * operand: ['Eb', '1']
 * semantic: alloc_var('res', op0.bit);
alloc_var('count', op0.bit);
count = bit_cast(op1.val, int(op0.bit, op0.bit));
call('count_mask');
res = op0.val >> count;
if __expr and count != int(op0.bit, 0):
  cf.id = bit_cast(op0.val >> (count - int(op0.bit, 1)), int1(1))
  call('sign_flag')
  call('zero_flag')
  call('parity_flag');
if __expr and count == int(op0.bit, 1):
  of.id = bit_cast((op0.val >> (int(op0.bit, op0.bit) - int(op0.bit, 1))), int1(1));
op0.val = res;
free_var('count');
free_var('res');

 *
 * mnemonic: sal
 * opcode: 06
 * operand: ['Eb', '1']
 * semantic: alloc_var('res', op0.bit);
alloc_var('count', op0.bit);
count = bit_cast(op1.val, int(op0.bit, op0.bit));
call('count_mask');
res = op0.val << count;
if __expr and count != int(op0.bit, 0):
  cf.id = bit_cast(op0.val >> (int(op0.bit, op0.bit) - count), int1(1))
  call('sign_flag')
  call('zero_flag')
  call('parity_flag');
if __expr and count == int(op0.bit, 1):
  of.id = bit_cast((op0.val >> (int(op0.bit, op0.bit) - int(op0.bit, 1))) ^ (op0.val >> (int(op0.bit, op0.bit) - int(op0.bit, 2))), int1(1));
op0.val = res;
free_var('count');
free_var('res');

 *
 * mnemonic: sar
 * opcode: 07
 * operand: ['Eb', '1']
 * semantic: alloc_var('res', op0.bit);
alloc_var('count', op0.bit);
count = bit_cast(op1.val, int(op0.bit, op0.bit));
call('count_mask');
res = ars(op0.val, count);
if __expr and count != int(op0.bit, 0):
  if __expr and count > int(op0.bit, op0.bit): cf.id = bit_cast(op0.val >> (int(op0.bit, op0.bit) - int(op0.bit, 1)), int1(1))
  else: cf.id = bit_cast(op0.val >> (count - int(op0.bit, 1)), int1(1))
  call('sign_flag')
  call('zero_flag')
  call('parity_flag');
if __expr and count == int(op0.bit, 1):
  of.id = int1(0);
op0.val = res;
free_var('count');
free_var('res');

 *
**/
bool X86Architecture::Table_1_d1(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    u8 ModRmByte;
    if (!rBinStrm.Read(Offset, ModRmByte))
      return false;

    x86::ModRM ModRm(ModRmByte);
    switch (ModRm.Reg())
    {
    case 0x0:
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Rol);
      if (Operand__Ev_1(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: alloc_var('count', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("count", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: count = bit_cast(op1.val, int(op0.bit, op0.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, rInsn.GetOperand(1), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()))));
        /* semantic: call('count_mask') */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x40),
          Expr::MakeAssign(
            Expr::MakeVar("count", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeVar("count", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3f))),
          Expr::MakeAssign(
            Expr::MakeVar("count", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeVar("count", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1f)))));
        /* semantic: res = rol(op0.val, count) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpRol, rInsn.GetOperand(0), Expr::MakeVar("count", VariableExpression::Use))));
        /* semantic: if __expr and count != int(op0.bit, 0):
          cf.id = bit_cast(res, int_type1) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondNe,
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlCf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeVar("res", VariableExpression::Use), Expr::MakeBitVector(1, 1))), nullptr)
        );
        /* semantic: if __expr and count == int(op0.bit, 1):
          of.id = bit_cast(bit_cast(cf.id, int_type(op0.bit)) ^ (res >> (int(op0.bit,op0.bit) - int(op0.bit, 1))), int_type1) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlOf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeId(X86_FlCf, &m_CpuInfo), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize())),
              Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBinOp(
                  OperationExpression::OpSub,
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)))), Expr::MakeBitVector(1, 1))), nullptr)
        );
        /* semantic: op0.val = res */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("res", VariableExpression::Use)));
        /* semantic: free_var('count') */
        AllExpr.push_back(Expr::MakeVar("count", VariableExpression::Free));
        /* semantic: free_var('res') */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x1:
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Ror);
      if (Operand__Ev_1(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: alloc_var('count', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("count", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: count = bit_cast(op1.val, int_type(op0.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, rInsn.GetOperand(1), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()))));
        /* semantic: call('count_mask') */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x40),
          Expr::MakeAssign(
            Expr::MakeVar("count", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeVar("count", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3f))),
          Expr::MakeAssign(
            Expr::MakeVar("count", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeVar("count", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1f)))));
        /* semantic: res = ror(op0.val, count) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpRor, rInsn.GetOperand(0), Expr::MakeVar("count", VariableExpression::Use))));
        /* semantic: if __expr and count != int(op0.bit, 0):
          cf.id = bit_cast(res >> (int(op0.bit, op0.bit) - int(op0.bit, 1)), int_type1) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondNe,
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlCf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBinOp(
                OperationExpression::OpSub,
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 1))), nullptr)
        );
        /* semantic: if __expr and count == int(op0.bit, 1):
          of.id = bit_cast((res >> (int(op0.bit, op0.bit) - int(op0.bit, 1))) ^ (res >> (int(op0.bit, op0.bit) - int(op0.bit, 2))), int_type1) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlOf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBinOp(
                  OperationExpression::OpSub,
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))),
              Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBinOp(
                  OperationExpression::OpSub,
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)))), Expr::MakeBitVector(1, 1))), nullptr)
        );
        /* semantic: op0.val = res */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("res", VariableExpression::Use)));
        /* semantic: free_var('count') */
        AllExpr.push_back(Expr::MakeVar("count", VariableExpression::Free));
        /* semantic: free_var('res') */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x2:
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Rcl);
      if (Operand__Ev_1(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: alloc_var('count', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("count", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: count = bit_cast(op1.val, int_type(op0.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, rInsn.GetOperand(1), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()))));
        /* semantic: call('count_mask') */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x40),
          Expr::MakeAssign(
            Expr::MakeVar("count", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeVar("count", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3f))),
          Expr::MakeAssign(
            Expr::MakeVar("count", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeVar("count", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1f)))));
        /* semantic: alloc_var('rol_val', concat(op0.bit, ignore(' + 1'))) */
        AllExpr.push_back(Expr::MakeVar("rol_val", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize() + 1));
        /* semantic: rol_val = bit_cast(op0.val, int_type(concat(op0.bit, ignore(' + 1')))) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("rol_val", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, rInsn.GetOperand(0), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize() + 1, rInsn.GetOperand(0)->GetBitSize() + 1))));
        /* semantic: rol_val |= (bit_cast(cf.id, int_type(concat(op0.bit, ignore(' + 1')))) << int(concat(op0.bit, ignore(' + 1')), op0.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("rol_val", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpOr,
            Expr::MakeVar("rol_val", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpLls,
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeId(X86_FlCf, &m_CpuInfo), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize() + 1, rInsn.GetOperand(0)->GetBitSize() + 1)),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize() + 1, rInsn.GetOperand(0)->GetBitSize()))))
        );
        /* semantic: rol_val = rol(rol_val, bit_cast(count, int_type(concat(op0.bit, ignore(' + 1'))))) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("rol_val", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpRol, Expr::MakeVar("rol_val", VariableExpression::Use), Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeVar("count", VariableExpression::Use), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize() + 1, rInsn.GetOperand(0)->GetBitSize() + 1)))));
        /* semantic: res = bit_cast(rol_val, int_type(op0.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeVar("rol_val", VariableExpression::Use), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()))));
        /* semantic: if __expr and count != int(op0.bit, 0):
          cf.id = bit_cast(rol_val >> int(concat(op0.bit, ignore(' + 1')), op0.bit), int_type1) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondNe,
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlCf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("rol_val", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize() + 1, rInsn.GetOperand(0)->GetBitSize())), Expr::MakeBitVector(1, 1))), nullptr)
        );
        /* semantic: if __expr and count == int(op0.bit, 1):
          of.id = bit_cast(cf.id ^ bit_cast(res >> (int(op0.bit, op0.bit) - int(op0.bit, 1)), int_type1), int_type1) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlOf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeId(X86_FlCf, &m_CpuInfo),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBinOp(
                  OperationExpression::OpSub,
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 1))), Expr::MakeBitVector(1, 1))), nullptr)
        );
        /* semantic: op0.val = res */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("res", VariableExpression::Use)));
        /* semantic: free_var('rol_val') */
        AllExpr.push_back(Expr::MakeVar("rol_val", VariableExpression::Free));
        /* semantic: free_var('count') */
        AllExpr.push_back(Expr::MakeVar("count", VariableExpression::Free));
        /* semantic: free_var('res') */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x3:
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Rcr);
      if (Operand__Ev_1(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: alloc_var('count', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("count", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: count = bit_cast(op1.val, int(op0.bit, op0.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, rInsn.GetOperand(1), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()))));
        /* semantic: call('count_mask') */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x40),
          Expr::MakeAssign(
            Expr::MakeVar("count", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeVar("count", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3f))),
          Expr::MakeAssign(
            Expr::MakeVar("count", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeVar("count", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1f)))));
        /* semantic: alloc_var('ror_val', concat(op0.bit, ignore(' + 1'))) */
        AllExpr.push_back(Expr::MakeVar("ror_val", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize() + 1));
        /* semantic: ror_val = bit_cast(op0.val, int_type(concat(op0.bit, ignore(' + 1')))) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("ror_val", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, rInsn.GetOperand(0), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize() + 1, rInsn.GetOperand(0)->GetBitSize() + 1))));
        /* semantic: ror_val |= (bit_cast(cf.id, int_type(concat(op0.bit, ignore(' + 1')))) << int(concat(op0.bit, ignore(' + 1')), op0.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("ror_val", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpOr,
            Expr::MakeVar("ror_val", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpLls,
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeId(X86_FlCf, &m_CpuInfo), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize() + 1, rInsn.GetOperand(0)->GetBitSize() + 1)),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize() + 1, rInsn.GetOperand(0)->GetBitSize()))))
        );
        /* semantic: ror_val = ror(ror_val, bit_cast(count, int_type(concat(op0.bit, ignore(' + 1'))))) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("ror_val", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpRor, Expr::MakeVar("ror_val", VariableExpression::Use), Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeVar("count", VariableExpression::Use), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize() + 1, rInsn.GetOperand(0)->GetBitSize() + 1)))));
        /* semantic: res = bit_cast(ror_val, int_type(op0.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeVar("ror_val", VariableExpression::Use), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()))));
        /* semantic: if __expr and count != int(op0.bit, 0):
          cf.id = bit_cast(ror_val >> int(concat(op0.bit, ignore(' + 1')), op0.bit), int_type1) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondNe,
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlCf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("ror_val", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize() + 1, rInsn.GetOperand(0)->GetBitSize())), Expr::MakeBitVector(1, 1))), nullptr)
        );
        /* semantic: if __expr and count == int(op0.bit, 1):
          of.id = bit_cast((res >> (int(op0.bit, op0.bit) - int(op0.bit, 1))) ^ (res >> (int(op0.bit, op0.bit) - int(op0.bit, 2))), int_type1) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlOf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBinOp(
                  OperationExpression::OpSub,
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))),
              Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBinOp(
                  OperationExpression::OpSub,
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)))), Expr::MakeBitVector(1, 1))), nullptr)
        );
        /* semantic: op0.val = res */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("res", VariableExpression::Use)));
        /* semantic: free_var('ror_val') */
        AllExpr.push_back(Expr::MakeVar("ror_val", VariableExpression::Free));
        /* semantic: free_var('count') */
        AllExpr.push_back(Expr::MakeVar("count", VariableExpression::Free));
        /* semantic: free_var('res') */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x4:
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Shl);
      if (Operand__Ev_1(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: alloc_var('count', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("count", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: count = bit_cast(op1.val, int(op0.bit, op0.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, rInsn.GetOperand(1), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()))));
        /* semantic: call('count_mask') */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x40),
          Expr::MakeAssign(
            Expr::MakeVar("count", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeVar("count", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3f))),
          Expr::MakeAssign(
            Expr::MakeVar("count", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeVar("count", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1f)))));
        /* semantic: res = op0.val << count */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpLls,
            rInsn.GetOperand(0),
            Expr::MakeVar("count", VariableExpression::Use))));
        /* semantic: if __expr and count != int(op0.bit, 0):
          cf.id = bit_cast(op0.val >> (int(op0.bit, op0.bit) - count), int1(1))
          call('sign_flag')
          call('zero_flag')
          call('parity_flag') */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondNe,
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeBind({
          Expr::MakeAssign(
            Expr::MakeId(X86_FlCf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              rInsn.GetOperand(0),
              Expr::MakeBinOp(
                OperationExpression::OpSub,
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                Expr::MakeVar("count", VariableExpression::Use))), Expr::MakeBitVector(1, 0x1))),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlSf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBinOp(
                OperationExpression::OpSub,
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlZf, &m_CpuInfo),
            Expr::MakeTernaryCond(ConditionExpression::CondEq,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
            Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))),
          Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)),
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBitVector(1, 0x1)),
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeId(X86_FlPf, &m_CpuInfo),
            Expr::MakeVar("pf_tmp", VariableExpression::Use)),
          Expr::MakeVar("pf_tmp", VariableExpression::Free)})
        , nullptr)
        );
        /* semantic: if __expr and count == int(op0.bit, 1):
          of.id = bit_cast((op0.val >> (int(op0.bit, op0.bit) - int(op0.bit, 1))) ^ (op0.val >> (int(op0.bit, op0.bit) - int(op0.bit, 2))), int1(1)) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlOf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(
                OperationExpression::OpLrs,
                rInsn.GetOperand(0),
                Expr::MakeBinOp(
                  OperationExpression::OpSub,
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))),
              Expr::MakeBinOp(
                OperationExpression::OpLrs,
                rInsn.GetOperand(0),
                Expr::MakeBinOp(
                  OperationExpression::OpSub,
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)))), Expr::MakeBitVector(1, 0x1))), nullptr)
        );
        /* semantic: op0.val = res */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("res", VariableExpression::Use)));
        /* semantic: free_var('count') */
        AllExpr.push_back(Expr::MakeVar("count", VariableExpression::Free));
        /* semantic: free_var('res') */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x5:
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Shr);
      if (Operand__Ev_1(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: alloc_var('count', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("count", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: count = bit_cast(op1.val, int(op0.bit, op0.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, rInsn.GetOperand(1), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()))));
        /* semantic: call('count_mask') */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x40),
          Expr::MakeAssign(
            Expr::MakeVar("count", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeVar("count", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3f))),
          Expr::MakeAssign(
            Expr::MakeVar("count", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeVar("count", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1f)))));
        /* semantic: res = op0.val >> count */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpLrs,
            rInsn.GetOperand(0),
            Expr::MakeVar("count", VariableExpression::Use))));
        /* semantic: if __expr and count != int(op0.bit, 0):
          cf.id = bit_cast(op0.val >> (count - int(op0.bit, 1)), int1(1))
          call('sign_flag')
          call('zero_flag')
          call('parity_flag') */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondNe,
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeBind({
          Expr::MakeAssign(
            Expr::MakeId(X86_FlCf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              rInsn.GetOperand(0),
              Expr::MakeBinOp(
                OperationExpression::OpSub,
                Expr::MakeVar("count", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlSf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBinOp(
                OperationExpression::OpSub,
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlZf, &m_CpuInfo),
            Expr::MakeTernaryCond(ConditionExpression::CondEq,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
            Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))),
          Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)),
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBitVector(1, 0x1)),
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeId(X86_FlPf, &m_CpuInfo),
            Expr::MakeVar("pf_tmp", VariableExpression::Use)),
          Expr::MakeVar("pf_tmp", VariableExpression::Free)})
        , nullptr)
        );
        /* semantic: if __expr and count == int(op0.bit, 1):
          of.id = bit_cast((op0.val >> (int(op0.bit, op0.bit) - int(op0.bit, 1))), int1(1)) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlOf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              rInsn.GetOperand(0),
              Expr::MakeBinOp(
                OperationExpression::OpSub,
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))), nullptr)
        );
        /* semantic: op0.val = res */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("res", VariableExpression::Use)));
        /* semantic: free_var('count') */
        AllExpr.push_back(Expr::MakeVar("count", VariableExpression::Free));
        /* semantic: free_var('res') */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x6:
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Sal);
      if (Operand__Ev_1(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: alloc_var('count', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("count", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: count = bit_cast(op1.val, int(op0.bit, op0.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, rInsn.GetOperand(1), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()))));
        /* semantic: call('count_mask') */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x40),
          Expr::MakeAssign(
            Expr::MakeVar("count", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeVar("count", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3f))),
          Expr::MakeAssign(
            Expr::MakeVar("count", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeVar("count", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1f)))));
        /* semantic: res = op0.val << count */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpLls,
            rInsn.GetOperand(0),
            Expr::MakeVar("count", VariableExpression::Use))));
        /* semantic: if __expr and count != int(op0.bit, 0):
          cf.id = bit_cast(op0.val >> (int(op0.bit, op0.bit) - count), int1(1))
          call('sign_flag')
          call('zero_flag')
          call('parity_flag') */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondNe,
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeBind({
          Expr::MakeAssign(
            Expr::MakeId(X86_FlCf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              rInsn.GetOperand(0),
              Expr::MakeBinOp(
                OperationExpression::OpSub,
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                Expr::MakeVar("count", VariableExpression::Use))), Expr::MakeBitVector(1, 0x1))),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlSf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBinOp(
                OperationExpression::OpSub,
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlZf, &m_CpuInfo),
            Expr::MakeTernaryCond(ConditionExpression::CondEq,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
            Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))),
          Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)),
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBitVector(1, 0x1)),
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeId(X86_FlPf, &m_CpuInfo),
            Expr::MakeVar("pf_tmp", VariableExpression::Use)),
          Expr::MakeVar("pf_tmp", VariableExpression::Free)})
        , nullptr)
        );
        /* semantic: if __expr and count == int(op0.bit, 1):
          of.id = bit_cast((op0.val >> (int(op0.bit, op0.bit) - int(op0.bit, 1))) ^ (op0.val >> (int(op0.bit, op0.bit) - int(op0.bit, 2))), int1(1)) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlOf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(
                OperationExpression::OpLrs,
                rInsn.GetOperand(0),
                Expr::MakeBinOp(
                  OperationExpression::OpSub,
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))),
              Expr::MakeBinOp(
                OperationExpression::OpLrs,
                rInsn.GetOperand(0),
                Expr::MakeBinOp(
                  OperationExpression::OpSub,
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)))), Expr::MakeBitVector(1, 0x1))), nullptr)
        );
        /* semantic: op0.val = res */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("res", VariableExpression::Use)));
        /* semantic: free_var('count') */
        AllExpr.push_back(Expr::MakeVar("count", VariableExpression::Free));
        /* semantic: free_var('res') */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x7:
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Sar);
      if (Operand__Ev_1(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: alloc_var('count', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("count", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: count = bit_cast(op1.val, int(op0.bit, op0.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, rInsn.GetOperand(1), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()))));
        /* semantic: call('count_mask') */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x40),
          Expr::MakeAssign(
            Expr::MakeVar("count", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeVar("count", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3f))),
          Expr::MakeAssign(
            Expr::MakeVar("count", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeVar("count", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1f)))));
        /* semantic: res = ars(op0.val, count) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpArs, rInsn.GetOperand(0), Expr::MakeVar("count", VariableExpression::Use))));
        /* semantic: if __expr and count != int(op0.bit, 0):
          if __expr and count > int(op0.bit, op0.bit): cf.id = bit_cast(op0.val >> (int(op0.bit, op0.bit) - int(op0.bit, 1)), int1(1))
          else: cf.id = bit_cast(op0.val >> (count - int(op0.bit, 1)), int1(1))
          call('sign_flag')
          call('zero_flag')
          call('parity_flag') */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondNe,
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeBind({
          Expr::MakeIfElseCond(
            ConditionExpression::CondUgt,
            Expr::MakeVar("count", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeAssign(
              Expr::MakeId(X86_FlCf, &m_CpuInfo),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                rInsn.GetOperand(0),
                Expr::MakeBinOp(
                  OperationExpression::OpSub,
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))),
            Expr::MakeAssign(
              Expr::MakeId(X86_FlCf, &m_CpuInfo),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                rInsn.GetOperand(0),
                Expr::MakeBinOp(
                  OperationExpression::OpSub,
                  Expr::MakeVar("count", VariableExpression::Use),
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1)))),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlSf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBinOp(
                OperationExpression::OpSub,
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlZf, &m_CpuInfo),
            Expr::MakeTernaryCond(ConditionExpression::CondEq,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
            Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))),
          Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)),
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBitVector(1, 0x1)),
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeId(X86_FlPf, &m_CpuInfo),
            Expr::MakeVar("pf_tmp", VariableExpression::Use)),
          Expr::MakeVar("pf_tmp", VariableExpression::Free)})
        , nullptr)
        );
        /* semantic: if __expr and count == int(op0.bit, 1):
          of.id = int1(0) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlOf, &m_CpuInfo),
            Expr::MakeBitVector(1, 0x0)), nullptr)
        );
        /* semantic: op0.val = res */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("res", VariableExpression::Use)));
        /* semantic: free_var('count') */
        AllExpr.push_back(Expr::MakeVar("count", VariableExpression::Free));
        /* semantic: free_var('res') */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    default:
      return false;
    }
}

/** group:
 * mnemonic: rol
 * opcode: 00
 * operand: ['Ev', '1']
 * semantic: alloc_var('res', op0.bit);
alloc_var('count', op0.bit);
count = bit_cast(op1.val, int(op0.bit, op0.bit));
call('count_mask');
res = rol(op0.val, count);
if __expr and count != int(op0.bit, 0):
  cf.id = bit_cast(res, int_type1);
if __expr and count == int(op0.bit, 1):
  of.id = bit_cast(bit_cast(cf.id, int_type(op0.bit)) ^ (res >> (int(op0.bit,op0.bit) - int(op0.bit, 1))), int_type1);
op0.val = res;
free_var('count');
free_var('res');

 *
 * mnemonic: ror
 * opcode: 01
 * operand: ['Ev', '1']
 * semantic: alloc_var('res', op0.bit);
alloc_var('count', op0.bit);
count = bit_cast(op1.val, int_type(op0.bit));
call('count_mask');
res = ror(op0.val, count);
if __expr and count != int(op0.bit, 0):
  cf.id = bit_cast(res >> (int(op0.bit, op0.bit) - int(op0.bit, 1)), int_type1);
if __expr and count == int(op0.bit, 1):
  of.id = bit_cast((res >> (int(op0.bit, op0.bit) - int(op0.bit, 1))) ^ (res >> (int(op0.bit, op0.bit) - int(op0.bit, 2))), int_type1);
op0.val = res;
free_var('count');
free_var('res');

 *
 * mnemonic: rcl
 * opcode: 02
 * operand: ['Ev', '1']
 * semantic: alloc_var('res', op0.bit);
alloc_var('count', op0.bit);
count = bit_cast(op1.val, int_type(op0.bit));
call('count_mask');
alloc_var('rol_val', concat(op0.bit, ignore(' + 1')));
rol_val = bit_cast(op0.val, int_type(concat(op0.bit, ignore(' + 1'))));
rol_val |= (bit_cast(cf.id, int_type(concat(op0.bit, ignore(' + 1')))) << int(concat(op0.bit, ignore(' + 1')), op0.bit));
rol_val = rol(rol_val, bit_cast(count, int_type(concat(op0.bit, ignore(' + 1')))));
res = bit_cast(rol_val, int_type(op0.bit));
if __expr and count != int(op0.bit, 0):
  cf.id = bit_cast(rol_val >> int(concat(op0.bit, ignore(' + 1')), op0.bit), int_type1);
if __expr and count == int(op0.bit, 1):
  of.id = bit_cast(cf.id ^ bit_cast(res >> (int(op0.bit, op0.bit) - int(op0.bit, 1)), int_type1), int_type1);
op0.val = res;
free_var('rol_val');
free_var('count');
free_var('res');

 *
 * mnemonic: rcr
 * opcode: 03
 * operand: ['Ev', '1']
 * semantic: alloc_var('res', op0.bit);
alloc_var('count', op0.bit);
count = bit_cast(op1.val, int(op0.bit, op0.bit));
call('count_mask');
alloc_var('ror_val', concat(op0.bit, ignore(' + 1')));
ror_val = bit_cast(op0.val, int_type(concat(op0.bit, ignore(' + 1'))));
ror_val |= (bit_cast(cf.id, int_type(concat(op0.bit, ignore(' + 1')))) << int(concat(op0.bit, ignore(' + 1')), op0.bit));
ror_val = ror(ror_val, bit_cast(count, int_type(concat(op0.bit, ignore(' + 1')))));
res = bit_cast(ror_val, int_type(op0.bit));
if __expr and count != int(op0.bit, 0):
  cf.id = bit_cast(ror_val >> int(concat(op0.bit, ignore(' + 1')), op0.bit), int_type1);
if __expr and count == int(op0.bit, 1):
  of.id = bit_cast((res >> (int(op0.bit, op0.bit) - int(op0.bit, 1))) ^ (res >> (int(op0.bit, op0.bit) - int(op0.bit, 2))), int_type1);
op0.val = res;
free_var('ror_val');
free_var('count');
free_var('res');

 *
 * mnemonic: shl
 * opcode: 04
 * operand: ['Ev', '1']
 * semantic: alloc_var('res', op0.bit);
alloc_var('count', op0.bit);
count = bit_cast(op1.val, int(op0.bit, op0.bit));
call('count_mask');
res = op0.val << count;
if __expr and count != int(op0.bit, 0):
  cf.id = bit_cast(op0.val >> (int(op0.bit, op0.bit) - count), int1(1))
  call('sign_flag')
  call('zero_flag')
  call('parity_flag');
if __expr and count == int(op0.bit, 1):
  of.id = bit_cast((op0.val >> (int(op0.bit, op0.bit) - int(op0.bit, 1))) ^ (op0.val >> (int(op0.bit, op0.bit) - int(op0.bit, 2))), int1(1));
op0.val = res;
free_var('count');
free_var('res');

 *
 * mnemonic: shr
 * opcode: 05
 * operand: ['Ev', '1']
 * semantic: alloc_var('res', op0.bit);
alloc_var('count', op0.bit);
count = bit_cast(op1.val, int(op0.bit, op0.bit));
call('count_mask');
res = op0.val >> count;
if __expr and count != int(op0.bit, 0):
  cf.id = bit_cast(op0.val >> (count - int(op0.bit, 1)), int1(1))
  call('sign_flag')
  call('zero_flag')
  call('parity_flag');
if __expr and count == int(op0.bit, 1):
  of.id = bit_cast((op0.val >> (int(op0.bit, op0.bit) - int(op0.bit, 1))), int1(1));
op0.val = res;
free_var('count');
free_var('res');

 *
 * mnemonic: sal
 * opcode: 06
 * operand: ['Ev', '1']
 * semantic: alloc_var('res', op0.bit);
alloc_var('count', op0.bit);
count = bit_cast(op1.val, int(op0.bit, op0.bit));
call('count_mask');
res = op0.val << count;
if __expr and count != int(op0.bit, 0):
  cf.id = bit_cast(op0.val >> (int(op0.bit, op0.bit) - count), int1(1))
  call('sign_flag')
  call('zero_flag')
  call('parity_flag');
if __expr and count == int(op0.bit, 1):
  of.id = bit_cast((op0.val >> (int(op0.bit, op0.bit) - int(op0.bit, 1))) ^ (op0.val >> (int(op0.bit, op0.bit) - int(op0.bit, 2))), int1(1));
op0.val = res;
free_var('count');
free_var('res');

 *
 * mnemonic: sar
 * opcode: 07
 * operand: ['Ev', '1']
 * semantic: alloc_var('res', op0.bit);
alloc_var('count', op0.bit);
count = bit_cast(op1.val, int(op0.bit, op0.bit));
call('count_mask');
res = ars(op0.val, count);
if __expr and count != int(op0.bit, 0):
  if __expr and count > int(op0.bit, op0.bit): cf.id = bit_cast(op0.val >> (int(op0.bit, op0.bit) - int(op0.bit, 1)), int1(1))
  else: cf.id = bit_cast(op0.val >> (count - int(op0.bit, 1)), int1(1))
  call('sign_flag')
  call('zero_flag')
  call('parity_flag');
if __expr and count == int(op0.bit, 1):
  of.id = int1(0);
op0.val = res;
free_var('count');
free_var('res');

 *
**/
bool X86Architecture::Table_1_d2(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    u8 ModRmByte;
    if (!rBinStrm.Read(Offset, ModRmByte))
      return false;

    x86::ModRM ModRm(ModRmByte);
    switch (ModRm.Reg())
    {
    case 0x0:
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Rol);
      if (Operand__Eb_CL(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: alloc_var('count', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("count", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: count = bit_cast(op1.val, int(op0.bit, op0.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, rInsn.GetOperand(1), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()))));
        /* semantic: call('count_mask') */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x40),
          Expr::MakeAssign(
            Expr::MakeVar("count", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeVar("count", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3f))),
          Expr::MakeAssign(
            Expr::MakeVar("count", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeVar("count", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1f)))));
        /* semantic: res = rol(op0.val, count) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpRol, rInsn.GetOperand(0), Expr::MakeVar("count", VariableExpression::Use))));
        /* semantic: if __expr and count != int(op0.bit, 0):
          cf.id = bit_cast(res, int_type1) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondNe,
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlCf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeVar("res", VariableExpression::Use), Expr::MakeBitVector(1, 1))), nullptr)
        );
        /* semantic: if __expr and count == int(op0.bit, 1):
          of.id = bit_cast(bit_cast(cf.id, int_type(op0.bit)) ^ (res >> (int(op0.bit,op0.bit) - int(op0.bit, 1))), int_type1) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlOf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeId(X86_FlCf, &m_CpuInfo), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize())),
              Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBinOp(
                  OperationExpression::OpSub,
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)))), Expr::MakeBitVector(1, 1))), nullptr)
        );
        /* semantic: op0.val = res */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("res", VariableExpression::Use)));
        /* semantic: free_var('count') */
        AllExpr.push_back(Expr::MakeVar("count", VariableExpression::Free));
        /* semantic: free_var('res') */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x1:
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Ror);
      if (Operand__Eb_CL(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: alloc_var('count', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("count", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: count = bit_cast(op1.val, int_type(op0.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, rInsn.GetOperand(1), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()))));
        /* semantic: call('count_mask') */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x40),
          Expr::MakeAssign(
            Expr::MakeVar("count", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeVar("count", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3f))),
          Expr::MakeAssign(
            Expr::MakeVar("count", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeVar("count", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1f)))));
        /* semantic: res = ror(op0.val, count) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpRor, rInsn.GetOperand(0), Expr::MakeVar("count", VariableExpression::Use))));
        /* semantic: if __expr and count != int(op0.bit, 0):
          cf.id = bit_cast(res >> (int(op0.bit, op0.bit) - int(op0.bit, 1)), int_type1) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondNe,
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlCf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBinOp(
                OperationExpression::OpSub,
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 1))), nullptr)
        );
        /* semantic: if __expr and count == int(op0.bit, 1):
          of.id = bit_cast((res >> (int(op0.bit, op0.bit) - int(op0.bit, 1))) ^ (res >> (int(op0.bit, op0.bit) - int(op0.bit, 2))), int_type1) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlOf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBinOp(
                  OperationExpression::OpSub,
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))),
              Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBinOp(
                  OperationExpression::OpSub,
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)))), Expr::MakeBitVector(1, 1))), nullptr)
        );
        /* semantic: op0.val = res */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("res", VariableExpression::Use)));
        /* semantic: free_var('count') */
        AllExpr.push_back(Expr::MakeVar("count", VariableExpression::Free));
        /* semantic: free_var('res') */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x2:
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Rcl);
      if (Operand__Eb_CL(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: alloc_var('count', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("count", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: count = bit_cast(op1.val, int_type(op0.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, rInsn.GetOperand(1), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()))));
        /* semantic: call('count_mask') */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x40),
          Expr::MakeAssign(
            Expr::MakeVar("count", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeVar("count", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3f))),
          Expr::MakeAssign(
            Expr::MakeVar("count", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeVar("count", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1f)))));
        /* semantic: alloc_var('rol_val', concat(op0.bit, ignore(' + 1'))) */
        AllExpr.push_back(Expr::MakeVar("rol_val", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize() + 1));
        /* semantic: rol_val = bit_cast(op0.val, int_type(concat(op0.bit, ignore(' + 1')))) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("rol_val", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, rInsn.GetOperand(0), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize() + 1, rInsn.GetOperand(0)->GetBitSize() + 1))));
        /* semantic: rol_val |= (bit_cast(cf.id, int_type(concat(op0.bit, ignore(' + 1')))) << int(concat(op0.bit, ignore(' + 1')), op0.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("rol_val", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpOr,
            Expr::MakeVar("rol_val", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpLls,
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeId(X86_FlCf, &m_CpuInfo), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize() + 1, rInsn.GetOperand(0)->GetBitSize() + 1)),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize() + 1, rInsn.GetOperand(0)->GetBitSize()))))
        );
        /* semantic: rol_val = rol(rol_val, bit_cast(count, int_type(concat(op0.bit, ignore(' + 1'))))) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("rol_val", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpRol, Expr::MakeVar("rol_val", VariableExpression::Use), Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeVar("count", VariableExpression::Use), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize() + 1, rInsn.GetOperand(0)->GetBitSize() + 1)))));
        /* semantic: res = bit_cast(rol_val, int_type(op0.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeVar("rol_val", VariableExpression::Use), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()))));
        /* semantic: if __expr and count != int(op0.bit, 0):
          cf.id = bit_cast(rol_val >> int(concat(op0.bit, ignore(' + 1')), op0.bit), int_type1) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondNe,
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlCf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("rol_val", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize() + 1, rInsn.GetOperand(0)->GetBitSize())), Expr::MakeBitVector(1, 1))), nullptr)
        );
        /* semantic: if __expr and count == int(op0.bit, 1):
          of.id = bit_cast(cf.id ^ bit_cast(res >> (int(op0.bit, op0.bit) - int(op0.bit, 1)), int_type1), int_type1) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlOf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeId(X86_FlCf, &m_CpuInfo),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBinOp(
                  OperationExpression::OpSub,
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 1))), Expr::MakeBitVector(1, 1))), nullptr)
        );
        /* semantic: op0.val = res */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("res", VariableExpression::Use)));
        /* semantic: free_var('rol_val') */
        AllExpr.push_back(Expr::MakeVar("rol_val", VariableExpression::Free));
        /* semantic: free_var('count') */
        AllExpr.push_back(Expr::MakeVar("count", VariableExpression::Free));
        /* semantic: free_var('res') */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x3:
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Rcr);
      if (Operand__Eb_CL(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: alloc_var('count', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("count", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: count = bit_cast(op1.val, int(op0.bit, op0.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, rInsn.GetOperand(1), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()))));
        /* semantic: call('count_mask') */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x40),
          Expr::MakeAssign(
            Expr::MakeVar("count", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeVar("count", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3f))),
          Expr::MakeAssign(
            Expr::MakeVar("count", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeVar("count", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1f)))));
        /* semantic: alloc_var('ror_val', concat(op0.bit, ignore(' + 1'))) */
        AllExpr.push_back(Expr::MakeVar("ror_val", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize() + 1));
        /* semantic: ror_val = bit_cast(op0.val, int_type(concat(op0.bit, ignore(' + 1')))) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("ror_val", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, rInsn.GetOperand(0), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize() + 1, rInsn.GetOperand(0)->GetBitSize() + 1))));
        /* semantic: ror_val |= (bit_cast(cf.id, int_type(concat(op0.bit, ignore(' + 1')))) << int(concat(op0.bit, ignore(' + 1')), op0.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("ror_val", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpOr,
            Expr::MakeVar("ror_val", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpLls,
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeId(X86_FlCf, &m_CpuInfo), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize() + 1, rInsn.GetOperand(0)->GetBitSize() + 1)),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize() + 1, rInsn.GetOperand(0)->GetBitSize()))))
        );
        /* semantic: ror_val = ror(ror_val, bit_cast(count, int_type(concat(op0.bit, ignore(' + 1'))))) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("ror_val", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpRor, Expr::MakeVar("ror_val", VariableExpression::Use), Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeVar("count", VariableExpression::Use), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize() + 1, rInsn.GetOperand(0)->GetBitSize() + 1)))));
        /* semantic: res = bit_cast(ror_val, int_type(op0.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeVar("ror_val", VariableExpression::Use), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()))));
        /* semantic: if __expr and count != int(op0.bit, 0):
          cf.id = bit_cast(ror_val >> int(concat(op0.bit, ignore(' + 1')), op0.bit), int_type1) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondNe,
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlCf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("ror_val", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize() + 1, rInsn.GetOperand(0)->GetBitSize())), Expr::MakeBitVector(1, 1))), nullptr)
        );
        /* semantic: if __expr and count == int(op0.bit, 1):
          of.id = bit_cast((res >> (int(op0.bit, op0.bit) - int(op0.bit, 1))) ^ (res >> (int(op0.bit, op0.bit) - int(op0.bit, 2))), int_type1) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlOf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBinOp(
                  OperationExpression::OpSub,
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))),
              Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBinOp(
                  OperationExpression::OpSub,
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)))), Expr::MakeBitVector(1, 1))), nullptr)
        );
        /* semantic: op0.val = res */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("res", VariableExpression::Use)));
        /* semantic: free_var('ror_val') */
        AllExpr.push_back(Expr::MakeVar("ror_val", VariableExpression::Free));
        /* semantic: free_var('count') */
        AllExpr.push_back(Expr::MakeVar("count", VariableExpression::Free));
        /* semantic: free_var('res') */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x4:
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Shl);
      if (Operand__Eb_CL(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: alloc_var('count', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("count", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: count = bit_cast(op1.val, int(op0.bit, op0.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, rInsn.GetOperand(1), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()))));
        /* semantic: call('count_mask') */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x40),
          Expr::MakeAssign(
            Expr::MakeVar("count", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeVar("count", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3f))),
          Expr::MakeAssign(
            Expr::MakeVar("count", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeVar("count", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1f)))));
        /* semantic: res = op0.val << count */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpLls,
            rInsn.GetOperand(0),
            Expr::MakeVar("count", VariableExpression::Use))));
        /* semantic: if __expr and count != int(op0.bit, 0):
          cf.id = bit_cast(op0.val >> (int(op0.bit, op0.bit) - count), int1(1))
          call('sign_flag')
          call('zero_flag')
          call('parity_flag') */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondNe,
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeBind({
          Expr::MakeAssign(
            Expr::MakeId(X86_FlCf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              rInsn.GetOperand(0),
              Expr::MakeBinOp(
                OperationExpression::OpSub,
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                Expr::MakeVar("count", VariableExpression::Use))), Expr::MakeBitVector(1, 0x1))),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlSf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBinOp(
                OperationExpression::OpSub,
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlZf, &m_CpuInfo),
            Expr::MakeTernaryCond(ConditionExpression::CondEq,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
            Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))),
          Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)),
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBitVector(1, 0x1)),
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeId(X86_FlPf, &m_CpuInfo),
            Expr::MakeVar("pf_tmp", VariableExpression::Use)),
          Expr::MakeVar("pf_tmp", VariableExpression::Free)})
        , nullptr)
        );
        /* semantic: if __expr and count == int(op0.bit, 1):
          of.id = bit_cast((op0.val >> (int(op0.bit, op0.bit) - int(op0.bit, 1))) ^ (op0.val >> (int(op0.bit, op0.bit) - int(op0.bit, 2))), int1(1)) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlOf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(
                OperationExpression::OpLrs,
                rInsn.GetOperand(0),
                Expr::MakeBinOp(
                  OperationExpression::OpSub,
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))),
              Expr::MakeBinOp(
                OperationExpression::OpLrs,
                rInsn.GetOperand(0),
                Expr::MakeBinOp(
                  OperationExpression::OpSub,
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)))), Expr::MakeBitVector(1, 0x1))), nullptr)
        );
        /* semantic: op0.val = res */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("res", VariableExpression::Use)));
        /* semantic: free_var('count') */
        AllExpr.push_back(Expr::MakeVar("count", VariableExpression::Free));
        /* semantic: free_var('res') */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x5:
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Shr);
      if (Operand__Eb_CL(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: alloc_var('count', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("count", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: count = bit_cast(op1.val, int(op0.bit, op0.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, rInsn.GetOperand(1), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()))));
        /* semantic: call('count_mask') */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x40),
          Expr::MakeAssign(
            Expr::MakeVar("count", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeVar("count", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3f))),
          Expr::MakeAssign(
            Expr::MakeVar("count", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeVar("count", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1f)))));
        /* semantic: res = op0.val >> count */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpLrs,
            rInsn.GetOperand(0),
            Expr::MakeVar("count", VariableExpression::Use))));
        /* semantic: if __expr and count != int(op0.bit, 0):
          cf.id = bit_cast(op0.val >> (count - int(op0.bit, 1)), int1(1))
          call('sign_flag')
          call('zero_flag')
          call('parity_flag') */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondNe,
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeBind({
          Expr::MakeAssign(
            Expr::MakeId(X86_FlCf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              rInsn.GetOperand(0),
              Expr::MakeBinOp(
                OperationExpression::OpSub,
                Expr::MakeVar("count", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlSf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBinOp(
                OperationExpression::OpSub,
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlZf, &m_CpuInfo),
            Expr::MakeTernaryCond(ConditionExpression::CondEq,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
            Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))),
          Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)),
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBitVector(1, 0x1)),
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeId(X86_FlPf, &m_CpuInfo),
            Expr::MakeVar("pf_tmp", VariableExpression::Use)),
          Expr::MakeVar("pf_tmp", VariableExpression::Free)})
        , nullptr)
        );
        /* semantic: if __expr and count == int(op0.bit, 1):
          of.id = bit_cast((op0.val >> (int(op0.bit, op0.bit) - int(op0.bit, 1))), int1(1)) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlOf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              rInsn.GetOperand(0),
              Expr::MakeBinOp(
                OperationExpression::OpSub,
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))), nullptr)
        );
        /* semantic: op0.val = res */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("res", VariableExpression::Use)));
        /* semantic: free_var('count') */
        AllExpr.push_back(Expr::MakeVar("count", VariableExpression::Free));
        /* semantic: free_var('res') */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x6:
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Sal);
      if (Operand__Eb_CL(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: alloc_var('count', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("count", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: count = bit_cast(op1.val, int(op0.bit, op0.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, rInsn.GetOperand(1), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()))));
        /* semantic: call('count_mask') */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x40),
          Expr::MakeAssign(
            Expr::MakeVar("count", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeVar("count", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3f))),
          Expr::MakeAssign(
            Expr::MakeVar("count", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeVar("count", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1f)))));
        /* semantic: res = op0.val << count */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpLls,
            rInsn.GetOperand(0),
            Expr::MakeVar("count", VariableExpression::Use))));
        /* semantic: if __expr and count != int(op0.bit, 0):
          cf.id = bit_cast(op0.val >> (int(op0.bit, op0.bit) - count), int1(1))
          call('sign_flag')
          call('zero_flag')
          call('parity_flag') */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondNe,
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeBind({
          Expr::MakeAssign(
            Expr::MakeId(X86_FlCf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              rInsn.GetOperand(0),
              Expr::MakeBinOp(
                OperationExpression::OpSub,
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                Expr::MakeVar("count", VariableExpression::Use))), Expr::MakeBitVector(1, 0x1))),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlSf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBinOp(
                OperationExpression::OpSub,
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlZf, &m_CpuInfo),
            Expr::MakeTernaryCond(ConditionExpression::CondEq,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
            Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))),
          Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)),
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBitVector(1, 0x1)),
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeId(X86_FlPf, &m_CpuInfo),
            Expr::MakeVar("pf_tmp", VariableExpression::Use)),
          Expr::MakeVar("pf_tmp", VariableExpression::Free)})
        , nullptr)
        );
        /* semantic: if __expr and count == int(op0.bit, 1):
          of.id = bit_cast((op0.val >> (int(op0.bit, op0.bit) - int(op0.bit, 1))) ^ (op0.val >> (int(op0.bit, op0.bit) - int(op0.bit, 2))), int1(1)) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlOf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(
                OperationExpression::OpLrs,
                rInsn.GetOperand(0),
                Expr::MakeBinOp(
                  OperationExpression::OpSub,
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))),
              Expr::MakeBinOp(
                OperationExpression::OpLrs,
                rInsn.GetOperand(0),
                Expr::MakeBinOp(
                  OperationExpression::OpSub,
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)))), Expr::MakeBitVector(1, 0x1))), nullptr)
        );
        /* semantic: op0.val = res */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("res", VariableExpression::Use)));
        /* semantic: free_var('count') */
        AllExpr.push_back(Expr::MakeVar("count", VariableExpression::Free));
        /* semantic: free_var('res') */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x7:
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Sar);
      if (Operand__Eb_CL(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: alloc_var('count', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("count", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: count = bit_cast(op1.val, int(op0.bit, op0.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, rInsn.GetOperand(1), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()))));
        /* semantic: call('count_mask') */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x40),
          Expr::MakeAssign(
            Expr::MakeVar("count", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeVar("count", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3f))),
          Expr::MakeAssign(
            Expr::MakeVar("count", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeVar("count", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1f)))));
        /* semantic: res = ars(op0.val, count) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpArs, rInsn.GetOperand(0), Expr::MakeVar("count", VariableExpression::Use))));
        /* semantic: if __expr and count != int(op0.bit, 0):
          if __expr and count > int(op0.bit, op0.bit): cf.id = bit_cast(op0.val >> (int(op0.bit, op0.bit) - int(op0.bit, 1)), int1(1))
          else: cf.id = bit_cast(op0.val >> (count - int(op0.bit, 1)), int1(1))
          call('sign_flag')
          call('zero_flag')
          call('parity_flag') */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondNe,
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeBind({
          Expr::MakeIfElseCond(
            ConditionExpression::CondUgt,
            Expr::MakeVar("count", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeAssign(
              Expr::MakeId(X86_FlCf, &m_CpuInfo),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                rInsn.GetOperand(0),
                Expr::MakeBinOp(
                  OperationExpression::OpSub,
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))),
            Expr::MakeAssign(
              Expr::MakeId(X86_FlCf, &m_CpuInfo),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                rInsn.GetOperand(0),
                Expr::MakeBinOp(
                  OperationExpression::OpSub,
                  Expr::MakeVar("count", VariableExpression::Use),
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1)))),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlSf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBinOp(
                OperationExpression::OpSub,
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlZf, &m_CpuInfo),
            Expr::MakeTernaryCond(ConditionExpression::CondEq,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
            Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))),
          Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)),
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBitVector(1, 0x1)),
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeId(X86_FlPf, &m_CpuInfo),
            Expr::MakeVar("pf_tmp", VariableExpression::Use)),
          Expr::MakeVar("pf_tmp", VariableExpression::Free)})
        , nullptr)
        );
        /* semantic: if __expr and count == int(op0.bit, 1):
          of.id = int1(0) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlOf, &m_CpuInfo),
            Expr::MakeBitVector(1, 0x0)), nullptr)
        );
        /* semantic: op0.val = res */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("res", VariableExpression::Use)));
        /* semantic: free_var('count') */
        AllExpr.push_back(Expr::MakeVar("count", VariableExpression::Free));
        /* semantic: free_var('res') */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    default:
      return false;
    }
}

/** group:
 * mnemonic: rol
 * opcode: 00
 * operand: ['Eb', 'CL']
 * semantic: alloc_var('res', op0.bit);
alloc_var('count', op0.bit);
count = bit_cast(op1.val, int(op0.bit, op0.bit));
call('count_mask');
res = rol(op0.val, count);
if __expr and count != int(op0.bit, 0):
  cf.id = bit_cast(res, int_type1);
if __expr and count == int(op0.bit, 1):
  of.id = bit_cast(bit_cast(cf.id, int_type(op0.bit)) ^ (res >> (int(op0.bit,op0.bit) - int(op0.bit, 1))), int_type1);
op0.val = res;
free_var('count');
free_var('res');

 *
 * mnemonic: ror
 * opcode: 01
 * operand: ['Eb', 'CL']
 * semantic: alloc_var('res', op0.bit);
alloc_var('count', op0.bit);
count = bit_cast(op1.val, int_type(op0.bit));
call('count_mask');
res = ror(op0.val, count);
if __expr and count != int(op0.bit, 0):
  cf.id = bit_cast(res >> (int(op0.bit, op0.bit) - int(op0.bit, 1)), int_type1);
if __expr and count == int(op0.bit, 1):
  of.id = bit_cast((res >> (int(op0.bit, op0.bit) - int(op0.bit, 1))) ^ (res >> (int(op0.bit, op0.bit) - int(op0.bit, 2))), int_type1);
op0.val = res;
free_var('count');
free_var('res');

 *
 * mnemonic: rcl
 * opcode: 02
 * operand: ['Eb', 'CL']
 * semantic: alloc_var('res', op0.bit);
alloc_var('count', op0.bit);
count = bit_cast(op1.val, int_type(op0.bit));
call('count_mask');
alloc_var('rol_val', concat(op0.bit, ignore(' + 1')));
rol_val = bit_cast(op0.val, int_type(concat(op0.bit, ignore(' + 1'))));
rol_val |= (bit_cast(cf.id, int_type(concat(op0.bit, ignore(' + 1')))) << int(concat(op0.bit, ignore(' + 1')), op0.bit));
rol_val = rol(rol_val, bit_cast(count, int_type(concat(op0.bit, ignore(' + 1')))));
res = bit_cast(rol_val, int_type(op0.bit));
if __expr and count != int(op0.bit, 0):
  cf.id = bit_cast(rol_val >> int(concat(op0.bit, ignore(' + 1')), op0.bit), int_type1);
if __expr and count == int(op0.bit, 1):
  of.id = bit_cast(cf.id ^ bit_cast(res >> (int(op0.bit, op0.bit) - int(op0.bit, 1)), int_type1), int_type1);
op0.val = res;
free_var('rol_val');
free_var('count');
free_var('res');

 *
 * mnemonic: rcr
 * opcode: 03
 * operand: ['Eb', 'CL']
 * semantic: alloc_var('res', op0.bit);
alloc_var('count', op0.bit);
count = bit_cast(op1.val, int(op0.bit, op0.bit));
call('count_mask');
alloc_var('ror_val', concat(op0.bit, ignore(' + 1')));
ror_val = bit_cast(op0.val, int_type(concat(op0.bit, ignore(' + 1'))));
ror_val |= (bit_cast(cf.id, int_type(concat(op0.bit, ignore(' + 1')))) << int(concat(op0.bit, ignore(' + 1')), op0.bit));
ror_val = ror(ror_val, bit_cast(count, int_type(concat(op0.bit, ignore(' + 1')))));
res = bit_cast(ror_val, int_type(op0.bit));
if __expr and count != int(op0.bit, 0):
  cf.id = bit_cast(ror_val >> int(concat(op0.bit, ignore(' + 1')), op0.bit), int_type1);
if __expr and count == int(op0.bit, 1):
  of.id = bit_cast((res >> (int(op0.bit, op0.bit) - int(op0.bit, 1))) ^ (res >> (int(op0.bit, op0.bit) - int(op0.bit, 2))), int_type1);
op0.val = res;
free_var('ror_val');
free_var('count');
free_var('res');

 *
 * mnemonic: shl
 * opcode: 04
 * operand: ['Eb', 'CL']
 * semantic: alloc_var('res', op0.bit);
alloc_var('count', op0.bit);
count = bit_cast(op1.val, int(op0.bit, op0.bit));
call('count_mask');
res = op0.val << count;
if __expr and count != int(op0.bit, 0):
  cf.id = bit_cast(op0.val >> (int(op0.bit, op0.bit) - count), int1(1))
  call('sign_flag')
  call('zero_flag')
  call('parity_flag');
if __expr and count == int(op0.bit, 1):
  of.id = bit_cast((op0.val >> (int(op0.bit, op0.bit) - int(op0.bit, 1))) ^ (op0.val >> (int(op0.bit, op0.bit) - int(op0.bit, 2))), int1(1));
op0.val = res;
free_var('count');
free_var('res');

 *
 * mnemonic: shr
 * opcode: 05
 * operand: ['Eb', 'CL']
 * semantic: alloc_var('res', op0.bit);
alloc_var('count', op0.bit);
count = bit_cast(op1.val, int(op0.bit, op0.bit));
call('count_mask');
res = op0.val >> count;
if __expr and count != int(op0.bit, 0):
  cf.id = bit_cast(op0.val >> (count - int(op0.bit, 1)), int1(1))
  call('sign_flag')
  call('zero_flag')
  call('parity_flag');
if __expr and count == int(op0.bit, 1):
  of.id = bit_cast((op0.val >> (int(op0.bit, op0.bit) - int(op0.bit, 1))), int1(1));
op0.val = res;
free_var('count');
free_var('res');

 *
 * mnemonic: sal
 * opcode: 06
 * operand: ['Eb', 'CL']
 * semantic: alloc_var('res', op0.bit);
alloc_var('count', op0.bit);
count = bit_cast(op1.val, int(op0.bit, op0.bit));
call('count_mask');
res = op0.val << count;
if __expr and count != int(op0.bit, 0):
  cf.id = bit_cast(op0.val >> (int(op0.bit, op0.bit) - count), int1(1))
  call('sign_flag')
  call('zero_flag')
  call('parity_flag');
if __expr and count == int(op0.bit, 1):
  of.id = bit_cast((op0.val >> (int(op0.bit, op0.bit) - int(op0.bit, 1))) ^ (op0.val >> (int(op0.bit, op0.bit) - int(op0.bit, 2))), int1(1));
op0.val = res;
free_var('count');
free_var('res');

 *
 * mnemonic: sar
 * opcode: 07
 * operand: ['Eb', 'CL']
 * semantic: alloc_var('res', op0.bit);
alloc_var('count', op0.bit);
count = bit_cast(op1.val, int(op0.bit, op0.bit));
call('count_mask');
res = ars(op0.val, count);
if __expr and count != int(op0.bit, 0):
  if __expr and count > int(op0.bit, op0.bit): cf.id = bit_cast(op0.val >> (int(op0.bit, op0.bit) - int(op0.bit, 1)), int1(1))
  else: cf.id = bit_cast(op0.val >> (count - int(op0.bit, 1)), int1(1))
  call('sign_flag')
  call('zero_flag')
  call('parity_flag');
if __expr and count == int(op0.bit, 1):
  of.id = int1(0);
op0.val = res;
free_var('count');
free_var('res');

 *
**/
bool X86Architecture::Table_1_d3(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    u8 ModRmByte;
    if (!rBinStrm.Read(Offset, ModRmByte))
      return false;

    x86::ModRM ModRm(ModRmByte);
    switch (ModRm.Reg())
    {
    case 0x0:
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Rol);
      if (Operand__Ev_CL(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: alloc_var('count', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("count", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: count = bit_cast(op1.val, int(op0.bit, op0.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, rInsn.GetOperand(1), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()))));
        /* semantic: call('count_mask') */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x40),
          Expr::MakeAssign(
            Expr::MakeVar("count", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeVar("count", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3f))),
          Expr::MakeAssign(
            Expr::MakeVar("count", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeVar("count", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1f)))));
        /* semantic: res = rol(op0.val, count) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpRol, rInsn.GetOperand(0), Expr::MakeVar("count", VariableExpression::Use))));
        /* semantic: if __expr and count != int(op0.bit, 0):
          cf.id = bit_cast(res, int_type1) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondNe,
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlCf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeVar("res", VariableExpression::Use), Expr::MakeBitVector(1, 1))), nullptr)
        );
        /* semantic: if __expr and count == int(op0.bit, 1):
          of.id = bit_cast(bit_cast(cf.id, int_type(op0.bit)) ^ (res >> (int(op0.bit,op0.bit) - int(op0.bit, 1))), int_type1) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlOf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeId(X86_FlCf, &m_CpuInfo), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize())),
              Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBinOp(
                  OperationExpression::OpSub,
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)))), Expr::MakeBitVector(1, 1))), nullptr)
        );
        /* semantic: op0.val = res */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("res", VariableExpression::Use)));
        /* semantic: free_var('count') */
        AllExpr.push_back(Expr::MakeVar("count", VariableExpression::Free));
        /* semantic: free_var('res') */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x1:
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Ror);
      if (Operand__Ev_CL(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: alloc_var('count', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("count", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: count = bit_cast(op1.val, int_type(op0.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, rInsn.GetOperand(1), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()))));
        /* semantic: call('count_mask') */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x40),
          Expr::MakeAssign(
            Expr::MakeVar("count", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeVar("count", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3f))),
          Expr::MakeAssign(
            Expr::MakeVar("count", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeVar("count", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1f)))));
        /* semantic: res = ror(op0.val, count) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpRor, rInsn.GetOperand(0), Expr::MakeVar("count", VariableExpression::Use))));
        /* semantic: if __expr and count != int(op0.bit, 0):
          cf.id = bit_cast(res >> (int(op0.bit, op0.bit) - int(op0.bit, 1)), int_type1) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondNe,
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlCf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBinOp(
                OperationExpression::OpSub,
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 1))), nullptr)
        );
        /* semantic: if __expr and count == int(op0.bit, 1):
          of.id = bit_cast((res >> (int(op0.bit, op0.bit) - int(op0.bit, 1))) ^ (res >> (int(op0.bit, op0.bit) - int(op0.bit, 2))), int_type1) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlOf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBinOp(
                  OperationExpression::OpSub,
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))),
              Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBinOp(
                  OperationExpression::OpSub,
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)))), Expr::MakeBitVector(1, 1))), nullptr)
        );
        /* semantic: op0.val = res */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("res", VariableExpression::Use)));
        /* semantic: free_var('count') */
        AllExpr.push_back(Expr::MakeVar("count", VariableExpression::Free));
        /* semantic: free_var('res') */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x2:
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Rcl);
      if (Operand__Ev_CL(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: alloc_var('count', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("count", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: count = bit_cast(op1.val, int_type(op0.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, rInsn.GetOperand(1), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()))));
        /* semantic: call('count_mask') */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x40),
          Expr::MakeAssign(
            Expr::MakeVar("count", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeVar("count", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3f))),
          Expr::MakeAssign(
            Expr::MakeVar("count", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeVar("count", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1f)))));
        /* semantic: alloc_var('rol_val', concat(op0.bit, ignore(' + 1'))) */
        AllExpr.push_back(Expr::MakeVar("rol_val", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize() + 1));
        /* semantic: rol_val = bit_cast(op0.val, int_type(concat(op0.bit, ignore(' + 1')))) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("rol_val", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, rInsn.GetOperand(0), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize() + 1, rInsn.GetOperand(0)->GetBitSize() + 1))));
        /* semantic: rol_val |= (bit_cast(cf.id, int_type(concat(op0.bit, ignore(' + 1')))) << int(concat(op0.bit, ignore(' + 1')), op0.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("rol_val", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpOr,
            Expr::MakeVar("rol_val", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpLls,
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeId(X86_FlCf, &m_CpuInfo), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize() + 1, rInsn.GetOperand(0)->GetBitSize() + 1)),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize() + 1, rInsn.GetOperand(0)->GetBitSize()))))
        );
        /* semantic: rol_val = rol(rol_val, bit_cast(count, int_type(concat(op0.bit, ignore(' + 1'))))) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("rol_val", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpRol, Expr::MakeVar("rol_val", VariableExpression::Use), Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeVar("count", VariableExpression::Use), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize() + 1, rInsn.GetOperand(0)->GetBitSize() + 1)))));
        /* semantic: res = bit_cast(rol_val, int_type(op0.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeVar("rol_val", VariableExpression::Use), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()))));
        /* semantic: if __expr and count != int(op0.bit, 0):
          cf.id = bit_cast(rol_val >> int(concat(op0.bit, ignore(' + 1')), op0.bit), int_type1) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondNe,
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlCf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("rol_val", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize() + 1, rInsn.GetOperand(0)->GetBitSize())), Expr::MakeBitVector(1, 1))), nullptr)
        );
        /* semantic: if __expr and count == int(op0.bit, 1):
          of.id = bit_cast(cf.id ^ bit_cast(res >> (int(op0.bit, op0.bit) - int(op0.bit, 1)), int_type1), int_type1) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlOf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeId(X86_FlCf, &m_CpuInfo),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBinOp(
                  OperationExpression::OpSub,
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 1))), Expr::MakeBitVector(1, 1))), nullptr)
        );
        /* semantic: op0.val = res */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("res", VariableExpression::Use)));
        /* semantic: free_var('rol_val') */
        AllExpr.push_back(Expr::MakeVar("rol_val", VariableExpression::Free));
        /* semantic: free_var('count') */
        AllExpr.push_back(Expr::MakeVar("count", VariableExpression::Free));
        /* semantic: free_var('res') */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x3:
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Rcr);
      if (Operand__Ev_CL(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: alloc_var('count', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("count", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: count = bit_cast(op1.val, int(op0.bit, op0.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, rInsn.GetOperand(1), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()))));
        /* semantic: call('count_mask') */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x40),
          Expr::MakeAssign(
            Expr::MakeVar("count", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeVar("count", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3f))),
          Expr::MakeAssign(
            Expr::MakeVar("count", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeVar("count", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1f)))));
        /* semantic: alloc_var('ror_val', concat(op0.bit, ignore(' + 1'))) */
        AllExpr.push_back(Expr::MakeVar("ror_val", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize() + 1));
        /* semantic: ror_val = bit_cast(op0.val, int_type(concat(op0.bit, ignore(' + 1')))) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("ror_val", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, rInsn.GetOperand(0), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize() + 1, rInsn.GetOperand(0)->GetBitSize() + 1))));
        /* semantic: ror_val |= (bit_cast(cf.id, int_type(concat(op0.bit, ignore(' + 1')))) << int(concat(op0.bit, ignore(' + 1')), op0.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("ror_val", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpOr,
            Expr::MakeVar("ror_val", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpLls,
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeId(X86_FlCf, &m_CpuInfo), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize() + 1, rInsn.GetOperand(0)->GetBitSize() + 1)),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize() + 1, rInsn.GetOperand(0)->GetBitSize()))))
        );
        /* semantic: ror_val = ror(ror_val, bit_cast(count, int_type(concat(op0.bit, ignore(' + 1'))))) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("ror_val", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpRor, Expr::MakeVar("ror_val", VariableExpression::Use), Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeVar("count", VariableExpression::Use), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize() + 1, rInsn.GetOperand(0)->GetBitSize() + 1)))));
        /* semantic: res = bit_cast(ror_val, int_type(op0.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeVar("ror_val", VariableExpression::Use), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()))));
        /* semantic: if __expr and count != int(op0.bit, 0):
          cf.id = bit_cast(ror_val >> int(concat(op0.bit, ignore(' + 1')), op0.bit), int_type1) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondNe,
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlCf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("ror_val", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize() + 1, rInsn.GetOperand(0)->GetBitSize())), Expr::MakeBitVector(1, 1))), nullptr)
        );
        /* semantic: if __expr and count == int(op0.bit, 1):
          of.id = bit_cast((res >> (int(op0.bit, op0.bit) - int(op0.bit, 1))) ^ (res >> (int(op0.bit, op0.bit) - int(op0.bit, 2))), int_type1) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlOf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBinOp(
                  OperationExpression::OpSub,
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))),
              Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBinOp(
                  OperationExpression::OpSub,
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)))), Expr::MakeBitVector(1, 1))), nullptr)
        );
        /* semantic: op0.val = res */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("res", VariableExpression::Use)));
        /* semantic: free_var('ror_val') */
        AllExpr.push_back(Expr::MakeVar("ror_val", VariableExpression::Free));
        /* semantic: free_var('count') */
        AllExpr.push_back(Expr::MakeVar("count", VariableExpression::Free));
        /* semantic: free_var('res') */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x4:
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Shl);
      if (Operand__Ev_CL(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: alloc_var('count', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("count", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: count = bit_cast(op1.val, int(op0.bit, op0.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, rInsn.GetOperand(1), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()))));
        /* semantic: call('count_mask') */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x40),
          Expr::MakeAssign(
            Expr::MakeVar("count", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeVar("count", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3f))),
          Expr::MakeAssign(
            Expr::MakeVar("count", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeVar("count", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1f)))));
        /* semantic: res = op0.val << count */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpLls,
            rInsn.GetOperand(0),
            Expr::MakeVar("count", VariableExpression::Use))));
        /* semantic: if __expr and count != int(op0.bit, 0):
          cf.id = bit_cast(op0.val >> (int(op0.bit, op0.bit) - count), int1(1))
          call('sign_flag')
          call('zero_flag')
          call('parity_flag') */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondNe,
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeBind({
          Expr::MakeAssign(
            Expr::MakeId(X86_FlCf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              rInsn.GetOperand(0),
              Expr::MakeBinOp(
                OperationExpression::OpSub,
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                Expr::MakeVar("count", VariableExpression::Use))), Expr::MakeBitVector(1, 0x1))),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlSf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBinOp(
                OperationExpression::OpSub,
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlZf, &m_CpuInfo),
            Expr::MakeTernaryCond(ConditionExpression::CondEq,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
            Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))),
          Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)),
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBitVector(1, 0x1)),
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeId(X86_FlPf, &m_CpuInfo),
            Expr::MakeVar("pf_tmp", VariableExpression::Use)),
          Expr::MakeVar("pf_tmp", VariableExpression::Free)})
        , nullptr)
        );
        /* semantic: if __expr and count == int(op0.bit, 1):
          of.id = bit_cast((op0.val >> (int(op0.bit, op0.bit) - int(op0.bit, 1))) ^ (op0.val >> (int(op0.bit, op0.bit) - int(op0.bit, 2))), int1(1)) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlOf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(
                OperationExpression::OpLrs,
                rInsn.GetOperand(0),
                Expr::MakeBinOp(
                  OperationExpression::OpSub,
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))),
              Expr::MakeBinOp(
                OperationExpression::OpLrs,
                rInsn.GetOperand(0),
                Expr::MakeBinOp(
                  OperationExpression::OpSub,
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)))), Expr::MakeBitVector(1, 0x1))), nullptr)
        );
        /* semantic: op0.val = res */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("res", VariableExpression::Use)));
        /* semantic: free_var('count') */
        AllExpr.push_back(Expr::MakeVar("count", VariableExpression::Free));
        /* semantic: free_var('res') */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x5:
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Shr);
      if (Operand__Ev_CL(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: alloc_var('count', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("count", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: count = bit_cast(op1.val, int(op0.bit, op0.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, rInsn.GetOperand(1), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()))));
        /* semantic: call('count_mask') */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x40),
          Expr::MakeAssign(
            Expr::MakeVar("count", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeVar("count", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3f))),
          Expr::MakeAssign(
            Expr::MakeVar("count", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeVar("count", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1f)))));
        /* semantic: res = op0.val >> count */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpLrs,
            rInsn.GetOperand(0),
            Expr::MakeVar("count", VariableExpression::Use))));
        /* semantic: if __expr and count != int(op0.bit, 0):
          cf.id = bit_cast(op0.val >> (count - int(op0.bit, 1)), int1(1))
          call('sign_flag')
          call('zero_flag')
          call('parity_flag') */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondNe,
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeBind({
          Expr::MakeAssign(
            Expr::MakeId(X86_FlCf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              rInsn.GetOperand(0),
              Expr::MakeBinOp(
                OperationExpression::OpSub,
                Expr::MakeVar("count", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlSf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBinOp(
                OperationExpression::OpSub,
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlZf, &m_CpuInfo),
            Expr::MakeTernaryCond(ConditionExpression::CondEq,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
            Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))),
          Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)),
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBitVector(1, 0x1)),
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeId(X86_FlPf, &m_CpuInfo),
            Expr::MakeVar("pf_tmp", VariableExpression::Use)),
          Expr::MakeVar("pf_tmp", VariableExpression::Free)})
        , nullptr)
        );
        /* semantic: if __expr and count == int(op0.bit, 1):
          of.id = bit_cast((op0.val >> (int(op0.bit, op0.bit) - int(op0.bit, 1))), int1(1)) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlOf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              rInsn.GetOperand(0),
              Expr::MakeBinOp(
                OperationExpression::OpSub,
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))), nullptr)
        );
        /* semantic: op0.val = res */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("res", VariableExpression::Use)));
        /* semantic: free_var('count') */
        AllExpr.push_back(Expr::MakeVar("count", VariableExpression::Free));
        /* semantic: free_var('res') */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x6:
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Sal);
      if (Operand__Ev_CL(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: alloc_var('count', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("count", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: count = bit_cast(op1.val, int(op0.bit, op0.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, rInsn.GetOperand(1), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()))));
        /* semantic: call('count_mask') */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x40),
          Expr::MakeAssign(
            Expr::MakeVar("count", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeVar("count", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3f))),
          Expr::MakeAssign(
            Expr::MakeVar("count", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeVar("count", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1f)))));
        /* semantic: res = op0.val << count */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpLls,
            rInsn.GetOperand(0),
            Expr::MakeVar("count", VariableExpression::Use))));
        /* semantic: if __expr and count != int(op0.bit, 0):
          cf.id = bit_cast(op0.val >> (int(op0.bit, op0.bit) - count), int1(1))
          call('sign_flag')
          call('zero_flag')
          call('parity_flag') */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondNe,
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeBind({
          Expr::MakeAssign(
            Expr::MakeId(X86_FlCf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              rInsn.GetOperand(0),
              Expr::MakeBinOp(
                OperationExpression::OpSub,
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                Expr::MakeVar("count", VariableExpression::Use))), Expr::MakeBitVector(1, 0x1))),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlSf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBinOp(
                OperationExpression::OpSub,
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlZf, &m_CpuInfo),
            Expr::MakeTernaryCond(ConditionExpression::CondEq,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
            Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))),
          Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)),
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBitVector(1, 0x1)),
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeId(X86_FlPf, &m_CpuInfo),
            Expr::MakeVar("pf_tmp", VariableExpression::Use)),
          Expr::MakeVar("pf_tmp", VariableExpression::Free)})
        , nullptr)
        );
        /* semantic: if __expr and count == int(op0.bit, 1):
          of.id = bit_cast((op0.val >> (int(op0.bit, op0.bit) - int(op0.bit, 1))) ^ (op0.val >> (int(op0.bit, op0.bit) - int(op0.bit, 2))), int1(1)) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlOf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(
                OperationExpression::OpLrs,
                rInsn.GetOperand(0),
                Expr::MakeBinOp(
                  OperationExpression::OpSub,
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))),
              Expr::MakeBinOp(
                OperationExpression::OpLrs,
                rInsn.GetOperand(0),
                Expr::MakeBinOp(
                  OperationExpression::OpSub,
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)))), Expr::MakeBitVector(1, 0x1))), nullptr)
        );
        /* semantic: op0.val = res */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("res", VariableExpression::Use)));
        /* semantic: free_var('count') */
        AllExpr.push_back(Expr::MakeVar("count", VariableExpression::Free));
        /* semantic: free_var('res') */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x7:
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Sar);
      if (Operand__Ev_CL(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: alloc_var('count', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("count", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: count = bit_cast(op1.val, int(op0.bit, op0.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, rInsn.GetOperand(1), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()))));
        /* semantic: call('count_mask') */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x40),
          Expr::MakeAssign(
            Expr::MakeVar("count", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeVar("count", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3f))),
          Expr::MakeAssign(
            Expr::MakeVar("count", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeVar("count", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1f)))));
        /* semantic: res = ars(op0.val, count) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpArs, rInsn.GetOperand(0), Expr::MakeVar("count", VariableExpression::Use))));
        /* semantic: if __expr and count != int(op0.bit, 0):
          if __expr and count > int(op0.bit, op0.bit): cf.id = bit_cast(op0.val >> (int(op0.bit, op0.bit) - int(op0.bit, 1)), int1(1))
          else: cf.id = bit_cast(op0.val >> (count - int(op0.bit, 1)), int1(1))
          call('sign_flag')
          call('zero_flag')
          call('parity_flag') */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondNe,
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeBind({
          Expr::MakeIfElseCond(
            ConditionExpression::CondUgt,
            Expr::MakeVar("count", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
            Expr::MakeAssign(
              Expr::MakeId(X86_FlCf, &m_CpuInfo),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                rInsn.GetOperand(0),
                Expr::MakeBinOp(
                  OperationExpression::OpSub,
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))),
            Expr::MakeAssign(
              Expr::MakeId(X86_FlCf, &m_CpuInfo),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                rInsn.GetOperand(0),
                Expr::MakeBinOp(
                  OperationExpression::OpSub,
                  Expr::MakeVar("count", VariableExpression::Use),
                  Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1)))),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlSf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBinOp(
                OperationExpression::OpSub,
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlZf, &m_CpuInfo),
            Expr::MakeTernaryCond(ConditionExpression::CondEq,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
            Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))),
          Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)),
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBitVector(1, 0x1)),
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeVar("pf_tmp", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
                OperationExpression::OpLrs,
                Expr::MakeVar("res", VariableExpression::Use),
                Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
          ,
          Expr::MakeAssign(
            Expr::MakeId(X86_FlPf, &m_CpuInfo),
            Expr::MakeVar("pf_tmp", VariableExpression::Use)),
          Expr::MakeVar("pf_tmp", VariableExpression::Free)})
        , nullptr)
        );
        /* semantic: if __expr and count == int(op0.bit, 1):
          of.id = int1(0) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeVar("count", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlOf, &m_CpuInfo),
            Expr::MakeBitVector(1, 0x0)), nullptr)
        );
        /* semantic: op0.val = res */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("res", VariableExpression::Use)));
        /* semantic: free_var('count') */
        AllExpr.push_back(Expr::MakeVar("count", VariableExpression::Free));
        /* semantic: free_var('res') */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    default:
      return false;
    }
}

/** instruction
 * mnemonic: aam
 * clear_flags: ['of', 'af', 'cf']
 * semantic: alloc_var('tmp_al', al.bit);
alloc_var('pf_tmp', pf.bit);
tmp_al = al.id;
ah.id = tmp_al / op0.val;
al.id = tmp_al % op0.val;
# Start updating ZF
if __expr and al.id == int(al.bit, 0): zf.id = int1(1)
else: zf.id = int1(0);
# Start updating SF
sf.id = bit_cast(al.id >> (int(al.bit, al.bit) - int(al.bit, 1)), int1(1));
# Start updating PF
pf_tmp = int1(1);
pf_tmp ^= bit_cast(al.id >> int(al.bit, 0), int1(1));
pf_tmp ^= bit_cast(al.id >> int(al.bit, 1), int1(1));
pf_tmp ^= bit_cast(al.id >> int(al.bit, 2), int1(1));
pf_tmp ^= bit_cast(al.id >> int(al.bit, 3), int1(1));
pf_tmp ^= bit_cast(al.id >> int(al.bit, 4), int1(1));
pf_tmp ^= bit_cast(al.id >> int(al.bit, 5), int1(1));
pf_tmp ^= bit_cast(al.id >> int(al.bit, 6), int1(1));
pf_tmp ^= bit_cast(al.id >> int(al.bit, 7), int1(1));
pf.id = pf_tmp;
free_var('pf_tmp');
free_var('tmp_al');

 * attr: ['nm64']
 * operand: ['Ib']
 * opcode: d4
 * update_flags: ['sf', 'zf', 'pf']
**/
bool X86Architecture::Table_1_d4(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    if (Mode != X86_Bit_64)
    {
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Aam);
      if (Operand__Ib(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        rInsn.SetUpdatedFlags(X86_FlSf | X86_FlZf | X86_FlPf);
        rInsn.SetClearedFlags(X86_FlOf | X86_FlAf | X86_FlCf);
        AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlOf, &m_CpuInfo), Expr::MakeBoolean(false)));
        AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlAf, &m_CpuInfo), Expr::MakeBoolean(false)));
        AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlCf, &m_CpuInfo), Expr::MakeBoolean(false)));
        /* semantic: alloc_var('tmp_al', al.bit) */
        AllExpr.push_back(Expr::MakeVar("tmp_al", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_Reg_Al)));
        /* semantic: alloc_var('pf_tmp', pf.bit) */
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
        /* semantic: tmp_al = al.id */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("tmp_al", VariableExpression::Use),
          Expr::MakeId(X86_Reg_Al, &m_CpuInfo)));
        /* semantic: ah.id = tmp_al / op0.val */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_Reg_Ah, &m_CpuInfo),
          Expr::MakeBinOp(
            OperationExpression::OpUDiv,
            Expr::MakeVar("tmp_al", VariableExpression::Use),
            rInsn.GetOperand(0))));
        /* semantic: al.id = tmp_al % op0.val */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_Reg_Al, &m_CpuInfo),
          Expr::MakeBinOp(
            OperationExpression::OpUMod,
            Expr::MakeVar("tmp_al", VariableExpression::Use),
            rInsn.GetOperand(0))));
        /* semantic: # Start updating ZF
        if __expr and al.id == int(al.bit, 0): zf.id = int1(1)
        else: zf.id = int1(0) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeId(X86_Reg_Al, &m_CpuInfo),
          Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(X86_Reg_Al), 0x0),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlZf, &m_CpuInfo),
            Expr::MakeBitVector(1, 0x1)),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlZf, &m_CpuInfo),
            Expr::MakeBitVector(1, 0x0))));
        /* semantic: # Start updating SF
        sf.id = bit_cast(al.id >> (int(al.bit, al.bit) - int(al.bit, 1)), int1(1)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlSf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeId(X86_Reg_Al, &m_CpuInfo),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(X86_Reg_Al), m_CpuInfo.GetSizeOfRegisterInBit(X86_Reg_Al)),
              Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(X86_Reg_Al), 0x1))), Expr::MakeBitVector(1, 0x1))));
        /* semantic: # Start updating PF
        pf_tmp = int1(1) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBitVector(1, 0x1)));
        /* semantic: pf_tmp ^= bit_cast(al.id >> int(al.bit, 0), int1(1)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeId(X86_Reg_Al, &m_CpuInfo),
              Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(X86_Reg_Al), 0x0)), Expr::MakeBitVector(1, 0x1))))
        );
        /* semantic: pf_tmp ^= bit_cast(al.id >> int(al.bit, 1), int1(1)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeId(X86_Reg_Al, &m_CpuInfo),
              Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(X86_Reg_Al), 0x1)), Expr::MakeBitVector(1, 0x1))))
        );
        /* semantic: pf_tmp ^= bit_cast(al.id >> int(al.bit, 2), int1(1)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeId(X86_Reg_Al, &m_CpuInfo),
              Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(X86_Reg_Al), 0x2)), Expr::MakeBitVector(1, 0x1))))
        );
        /* semantic: pf_tmp ^= bit_cast(al.id >> int(al.bit, 3), int1(1)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeId(X86_Reg_Al, &m_CpuInfo),
              Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(X86_Reg_Al), 0x3)), Expr::MakeBitVector(1, 0x1))))
        );
        /* semantic: pf_tmp ^= bit_cast(al.id >> int(al.bit, 4), int1(1)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeId(X86_Reg_Al, &m_CpuInfo),
              Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(X86_Reg_Al), 0x4)), Expr::MakeBitVector(1, 0x1))))
        );
        /* semantic: pf_tmp ^= bit_cast(al.id >> int(al.bit, 5), int1(1)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeId(X86_Reg_Al, &m_CpuInfo),
              Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(X86_Reg_Al), 0x5)), Expr::MakeBitVector(1, 0x1))))
        );
        /* semantic: pf_tmp ^= bit_cast(al.id >> int(al.bit, 6), int1(1)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeId(X86_Reg_Al, &m_CpuInfo),
              Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(X86_Reg_Al), 0x6)), Expr::MakeBitVector(1, 0x1))))
        );
        /* semantic: pf_tmp ^= bit_cast(al.id >> int(al.bit, 7), int1(1)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeId(X86_Reg_Al, &m_CpuInfo),
              Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(X86_Reg_Al), 0x7)), Expr::MakeBitVector(1, 0x1))))
        );
        /* semantic: pf.id = pf_tmp */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlPf, &m_CpuInfo),
          Expr::MakeVar("pf_tmp", VariableExpression::Use)));
        /* semantic: free_var('pf_tmp') */
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
        /* semantic: free_var('tmp_al') */
        AllExpr.push_back(Expr::MakeVar("tmp_al", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    else
      return false;
}

/** instruction
 * mnemonic: aad
 * clear_flags: ['of', 'af', 'cf']
 * semantic: alloc_var('tmp_al', al.bit);
alloc_var('tmp_ah', ah.bit);
alloc_var('pf_tmp', pf.bit);
tmp_al = al.id;
tmp_ah = ah.id;
al.id = (tmp_al + (tmp_ah * op0.val)) & int(al.bit, 0xff);
ah.id = int(ah.bit, 0);
# Start updating ZF
if __expr and al.id == int(al.bit, 0): zf.id = int1(1)
else: zf.id = int1(0);
# Start updating SF
sf.id = bit_cast(al.id >> (int(al.bit, al.bit) - int(al.bit, 1)), int1(1));
# Start updating PF
pf_tmp = int1(1);
pf_tmp ^= bit_cast(al.id >> int(al.bit, 0), int1(1));
pf_tmp ^= bit_cast(al.id >> int(al.bit, 1), int1(1));
pf_tmp ^= bit_cast(al.id >> int(al.bit, 2), int1(1));
pf_tmp ^= bit_cast(al.id >> int(al.bit, 3), int1(1));
pf_tmp ^= bit_cast(al.id >> int(al.bit, 4), int1(1));
pf_tmp ^= bit_cast(al.id >> int(al.bit, 5), int1(1));
pf_tmp ^= bit_cast(al.id >> int(al.bit, 6), int1(1));
pf_tmp ^= bit_cast(al.id >> int(al.bit, 7), int1(1));
pf.id = pf_tmp;
free_var('pf_tmp');
free_var('tmp_ah');
free_var('tmp_al');

 * attr: ['nm64']
 * operand: ['Ib']
 * opcode: d5
 * update_flags: ['sf', 'zf', 'pf']
**/
bool X86Architecture::Table_1_d5(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    if (Mode != X86_Bit_64)
    {
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Aad);
      if (Operand__Ib(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        rInsn.SetUpdatedFlags(X86_FlSf | X86_FlZf | X86_FlPf);
        rInsn.SetClearedFlags(X86_FlOf | X86_FlAf | X86_FlCf);
        AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlOf, &m_CpuInfo), Expr::MakeBoolean(false)));
        AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlAf, &m_CpuInfo), Expr::MakeBoolean(false)));
        AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlCf, &m_CpuInfo), Expr::MakeBoolean(false)));
        /* semantic: alloc_var('tmp_al', al.bit) */
        AllExpr.push_back(Expr::MakeVar("tmp_al", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_Reg_Al)));
        /* semantic: alloc_var('tmp_ah', ah.bit) */
        AllExpr.push_back(Expr::MakeVar("tmp_ah", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_Reg_Ah)));
        /* semantic: alloc_var('pf_tmp', pf.bit) */
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
        /* semantic: tmp_al = al.id */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("tmp_al", VariableExpression::Use),
          Expr::MakeId(X86_Reg_Al, &m_CpuInfo)));
        /* semantic: tmp_ah = ah.id */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("tmp_ah", VariableExpression::Use),
          Expr::MakeId(X86_Reg_Ah, &m_CpuInfo)));
        /* semantic: al.id = (tmp_al + (tmp_ah * op0.val)) & int(al.bit, 0xff) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_Reg_Al, &m_CpuInfo),
          Expr::MakeBinOp(
            OperationExpression::OpAnd,
            Expr::MakeBinOp(
              OperationExpression::OpAdd,
              Expr::MakeVar("tmp_al", VariableExpression::Use),
              Expr::MakeBinOp(
                OperationExpression::OpMul,
                Expr::MakeVar("tmp_ah", VariableExpression::Use),
                rInsn.GetOperand(0))),
            Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(X86_Reg_Al), 0xff))));
        /* semantic: ah.id = int(ah.bit, 0) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_Reg_Ah, &m_CpuInfo),
          Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(X86_Reg_Ah), 0x0)));
        /* semantic: # Start updating ZF
        if __expr and al.id == int(al.bit, 0): zf.id = int1(1)
        else: zf.id = int1(0) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeId(X86_Reg_Al, &m_CpuInfo),
          Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(X86_Reg_Al), 0x0),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlZf, &m_CpuInfo),
            Expr::MakeBitVector(1, 0x1)),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlZf, &m_CpuInfo),
            Expr::MakeBitVector(1, 0x0))));
        /* semantic: # Start updating SF
        sf.id = bit_cast(al.id >> (int(al.bit, al.bit) - int(al.bit, 1)), int1(1)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlSf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeId(X86_Reg_Al, &m_CpuInfo),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(X86_Reg_Al), m_CpuInfo.GetSizeOfRegisterInBit(X86_Reg_Al)),
              Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(X86_Reg_Al), 0x1))), Expr::MakeBitVector(1, 0x1))));
        /* semantic: # Start updating PF
        pf_tmp = int1(1) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBitVector(1, 0x1)));
        /* semantic: pf_tmp ^= bit_cast(al.id >> int(al.bit, 0), int1(1)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeId(X86_Reg_Al, &m_CpuInfo),
              Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(X86_Reg_Al), 0x0)), Expr::MakeBitVector(1, 0x1))))
        );
        /* semantic: pf_tmp ^= bit_cast(al.id >> int(al.bit, 1), int1(1)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeId(X86_Reg_Al, &m_CpuInfo),
              Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(X86_Reg_Al), 0x1)), Expr::MakeBitVector(1, 0x1))))
        );
        /* semantic: pf_tmp ^= bit_cast(al.id >> int(al.bit, 2), int1(1)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeId(X86_Reg_Al, &m_CpuInfo),
              Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(X86_Reg_Al), 0x2)), Expr::MakeBitVector(1, 0x1))))
        );
        /* semantic: pf_tmp ^= bit_cast(al.id >> int(al.bit, 3), int1(1)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeId(X86_Reg_Al, &m_CpuInfo),
              Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(X86_Reg_Al), 0x3)), Expr::MakeBitVector(1, 0x1))))
        );
        /* semantic: pf_tmp ^= bit_cast(al.id >> int(al.bit, 4), int1(1)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeId(X86_Reg_Al, &m_CpuInfo),
              Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(X86_Reg_Al), 0x4)), Expr::MakeBitVector(1, 0x1))))
        );
        /* semantic: pf_tmp ^= bit_cast(al.id >> int(al.bit, 5), int1(1)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeId(X86_Reg_Al, &m_CpuInfo),
              Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(X86_Reg_Al), 0x5)), Expr::MakeBitVector(1, 0x1))))
        );
        /* semantic: pf_tmp ^= bit_cast(al.id >> int(al.bit, 6), int1(1)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeId(X86_Reg_Al, &m_CpuInfo),
              Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(X86_Reg_Al), 0x6)), Expr::MakeBitVector(1, 0x1))))
        );
        /* semantic: pf_tmp ^= bit_cast(al.id >> int(al.bit, 7), int1(1)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeId(X86_Reg_Al, &m_CpuInfo),
              Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(X86_Reg_Al), 0x7)), Expr::MakeBitVector(1, 0x1))))
        );
        /* semantic: pf.id = pf_tmp */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlPf, &m_CpuInfo),
          Expr::MakeVar("pf_tmp", VariableExpression::Use)));
        /* semantic: free_var('pf_tmp') */
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
        /* semantic: free_var('tmp_ah') */
        AllExpr.push_back(Expr::MakeVar("tmp_ah", VariableExpression::Free));
        /* semantic: free_var('tmp_al') */
        AllExpr.push_back(Expr::MakeVar("tmp_al", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    else
      return false;
}

/** instruction
 * mnemonic: salc
 * test_flags: ['cf']
 * opcode: d6
 * attr: ['nm64']
**/
bool X86Architecture::Table_1_d6(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    if (Mode != X86_Bit_64)
    {
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Salc);
      {
        Expression::LSPType AllExpr;
        rInsn.SetTestedFlags(X86_FlCf);
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    else
      return false;
}

/** instruction
 * mnemonic: xlat
 * opcode: d7
**/
bool X86Architecture::Table_1_d7(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Size()++;
    rInsn.SetOpcode(X86_Opcode_Xlat);
    return true;
}

/** instruction
 * opcode: d8
 * reference: fpu0
**/
bool X86Architecture::Table_1_d8(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    u8 ModRmByte;
    if (!rBinStrm.Read(Offset, ModRmByte))
      return false;

    if (ModRmByte < 0xc0)
    {
      u8 ModRmByte;
      if (!rBinStrm.Read(Offset, ModRmByte))
        return false;

      x86::ModRM ModRm(ModRmByte);
      switch (ModRm.Reg())
      {
      case 0x0:
        rInsn.Size()++;
        rInsn.SetOpcode(X86_Opcode_Fadd);
        if (Operand__m32fp(rBinStrm, Offset, rInsn, Mode) == false)
        {
          return false;
        }
        return true;
      case 0x1:
        rInsn.Size()++;
        rInsn.SetOpcode(X86_Opcode_Fmul);
        if (Operand__m32fp(rBinStrm, Offset, rInsn, Mode) == false)
        {
          return false;
        }
        return true;
      case 0x2:
        rInsn.Size()++;
        rInsn.SetOpcode(X86_Opcode_Fcom);
        if (Operand__m32fp(rBinStrm, Offset, rInsn, Mode) == false)
        {
          return false;
        }
        return true;
      case 0x3:
        rInsn.Size()++;
        rInsn.SetOpcode(X86_Opcode_Fcomp);
        if (Operand__m32fp(rBinStrm, Offset, rInsn, Mode) == false)
        {
          return false;
        }
        return true;
      case 0x4:
        rInsn.Size()++;
        rInsn.SetOpcode(X86_Opcode_Fsub);
        if (Operand__m32fp(rBinStrm, Offset, rInsn, Mode) == false)
        {
          return false;
        }
        return true;
      case 0x5:
        rInsn.Size()++;
        rInsn.SetOpcode(X86_Opcode_Fsubr);
        if (Operand__m32fp(rBinStrm, Offset, rInsn, Mode) == false)
        {
          return false;
        }
        return true;
      case 0x6:
        rInsn.Size()++;
        rInsn.SetOpcode(X86_Opcode_Fdiv);
        if (Operand__m32fp(rBinStrm, Offset, rInsn, Mode) == false)
        {
          return false;
        }
        return true;
      case 0x7:
        rInsn.Size()++;
        rInsn.SetOpcode(X86_Opcode_Fdivr);
        if (Operand__m32fp(rBinStrm, Offset, rInsn, Mode) == false)
        {
          return false;
        }
        return true;
      default:
        return false;
      }
    }
    else
    {
      u8 Opcode;
      if (!rBinStrm.Read(Offset, Opcode))
        return false;

      rInsn.Size()++;
      if (Opcode + 1 > sizeof(m_Table_fp1))
        return false;
      return (this->*m_Table_fp1[Opcode- 0xc0])(rBinStrm, Offset + 1, rInsn, Mode);
    }
}

/** instruction
 * opcode: d9
 * reference: fpu1
**/
bool X86Architecture::Table_1_d9(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    u8 ModRmByte;
    if (!rBinStrm.Read(Offset, ModRmByte))
      return false;

    if (ModRmByte < 0xc0)
    {
      u8 ModRmByte;
      if (!rBinStrm.Read(Offset, ModRmByte))
        return false;

      x86::ModRM ModRm(ModRmByte);
      switch (ModRm.Reg())
      {
      case 0x0:
        rInsn.Size()++;
        rInsn.SetOpcode(X86_Opcode_Fld);
        if (Operand__m32fp(rBinStrm, Offset, rInsn, Mode) == false)
        {
          return false;
        }
        return true;
      case 0x1:
        return false;
      case 0x2:
        rInsn.Size()++;
        rInsn.SetOpcode(X86_Opcode_Fst);
        if (Operand__m32fp(rBinStrm, Offset, rInsn, Mode) == false)
        {
          return false;
        }
        return true;
      case 0x3:
        rInsn.Size()++;
        rInsn.SetOpcode(X86_Opcode_Fstp);
        if (Operand__m32fp(rBinStrm, Offset, rInsn, Mode) == false)
        {
          return false;
        }
        return true;
      case 0x4:
        rInsn.Size()++;
        rInsn.SetOpcode(X86_Opcode_Fldenv);
        if (Operand__M(rBinStrm, Offset, rInsn, Mode) == false)
        {
          return false;
        }
        return true;
      case 0x5:
        rInsn.Size()++;
        rInsn.SetOpcode(X86_Opcode_Fldcw);
        if (Operand__Mw(rBinStrm, Offset, rInsn, Mode) == false)
        {
          return false;
        }
        return true;
      case 0x6:
        rInsn.Size()++;
        rInsn.SetOpcode(X86_Opcode_Fnstenv);
        if (Operand__M(rBinStrm, Offset, rInsn, Mode) == false)
        {
          return false;
        }
        return true;
      case 0x7:
        rInsn.Size()++;
        rInsn.SetOpcode(X86_Opcode_Fnstcw);
        if (Operand__Mw(rBinStrm, Offset, rInsn, Mode) == false)
        {
          return false;
        }
        return true;
      default:
        return false;
      }
    }
    else
    {
      u8 Opcode;
      if (!rBinStrm.Read(Offset, Opcode))
        return false;

      rInsn.Size()++;
      if (Opcode + 1 > sizeof(m_Table_fp2))
        return false;
      return (this->*m_Table_fp2[Opcode- 0xc0])(rBinStrm, Offset + 1, rInsn, Mode);
    }
}

/** instruction
 * opcode: da
 * reference: fpu2
**/
bool X86Architecture::Table_1_da(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    u8 ModRmByte;
    if (!rBinStrm.Read(Offset, ModRmByte))
      return false;

    if (ModRmByte < 0xc0)
    {
      u8 ModRmByte;
      if (!rBinStrm.Read(Offset, ModRmByte))
        return false;

      x86::ModRM ModRm(ModRmByte);
      switch (ModRm.Reg())
      {
      case 0x0:
        rInsn.Size()++;
        rInsn.SetOpcode(X86_Opcode_Fiadd);
        if (Operand__m32int(rBinStrm, Offset, rInsn, Mode) == false)
        {
          return false;
        }
        return true;
      case 0x1:
        rInsn.Size()++;
        rInsn.SetOpcode(X86_Opcode_Fimul);
        if (Operand__m32int(rBinStrm, Offset, rInsn, Mode) == false)
        {
          return false;
        }
        return true;
      case 0x2:
        rInsn.Size()++;
        rInsn.SetOpcode(X86_Opcode_Ficom);
        if (Operand__m32int(rBinStrm, Offset, rInsn, Mode) == false)
        {
          return false;
        }
        return true;
      case 0x3:
        rInsn.Size()++;
        rInsn.SetOpcode(X86_Opcode_Ficomp);
        if (Operand__m32int(rBinStrm, Offset, rInsn, Mode) == false)
        {
          return false;
        }
        return true;
      case 0x4:
        rInsn.Size()++;
        rInsn.SetOpcode(X86_Opcode_Fisub);
        if (Operand__m32int(rBinStrm, Offset, rInsn, Mode) == false)
        {
          return false;
        }
        return true;
      case 0x5:
        rInsn.Size()++;
        rInsn.SetOpcode(X86_Opcode_Fisubr);
        if (Operand__m32int(rBinStrm, Offset, rInsn, Mode) == false)
        {
          return false;
        }
        return true;
      case 0x6:
        rInsn.Size()++;
        rInsn.SetOpcode(X86_Opcode_Fidiv);
        if (Operand__m32int(rBinStrm, Offset, rInsn, Mode) == false)
        {
          return false;
        }
        return true;
      case 0x7:
        rInsn.Size()++;
        rInsn.SetOpcode(X86_Opcode_Fidivr);
        if (Operand__m32int(rBinStrm, Offset, rInsn, Mode) == false)
        {
          return false;
        }
        return true;
      default:
        return false;
      }
    }
    else
    {
      u8 Opcode;
      if (!rBinStrm.Read(Offset, Opcode))
        return false;

      rInsn.Size()++;
      if (Opcode + 1 > sizeof(m_Table_fp3))
        return false;
      return (this->*m_Table_fp3[Opcode- 0xc0])(rBinStrm, Offset + 1, rInsn, Mode);
    }
}

/** instruction
 * opcode: db
 * reference: fpu3
**/
bool X86Architecture::Table_1_db(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    u8 ModRmByte;
    if (!rBinStrm.Read(Offset, ModRmByte))
      return false;

    if (ModRmByte < 0xc0)
    {
      u8 ModRmByte;
      if (!rBinStrm.Read(Offset, ModRmByte))
        return false;

      x86::ModRM ModRm(ModRmByte);
      switch (ModRm.Reg())
      {
      case 0x0:
        rInsn.Size()++;
        rInsn.SetOpcode(X86_Opcode_Fild);
        if (Operand__m32int(rBinStrm, Offset, rInsn, Mode) == false)
        {
          return false;
        }
        return true;
      case 0x1:
        rInsn.Size()++;
        rInsn.SetOpcode(X86_Opcode_Fisttp);
        if (Operand__m32int(rBinStrm, Offset, rInsn, Mode) == false)
        {
          return false;
        }
        return true;
      case 0x2:
        rInsn.Size()++;
        rInsn.SetOpcode(X86_Opcode_Fist);
        if (Operand__m32int(rBinStrm, Offset, rInsn, Mode) == false)
        {
          return false;
        }
        return true;
      case 0x3:
        rInsn.Size()++;
        rInsn.SetOpcode(X86_Opcode_Fistp);
        if (Operand__m32int(rBinStrm, Offset, rInsn, Mode) == false)
        {
          return false;
        }
        return true;
      case 0x4:
        return false;
      case 0x5:
        rInsn.Size()++;
        rInsn.SetOpcode(X86_Opcode_Fld);
        if (Operand__m80fp(rBinStrm, Offset, rInsn, Mode) == false)
        {
          return false;
        }
        return true;
      case 0x6:
        return false;
      case 0x7:
        rInsn.Size()++;
        rInsn.SetOpcode(X86_Opcode_Fstp);
        if (Operand__m80fp(rBinStrm, Offset, rInsn, Mode) == false)
        {
          return false;
        }
        return true;
      default:
        return false;
      }
    }
    else
    {
      u8 Opcode;
      if (!rBinStrm.Read(Offset, Opcode))
        return false;

      rInsn.Size()++;
      if (Opcode + 1 > sizeof(m_Table_fp4))
        return false;
      return (this->*m_Table_fp4[Opcode- 0xc0])(rBinStrm, Offset + 1, rInsn, Mode);
    }
}

/** instruction
 * opcode: dc
 * reference: fpu4
**/
bool X86Architecture::Table_1_dc(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    u8 ModRmByte;
    if (!rBinStrm.Read(Offset, ModRmByte))
      return false;

    if (ModRmByte < 0xc0)
    {
      u8 ModRmByte;
      if (!rBinStrm.Read(Offset, ModRmByte))
        return false;

      x86::ModRM ModRm(ModRmByte);
      switch (ModRm.Reg())
      {
      case 0x0:
        rInsn.Size()++;
        rInsn.SetOpcode(X86_Opcode_Fadd);
        if (Operand__m64fp(rBinStrm, Offset, rInsn, Mode) == false)
        {
          return false;
        }
        return true;
      case 0x1:
        rInsn.Size()++;
        rInsn.SetOpcode(X86_Opcode_Fmul);
        if (Operand__m64fp(rBinStrm, Offset, rInsn, Mode) == false)
        {
          return false;
        }
        return true;
      case 0x2:
        rInsn.Size()++;
        rInsn.SetOpcode(X86_Opcode_Fcom);
        if (Operand__m64fp(rBinStrm, Offset, rInsn, Mode) == false)
        {
          return false;
        }
        return true;
      case 0x3:
        rInsn.Size()++;
        rInsn.SetOpcode(X86_Opcode_Fcomp);
        if (Operand__m64fp(rBinStrm, Offset, rInsn, Mode) == false)
        {
          return false;
        }
        return true;
      case 0x4:
        rInsn.Size()++;
        rInsn.SetOpcode(X86_Opcode_Fsub);
        if (Operand__m64fp(rBinStrm, Offset, rInsn, Mode) == false)
        {
          return false;
        }
        return true;
      case 0x5:
        rInsn.Size()++;
        rInsn.SetOpcode(X86_Opcode_Fsubr);
        if (Operand__m64fp(rBinStrm, Offset, rInsn, Mode) == false)
        {
          return false;
        }
        return true;
      case 0x6:
        rInsn.Size()++;
        rInsn.SetOpcode(X86_Opcode_Fdiv);
        if (Operand__m64fp(rBinStrm, Offset, rInsn, Mode) == false)
        {
          return false;
        }
        return true;
      case 0x7:
        rInsn.Size()++;
        rInsn.SetOpcode(X86_Opcode_Fdivr);
        if (Operand__m64fp(rBinStrm, Offset, rInsn, Mode) == false)
        {
          return false;
        }
        return true;
      default:
        return false;
      }
    }
    else
    {
      u8 Opcode;
      if (!rBinStrm.Read(Offset, Opcode))
        return false;

      rInsn.Size()++;
      if (Opcode + 1 > sizeof(m_Table_fp5))
        return false;
      return (this->*m_Table_fp5[Opcode- 0xc0])(rBinStrm, Offset + 1, rInsn, Mode);
    }
}

/** instruction
 * opcode: dd
 * reference: fpu5
**/
bool X86Architecture::Table_1_dd(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    u8 ModRmByte;
    if (!rBinStrm.Read(Offset, ModRmByte))
      return false;

    if (ModRmByte < 0xc0)
    {
      u8 ModRmByte;
      if (!rBinStrm.Read(Offset, ModRmByte))
        return false;

      x86::ModRM ModRm(ModRmByte);
      switch (ModRm.Reg())
      {
      case 0x0:
        rInsn.Size()++;
        rInsn.SetOpcode(X86_Opcode_Fld);
        if (Operand__m64fp(rBinStrm, Offset, rInsn, Mode) == false)
        {
          return false;
        }
        return true;
      case 0x1:
        rInsn.Size()++;
        rInsn.SetOpcode(X86_Opcode_Fisttp);
        if (Operand__m64int(rBinStrm, Offset, rInsn, Mode) == false)
        {
          return false;
        }
        return true;
      case 0x2:
        rInsn.Size()++;
        rInsn.SetOpcode(X86_Opcode_Fst);
        if (Operand__m64fp(rBinStrm, Offset, rInsn, Mode) == false)
        {
          return false;
        }
        return true;
      case 0x3:
        rInsn.Size()++;
        rInsn.SetOpcode(X86_Opcode_Fstp);
        if (Operand__m64fp(rBinStrm, Offset, rInsn, Mode) == false)
        {
          return false;
        }
        return true;
      case 0x4:
        rInsn.Size()++;
        rInsn.SetOpcode(X86_Opcode_Frstor);
        if (Operand__M(rBinStrm, Offset, rInsn, Mode) == false)
        {
          return false;
        }
        return true;
      case 0x5:
        return false;
      case 0x6:
        rInsn.Size()++;
        rInsn.SetOpcode(X86_Opcode_Fnsave);
        if (Operand__M(rBinStrm, Offset, rInsn, Mode) == false)
        {
          return false;
        }
        return true;
      case 0x7:
        rInsn.Size()++;
        rInsn.SetOpcode(X86_Opcode_Fnstsw);
        if (Operand__Mw(rBinStrm, Offset, rInsn, Mode) == false)
        {
          return false;
        }
        return true;
      default:
        return false;
      }
    }
    else
    {
      u8 Opcode;
      if (!rBinStrm.Read(Offset, Opcode))
        return false;

      rInsn.Size()++;
      if (Opcode + 1 > sizeof(m_Table_fp6))
        return false;
      return (this->*m_Table_fp6[Opcode- 0xc0])(rBinStrm, Offset + 1, rInsn, Mode);
    }
}

/** instruction
 * opcode: de
 * reference: fpu6
**/
bool X86Architecture::Table_1_de(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    u8 ModRmByte;
    if (!rBinStrm.Read(Offset, ModRmByte))
      return false;

    if (ModRmByte < 0xc0)
    {
      u8 ModRmByte;
      if (!rBinStrm.Read(Offset, ModRmByte))
        return false;

      x86::ModRM ModRm(ModRmByte);
      switch (ModRm.Reg())
      {
      case 0x0:
        rInsn.Size()++;
        rInsn.SetOpcode(X86_Opcode_Fiadd);
        if (Operand__m16int(rBinStrm, Offset, rInsn, Mode) == false)
        {
          return false;
        }
        return true;
      case 0x1:
        rInsn.Size()++;
        rInsn.SetOpcode(X86_Opcode_Fimul);
        if (Operand__m16int(rBinStrm, Offset, rInsn, Mode) == false)
        {
          return false;
        }
        return true;
      case 0x2:
        rInsn.Size()++;
        rInsn.SetOpcode(X86_Opcode_Ficom);
        if (Operand__m16int(rBinStrm, Offset, rInsn, Mode) == false)
        {
          return false;
        }
        return true;
      case 0x3:
        rInsn.Size()++;
        rInsn.SetOpcode(X86_Opcode_Ficomp);
        if (Operand__m16int(rBinStrm, Offset, rInsn, Mode) == false)
        {
          return false;
        }
        return true;
      case 0x4:
        rInsn.Size()++;
        rInsn.SetOpcode(X86_Opcode_Fisub);
        if (Operand__m16int(rBinStrm, Offset, rInsn, Mode) == false)
        {
          return false;
        }
        return true;
      case 0x5:
        rInsn.Size()++;
        rInsn.SetOpcode(X86_Opcode_Fisubr);
        if (Operand__m16int(rBinStrm, Offset, rInsn, Mode) == false)
        {
          return false;
        }
        return true;
      case 0x6:
        rInsn.Size()++;
        rInsn.SetOpcode(X86_Opcode_Fidiv);
        if (Operand__m16int(rBinStrm, Offset, rInsn, Mode) == false)
        {
          return false;
        }
        return true;
      case 0x7:
        rInsn.Size()++;
        rInsn.SetOpcode(X86_Opcode_Fidivr);
        if (Operand__m16int(rBinStrm, Offset, rInsn, Mode) == false)
        {
          return false;
        }
        return true;
      default:
        return false;
      }
    }
    else
    {
      u8 Opcode;
      if (!rBinStrm.Read(Offset, Opcode))
        return false;

      rInsn.Size()++;
      if (Opcode + 1 > sizeof(m_Table_fp7))
        return false;
      return (this->*m_Table_fp7[Opcode- 0xc0])(rBinStrm, Offset + 1, rInsn, Mode);
    }
}

/** instruction
 * opcode: df
 * reference: fpu7
**/
bool X86Architecture::Table_1_df(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    u8 ModRmByte;
    if (!rBinStrm.Read(Offset, ModRmByte))
      return false;

    if (ModRmByte < 0xc0)
    {
      u8 ModRmByte;
      if (!rBinStrm.Read(Offset, ModRmByte))
        return false;

      x86::ModRM ModRm(ModRmByte);
      switch (ModRm.Reg())
      {
      case 0x0:
        rInsn.Size()++;
        rInsn.SetOpcode(X86_Opcode_Fild);
        if (Operand__m16int(rBinStrm, Offset, rInsn, Mode) == false)
        {
          return false;
        }
        return true;
      case 0x1:
        rInsn.Size()++;
        rInsn.SetOpcode(X86_Opcode_Fisttp);
        if (Operand__m16int(rBinStrm, Offset, rInsn, Mode) == false)
        {
          return false;
        }
        return true;
      case 0x2:
        rInsn.Size()++;
        rInsn.SetOpcode(X86_Opcode_Fist);
        if (Operand__m16int(rBinStrm, Offset, rInsn, Mode) == false)
        {
          return false;
        }
        return true;
      case 0x3:
        rInsn.Size()++;
        rInsn.SetOpcode(X86_Opcode_Fistp);
        if (Operand__m16int(rBinStrm, Offset, rInsn, Mode) == false)
        {
          return false;
        }
        return true;
      case 0x4:
        rInsn.Size()++;
        rInsn.SetOpcode(X86_Opcode_Fbld);
        if (Operand__m80dec(rBinStrm, Offset, rInsn, Mode) == false)
        {
          return false;
        }
        return true;
      case 0x5:
        rInsn.Size()++;
        rInsn.SetOpcode(X86_Opcode_Fild);
        if (Operand__m64int(rBinStrm, Offset, rInsn, Mode) == false)
        {
          return false;
        }
        return true;
      case 0x6:
        rInsn.Size()++;
        rInsn.SetOpcode(X86_Opcode_Fbstp);
        if (Operand__m80bcd(rBinStrm, Offset, rInsn, Mode) == false)
        {
          return false;
        }
        return true;
      case 0x7:
        rInsn.Size()++;
        rInsn.SetOpcode(X86_Opcode_Fistp);
        if (Operand__m64int(rBinStrm, Offset, rInsn, Mode) == false)
        {
          return false;
        }
        return true;
      default:
        return false;
      }
    }
    else
    {
      u8 Opcode;
      if (!rBinStrm.Read(Offset, Opcode))
        return false;

      rInsn.Size()++;
      if (Opcode + 1 > sizeof(m_Table_fp8))
        return false;
      return (this->*m_Table_fp8[Opcode- 0xc0])(rBinStrm, Offset + 1, rInsn, Mode);
    }
}

/** instruction
 * mnemonic: loopnz
 * operand: ['Jb']
 * test_flags: ['zf']
 * semantic: cnt.id -= int(cnt.bit, 1);
if __expr and (zf.id ^ int(cnt.bit, 1) & cnt.id) != int(cnt.bit, 0):
  program.id = op0.val;

 * operation_type: ['jmp', 'cond']
 * opcode: e0
**/
bool X86Architecture::Table_1_e0(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Size()++;
    rInsn.SetOpcode(X86_Opcode_Loopnz);
    rInsn.SubType() |= Instruction::JumpType | Instruction::ConditionalType;
    if (Operand__Jb(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    {
      Expression::LSPType AllExpr;
      rInsn.SetTestedFlags(X86_FlZf);
      /* semantic: cnt.id -= int(cnt.bit, 1) */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::CounterRegister, rInsn.GetMode()), &m_CpuInfo),
        Expr::MakeBinOp(
          OperationExpression::OpSub,
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::CounterRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::CounterRegister, rInsn.GetMode())), 0x1)))
      );
      /* semantic: if __expr and (zf.id ^ int(cnt.bit, 1) & cnt.id) != int(cnt.bit, 0):
        program.id = op0.val */
      AllExpr.push_back(Expr::MakeIfElseCond(
        ConditionExpression::CondNe,
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeId(X86_FlZf, &m_CpuInfo),
          Expr::MakeBinOp(
            OperationExpression::OpAnd,
            Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::CounterRegister, rInsn.GetMode())), 0x1),
            Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::CounterRegister, rInsn.GetMode()), &m_CpuInfo))),
        Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::CounterRegister, rInsn.GetMode())), 0x0),
        Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::ProgramPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          rInsn.GetOperand(0)), nullptr)
      );
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instruction
 * mnemonic: loopz
 * operand: ['Jb']
 * test_flags: ['zf']
 * semantic: cnt.id -= int(cnt.bit, 1);
if __expr and (cnt.id | zf.id) != int(cnt.bit, 0):
  program.id = op0.val;

 * operation_type: ['jmp', 'cond']
 * opcode: e1
**/
bool X86Architecture::Table_1_e1(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Size()++;
    rInsn.SetOpcode(X86_Opcode_Loopz);
    rInsn.SubType() |= Instruction::JumpType | Instruction::ConditionalType;
    if (Operand__Jb(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    {
      Expression::LSPType AllExpr;
      rInsn.SetTestedFlags(X86_FlZf);
      /* semantic: cnt.id -= int(cnt.bit, 1) */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::CounterRegister, rInsn.GetMode()), &m_CpuInfo),
        Expr::MakeBinOp(
          OperationExpression::OpSub,
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::CounterRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::CounterRegister, rInsn.GetMode())), 0x1)))
      );
      /* semantic: if __expr and (cnt.id | zf.id) != int(cnt.bit, 0):
        program.id = op0.val */
      AllExpr.push_back(Expr::MakeIfElseCond(
        ConditionExpression::CondNe,
        Expr::MakeBinOp(
          OperationExpression::OpOr,
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::CounterRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeId(X86_FlZf, &m_CpuInfo)),
        Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::CounterRegister, rInsn.GetMode())), 0x0),
        Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::ProgramPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          rInsn.GetOperand(0)), nullptr)
      );
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instruction
 * mnemonic: loop
 * operand: ['Jb']
 * opcode: e2
 * operation_type: ['jmp', 'cond']
 * semantic: cnt.id -= int(cnt.bit, 1);
if __expr and cnt.id != int(cnt.bit, 0):
  program.id = op0.val;

**/
bool X86Architecture::Table_1_e2(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Size()++;
    rInsn.SetOpcode(X86_Opcode_Loop);
    rInsn.SubType() |= Instruction::JumpType | Instruction::ConditionalType;
    if (Operand__Jb(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    {
      Expression::LSPType AllExpr;
      /* semantic: cnt.id -= int(cnt.bit, 1) */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::CounterRegister, rInsn.GetMode()), &m_CpuInfo),
        Expr::MakeBinOp(
          OperationExpression::OpSub,
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::CounterRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::CounterRegister, rInsn.GetMode())), 0x1)))
      );
      /* semantic: if __expr and cnt.id != int(cnt.bit, 0):
        program.id = op0.val */
      AllExpr.push_back(Expr::MakeIfElseCond(
        ConditionExpression::CondNe,
        Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::CounterRegister, rInsn.GetMode()), &m_CpuInfo),
        Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::CounterRegister, rInsn.GetMode())), 0x0),
        Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::ProgramPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          rInsn.GetOperand(0)), nullptr)
      );
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instructions
 * opcode: e3
 *
 * mnemonic: jcxz
 * operand: ['Jb']
 * semantic: if __expr and cnt.id == int(cnt.bit, 0):
  program.id = op0.val;

 * operation_type: ['jmp', 'cond']
 *
 * mnemonic: jecxz
 * operand: ['Jb']
 * semantic: if __expr and cnt.id == int(cnt.bit, 0):
  program.id = op0.val;

 * operation_type: ['jmp', 'cond']
 * attr: ['na16']
 *
 * mnemonic: jrcxz
 * operand: ['Jb']
 * semantic: if __expr and cnt.id == int(cnt.bit, 0):
  program.id = op0.val;

 * operation_type: ['jmp', 'cond']
 * attr: ['a64']
 *
**/
bool X86Architecture::Table_1_e3(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    if (Mode == X86_Bit_64 && !(rInsn.Prefix() & X86_Prefix_AdSize))
    {
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Jrcxz);
      rInsn.SubType() |= Instruction::JumpType | Instruction::ConditionalType;
      if (Operand__Jb(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: if __expr and cnt.id == int(cnt.bit, 0):
          program.id = op0.val */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::CounterRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::CounterRegister, rInsn.GetMode())), 0x0),
          Expr::MakeAssign(
            Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::ProgramPointerRegister, rInsn.GetMode()), &m_CpuInfo),
            rInsn.GetOperand(0)), nullptr)
        );
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    else if ((Mode == X86_Bit_16 && rInsn.Prefix() & X86_Prefix_AdSize) || (Mode != X86_Bit_16 && !(rInsn.Prefix() & X86_Prefix_AdSize)))
    {
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Jecxz);
      rInsn.SubType() |= Instruction::JumpType | Instruction::ConditionalType;
      if (Operand__Jb(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: if __expr and cnt.id == int(cnt.bit, 0):
          program.id = op0.val */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::CounterRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::CounterRegister, rInsn.GetMode())), 0x0),
          Expr::MakeAssign(
            Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::ProgramPointerRegister, rInsn.GetMode()), &m_CpuInfo),
            rInsn.GetOperand(0)), nullptr)
        );
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    else
    {
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Jcxz);
      rInsn.SubType() |= Instruction::JumpType | Instruction::ConditionalType;
      if (Operand__Jb(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: if __expr and cnt.id == int(cnt.bit, 0):
          program.id = op0.val */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::CounterRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::CounterRegister, rInsn.GetMode())), 0x0),
          Expr::MakeAssign(
            Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::ProgramPointerRegister, rInsn.GetMode()), &m_CpuInfo),
            rInsn.GetOperand(0)), nullptr)
        );
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
}

/** instruction
 * mnemonic: in
 * operand: ['AL', 'Ib']
 * opcode: e4
**/
bool X86Architecture::Table_1_e4(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Size()++;
    rInsn.SetOpcode(X86_Opcode_In);
    if (Operand__AL_Ib(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: in
 * operand: ['eAX', 'Ib']
 * opcode: e5
**/
bool X86Architecture::Table_1_e5(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Size()++;
    rInsn.SetOpcode(X86_Opcode_In);
    if (Operand__eAX_Ib(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: out
 * operand: ['Ib', 'AL']
 * opcode: e6
**/
bool X86Architecture::Table_1_e6(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Size()++;
    rInsn.SetOpcode(X86_Opcode_Out);
    if (Operand__Ib_AL(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: out
 * operand: ['Ib', 'eAX']
 * opcode: e7
**/
bool X86Architecture::Table_1_e7(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Size()++;
    rInsn.SetOpcode(X86_Opcode_Out);
    if (Operand__Ib_eAX(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: call
 * operand: ['Jz']
 * opcode: e8
 * operation_type: ['call']
 * semantic: alloc_var('call_dst', stack.bit);
call_dst = op0.val;
stack.id -= stack.size;
stack.mem = program.id;
program.id = call_dst;
free_var('call_dst');

**/
bool X86Architecture::Table_1_e8(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Size()++;
    rInsn.SetOpcode(X86_Opcode_Call);
    rInsn.SubType() |= Instruction::CallType;
    if (Operand__Jz(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    {
      Expression::LSPType AllExpr;
      /* semantic: alloc_var('call_dst', stack.bit) */
      AllExpr.push_back(Expr::MakeVar("call_dst", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()))));
      /* semantic: call_dst = op0.val */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeVar("call_dst", VariableExpression::Use),
        rInsn.GetOperand(0)));
      /* semantic: stack.id -= stack.size */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
        Expr::MakeBinOp(
          OperationExpression::OpSub,
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeBitVector(
            m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())),
            m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())) / 8)))
      );
      /* semantic: stack.mem = program.id */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeMem(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), nullptr, Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo)),
        Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::ProgramPointerRegister, rInsn.GetMode()), &m_CpuInfo)));
      /* semantic: program.id = call_dst */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::ProgramPointerRegister, rInsn.GetMode()), &m_CpuInfo),
        Expr::MakeVar("call_dst", VariableExpression::Use)));
      /* semantic: free_var('call_dst') */
      AllExpr.push_back(Expr::MakeVar("call_dst", VariableExpression::Free));
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instruction
 * mnemonic: jmp
 * operand: ['Jz']
 * opcode: e9
 * operation_type: ['jmp']
 * semantic: program.id = op0.val;

**/
bool X86Architecture::Table_1_e9(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Size()++;
    rInsn.SetOpcode(X86_Opcode_Jmp);
    rInsn.SubType() |= Instruction::JumpType;
    if (Operand__Jz(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    {
      Expression::LSPType AllExpr;
      /* semantic: program.id = op0.val */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::ProgramPointerRegister, rInsn.GetMode()), &m_CpuInfo),
        rInsn.GetOperand(0)));
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instruction
 * mnemonic: jmp
 * operand: ['Ap']
 * semantic: program.id = op0.val;

 * attr: ['nm64']
 * operation_type: ['jmp']
 * opcode: ea
**/
bool X86Architecture::Table_1_ea(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    if (Mode != X86_Bit_64)
    {
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Jmp);
      rInsn.SubType() |= Instruction::JumpType;
      if (Operand__Ap(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: program.id = op0.val */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::ProgramPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          rInsn.GetOperand(0)));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    }
    else
      return false;
}

/** instruction
 * mnemonic: jmp
 * operand: ['Jb']
 * opcode: eb
 * operation_type: ['jmp']
 * semantic: program.id = op0.val;

**/
bool X86Architecture::Table_1_eb(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Size()++;
    rInsn.SetOpcode(X86_Opcode_Jmp);
    rInsn.SubType() |= Instruction::JumpType;
    if (Operand__Jb(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    {
      Expression::LSPType AllExpr;
      /* semantic: program.id = op0.val */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::ProgramPointerRegister, rInsn.GetMode()), &m_CpuInfo),
        rInsn.GetOperand(0)));
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instruction
 * mnemonic: in
 * operand: ['AL', 'DX']
 * opcode: ec
**/
bool X86Architecture::Table_1_ec(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Size()++;
    rInsn.SetOpcode(X86_Opcode_In);
    if (Operand__AL_DX(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: in
 * operand: ['eAX', 'DX']
 * opcode: ed
**/
bool X86Architecture::Table_1_ed(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Size()++;
    rInsn.SetOpcode(X86_Opcode_In);
    if (Operand__eAX_DX(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: out
 * operand: ['DX', 'AL']
 * opcode: ee
**/
bool X86Architecture::Table_1_ee(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Size()++;
    rInsn.SetOpcode(X86_Opcode_Out);
    if (Operand__DX_AL(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: out
 * operand: ['DX', 'eAX']
 * opcode: ef
**/
bool X86Architecture::Table_1_ef(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Size()++;
    rInsn.SetOpcode(X86_Opcode_Out);
    if (Operand__DX_eAX(rBinStrm, Offset, rInsn, Mode) == false)
    {
      return false;
    }
    return true;
}

/** instruction
 * mnemonic: Lock
 * opcode: f0
 * constraint: pfx1
**/
bool X86Architecture::Table_1_f0(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Size()++;
    rInsn.Prefix() |= X86_Prefix_Lock;
    return Disassemble(rBinStrm, Offset, rInsn, Mode);
}

/** instruction
 * mnemonic: icebp
 * opcode: f1
**/
bool X86Architecture::Table_1_f1(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Size()++;
    rInsn.SetOpcode(X86_Opcode_Icebp);
    return true;
}

/** instruction
 * mnemonic: RepNz
 * test_flags: ['zf']
 * opcode: f2
 * constraint: pfx1
**/
bool X86Architecture::Table_1_f2(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Size()++;
    rInsn.Prefix() |= X86_Prefix_RepNz;
    return Disassemble(rBinStrm, Offset, rInsn, Mode);
}

/** instruction
 * mnemonic: Rep
 * test_flags: ['zf']
 * opcode: f3
 * constraint: pfx1
**/
bool X86Architecture::Table_1_f3(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Size()++;
    rInsn.Prefix() |= X86_Prefix_Rep;
    return Disassemble(rBinStrm, Offset, rInsn, Mode);
}

/** instruction
 * mnemonic: hlt
 * operation_type: ['ret']
 * opcode: f4
**/
bool X86Architecture::Table_1_f4(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Size()++;
    rInsn.SetOpcode(X86_Opcode_Hlt);
    rInsn.SubType() |= Instruction::ReturnType;
    return true;
}

/** instruction
 * mnemonic: cmc
 * opcode: f5
 * update_flags: ['cf']
 * semantic: cf.id = cf.id ^ int1(1);

**/
bool X86Architecture::Table_1_f5(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Size()++;
    rInsn.SetOpcode(X86_Opcode_Cmc);
    {
      Expression::LSPType AllExpr;
      rInsn.SetUpdatedFlags(X86_FlCf);
      /* semantic: cf.id = cf.id ^ int1(1) */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlCf, &m_CpuInfo),
        Expr::MakeBinOp(
          OperationExpression::OpXor,
          Expr::MakeId(X86_FlCf, &m_CpuInfo),
          Expr::MakeBitVector(1, 0x1))));
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** group:
 * mnemonic: test
 * clear_flags: ['af']
 * semantic: alloc_var('res', op0.bit);
res = op0.val & op1.val;
of.id = int1(0)
cf.id = int1(0)
call('sign_flag')
call('zero_flag')
call('parity_flag')
free_var('res');

 * operand: ['Eb', 'Ib']
 * opcode: 00
 * update_flags: ['of', 'sf', 'zf', 'pf', 'cf']
 *
 * mnemonic: test
 * clear_flags: ['af']
 * semantic: alloc_var('res', op0.bit);
res = op0.val & op1.val;
of.id = int1(0)
cf.id = int1(0)
call('sign_flag')
call('zero_flag')
call('parity_flag')
free_var('res');

 * operand: ['Eb', 'Ib']
 * opcode: 01
 * update_flags: ['of', 'sf', 'zf', 'pf', 'cf']
 *
 * mnemonic: not
 * operand: ['Eb']
 * opcode: 02
 * semantic: alloc_var('res', op0.bit);
res = ~op0.val;
op0.val = res;
free_var('res');

 *
 * mnemonic: neg
 * operand: ['Eb']
 * opcode: 03
 * semantic: alloc_var('res', op0.bit);
if __expr and op0.val == int(op0.bit, 0):
  cf.id = int1(0)
else:
  cf.id = int1(1);
res = -op0.val;
of.id = bit_cast((res.val & op0.val) >> (int(op0.bit, op0.bit) - int(op0.bit, 1)), int1(1));
call('sign_flag');
call('zero_flag');
call('parity_flag');
af.id = bit_cast((op0.val ^ res.val) >> (int(op0.bit, 4)), int1(1));
op0.val = res;
free_var('res');

 *
 * mnemonic: mul
 * operand: ['Eb']
 * opcode: 04
 * semantic: alloc_var('upper_res', op0.bit);
alloc_var('mul_res', concat(op0.bit, ignore(' * 2')));
if __code and is_byte_operation:
  ax.id = bit_cast(bit_cast(al.id, int_type16) * bit_cast(op0.val, int_type16), int_type16)
  upper_res = ah.id;
if __code and is_word_operation:
  mul_res = bit_cast(bit_cast(ax.id, int_type32) * bit_cast(op0.val, int_type32), int_type32)
  ax.id = bit_cast(mul_res, int_type16)
  dx.id = bit_cast(mul_res >> int(32, 16), int_type16)
  upper_res = dx.id;
if __code and is_dword_operation:
  mul_res = bit_cast(bit_cast(eax.id, int_type64) * bit_cast(op0.val, int_type64), int_type64)
  eax.id = bit_cast(mul_res, int_type32)
  edx.id = bit_cast(mul_res >> int(64, 32), int_type32)
  upper_res = edx.id;
if __code and is_qword_operation:
  mul_res = bit_cast(bit_cast(rax.id, int_type128) * bit_cast(op0.val, int_type128), int_type128)
  rax.id = bit_cast(mul_res, int_type64)
  rdx.id = bit_cast(mul_res >> int(128, 64), int_type64)
  upper_res = rdx.id;
if __expr and upper_res == int(op0.bit, 0):
  of.id = int1(0)
  cf.id = int1(0)
else:
  of.id = int1(1)
  cf.id = int1(1);
free_var('mul_res');
free_var('upper_res');

 *
 * mnemonic: imul
 * operand: ['Eb']
 * opcode: 05
 * semantic: alloc_var('res', op0.bit);
alloc_var('mul_res', concat(op0.bit, ignore(' * 2')));
alloc_var('extended', concat(op0.bit, ignore(' * 2')));
if __code and is_byte_operation:
  mul_res = sign_extend(al.id, int_type16) * sign_extend(op0.val, int_type16)
  ax.id = bit_cast(mul_res, int_type16)
  sf.id = bit_cast(mul_res >> int(16, 7), int_type1);
if __code and is_word_operation:
  mul_res = sign_extend(ax.id, int_type32) * sign_extend(op0.val, int_type32)
  ax.id = bit_cast(mul_res, int_type16)
  dx.id = bit_cast(mul_res >> int(32, 16), int_type16)
  sf.id = bit_cast(mul_res >> int(32, 15), int_type1);
if __code and is_dword_operation:
  mul_res = sign_extend(eax.id, int_type64) * sign_extend(op0.val, int_type64)
  eax.id = bit_cast(mul_res, int_type32)
  edx.id = bit_cast(mul_res >> int(64, 32), int_type32)
  sf.id = bit_cast(mul_res >> int(64, 32), int_type1);
if __code and is_qword_operation:
  mul_res = sign_extend(rax.id, int_type128) * sign_extend(op0.val, int_type128)
  rax.id = bit_cast(mul_res, int_type64)
  rdx.id = bit_cast(mul_res >> int(128, 64), int_type64)
  sf.id = bit_cast(mul_res >> int(128, 63), int_type1);
res = bit_cast(mul_res, int_type(op0.bit));
extended = sign_extend(res, int_type(concat(op0.bit, ignore(' * 2'))));
if __expr and extended == mul_res:
  of.id = int1(0)
  cf.id = int1(0)
else:
  of.id = int1(1)
  cf.id = int1(1);
free_var('extended');
free_var('mul_res');
free_var('res');

 *
 * mnemonic: div
 * operand: ['Eb']
 * opcode: 06
 * semantic: alloc_var('dividend', concat(op0.bit, ignore(' * 2')));
if __code and is_byte_operation:
  dividend = bit_cast(ax.id, int_type16)
  al.id = bit_cast(dividend / zero_extend(op0.val, int_type16), int_type8)
  ah.id = bit_cast(dividend % zero_extend(op0.val, int_type16), int_type8);
if __code and is_word_operation:
  dividend = bit_cast(dx.id, int_type32) << int(32, 16) | bit_cast(ax.id, int_type32)
  ax.id = bit_cast(dividend / zero_extend(op0.val, int_type32), int_type16)
  dx.id = bit_cast(dividend % zero_extend(op0.val, int_type32), int_type16);
if __code and is_dword_operation:
  dividend = bit_cast(edx.id, int_type64) << int(64, 32) | bit_cast(eax.id, int_type64)
  eax.id = bit_cast(dividend / zero_extend(op0.val, int_type64), int_type32)
  edx.id = bit_cast(dividend % zero_extend(op0.val, int_type64), int_type32);
if __code and is_qword_operation:
  dividend = bit_cast(rdx.id, int_type128) << int(128, 64) | bit_cast(rax.id, int_type128)
  rax.id = bit_cast(dividend / zero_extend(op0.val, int_type128), int_type64)
  rdx.id = bit_cast(dividend % zero_extend(op0.val, int_type128), int_type64);
free_var('dividend');

 *
 * mnemonic: idiv
 * operand: ['Eb']
 * opcode: 07
 * semantic: alloc_var('dividend', concat(op0.bit, ignore(' * 2')));
alloc_var('extended', concat(op0.bit, ignore(' * 2')));
extended = sign_extend(op0.val, int_type(concat(op0.bit, ignore(' * 2'))));
if __code and is_byte_operation:
  dividend = sign_extend(ax.id, int_type16)
  al.id = bit_cast(sdiv(dividend, extended), int_type8)
  ah.id = bit_cast(smod(dividend, extended), int_type8);
if __code and is_word_operation:
  dividend = sign_extend(dx.id, int_type32) << int(32, 16) | sign_extend(ax.id, int_type32)
  ax.id = bit_cast(sdiv(dividend, extended), int_type16)
  dx.id = bit_cast(smod(dividend, extended), int_type16);
if __code and is_dword_operation:
  dividend = sign_extend(edx.id, int_type64) << int(64, 32) | sign_extend(eax.id, int_type64)
  eax.id = bit_cast(sdiv(dividend, extended), int_type32)
  edx.id = bit_cast(smod(dividend, extended), int_type32);
if __code and is_qword_operation:
  dividend = sign_extend(rdx.id, int_type128) << int(128, 64) | sign_extend(rax.id, int_type128)
  rax.id = bit_cast(sdiv(dividend, extended), int_type64)
  rdx.id = bit_cast(smod(dividend, extended), int_type64);
free_var('extended');
free_var('dividend');

 *
**/
bool X86Architecture::Table_1_f6(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    u8 ModRmByte;
    if (!rBinStrm.Read(Offset, ModRmByte))
      return false;

    x86::ModRM ModRm(ModRmByte);
    switch (ModRm.Reg())
    {
    case 0x0:
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Test);
      if (Operand__Eb_Ib(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        rInsn.SetUpdatedFlags(X86_FlOf | X86_FlSf | X86_FlZf | X86_FlPf | X86_FlCf);
        rInsn.SetClearedFlags(X86_FlAf);
        AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlAf, &m_CpuInfo), Expr::MakeBoolean(false)));
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: res = op0.val & op1.val */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpAnd,
            rInsn.GetOperand(0),
            rInsn.GetOperand(1))));
        /* semantic: of.id = int1(0)
        cf.id = int1(0)
        call('sign_flag')
        call('zero_flag')
        call('parity_flag')
        free_var('res') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlOf, &m_CpuInfo),
          Expr::MakeBitVector(1, 0x0)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlCf, &m_CpuInfo),
          Expr::MakeBitVector(1, 0x0)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlSf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlZf, &m_CpuInfo),
          Expr::MakeTernaryCond(ConditionExpression::CondEq,
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))));
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBitVector(1, 0x1)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlPf, &m_CpuInfo),
          Expr::MakeVar("pf_tmp", VariableExpression::Use)));
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x1:
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Test);
      if (Operand__Eb_Ib(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        rInsn.SetUpdatedFlags(X86_FlOf | X86_FlSf | X86_FlZf | X86_FlPf | X86_FlCf);
        rInsn.SetClearedFlags(X86_FlAf);
        AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlAf, &m_CpuInfo), Expr::MakeBoolean(false)));
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: res = op0.val & op1.val */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpAnd,
            rInsn.GetOperand(0),
            rInsn.GetOperand(1))));
        /* semantic: of.id = int1(0)
        cf.id = int1(0)
        call('sign_flag')
        call('zero_flag')
        call('parity_flag')
        free_var('res') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlOf, &m_CpuInfo),
          Expr::MakeBitVector(1, 0x0)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlCf, &m_CpuInfo),
          Expr::MakeBitVector(1, 0x0)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlSf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlZf, &m_CpuInfo),
          Expr::MakeTernaryCond(ConditionExpression::CondEq,
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))));
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBitVector(1, 0x1)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlPf, &m_CpuInfo),
          Expr::MakeVar("pf_tmp", VariableExpression::Use)));
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x2:
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Not);
      if (Operand__Eb(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: res = ~op0.val */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeUnOp(
            OperationExpression::OpNot,
            rInsn.GetOperand(0))));
        /* semantic: op0.val = res */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("res", VariableExpression::Use)));
        /* semantic: free_var('res') */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x3:
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Neg);
      if (Operand__Eb(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: if __expr and op0.val == int(op0.bit, 0):
          cf.id = int1(0)
        else:
          cf.id = int1(1) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          rInsn.GetOperand(0),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlCf, &m_CpuInfo),
            Expr::MakeBitVector(1, 0x0)),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlCf, &m_CpuInfo),
            Expr::MakeBitVector(1, 0x1))));
        /* semantic: res = -op0.val */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeUnOp(
            OperationExpression::OpNeg,
            rInsn.GetOperand(0))));
        /* semantic: of.id = bit_cast((res.val & op0.val) >> (int(op0.bit, op0.bit) - int(op0.bit, 1)), int1(1)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlOf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeVar("res", VariableExpression::Use),
              rInsn.GetOperand(0)),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        /* semantic: call('sign_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlSf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        /* semantic: call('zero_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlZf, &m_CpuInfo),
          Expr::MakeTernaryCond(ConditionExpression::CondEq,
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))));
        /* semantic: call('parity_flag') */
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBitVector(1, 0x1)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlPf, &m_CpuInfo),
          Expr::MakeVar("pf_tmp", VariableExpression::Use)));
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
        /* semantic: af.id = bit_cast((op0.val ^ res.val) >> (int(op0.bit, 4)), int1(1)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlAf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              rInsn.GetOperand(0),
              Expr::MakeVar("res", VariableExpression::Use)),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))));
        /* semantic: op0.val = res */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("res", VariableExpression::Use)));
        /* semantic: free_var('res') */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x4:
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Mul);
      if (Operand__Eb(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('upper_res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("upper_res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: alloc_var('mul_res', concat(op0.bit, ignore(' * 2'))) */
        AllExpr.push_back(Expr::MakeVar("mul_res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize() * 2));
        /* semantic: if __code and is_byte_operation:
          ax.id = bit_cast(bit_cast(al.id, int_type16) * bit_cast(op0.val, int_type16), int_type16)
          upper_res = ah.id */
        if (rInsn.GetOperand(0)->GetBitSize() == 8)
        {
          /* block glb expressions */
          AllExpr.push_back(Expr::MakeAssign(
            Expr::MakeId(X86_Reg_Ax, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpMul,
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeId(X86_Reg_Al, &m_CpuInfo), Expr::MakeBitVector(16, 16)),
              Expr::MakeBinOp(OperationExpression::OpBcast, rInsn.GetOperand(0), Expr::MakeBitVector(16, 16))), Expr::MakeBitVector(16, 16))));
          AllExpr.push_back(Expr::MakeAssign(
            Expr::MakeVar("upper_res", VariableExpression::Use),
            Expr::MakeId(X86_Reg_Ah, &m_CpuInfo)));
        }
        /* semantic: if __code and is_word_operation:
          mul_res = bit_cast(bit_cast(ax.id, int_type32) * bit_cast(op0.val, int_type32), int_type32)
          ax.id = bit_cast(mul_res, int_type16)
          dx.id = bit_cast(mul_res >> int(32, 16), int_type16)
          upper_res = dx.id */
        if (rInsn.GetOperand(0)->GetBitSize() == 16)
        {
          /* block glb expressions */
          AllExpr.push_back(Expr::MakeAssign(
            Expr::MakeVar("mul_res", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpMul,
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeId(X86_Reg_Ax, &m_CpuInfo), Expr::MakeBitVector(32, 32)),
              Expr::MakeBinOp(OperationExpression::OpBcast, rInsn.GetOperand(0), Expr::MakeBitVector(32, 32))), Expr::MakeBitVector(32, 32))));
          AllExpr.push_back(Expr::MakeAssign(
            Expr::MakeId(X86_Reg_Ax, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeVar("mul_res", VariableExpression::Use), Expr::MakeBitVector(16, 16))));
          AllExpr.push_back(Expr::MakeAssign(
            Expr::MakeId(X86_Reg_Dx, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("mul_res", VariableExpression::Use),
              Expr::MakeBitVector(0x20, 0x10)), Expr::MakeBitVector(16, 16))));
          AllExpr.push_back(Expr::MakeAssign(
            Expr::MakeVar("upper_res", VariableExpression::Use),
            Expr::MakeId(X86_Reg_Dx, &m_CpuInfo)));
        }
        /* semantic: if __code and is_dword_operation:
          mul_res = bit_cast(bit_cast(eax.id, int_type64) * bit_cast(op0.val, int_type64), int_type64)
          eax.id = bit_cast(mul_res, int_type32)
          edx.id = bit_cast(mul_res >> int(64, 32), int_type32)
          upper_res = edx.id */
        if (rInsn.GetOperand(0)->GetBitSize() == 32)
        {
          /* block glb expressions */
          AllExpr.push_back(Expr::MakeAssign(
            Expr::MakeVar("mul_res", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpMul,
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeId(X86_Reg_Eax, &m_CpuInfo), Expr::MakeBitVector(64, 64)),
              Expr::MakeBinOp(OperationExpression::OpBcast, rInsn.GetOperand(0), Expr::MakeBitVector(64, 64))), Expr::MakeBitVector(64, 64))));
          AllExpr.push_back(Expr::MakeAssign(
            Expr::MakeId(X86_Reg_Eax, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeVar("mul_res", VariableExpression::Use), Expr::MakeBitVector(32, 32))));
          AllExpr.push_back(Expr::MakeAssign(
            Expr::MakeId(X86_Reg_Edx, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("mul_res", VariableExpression::Use),
              Expr::MakeBitVector(0x40, 0x20)), Expr::MakeBitVector(32, 32))));
          AllExpr.push_back(Expr::MakeAssign(
            Expr::MakeVar("upper_res", VariableExpression::Use),
            Expr::MakeId(X86_Reg_Edx, &m_CpuInfo)));
        }
        /* semantic: if __code and is_qword_operation:
          mul_res = bit_cast(bit_cast(rax.id, int_type128) * bit_cast(op0.val, int_type128), int_type128)
          rax.id = bit_cast(mul_res, int_type64)
          rdx.id = bit_cast(mul_res >> int(128, 64), int_type64)
          upper_res = rdx.id */
        if (rInsn.GetOperand(0)->GetBitSize() == 64)
        {
          /* block glb expressions */
          AllExpr.push_back(Expr::MakeAssign(
            Expr::MakeVar("mul_res", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpMul,
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeId(X86_Reg_Rax, &m_CpuInfo), Expr::MakeBitVector(128, 128)),
              Expr::MakeBinOp(OperationExpression::OpBcast, rInsn.GetOperand(0), Expr::MakeBitVector(128, 128))), Expr::MakeBitVector(128, 128))));
          AllExpr.push_back(Expr::MakeAssign(
            Expr::MakeId(X86_Reg_Rax, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeVar("mul_res", VariableExpression::Use), Expr::MakeBitVector(64, 64))));
          AllExpr.push_back(Expr::MakeAssign(
            Expr::MakeId(X86_Reg_Rdx, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("mul_res", VariableExpression::Use),
              Expr::MakeBitVector(0x80, 0x40)), Expr::MakeBitVector(64, 64))));
          AllExpr.push_back(Expr::MakeAssign(
            Expr::MakeVar("upper_res", VariableExpression::Use),
            Expr::MakeId(X86_Reg_Rdx, &m_CpuInfo)));
        }
        /* semantic: if __expr and upper_res == int(op0.bit, 0):
          of.id = int1(0)
          cf.id = int1(0)
        else:
          of.id = int1(1)
          cf.id = int1(1) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeVar("upper_res", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeBind({
          Expr::MakeAssign(
            Expr::MakeId(X86_FlOf, &m_CpuInfo),
            Expr::MakeBitVector(1, 0x0)),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlCf, &m_CpuInfo),
            Expr::MakeBitVector(1, 0x0))})
        ,
          Expr::MakeBind({
          Expr::MakeAssign(
            Expr::MakeId(X86_FlOf, &m_CpuInfo),
            Expr::MakeBitVector(1, 0x1)),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlCf, &m_CpuInfo),
            Expr::MakeBitVector(1, 0x1))})
        ));
        /* semantic: free_var('mul_res') */
        AllExpr.push_back(Expr::MakeVar("mul_res", VariableExpression::Free));
        /* semantic: free_var('upper_res') */
        AllExpr.push_back(Expr::MakeVar("upper_res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x5:
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Imul);
      if (Operand__Eb(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: alloc_var('mul_res', concat(op0.bit, ignore(' * 2'))) */
        AllExpr.push_back(Expr::MakeVar("mul_res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize() * 2));
        /* semantic: alloc_var('extended', concat(op0.bit, ignore(' * 2'))) */
        AllExpr.push_back(Expr::MakeVar("extended", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize() * 2));
        /* semantic: if __code and is_byte_operation:
          mul_res = sign_extend(al.id, int_type16) * sign_extend(op0.val, int_type16)
          ax.id = bit_cast(mul_res, int_type16)
          sf.id = bit_cast(mul_res >> int(16, 7), int_type1) */
        if (rInsn.GetOperand(0)->GetBitSize() == 8)
        {
          /* block glb expressions */
          AllExpr.push_back(Expr::MakeAssign(
            Expr::MakeVar("mul_res", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpMul,
              Expr::MakeBinOp(OperationExpression::OpSext, Expr::MakeId(X86_Reg_Al, &m_CpuInfo), Expr::MakeBitVector(16, 16)),
              Expr::MakeBinOp(OperationExpression::OpSext, rInsn.GetOperand(0), Expr::MakeBitVector(16, 16)))));
          AllExpr.push_back(Expr::MakeAssign(
            Expr::MakeId(X86_Reg_Ax, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeVar("mul_res", VariableExpression::Use), Expr::MakeBitVector(16, 16))));
          AllExpr.push_back(Expr::MakeAssign(
            Expr::MakeId(X86_FlSf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("mul_res", VariableExpression::Use),
              Expr::MakeBitVector(0x10, 0x7)), Expr::MakeBitVector(1, 1))));
        }
        /* semantic: if __code and is_word_operation:
          mul_res = sign_extend(ax.id, int_type32) * sign_extend(op0.val, int_type32)
          ax.id = bit_cast(mul_res, int_type16)
          dx.id = bit_cast(mul_res >> int(32, 16), int_type16)
          sf.id = bit_cast(mul_res >> int(32, 15), int_type1) */
        if (rInsn.GetOperand(0)->GetBitSize() == 16)
        {
          /* block glb expressions */
          AllExpr.push_back(Expr::MakeAssign(
            Expr::MakeVar("mul_res", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpMul,
              Expr::MakeBinOp(OperationExpression::OpSext, Expr::MakeId(X86_Reg_Ax, &m_CpuInfo), Expr::MakeBitVector(32, 32)),
              Expr::MakeBinOp(OperationExpression::OpSext, rInsn.GetOperand(0), Expr::MakeBitVector(32, 32)))));
          AllExpr.push_back(Expr::MakeAssign(
            Expr::MakeId(X86_Reg_Ax, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeVar("mul_res", VariableExpression::Use), Expr::MakeBitVector(16, 16))));
          AllExpr.push_back(Expr::MakeAssign(
            Expr::MakeId(X86_Reg_Dx, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("mul_res", VariableExpression::Use),
              Expr::MakeBitVector(0x20, 0x10)), Expr::MakeBitVector(16, 16))));
          AllExpr.push_back(Expr::MakeAssign(
            Expr::MakeId(X86_FlSf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("mul_res", VariableExpression::Use),
              Expr::MakeBitVector(0x20, 0xf)), Expr::MakeBitVector(1, 1))));
        }
        /* semantic: if __code and is_dword_operation:
          mul_res = sign_extend(eax.id, int_type64) * sign_extend(op0.val, int_type64)
          eax.id = bit_cast(mul_res, int_type32)
          edx.id = bit_cast(mul_res >> int(64, 32), int_type32)
          sf.id = bit_cast(mul_res >> int(64, 32), int_type1) */
        if (rInsn.GetOperand(0)->GetBitSize() == 32)
        {
          /* block glb expressions */
          AllExpr.push_back(Expr::MakeAssign(
            Expr::MakeVar("mul_res", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpMul,
              Expr::MakeBinOp(OperationExpression::OpSext, Expr::MakeId(X86_Reg_Eax, &m_CpuInfo), Expr::MakeBitVector(64, 64)),
              Expr::MakeBinOp(OperationExpression::OpSext, rInsn.GetOperand(0), Expr::MakeBitVector(64, 64)))));
          AllExpr.push_back(Expr::MakeAssign(
            Expr::MakeId(X86_Reg_Eax, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeVar("mul_res", VariableExpression::Use), Expr::MakeBitVector(32, 32))));
          AllExpr.push_back(Expr::MakeAssign(
            Expr::MakeId(X86_Reg_Edx, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("mul_res", VariableExpression::Use),
              Expr::MakeBitVector(0x40, 0x20)), Expr::MakeBitVector(32, 32))));
          AllExpr.push_back(Expr::MakeAssign(
            Expr::MakeId(X86_FlSf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("mul_res", VariableExpression::Use),
              Expr::MakeBitVector(0x40, 0x20)), Expr::MakeBitVector(1, 1))));
        }
        /* semantic: if __code and is_qword_operation:
          mul_res = sign_extend(rax.id, int_type128) * sign_extend(op0.val, int_type128)
          rax.id = bit_cast(mul_res, int_type64)
          rdx.id = bit_cast(mul_res >> int(128, 64), int_type64)
          sf.id = bit_cast(mul_res >> int(128, 63), int_type1) */
        if (rInsn.GetOperand(0)->GetBitSize() == 64)
        {
          /* block glb expressions */
          AllExpr.push_back(Expr::MakeAssign(
            Expr::MakeVar("mul_res", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpMul,
              Expr::MakeBinOp(OperationExpression::OpSext, Expr::MakeId(X86_Reg_Rax, &m_CpuInfo), Expr::MakeBitVector(128, 128)),
              Expr::MakeBinOp(OperationExpression::OpSext, rInsn.GetOperand(0), Expr::MakeBitVector(128, 128)))));
          AllExpr.push_back(Expr::MakeAssign(
            Expr::MakeId(X86_Reg_Rax, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeVar("mul_res", VariableExpression::Use), Expr::MakeBitVector(64, 64))));
          AllExpr.push_back(Expr::MakeAssign(
            Expr::MakeId(X86_Reg_Rdx, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("mul_res", VariableExpression::Use),
              Expr::MakeBitVector(0x80, 0x40)), Expr::MakeBitVector(64, 64))));
          AllExpr.push_back(Expr::MakeAssign(
            Expr::MakeId(X86_FlSf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("mul_res", VariableExpression::Use),
              Expr::MakeBitVector(0x80, 0x3f)), Expr::MakeBitVector(1, 1))));
        }
        /* semantic: res = bit_cast(mul_res, int_type(op0.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeVar("mul_res", VariableExpression::Use), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()))));
        /* semantic: extended = sign_extend(res, int_type(concat(op0.bit, ignore(' * 2')))) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("extended", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpSext, Expr::MakeVar("res", VariableExpression::Use), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize() * 2, rInsn.GetOperand(0)->GetBitSize() * 2))));
        /* semantic: if __expr and extended == mul_res:
          of.id = int1(0)
          cf.id = int1(0)
        else:
          of.id = int1(1)
          cf.id = int1(1) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeVar("extended", VariableExpression::Use),
          Expr::MakeVar("mul_res", VariableExpression::Use),
          Expr::MakeBind({
          Expr::MakeAssign(
            Expr::MakeId(X86_FlOf, &m_CpuInfo),
            Expr::MakeBitVector(1, 0x0)),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlCf, &m_CpuInfo),
            Expr::MakeBitVector(1, 0x0))})
        ,
          Expr::MakeBind({
          Expr::MakeAssign(
            Expr::MakeId(X86_FlOf, &m_CpuInfo),
            Expr::MakeBitVector(1, 0x1)),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlCf, &m_CpuInfo),
            Expr::MakeBitVector(1, 0x1))})
        ));
        /* semantic: free_var('extended') */
        AllExpr.push_back(Expr::MakeVar("extended", VariableExpression::Free));
        /* semantic: free_var('mul_res') */
        AllExpr.push_back(Expr::MakeVar("mul_res", VariableExpression::Free));
        /* semantic: free_var('res') */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x6:
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Div);
      if (Operand__Eb(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('dividend', concat(op0.bit, ignore(' * 2'))) */
        AllExpr.push_back(Expr::MakeVar("dividend", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize() * 2));
        /* semantic: if __code and is_byte_operation:
          dividend = bit_cast(ax.id, int_type16)
          al.id = bit_cast(dividend / zero_extend(op0.val, int_type16), int_type8)
          ah.id = bit_cast(dividend % zero_extend(op0.val, int_type16), int_type8) */
        if (rInsn.GetOperand(0)->GetBitSize() == 8)
        {
          /* block glb expressions */
          AllExpr.push_back(Expr::MakeAssign(
            Expr::MakeVar("dividend", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeId(X86_Reg_Ax, &m_CpuInfo), Expr::MakeBitVector(16, 16))));
          AllExpr.push_back(Expr::MakeAssign(
            Expr::MakeId(X86_Reg_Al, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpUDiv,
              Expr::MakeVar("dividend", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpZext, rInsn.GetOperand(0), Expr::MakeBitVector(16, 16))), Expr::MakeBitVector(8, 8))));
          AllExpr.push_back(Expr::MakeAssign(
            Expr::MakeId(X86_Reg_Ah, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpUMod,
              Expr::MakeVar("dividend", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpZext, rInsn.GetOperand(0), Expr::MakeBitVector(16, 16))), Expr::MakeBitVector(8, 8))));
        }
        /* semantic: if __code and is_word_operation:
          dividend = bit_cast(dx.id, int_type32) << int(32, 16) | bit_cast(ax.id, int_type32)
          ax.id = bit_cast(dividend / zero_extend(op0.val, int_type32), int_type16)
          dx.id = bit_cast(dividend % zero_extend(op0.val, int_type32), int_type16) */
        if (rInsn.GetOperand(0)->GetBitSize() == 16)
        {
          /* block glb expressions */
          AllExpr.push_back(Expr::MakeAssign(
            Expr::MakeVar("dividend", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpOr,
              Expr::MakeBinOp(
                OperationExpression::OpLls,
                Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeId(X86_Reg_Dx, &m_CpuInfo), Expr::MakeBitVector(32, 32)),
                Expr::MakeBitVector(0x20, 0x10)),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeId(X86_Reg_Ax, &m_CpuInfo), Expr::MakeBitVector(32, 32)))));
          AllExpr.push_back(Expr::MakeAssign(
            Expr::MakeId(X86_Reg_Ax, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpUDiv,
              Expr::MakeVar("dividend", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpZext, rInsn.GetOperand(0), Expr::MakeBitVector(32, 32))), Expr::MakeBitVector(16, 16))));
          AllExpr.push_back(Expr::MakeAssign(
            Expr::MakeId(X86_Reg_Dx, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpUMod,
              Expr::MakeVar("dividend", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpZext, rInsn.GetOperand(0), Expr::MakeBitVector(32, 32))), Expr::MakeBitVector(16, 16))));
        }
        /* semantic: if __code and is_dword_operation:
          dividend = bit_cast(edx.id, int_type64) << int(64, 32) | bit_cast(eax.id, int_type64)
          eax.id = bit_cast(dividend / zero_extend(op0.val, int_type64), int_type32)
          edx.id = bit_cast(dividend % zero_extend(op0.val, int_type64), int_type32) */
        if (rInsn.GetOperand(0)->GetBitSize() == 32)
        {
          /* block glb expressions */
          AllExpr.push_back(Expr::MakeAssign(
            Expr::MakeVar("dividend", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpOr,
              Expr::MakeBinOp(
                OperationExpression::OpLls,
                Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeId(X86_Reg_Edx, &m_CpuInfo), Expr::MakeBitVector(64, 64)),
                Expr::MakeBitVector(0x40, 0x20)),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeId(X86_Reg_Eax, &m_CpuInfo), Expr::MakeBitVector(64, 64)))));
          AllExpr.push_back(Expr::MakeAssign(
            Expr::MakeId(X86_Reg_Eax, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpUDiv,
              Expr::MakeVar("dividend", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpZext, rInsn.GetOperand(0), Expr::MakeBitVector(64, 64))), Expr::MakeBitVector(32, 32))));
          AllExpr.push_back(Expr::MakeAssign(
            Expr::MakeId(X86_Reg_Edx, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpUMod,
              Expr::MakeVar("dividend", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpZext, rInsn.GetOperand(0), Expr::MakeBitVector(64, 64))), Expr::MakeBitVector(32, 32))));
        }
        /* semantic: if __code and is_qword_operation:
          dividend = bit_cast(rdx.id, int_type128) << int(128, 64) | bit_cast(rax.id, int_type128)
          rax.id = bit_cast(dividend / zero_extend(op0.val, int_type128), int_type64)
          rdx.id = bit_cast(dividend % zero_extend(op0.val, int_type128), int_type64) */
        if (rInsn.GetOperand(0)->GetBitSize() == 64)
        {
          /* block glb expressions */
          AllExpr.push_back(Expr::MakeAssign(
            Expr::MakeVar("dividend", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpOr,
              Expr::MakeBinOp(
                OperationExpression::OpLls,
                Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeId(X86_Reg_Rdx, &m_CpuInfo), Expr::MakeBitVector(128, 128)),
                Expr::MakeBitVector(0x80, 0x40)),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeId(X86_Reg_Rax, &m_CpuInfo), Expr::MakeBitVector(128, 128)))));
          AllExpr.push_back(Expr::MakeAssign(
            Expr::MakeId(X86_Reg_Rax, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpUDiv,
              Expr::MakeVar("dividend", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpZext, rInsn.GetOperand(0), Expr::MakeBitVector(128, 128))), Expr::MakeBitVector(64, 64))));
          AllExpr.push_back(Expr::MakeAssign(
            Expr::MakeId(X86_Reg_Rdx, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpUMod,
              Expr::MakeVar("dividend", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpZext, rInsn.GetOperand(0), Expr::MakeBitVector(128, 128))), Expr::MakeBitVector(64, 64))));
        }
        /* semantic: free_var('dividend') */
        AllExpr.push_back(Expr::MakeVar("dividend", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x7:
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Idiv);
      if (Operand__Eb(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('dividend', concat(op0.bit, ignore(' * 2'))) */
        AllExpr.push_back(Expr::MakeVar("dividend", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize() * 2));
        /* semantic: alloc_var('extended', concat(op0.bit, ignore(' * 2'))) */
        AllExpr.push_back(Expr::MakeVar("extended", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize() * 2));
        /* semantic: extended = sign_extend(op0.val, int_type(concat(op0.bit, ignore(' * 2')))) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("extended", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpSext, rInsn.GetOperand(0), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize() * 2, rInsn.GetOperand(0)->GetBitSize() * 2))));
        /* semantic: if __code and is_byte_operation:
          dividend = sign_extend(ax.id, int_type16)
          al.id = bit_cast(sdiv(dividend, extended), int_type8)
          ah.id = bit_cast(smod(dividend, extended), int_type8) */
        if (rInsn.GetOperand(0)->GetBitSize() == 8)
        {
          /* block glb expressions */
          AllExpr.push_back(Expr::MakeAssign(
            Expr::MakeVar("dividend", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpSext, Expr::MakeId(X86_Reg_Ax, &m_CpuInfo), Expr::MakeBitVector(16, 16))));
          AllExpr.push_back(Expr::MakeAssign(
            Expr::MakeId(X86_Reg_Al, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(OperationExpression::OpSDiv, Expr::MakeVar("dividend", VariableExpression::Use), Expr::MakeVar("extended", VariableExpression::Use)), Expr::MakeBitVector(8, 8))));
          AllExpr.push_back(Expr::MakeAssign(
            Expr::MakeId(X86_Reg_Ah, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(OperationExpression::OpSMod, Expr::MakeVar("dividend", VariableExpression::Use), Expr::MakeVar("extended", VariableExpression::Use)), Expr::MakeBitVector(8, 8))));
        }
        /* semantic: if __code and is_word_operation:
          dividend = sign_extend(dx.id, int_type32) << int(32, 16) | sign_extend(ax.id, int_type32)
          ax.id = bit_cast(sdiv(dividend, extended), int_type16)
          dx.id = bit_cast(smod(dividend, extended), int_type16) */
        if (rInsn.GetOperand(0)->GetBitSize() == 16)
        {
          /* block glb expressions */
          AllExpr.push_back(Expr::MakeAssign(
            Expr::MakeVar("dividend", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpOr,
              Expr::MakeBinOp(
                OperationExpression::OpLls,
                Expr::MakeBinOp(OperationExpression::OpSext, Expr::MakeId(X86_Reg_Dx, &m_CpuInfo), Expr::MakeBitVector(32, 32)),
                Expr::MakeBitVector(0x20, 0x10)),
              Expr::MakeBinOp(OperationExpression::OpSext, Expr::MakeId(X86_Reg_Ax, &m_CpuInfo), Expr::MakeBitVector(32, 32)))));
          AllExpr.push_back(Expr::MakeAssign(
            Expr::MakeId(X86_Reg_Ax, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(OperationExpression::OpSDiv, Expr::MakeVar("dividend", VariableExpression::Use), Expr::MakeVar("extended", VariableExpression::Use)), Expr::MakeBitVector(16, 16))));
          AllExpr.push_back(Expr::MakeAssign(
            Expr::MakeId(X86_Reg_Dx, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(OperationExpression::OpSMod, Expr::MakeVar("dividend", VariableExpression::Use), Expr::MakeVar("extended", VariableExpression::Use)), Expr::MakeBitVector(16, 16))));
        }
        /* semantic: if __code and is_dword_operation:
          dividend = sign_extend(edx.id, int_type64) << int(64, 32) | sign_extend(eax.id, int_type64)
          eax.id = bit_cast(sdiv(dividend, extended), int_type32)
          edx.id = bit_cast(smod(dividend, extended), int_type32) */
        if (rInsn.GetOperand(0)->GetBitSize() == 32)
        {
          /* block glb expressions */
          AllExpr.push_back(Expr::MakeAssign(
            Expr::MakeVar("dividend", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpOr,
              Expr::MakeBinOp(
                OperationExpression::OpLls,
                Expr::MakeBinOp(OperationExpression::OpSext, Expr::MakeId(X86_Reg_Edx, &m_CpuInfo), Expr::MakeBitVector(64, 64)),
                Expr::MakeBitVector(0x40, 0x20)),
              Expr::MakeBinOp(OperationExpression::OpSext, Expr::MakeId(X86_Reg_Eax, &m_CpuInfo), Expr::MakeBitVector(64, 64)))));
          AllExpr.push_back(Expr::MakeAssign(
            Expr::MakeId(X86_Reg_Eax, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(OperationExpression::OpSDiv, Expr::MakeVar("dividend", VariableExpression::Use), Expr::MakeVar("extended", VariableExpression::Use)), Expr::MakeBitVector(32, 32))));
          AllExpr.push_back(Expr::MakeAssign(
            Expr::MakeId(X86_Reg_Edx, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(OperationExpression::OpSMod, Expr::MakeVar("dividend", VariableExpression::Use), Expr::MakeVar("extended", VariableExpression::Use)), Expr::MakeBitVector(32, 32))));
        }
        /* semantic: if __code and is_qword_operation:
          dividend = sign_extend(rdx.id, int_type128) << int(128, 64) | sign_extend(rax.id, int_type128)
          rax.id = bit_cast(sdiv(dividend, extended), int_type64)
          rdx.id = bit_cast(smod(dividend, extended), int_type64) */
        if (rInsn.GetOperand(0)->GetBitSize() == 64)
        {
          /* block glb expressions */
          AllExpr.push_back(Expr::MakeAssign(
            Expr::MakeVar("dividend", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpOr,
              Expr::MakeBinOp(
                OperationExpression::OpLls,
                Expr::MakeBinOp(OperationExpression::OpSext, Expr::MakeId(X86_Reg_Rdx, &m_CpuInfo), Expr::MakeBitVector(128, 128)),
                Expr::MakeBitVector(0x80, 0x40)),
              Expr::MakeBinOp(OperationExpression::OpSext, Expr::MakeId(X86_Reg_Rax, &m_CpuInfo), Expr::MakeBitVector(128, 128)))));
          AllExpr.push_back(Expr::MakeAssign(
            Expr::MakeId(X86_Reg_Rax, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(OperationExpression::OpSDiv, Expr::MakeVar("dividend", VariableExpression::Use), Expr::MakeVar("extended", VariableExpression::Use)), Expr::MakeBitVector(64, 64))));
          AllExpr.push_back(Expr::MakeAssign(
            Expr::MakeId(X86_Reg_Rdx, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(OperationExpression::OpSMod, Expr::MakeVar("dividend", VariableExpression::Use), Expr::MakeVar("extended", VariableExpression::Use)), Expr::MakeBitVector(64, 64))));
        }
        /* semantic: free_var('extended') */
        AllExpr.push_back(Expr::MakeVar("extended", VariableExpression::Free));
        /* semantic: free_var('dividend') */
        AllExpr.push_back(Expr::MakeVar("dividend", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    default:
      return false;
    }
}

/** group:
 * mnemonic: test
 * clear_flags: ['af']
 * semantic: alloc_var('res', op0.bit);
res = op0.val & op1.val;
of.id = int1(0)
cf.id = int1(0)
call('sign_flag')
call('zero_flag')
call('parity_flag')
free_var('res');

 * operand: ['Ev', 'Iz']
 * opcode: 00
 * update_flags: ['of', 'sf', 'zf', 'pf', 'cf']
 *
 * mnemonic: test
 * clear_flags: ['af']
 * semantic: alloc_var('res', op0.bit);
res = op0.val & op1.val;
of.id = int1(0)
cf.id = int1(0)
call('sign_flag')
call('zero_flag')
call('parity_flag')
free_var('res');

 * operand: ['Ev', 'Iz']
 * opcode: 01
 * update_flags: ['of', 'sf', 'zf', 'pf', 'cf']
 *
 * mnemonic: not
 * operand: ['Ev']
 * opcode: 02
 * semantic: alloc_var('res', op0.bit);
res = ~op0.val;
op0.val = res;
free_var('res');

 *
 * mnemonic: neg
 * operand: ['Ev']
 * opcode: 03
 * semantic: alloc_var('res', op0.bit);
if __expr and op0.val == int(op0.bit, 0):
  cf.id = int1(0)
else:
  cf.id = int1(1);
res = -op0.val;
of.id = bit_cast((res.val & op0.val) >> (int(op0.bit, op0.bit) - int(op0.bit, 1)), int1(1));
call('sign_flag');
call('zero_flag');
call('parity_flag');
af.id = bit_cast((op0.val ^ res.val) >> (int(op0.bit, 4)), int1(1));
op0.val = res;
free_var('res');

 *
 * mnemonic: mul
 * operand: ['Ev']
 * opcode: 04
 * semantic: alloc_var('upper_res', op0.bit);
alloc_var('mul_res', concat(op0.bit, ignore(' * 2')));
if __code and is_byte_operation:
  ax.id = bit_cast(bit_cast(al.id, int_type16) * bit_cast(op0.val, int_type16), int_type16)
  upper_res = ah.id;
if __code and is_word_operation:
  mul_res = bit_cast(bit_cast(ax.id, int_type32) * bit_cast(op0.val, int_type32), int_type32)
  ax.id = bit_cast(mul_res, int_type16)
  dx.id = bit_cast(mul_res >> int(32, 16), int_type16)
  upper_res = dx.id;
if __code and is_dword_operation:
  mul_res = bit_cast(bit_cast(eax.id, int_type64) * bit_cast(op0.val, int_type64), int_type64)
  eax.id = bit_cast(mul_res, int_type32)
  edx.id = bit_cast(mul_res >> int(64, 32), int_type32)
  upper_res = edx.id;
if __code and is_qword_operation:
  mul_res = bit_cast(bit_cast(rax.id, int_type128) * bit_cast(op0.val, int_type128), int_type128)
  rax.id = bit_cast(mul_res, int_type64)
  rdx.id = bit_cast(mul_res >> int(128, 64), int_type64)
  upper_res = rdx.id;
if __expr and upper_res == int(op0.bit, 0):
  of.id = int1(0)
  cf.id = int1(0)
else:
  of.id = int1(1)
  cf.id = int1(1);
free_var('mul_res');
free_var('upper_res');

 *
 * mnemonic: imul
 * operand: ['Ev']
 * opcode: 05
 * semantic: alloc_var('res', op0.bit);
alloc_var('mul_res', concat(op0.bit, ignore(' * 2')));
alloc_var('extended', concat(op0.bit, ignore(' * 2')));
if __code and is_byte_operation:
  mul_res = sign_extend(al.id, int_type16) * sign_extend(op0.val, int_type16)
  ax.id = bit_cast(mul_res, int_type16)
  sf.id = bit_cast(mul_res >> int(16, 7), int_type1);
if __code and is_word_operation:
  mul_res = sign_extend(ax.id, int_type32) * sign_extend(op0.val, int_type32)
  ax.id = bit_cast(mul_res, int_type16)
  dx.id = bit_cast(mul_res >> int(32, 16), int_type16)
  sf.id = bit_cast(mul_res >> int(32, 15), int_type1);
if __code and is_dword_operation:
  mul_res = sign_extend(eax.id, int_type64) * sign_extend(op0.val, int_type64)
  eax.id = bit_cast(mul_res, int_type32)
  edx.id = bit_cast(mul_res >> int(64, 32), int_type32)
  sf.id = bit_cast(mul_res >> int(64, 32), int_type1);
if __code and is_qword_operation:
  mul_res = sign_extend(rax.id, int_type128) * sign_extend(op0.val, int_type128)
  rax.id = bit_cast(mul_res, int_type64)
  rdx.id = bit_cast(mul_res >> int(128, 64), int_type64)
  sf.id = bit_cast(mul_res >> int(128, 63), int_type1);
res = bit_cast(mul_res, int_type(op0.bit));
extended = sign_extend(res, int_type(concat(op0.bit, ignore(' * 2'))));
if __expr and extended == mul_res:
  of.id = int1(0)
  cf.id = int1(0)
else:
  of.id = int1(1)
  cf.id = int1(1);
free_var('extended');
free_var('mul_res');
free_var('res');

 *
 * mnemonic: div
 * operand: ['Ev']
 * opcode: 06
 * semantic: alloc_var('dividend', concat(op0.bit, ignore(' * 2')));
if __code and is_byte_operation:
  dividend = bit_cast(ax.id, int_type16)
  al.id = bit_cast(dividend / zero_extend(op0.val, int_type16), int_type8)
  ah.id = bit_cast(dividend % zero_extend(op0.val, int_type16), int_type8);
if __code and is_word_operation:
  dividend = bit_cast(dx.id, int_type32) << int(32, 16) | bit_cast(ax.id, int_type32)
  ax.id = bit_cast(dividend / zero_extend(op0.val, int_type32), int_type16)
  dx.id = bit_cast(dividend % zero_extend(op0.val, int_type32), int_type16);
if __code and is_dword_operation:
  dividend = bit_cast(edx.id, int_type64) << int(64, 32) | bit_cast(eax.id, int_type64)
  eax.id = bit_cast(dividend / zero_extend(op0.val, int_type64), int_type32)
  edx.id = bit_cast(dividend % zero_extend(op0.val, int_type64), int_type32);
if __code and is_qword_operation:
  dividend = bit_cast(rdx.id, int_type128) << int(128, 64) | bit_cast(rax.id, int_type128)
  rax.id = bit_cast(dividend / zero_extend(op0.val, int_type128), int_type64)
  rdx.id = bit_cast(dividend % zero_extend(op0.val, int_type128), int_type64);
free_var('dividend');

 *
 * mnemonic: idiv
 * operand: ['Ev']
 * opcode: 07
 * semantic: alloc_var('dividend', concat(op0.bit, ignore(' * 2')));
alloc_var('extended', concat(op0.bit, ignore(' * 2')));
extended = sign_extend(op0.val, int_type(concat(op0.bit, ignore(' * 2'))));
if __code and is_byte_operation:
  dividend = sign_extend(ax.id, int_type16)
  al.id = bit_cast(sdiv(dividend, extended), int_type8)
  ah.id = bit_cast(smod(dividend, extended), int_type8);
if __code and is_word_operation:
  dividend = sign_extend(dx.id, int_type32) << int(32, 16) | sign_extend(ax.id, int_type32)
  ax.id = bit_cast(sdiv(dividend, extended), int_type16)
  dx.id = bit_cast(smod(dividend, extended), int_type16);
if __code and is_dword_operation:
  dividend = sign_extend(edx.id, int_type64) << int(64, 32) | sign_extend(eax.id, int_type64)
  eax.id = bit_cast(sdiv(dividend, extended), int_type32)
  edx.id = bit_cast(smod(dividend, extended), int_type32);
if __code and is_qword_operation:
  dividend = sign_extend(rdx.id, int_type128) << int(128, 64) | sign_extend(rax.id, int_type128)
  rax.id = bit_cast(sdiv(dividend, extended), int_type64)
  rdx.id = bit_cast(smod(dividend, extended), int_type64);
free_var('extended');
free_var('dividend');

 *
**/
bool X86Architecture::Table_1_f7(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    u8 ModRmByte;
    if (!rBinStrm.Read(Offset, ModRmByte))
      return false;

    x86::ModRM ModRm(ModRmByte);
    switch (ModRm.Reg())
    {
    case 0x0:
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Test);
      if (Operand__Ev_Iz(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        rInsn.SetUpdatedFlags(X86_FlOf | X86_FlSf | X86_FlZf | X86_FlPf | X86_FlCf);
        rInsn.SetClearedFlags(X86_FlAf);
        AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlAf, &m_CpuInfo), Expr::MakeBoolean(false)));
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: res = op0.val & op1.val */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpAnd,
            rInsn.GetOperand(0),
            rInsn.GetOperand(1))));
        /* semantic: of.id = int1(0)
        cf.id = int1(0)
        call('sign_flag')
        call('zero_flag')
        call('parity_flag')
        free_var('res') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlOf, &m_CpuInfo),
          Expr::MakeBitVector(1, 0x0)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlCf, &m_CpuInfo),
          Expr::MakeBitVector(1, 0x0)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlSf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlZf, &m_CpuInfo),
          Expr::MakeTernaryCond(ConditionExpression::CondEq,
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))));
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBitVector(1, 0x1)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlPf, &m_CpuInfo),
          Expr::MakeVar("pf_tmp", VariableExpression::Use)));
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x1:
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Test);
      if (Operand__Ev_Iz(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        rInsn.SetUpdatedFlags(X86_FlOf | X86_FlSf | X86_FlZf | X86_FlPf | X86_FlCf);
        rInsn.SetClearedFlags(X86_FlAf);
        AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlAf, &m_CpuInfo), Expr::MakeBoolean(false)));
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: res = op0.val & op1.val */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpAnd,
            rInsn.GetOperand(0),
            rInsn.GetOperand(1))));
        /* semantic: of.id = int1(0)
        cf.id = int1(0)
        call('sign_flag')
        call('zero_flag')
        call('parity_flag')
        free_var('res') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlOf, &m_CpuInfo),
          Expr::MakeBitVector(1, 0x0)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlCf, &m_CpuInfo),
          Expr::MakeBitVector(1, 0x0)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlSf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlZf, &m_CpuInfo),
          Expr::MakeTernaryCond(ConditionExpression::CondEq,
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))));
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBitVector(1, 0x1)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlPf, &m_CpuInfo),
          Expr::MakeVar("pf_tmp", VariableExpression::Use)));
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x2:
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Not);
      if (Operand__Ev(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: res = ~op0.val */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeUnOp(
            OperationExpression::OpNot,
            rInsn.GetOperand(0))));
        /* semantic: op0.val = res */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("res", VariableExpression::Use)));
        /* semantic: free_var('res') */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x3:
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Neg);
      if (Operand__Ev(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: if __expr and op0.val == int(op0.bit, 0):
          cf.id = int1(0)
        else:
          cf.id = int1(1) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          rInsn.GetOperand(0),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlCf, &m_CpuInfo),
            Expr::MakeBitVector(1, 0x0)),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlCf, &m_CpuInfo),
            Expr::MakeBitVector(1, 0x1))));
        /* semantic: res = -op0.val */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeUnOp(
            OperationExpression::OpNeg,
            rInsn.GetOperand(0))));
        /* semantic: of.id = bit_cast((res.val & op0.val) >> (int(op0.bit, op0.bit) - int(op0.bit, 1)), int1(1)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlOf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeVar("res", VariableExpression::Use),
              rInsn.GetOperand(0)),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        /* semantic: call('sign_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlSf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        /* semantic: call('zero_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlZf, &m_CpuInfo),
          Expr::MakeTernaryCond(ConditionExpression::CondEq,
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))));
        /* semantic: call('parity_flag') */
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBitVector(1, 0x1)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlPf, &m_CpuInfo),
          Expr::MakeVar("pf_tmp", VariableExpression::Use)));
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
        /* semantic: af.id = bit_cast((op0.val ^ res.val) >> (int(op0.bit, 4)), int1(1)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlAf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              rInsn.GetOperand(0),
              Expr::MakeVar("res", VariableExpression::Use)),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))));
        /* semantic: op0.val = res */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("res", VariableExpression::Use)));
        /* semantic: free_var('res') */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x4:
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Mul);
      if (Operand__Ev(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('upper_res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("upper_res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: alloc_var('mul_res', concat(op0.bit, ignore(' * 2'))) */
        AllExpr.push_back(Expr::MakeVar("mul_res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize() * 2));
        /* semantic: if __code and is_byte_operation:
          ax.id = bit_cast(bit_cast(al.id, int_type16) * bit_cast(op0.val, int_type16), int_type16)
          upper_res = ah.id */
        if (rInsn.GetOperand(0)->GetBitSize() == 8)
        {
          /* block glb expressions */
          AllExpr.push_back(Expr::MakeAssign(
            Expr::MakeId(X86_Reg_Ax, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpMul,
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeId(X86_Reg_Al, &m_CpuInfo), Expr::MakeBitVector(16, 16)),
              Expr::MakeBinOp(OperationExpression::OpBcast, rInsn.GetOperand(0), Expr::MakeBitVector(16, 16))), Expr::MakeBitVector(16, 16))));
          AllExpr.push_back(Expr::MakeAssign(
            Expr::MakeVar("upper_res", VariableExpression::Use),
            Expr::MakeId(X86_Reg_Ah, &m_CpuInfo)));
        }
        /* semantic: if __code and is_word_operation:
          mul_res = bit_cast(bit_cast(ax.id, int_type32) * bit_cast(op0.val, int_type32), int_type32)
          ax.id = bit_cast(mul_res, int_type16)
          dx.id = bit_cast(mul_res >> int(32, 16), int_type16)
          upper_res = dx.id */
        if (rInsn.GetOperand(0)->GetBitSize() == 16)
        {
          /* block glb expressions */
          AllExpr.push_back(Expr::MakeAssign(
            Expr::MakeVar("mul_res", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpMul,
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeId(X86_Reg_Ax, &m_CpuInfo), Expr::MakeBitVector(32, 32)),
              Expr::MakeBinOp(OperationExpression::OpBcast, rInsn.GetOperand(0), Expr::MakeBitVector(32, 32))), Expr::MakeBitVector(32, 32))));
          AllExpr.push_back(Expr::MakeAssign(
            Expr::MakeId(X86_Reg_Ax, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeVar("mul_res", VariableExpression::Use), Expr::MakeBitVector(16, 16))));
          AllExpr.push_back(Expr::MakeAssign(
            Expr::MakeId(X86_Reg_Dx, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("mul_res", VariableExpression::Use),
              Expr::MakeBitVector(0x20, 0x10)), Expr::MakeBitVector(16, 16))));
          AllExpr.push_back(Expr::MakeAssign(
            Expr::MakeVar("upper_res", VariableExpression::Use),
            Expr::MakeId(X86_Reg_Dx, &m_CpuInfo)));
        }
        /* semantic: if __code and is_dword_operation:
          mul_res = bit_cast(bit_cast(eax.id, int_type64) * bit_cast(op0.val, int_type64), int_type64)
          eax.id = bit_cast(mul_res, int_type32)
          edx.id = bit_cast(mul_res >> int(64, 32), int_type32)
          upper_res = edx.id */
        if (rInsn.GetOperand(0)->GetBitSize() == 32)
        {
          /* block glb expressions */
          AllExpr.push_back(Expr::MakeAssign(
            Expr::MakeVar("mul_res", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpMul,
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeId(X86_Reg_Eax, &m_CpuInfo), Expr::MakeBitVector(64, 64)),
              Expr::MakeBinOp(OperationExpression::OpBcast, rInsn.GetOperand(0), Expr::MakeBitVector(64, 64))), Expr::MakeBitVector(64, 64))));
          AllExpr.push_back(Expr::MakeAssign(
            Expr::MakeId(X86_Reg_Eax, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeVar("mul_res", VariableExpression::Use), Expr::MakeBitVector(32, 32))));
          AllExpr.push_back(Expr::MakeAssign(
            Expr::MakeId(X86_Reg_Edx, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("mul_res", VariableExpression::Use),
              Expr::MakeBitVector(0x40, 0x20)), Expr::MakeBitVector(32, 32))));
          AllExpr.push_back(Expr::MakeAssign(
            Expr::MakeVar("upper_res", VariableExpression::Use),
            Expr::MakeId(X86_Reg_Edx, &m_CpuInfo)));
        }
        /* semantic: if __code and is_qword_operation:
          mul_res = bit_cast(bit_cast(rax.id, int_type128) * bit_cast(op0.val, int_type128), int_type128)
          rax.id = bit_cast(mul_res, int_type64)
          rdx.id = bit_cast(mul_res >> int(128, 64), int_type64)
          upper_res = rdx.id */
        if (rInsn.GetOperand(0)->GetBitSize() == 64)
        {
          /* block glb expressions */
          AllExpr.push_back(Expr::MakeAssign(
            Expr::MakeVar("mul_res", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpMul,
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeId(X86_Reg_Rax, &m_CpuInfo), Expr::MakeBitVector(128, 128)),
              Expr::MakeBinOp(OperationExpression::OpBcast, rInsn.GetOperand(0), Expr::MakeBitVector(128, 128))), Expr::MakeBitVector(128, 128))));
          AllExpr.push_back(Expr::MakeAssign(
            Expr::MakeId(X86_Reg_Rax, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeVar("mul_res", VariableExpression::Use), Expr::MakeBitVector(64, 64))));
          AllExpr.push_back(Expr::MakeAssign(
            Expr::MakeId(X86_Reg_Rdx, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("mul_res", VariableExpression::Use),
              Expr::MakeBitVector(0x80, 0x40)), Expr::MakeBitVector(64, 64))));
          AllExpr.push_back(Expr::MakeAssign(
            Expr::MakeVar("upper_res", VariableExpression::Use),
            Expr::MakeId(X86_Reg_Rdx, &m_CpuInfo)));
        }
        /* semantic: if __expr and upper_res == int(op0.bit, 0):
          of.id = int1(0)
          cf.id = int1(0)
        else:
          of.id = int1(1)
          cf.id = int1(1) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeVar("upper_res", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeBind({
          Expr::MakeAssign(
            Expr::MakeId(X86_FlOf, &m_CpuInfo),
            Expr::MakeBitVector(1, 0x0)),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlCf, &m_CpuInfo),
            Expr::MakeBitVector(1, 0x0))})
        ,
          Expr::MakeBind({
          Expr::MakeAssign(
            Expr::MakeId(X86_FlOf, &m_CpuInfo),
            Expr::MakeBitVector(1, 0x1)),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlCf, &m_CpuInfo),
            Expr::MakeBitVector(1, 0x1))})
        ));
        /* semantic: free_var('mul_res') */
        AllExpr.push_back(Expr::MakeVar("mul_res", VariableExpression::Free));
        /* semantic: free_var('upper_res') */
        AllExpr.push_back(Expr::MakeVar("upper_res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x5:
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Imul);
      if (Operand__Ev(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: alloc_var('mul_res', concat(op0.bit, ignore(' * 2'))) */
        AllExpr.push_back(Expr::MakeVar("mul_res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize() * 2));
        /* semantic: alloc_var('extended', concat(op0.bit, ignore(' * 2'))) */
        AllExpr.push_back(Expr::MakeVar("extended", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize() * 2));
        /* semantic: if __code and is_byte_operation:
          mul_res = sign_extend(al.id, int_type16) * sign_extend(op0.val, int_type16)
          ax.id = bit_cast(mul_res, int_type16)
          sf.id = bit_cast(mul_res >> int(16, 7), int_type1) */
        if (rInsn.GetOperand(0)->GetBitSize() == 8)
        {
          /* block glb expressions */
          AllExpr.push_back(Expr::MakeAssign(
            Expr::MakeVar("mul_res", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpMul,
              Expr::MakeBinOp(OperationExpression::OpSext, Expr::MakeId(X86_Reg_Al, &m_CpuInfo), Expr::MakeBitVector(16, 16)),
              Expr::MakeBinOp(OperationExpression::OpSext, rInsn.GetOperand(0), Expr::MakeBitVector(16, 16)))));
          AllExpr.push_back(Expr::MakeAssign(
            Expr::MakeId(X86_Reg_Ax, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeVar("mul_res", VariableExpression::Use), Expr::MakeBitVector(16, 16))));
          AllExpr.push_back(Expr::MakeAssign(
            Expr::MakeId(X86_FlSf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("mul_res", VariableExpression::Use),
              Expr::MakeBitVector(0x10, 0x7)), Expr::MakeBitVector(1, 1))));
        }
        /* semantic: if __code and is_word_operation:
          mul_res = sign_extend(ax.id, int_type32) * sign_extend(op0.val, int_type32)
          ax.id = bit_cast(mul_res, int_type16)
          dx.id = bit_cast(mul_res >> int(32, 16), int_type16)
          sf.id = bit_cast(mul_res >> int(32, 15), int_type1) */
        if (rInsn.GetOperand(0)->GetBitSize() == 16)
        {
          /* block glb expressions */
          AllExpr.push_back(Expr::MakeAssign(
            Expr::MakeVar("mul_res", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpMul,
              Expr::MakeBinOp(OperationExpression::OpSext, Expr::MakeId(X86_Reg_Ax, &m_CpuInfo), Expr::MakeBitVector(32, 32)),
              Expr::MakeBinOp(OperationExpression::OpSext, rInsn.GetOperand(0), Expr::MakeBitVector(32, 32)))));
          AllExpr.push_back(Expr::MakeAssign(
            Expr::MakeId(X86_Reg_Ax, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeVar("mul_res", VariableExpression::Use), Expr::MakeBitVector(16, 16))));
          AllExpr.push_back(Expr::MakeAssign(
            Expr::MakeId(X86_Reg_Dx, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("mul_res", VariableExpression::Use),
              Expr::MakeBitVector(0x20, 0x10)), Expr::MakeBitVector(16, 16))));
          AllExpr.push_back(Expr::MakeAssign(
            Expr::MakeId(X86_FlSf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("mul_res", VariableExpression::Use),
              Expr::MakeBitVector(0x20, 0xf)), Expr::MakeBitVector(1, 1))));
        }
        /* semantic: if __code and is_dword_operation:
          mul_res = sign_extend(eax.id, int_type64) * sign_extend(op0.val, int_type64)
          eax.id = bit_cast(mul_res, int_type32)
          edx.id = bit_cast(mul_res >> int(64, 32), int_type32)
          sf.id = bit_cast(mul_res >> int(64, 32), int_type1) */
        if (rInsn.GetOperand(0)->GetBitSize() == 32)
        {
          /* block glb expressions */
          AllExpr.push_back(Expr::MakeAssign(
            Expr::MakeVar("mul_res", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpMul,
              Expr::MakeBinOp(OperationExpression::OpSext, Expr::MakeId(X86_Reg_Eax, &m_CpuInfo), Expr::MakeBitVector(64, 64)),
              Expr::MakeBinOp(OperationExpression::OpSext, rInsn.GetOperand(0), Expr::MakeBitVector(64, 64)))));
          AllExpr.push_back(Expr::MakeAssign(
            Expr::MakeId(X86_Reg_Eax, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeVar("mul_res", VariableExpression::Use), Expr::MakeBitVector(32, 32))));
          AllExpr.push_back(Expr::MakeAssign(
            Expr::MakeId(X86_Reg_Edx, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("mul_res", VariableExpression::Use),
              Expr::MakeBitVector(0x40, 0x20)), Expr::MakeBitVector(32, 32))));
          AllExpr.push_back(Expr::MakeAssign(
            Expr::MakeId(X86_FlSf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("mul_res", VariableExpression::Use),
              Expr::MakeBitVector(0x40, 0x20)), Expr::MakeBitVector(1, 1))));
        }
        /* semantic: if __code and is_qword_operation:
          mul_res = sign_extend(rax.id, int_type128) * sign_extend(op0.val, int_type128)
          rax.id = bit_cast(mul_res, int_type64)
          rdx.id = bit_cast(mul_res >> int(128, 64), int_type64)
          sf.id = bit_cast(mul_res >> int(128, 63), int_type1) */
        if (rInsn.GetOperand(0)->GetBitSize() == 64)
        {
          /* block glb expressions */
          AllExpr.push_back(Expr::MakeAssign(
            Expr::MakeVar("mul_res", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpMul,
              Expr::MakeBinOp(OperationExpression::OpSext, Expr::MakeId(X86_Reg_Rax, &m_CpuInfo), Expr::MakeBitVector(128, 128)),
              Expr::MakeBinOp(OperationExpression::OpSext, rInsn.GetOperand(0), Expr::MakeBitVector(128, 128)))));
          AllExpr.push_back(Expr::MakeAssign(
            Expr::MakeId(X86_Reg_Rax, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeVar("mul_res", VariableExpression::Use), Expr::MakeBitVector(64, 64))));
          AllExpr.push_back(Expr::MakeAssign(
            Expr::MakeId(X86_Reg_Rdx, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("mul_res", VariableExpression::Use),
              Expr::MakeBitVector(0x80, 0x40)), Expr::MakeBitVector(64, 64))));
          AllExpr.push_back(Expr::MakeAssign(
            Expr::MakeId(X86_FlSf, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("mul_res", VariableExpression::Use),
              Expr::MakeBitVector(0x80, 0x3f)), Expr::MakeBitVector(1, 1))));
        }
        /* semantic: res = bit_cast(mul_res, int_type(op0.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeVar("mul_res", VariableExpression::Use), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()))));
        /* semantic: extended = sign_extend(res, int_type(concat(op0.bit, ignore(' * 2')))) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("extended", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpSext, Expr::MakeVar("res", VariableExpression::Use), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize() * 2, rInsn.GetOperand(0)->GetBitSize() * 2))));
        /* semantic: if __expr and extended == mul_res:
          of.id = int1(0)
          cf.id = int1(0)
        else:
          of.id = int1(1)
          cf.id = int1(1) */
        AllExpr.push_back(Expr::MakeIfElseCond(
          ConditionExpression::CondEq,
          Expr::MakeVar("extended", VariableExpression::Use),
          Expr::MakeVar("mul_res", VariableExpression::Use),
          Expr::MakeBind({
          Expr::MakeAssign(
            Expr::MakeId(X86_FlOf, &m_CpuInfo),
            Expr::MakeBitVector(1, 0x0)),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlCf, &m_CpuInfo),
            Expr::MakeBitVector(1, 0x0))})
        ,
          Expr::MakeBind({
          Expr::MakeAssign(
            Expr::MakeId(X86_FlOf, &m_CpuInfo),
            Expr::MakeBitVector(1, 0x1)),
          Expr::MakeAssign(
            Expr::MakeId(X86_FlCf, &m_CpuInfo),
            Expr::MakeBitVector(1, 0x1))})
        ));
        /* semantic: free_var('extended') */
        AllExpr.push_back(Expr::MakeVar("extended", VariableExpression::Free));
        /* semantic: free_var('mul_res') */
        AllExpr.push_back(Expr::MakeVar("mul_res", VariableExpression::Free));
        /* semantic: free_var('res') */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x6:
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Div);
      if (Operand__Ev(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('dividend', concat(op0.bit, ignore(' * 2'))) */
        AllExpr.push_back(Expr::MakeVar("dividend", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize() * 2));
        /* semantic: if __code and is_byte_operation:
          dividend = bit_cast(ax.id, int_type16)
          al.id = bit_cast(dividend / zero_extend(op0.val, int_type16), int_type8)
          ah.id = bit_cast(dividend % zero_extend(op0.val, int_type16), int_type8) */
        if (rInsn.GetOperand(0)->GetBitSize() == 8)
        {
          /* block glb expressions */
          AllExpr.push_back(Expr::MakeAssign(
            Expr::MakeVar("dividend", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeId(X86_Reg_Ax, &m_CpuInfo), Expr::MakeBitVector(16, 16))));
          AllExpr.push_back(Expr::MakeAssign(
            Expr::MakeId(X86_Reg_Al, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpUDiv,
              Expr::MakeVar("dividend", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpZext, rInsn.GetOperand(0), Expr::MakeBitVector(16, 16))), Expr::MakeBitVector(8, 8))));
          AllExpr.push_back(Expr::MakeAssign(
            Expr::MakeId(X86_Reg_Ah, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpUMod,
              Expr::MakeVar("dividend", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpZext, rInsn.GetOperand(0), Expr::MakeBitVector(16, 16))), Expr::MakeBitVector(8, 8))));
        }
        /* semantic: if __code and is_word_operation:
          dividend = bit_cast(dx.id, int_type32) << int(32, 16) | bit_cast(ax.id, int_type32)
          ax.id = bit_cast(dividend / zero_extend(op0.val, int_type32), int_type16)
          dx.id = bit_cast(dividend % zero_extend(op0.val, int_type32), int_type16) */
        if (rInsn.GetOperand(0)->GetBitSize() == 16)
        {
          /* block glb expressions */
          AllExpr.push_back(Expr::MakeAssign(
            Expr::MakeVar("dividend", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpOr,
              Expr::MakeBinOp(
                OperationExpression::OpLls,
                Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeId(X86_Reg_Dx, &m_CpuInfo), Expr::MakeBitVector(32, 32)),
                Expr::MakeBitVector(0x20, 0x10)),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeId(X86_Reg_Ax, &m_CpuInfo), Expr::MakeBitVector(32, 32)))));
          AllExpr.push_back(Expr::MakeAssign(
            Expr::MakeId(X86_Reg_Ax, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpUDiv,
              Expr::MakeVar("dividend", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpZext, rInsn.GetOperand(0), Expr::MakeBitVector(32, 32))), Expr::MakeBitVector(16, 16))));
          AllExpr.push_back(Expr::MakeAssign(
            Expr::MakeId(X86_Reg_Dx, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpUMod,
              Expr::MakeVar("dividend", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpZext, rInsn.GetOperand(0), Expr::MakeBitVector(32, 32))), Expr::MakeBitVector(16, 16))));
        }
        /* semantic: if __code and is_dword_operation:
          dividend = bit_cast(edx.id, int_type64) << int(64, 32) | bit_cast(eax.id, int_type64)
          eax.id = bit_cast(dividend / zero_extend(op0.val, int_type64), int_type32)
          edx.id = bit_cast(dividend % zero_extend(op0.val, int_type64), int_type32) */
        if (rInsn.GetOperand(0)->GetBitSize() == 32)
        {
          /* block glb expressions */
          AllExpr.push_back(Expr::MakeAssign(
            Expr::MakeVar("dividend", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpOr,
              Expr::MakeBinOp(
                OperationExpression::OpLls,
                Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeId(X86_Reg_Edx, &m_CpuInfo), Expr::MakeBitVector(64, 64)),
                Expr::MakeBitVector(0x40, 0x20)),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeId(X86_Reg_Eax, &m_CpuInfo), Expr::MakeBitVector(64, 64)))));
          AllExpr.push_back(Expr::MakeAssign(
            Expr::MakeId(X86_Reg_Eax, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpUDiv,
              Expr::MakeVar("dividend", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpZext, rInsn.GetOperand(0), Expr::MakeBitVector(64, 64))), Expr::MakeBitVector(32, 32))));
          AllExpr.push_back(Expr::MakeAssign(
            Expr::MakeId(X86_Reg_Edx, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpUMod,
              Expr::MakeVar("dividend", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpZext, rInsn.GetOperand(0), Expr::MakeBitVector(64, 64))), Expr::MakeBitVector(32, 32))));
        }
        /* semantic: if __code and is_qword_operation:
          dividend = bit_cast(rdx.id, int_type128) << int(128, 64) | bit_cast(rax.id, int_type128)
          rax.id = bit_cast(dividend / zero_extend(op0.val, int_type128), int_type64)
          rdx.id = bit_cast(dividend % zero_extend(op0.val, int_type128), int_type64) */
        if (rInsn.GetOperand(0)->GetBitSize() == 64)
        {
          /* block glb expressions */
          AllExpr.push_back(Expr::MakeAssign(
            Expr::MakeVar("dividend", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpOr,
              Expr::MakeBinOp(
                OperationExpression::OpLls,
                Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeId(X86_Reg_Rdx, &m_CpuInfo), Expr::MakeBitVector(128, 128)),
                Expr::MakeBitVector(0x80, 0x40)),
              Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeId(X86_Reg_Rax, &m_CpuInfo), Expr::MakeBitVector(128, 128)))));
          AllExpr.push_back(Expr::MakeAssign(
            Expr::MakeId(X86_Reg_Rax, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpUDiv,
              Expr::MakeVar("dividend", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpZext, rInsn.GetOperand(0), Expr::MakeBitVector(128, 128))), Expr::MakeBitVector(64, 64))));
          AllExpr.push_back(Expr::MakeAssign(
            Expr::MakeId(X86_Reg_Rdx, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpUMod,
              Expr::MakeVar("dividend", VariableExpression::Use),
              Expr::MakeBinOp(OperationExpression::OpZext, rInsn.GetOperand(0), Expr::MakeBitVector(128, 128))), Expr::MakeBitVector(64, 64))));
        }
        /* semantic: free_var('dividend') */
        AllExpr.push_back(Expr::MakeVar("dividend", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x7:
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Idiv);
      if (Operand__Ev(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('dividend', concat(op0.bit, ignore(' * 2'))) */
        AllExpr.push_back(Expr::MakeVar("dividend", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize() * 2));
        /* semantic: alloc_var('extended', concat(op0.bit, ignore(' * 2'))) */
        AllExpr.push_back(Expr::MakeVar("extended", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize() * 2));
        /* semantic: extended = sign_extend(op0.val, int_type(concat(op0.bit, ignore(' * 2')))) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("extended", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpSext, rInsn.GetOperand(0), Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize() * 2, rInsn.GetOperand(0)->GetBitSize() * 2))));
        /* semantic: if __code and is_byte_operation:
          dividend = sign_extend(ax.id, int_type16)
          al.id = bit_cast(sdiv(dividend, extended), int_type8)
          ah.id = bit_cast(smod(dividend, extended), int_type8) */
        if (rInsn.GetOperand(0)->GetBitSize() == 8)
        {
          /* block glb expressions */
          AllExpr.push_back(Expr::MakeAssign(
            Expr::MakeVar("dividend", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpSext, Expr::MakeId(X86_Reg_Ax, &m_CpuInfo), Expr::MakeBitVector(16, 16))));
          AllExpr.push_back(Expr::MakeAssign(
            Expr::MakeId(X86_Reg_Al, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(OperationExpression::OpSDiv, Expr::MakeVar("dividend", VariableExpression::Use), Expr::MakeVar("extended", VariableExpression::Use)), Expr::MakeBitVector(8, 8))));
          AllExpr.push_back(Expr::MakeAssign(
            Expr::MakeId(X86_Reg_Ah, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(OperationExpression::OpSMod, Expr::MakeVar("dividend", VariableExpression::Use), Expr::MakeVar("extended", VariableExpression::Use)), Expr::MakeBitVector(8, 8))));
        }
        /* semantic: if __code and is_word_operation:
          dividend = sign_extend(dx.id, int_type32) << int(32, 16) | sign_extend(ax.id, int_type32)
          ax.id = bit_cast(sdiv(dividend, extended), int_type16)
          dx.id = bit_cast(smod(dividend, extended), int_type16) */
        if (rInsn.GetOperand(0)->GetBitSize() == 16)
        {
          /* block glb expressions */
          AllExpr.push_back(Expr::MakeAssign(
            Expr::MakeVar("dividend", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpOr,
              Expr::MakeBinOp(
                OperationExpression::OpLls,
                Expr::MakeBinOp(OperationExpression::OpSext, Expr::MakeId(X86_Reg_Dx, &m_CpuInfo), Expr::MakeBitVector(32, 32)),
                Expr::MakeBitVector(0x20, 0x10)),
              Expr::MakeBinOp(OperationExpression::OpSext, Expr::MakeId(X86_Reg_Ax, &m_CpuInfo), Expr::MakeBitVector(32, 32)))));
          AllExpr.push_back(Expr::MakeAssign(
            Expr::MakeId(X86_Reg_Ax, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(OperationExpression::OpSDiv, Expr::MakeVar("dividend", VariableExpression::Use), Expr::MakeVar("extended", VariableExpression::Use)), Expr::MakeBitVector(16, 16))));
          AllExpr.push_back(Expr::MakeAssign(
            Expr::MakeId(X86_Reg_Dx, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(OperationExpression::OpSMod, Expr::MakeVar("dividend", VariableExpression::Use), Expr::MakeVar("extended", VariableExpression::Use)), Expr::MakeBitVector(16, 16))));
        }
        /* semantic: if __code and is_dword_operation:
          dividend = sign_extend(edx.id, int_type64) << int(64, 32) | sign_extend(eax.id, int_type64)
          eax.id = bit_cast(sdiv(dividend, extended), int_type32)
          edx.id = bit_cast(smod(dividend, extended), int_type32) */
        if (rInsn.GetOperand(0)->GetBitSize() == 32)
        {
          /* block glb expressions */
          AllExpr.push_back(Expr::MakeAssign(
            Expr::MakeVar("dividend", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpOr,
              Expr::MakeBinOp(
                OperationExpression::OpLls,
                Expr::MakeBinOp(OperationExpression::OpSext, Expr::MakeId(X86_Reg_Edx, &m_CpuInfo), Expr::MakeBitVector(64, 64)),
                Expr::MakeBitVector(0x40, 0x20)),
              Expr::MakeBinOp(OperationExpression::OpSext, Expr::MakeId(X86_Reg_Eax, &m_CpuInfo), Expr::MakeBitVector(64, 64)))));
          AllExpr.push_back(Expr::MakeAssign(
            Expr::MakeId(X86_Reg_Eax, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(OperationExpression::OpSDiv, Expr::MakeVar("dividend", VariableExpression::Use), Expr::MakeVar("extended", VariableExpression::Use)), Expr::MakeBitVector(32, 32))));
          AllExpr.push_back(Expr::MakeAssign(
            Expr::MakeId(X86_Reg_Edx, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(OperationExpression::OpSMod, Expr::MakeVar("dividend", VariableExpression::Use), Expr::MakeVar("extended", VariableExpression::Use)), Expr::MakeBitVector(32, 32))));
        }
        /* semantic: if __code and is_qword_operation:
          dividend = sign_extend(rdx.id, int_type128) << int(128, 64) | sign_extend(rax.id, int_type128)
          rax.id = bit_cast(sdiv(dividend, extended), int_type64)
          rdx.id = bit_cast(smod(dividend, extended), int_type64) */
        if (rInsn.GetOperand(0)->GetBitSize() == 64)
        {
          /* block glb expressions */
          AllExpr.push_back(Expr::MakeAssign(
            Expr::MakeVar("dividend", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpOr,
              Expr::MakeBinOp(
                OperationExpression::OpLls,
                Expr::MakeBinOp(OperationExpression::OpSext, Expr::MakeId(X86_Reg_Rdx, &m_CpuInfo), Expr::MakeBitVector(128, 128)),
                Expr::MakeBitVector(0x80, 0x40)),
              Expr::MakeBinOp(OperationExpression::OpSext, Expr::MakeId(X86_Reg_Rax, &m_CpuInfo), Expr::MakeBitVector(128, 128)))));
          AllExpr.push_back(Expr::MakeAssign(
            Expr::MakeId(X86_Reg_Rax, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(OperationExpression::OpSDiv, Expr::MakeVar("dividend", VariableExpression::Use), Expr::MakeVar("extended", VariableExpression::Use)), Expr::MakeBitVector(64, 64))));
          AllExpr.push_back(Expr::MakeAssign(
            Expr::MakeId(X86_Reg_Rdx, &m_CpuInfo),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(OperationExpression::OpSMod, Expr::MakeVar("dividend", VariableExpression::Use), Expr::MakeVar("extended", VariableExpression::Use)), Expr::MakeBitVector(64, 64))));
        }
        /* semantic: free_var('extended') */
        AllExpr.push_back(Expr::MakeVar("extended", VariableExpression::Free));
        /* semantic: free_var('dividend') */
        AllExpr.push_back(Expr::MakeVar("dividend", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    default:
      return false;
    }
}

/** instruction
 * mnemonic: clc
 * clear_flags: ['cf']
 * opcode: f8
 * semantic: cf.id = int1(0);

**/
bool X86Architecture::Table_1_f8(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Size()++;
    rInsn.SetOpcode(X86_Opcode_Clc);
    {
      Expression::LSPType AllExpr;
      rInsn.SetClearedFlags(X86_FlCf);
      AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlCf, &m_CpuInfo), Expr::MakeBoolean(false)));
      /* semantic: cf.id = int1(0) */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlCf, &m_CpuInfo),
        Expr::MakeBitVector(1, 0x0)));
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instruction
 * mnemonic: stc
 * opcode: f9
 * update_flags: ['cf']
 * semantic: cf.id = int1(1);

**/
bool X86Architecture::Table_1_f9(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Size()++;
    rInsn.SetOpcode(X86_Opcode_Stc);
    {
      Expression::LSPType AllExpr;
      rInsn.SetUpdatedFlags(X86_FlCf);
      /* semantic: cf.id = int1(1) */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlCf, &m_CpuInfo),
        Expr::MakeBitVector(1, 0x1)));
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instruction
 * mnemonic: cli
 * clear_flags: ['if']
 * opcode: fa
 * semantic: []
**/
bool X86Architecture::Table_1_fa(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Size()++;
    rInsn.SetOpcode(X86_Opcode_Cli);
    {
      Expression::LSPType AllExpr;
      rInsn.SetClearedFlags(X86_FlIf);
      AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlIf, &m_CpuInfo), Expr::MakeBoolean(false)));
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instruction
 * mnemonic: sti
 * opcode: fb
 * semantic: []
 * set_flags: ['if']
**/
bool X86Architecture::Table_1_fb(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Size()++;
    rInsn.SetOpcode(X86_Opcode_Sti);
    {
      Expression::LSPType AllExpr;
      rInsn.SetFixedFlags(X86_FlIf);
      AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlIf, &m_CpuInfo), Expr::MakeBoolean(true)));
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instruction
 * mnemonic: cld
 * clear_flags: ['df']
 * opcode: fc
 * semantic: df.id = int1(0);

**/
bool X86Architecture::Table_1_fc(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Size()++;
    rInsn.SetOpcode(X86_Opcode_Cld);
    {
      Expression::LSPType AllExpr;
      rInsn.SetClearedFlags(X86_FlDf);
      AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlDf, &m_CpuInfo), Expr::MakeBoolean(false)));
      /* semantic: df.id = int1(0) */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlDf, &m_CpuInfo),
        Expr::MakeBitVector(1, 0x0)));
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** instruction
 * mnemonic: std
 * opcode: fd
 * semantic: df.id = int1(1);

 * set_flags: ['df']
**/
bool X86Architecture::Table_1_fd(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    rInsn.Size()++;
    rInsn.SetOpcode(X86_Opcode_Std);
    {
      Expression::LSPType AllExpr;
      rInsn.SetFixedFlags(X86_FlDf);
      AllExpr.push_back(Expr::MakeAssign(Expr::MakeId(X86_FlDf, &m_CpuInfo), Expr::MakeBoolean(true)));
      /* semantic: df.id = int1(1) */
      AllExpr.push_back(Expr::MakeAssign(
        Expr::MakeId(X86_FlDf, &m_CpuInfo),
        Expr::MakeBitVector(1, 0x1)));
      rInsn.SetSemantic(AllExpr);
    }
    return true;
}

/** group:
 * mnemonic: inc
 * operand: ['Eb']
 * update_flags: ['pf', 'af', 'zf', 'sf', 'of']
 * opcode: 00
 * semantic: alloc_var('op1', op0.bit);
alloc_var('res', op0.bit);
op1.val = int(op0.bit, 1);
res.val = op0.val + op1.val;
call('overflow_flag_add');
call('sign_flag');
call('zero_flag');
call('parity_flag');
call('adjust_flag');
op0.val = res.val;
free_var('op1');
free_var('res');

 *
 * mnemonic: dec
 * operand: ['Eb']
 * update_flags: ['pf', 'af', 'zf', 'sf', 'of']
 * opcode: 01
 * semantic: alloc_var('res', op0.bit);
alloc_var('op1', op0.bit);
op1 = int(op0.bit, 1);
res = op0.val - op1;
call('overflow_flag_sub');
call('sign_flag');
call('zero_flag');
call('parity_flag');
call('adjust_flag');
op0.val = res;
free_var('op1');
free_var('res');

 *
 * opcode: 02
 * invalid
 *
 * opcode: 03
 * invalid
 *
 * opcode: 04
 * invalid
 *
 * opcode: 05
 * invalid
 *
 * opcode: 06
 * invalid
 *
 * opcode: 07
 * invalid
 *
**/
bool X86Architecture::Table_1_fe(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    u8 ModRmByte;
    if (!rBinStrm.Read(Offset, ModRmByte))
      return false;

    x86::ModRM ModRm(ModRmByte);
    switch (ModRm.Reg())
    {
    case 0x0:
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Inc);
      if (Operand__Eb(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        rInsn.SetUpdatedFlags(X86_FlPf | X86_FlAf | X86_FlZf | X86_FlSf | X86_FlOf);
        /* semantic: alloc_var('op1', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("op1", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: op1.val = int(op0.bit, 1) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("op1", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)));
        /* semantic: res.val = op0.val + op1.val */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpAdd,
            rInsn.GetOperand(0),
            Expr::MakeVar("op1", VariableExpression::Use))));
        /* semantic: call('overflow_flag_add') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlOf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                Expr::MakeVar("res", VariableExpression::Use)),
              Expr::MakeUnOp(
                OperationExpression::OpNot,
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  rInsn.GetOperand(0),
                  Expr::MakeVar("op1", VariableExpression::Use)))),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        /* semantic: call('sign_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlSf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        /* semantic: call('zero_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlZf, &m_CpuInfo),
          Expr::MakeTernaryCond(ConditionExpression::CondEq,
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))));
        /* semantic: call('parity_flag') */
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBitVector(1, 0x1)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlPf, &m_CpuInfo),
          Expr::MakeVar("pf_tmp", VariableExpression::Use)));
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
        /* semantic: call('adjust_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlAf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                Expr::MakeVar("op1", VariableExpression::Use)),
              Expr::MakeVar("res", VariableExpression::Use)),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))));
        /* semantic: op0.val = res.val */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("res", VariableExpression::Use)));
        /* semantic: free_var('op1') */
        AllExpr.push_back(Expr::MakeVar("op1", VariableExpression::Free));
        /* semantic: free_var('res') */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x1:
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Dec);
      if (Operand__Eb(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        rInsn.SetUpdatedFlags(X86_FlPf | X86_FlAf | X86_FlZf | X86_FlSf | X86_FlOf);
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: alloc_var('op1', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("op1", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: op1 = int(op0.bit, 1) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("op1", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)));
        /* semantic: res = op0.val - op1 */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            rInsn.GetOperand(0),
            Expr::MakeVar("op1", VariableExpression::Use))));
        /* semantic: call('overflow_flag_sub') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlOf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                Expr::MakeVar("res", VariableExpression::Use)),
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                Expr::MakeVar("op1", VariableExpression::Use))),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        /* semantic: call('sign_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlSf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        /* semantic: call('zero_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlZf, &m_CpuInfo),
          Expr::MakeTernaryCond(ConditionExpression::CondEq,
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))));
        /* semantic: call('parity_flag') */
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBitVector(1, 0x1)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlPf, &m_CpuInfo),
          Expr::MakeVar("pf_tmp", VariableExpression::Use)));
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
        /* semantic: call('adjust_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlAf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                Expr::MakeVar("op1", VariableExpression::Use)),
              Expr::MakeVar("res", VariableExpression::Use)),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))));
        /* semantic: op0.val = res */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("res", VariableExpression::Use)));
        /* semantic: free_var('op1') */
        AllExpr.push_back(Expr::MakeVar("op1", VariableExpression::Free));
        /* semantic: free_var('res') */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x2:
      return false;
    case 0x3:
      return false;
    case 0x4:
      return false;
    case 0x5:
      return false;
    case 0x6:
      return false;
    case 0x7:
      return false;
    default:
      return false;
    }
}

/** group:
 * mnemonic: inc
 * operand: ['Ev']
 * update_flags: ['pf', 'af', 'zf', 'sf', 'of']
 * opcode: 00
 * semantic: alloc_var('op1', op0.bit);
alloc_var('res', op0.bit);
op1.val = int(op0.bit, 1);
res.val = op0.val + op1.val;
call('overflow_flag_add');
call('sign_flag');
call('zero_flag');
call('parity_flag');
call('adjust_flag');
op0.val = res.val;
free_var('op1');
free_var('res');

 *
 * mnemonic: dec
 * operand: ['Ev']
 * update_flags: ['pf', 'af', 'zf', 'sf', 'of']
 * opcode: 01
 * semantic: alloc_var('res', op0.bit);
alloc_var('op1', op0.bit);
op1 = int(op0.bit, 1);
res = op0.val - op1;
call('overflow_flag_sub');
call('sign_flag');
call('zero_flag');
call('parity_flag');
call('adjust_flag');
op0.val = res;
free_var('op1');
free_var('res');

 *
 * mnemonic: call
 * operand: ['Ev']
 * semantic: alloc_var('call_dst', stack.bit);
call_dst = op0.val;
stack.id -= stack.size;
stack.mem = program.id;
program.id = call_dst;
free_var('call_dst');

 * constraint: df64
 * operation_type: ['call']
 * opcode: 02
 *
 * mnemonic: call
 * operand: ['Mp']
 * opcode: 03
 * operation_type: ['call']
 *
 * mnemonic: jmp
 * operand: ['Ev']
 * semantic: program.id = op0.val;

 * constraint: df64
 * operation_type: ['jmp']
 * opcode: 04
 *
 * mnemonic: jmp
 * operand: ['Mp']
 * opcode: 05
 * operation_type: ['jmp']
 * semantic: program.id = op0.val;

 *
 * mnemonic: push
 * operand: ['Ev']
 * opcode: 06
 * semantic: alloc_var('pushed_value', stack.bit);
pushed_value = sign_extend(op0.val, int(stack.bit, stack.bit));
stack.id -= stack.size;
stack.mem = pushed_value;
free_var('pushed_value');

 * constraint: d64
 *
 * opcode: 07
 * invalid
 *
**/
bool X86Architecture::Table_1_ff(BinaryStream const& rBinStrm, OffsetType Offset, Instruction& rInsn, u8 Mode)
{
    u8 ModRmByte;
    if (!rBinStrm.Read(Offset, ModRmByte))
      return false;

    x86::ModRM ModRm(ModRmByte);
    switch (ModRm.Reg())
    {
    case 0x0:
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Inc);
      if (Operand__Ev(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        rInsn.SetUpdatedFlags(X86_FlPf | X86_FlAf | X86_FlZf | X86_FlSf | X86_FlOf);
        /* semantic: alloc_var('op1', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("op1", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: op1.val = int(op0.bit, 1) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("op1", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)));
        /* semantic: res.val = op0.val + op1.val */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpAdd,
            rInsn.GetOperand(0),
            Expr::MakeVar("op1", VariableExpression::Use))));
        /* semantic: call('overflow_flag_add') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlOf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                Expr::MakeVar("res", VariableExpression::Use)),
              Expr::MakeUnOp(
                OperationExpression::OpNot,
                Expr::MakeBinOp(
                  OperationExpression::OpXor,
                  rInsn.GetOperand(0),
                  Expr::MakeVar("op1", VariableExpression::Use)))),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        /* semantic: call('sign_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlSf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        /* semantic: call('zero_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlZf, &m_CpuInfo),
          Expr::MakeTernaryCond(ConditionExpression::CondEq,
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))));
        /* semantic: call('parity_flag') */
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBitVector(1, 0x1)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlPf, &m_CpuInfo),
          Expr::MakeVar("pf_tmp", VariableExpression::Use)));
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
        /* semantic: call('adjust_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlAf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                Expr::MakeVar("op1", VariableExpression::Use)),
              Expr::MakeVar("res", VariableExpression::Use)),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))));
        /* semantic: op0.val = res.val */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("res", VariableExpression::Use)));
        /* semantic: free_var('op1') */
        AllExpr.push_back(Expr::MakeVar("op1", VariableExpression::Free));
        /* semantic: free_var('res') */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x1:
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Dec);
      if (Operand__Ev(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        rInsn.SetUpdatedFlags(X86_FlPf | X86_FlAf | X86_FlZf | X86_FlSf | X86_FlOf);
        /* semantic: alloc_var('res', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: alloc_var('op1', op0.bit) */
        AllExpr.push_back(Expr::MakeVar("op1", VariableExpression::Alloc, rInsn.GetOperand(0)->GetBitSize()));
        /* semantic: op1 = int(op0.bit, 1) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("op1", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)));
        /* semantic: res = op0.val - op1 */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            rInsn.GetOperand(0),
            Expr::MakeVar("op1", VariableExpression::Use))));
        /* semantic: call('overflow_flag_sub') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlOf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpAnd,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                Expr::MakeVar("res", VariableExpression::Use)),
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                Expr::MakeVar("op1", VariableExpression::Use))),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        /* semantic: call('sign_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlSf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeVar("res", VariableExpression::Use),
            Expr::MakeBinOp(
              OperationExpression::OpSub,
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), rInsn.GetOperand(0)->GetBitSize()),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1))), Expr::MakeBitVector(1, 0x1))));
        /* semantic: call('zero_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlZf, &m_CpuInfo),
          Expr::MakeTernaryCond(ConditionExpression::CondEq,
          Expr::MakeVar("res", VariableExpression::Use),
          Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0),
          Expr::MakeBitVector(1, 0x1), Expr::MakeBitVector(1, 0x0))));
        /* semantic: call('parity_flag') */
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(X86_FlPf)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBitVector(1, 0x1)));
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x0)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x1)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x2)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x3)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x5)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x6)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pf_tmp", VariableExpression::Use),
          Expr::MakeBinOp(
            OperationExpression::OpXor,
            Expr::MakeVar("pf_tmp", VariableExpression::Use),
            Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
              OperationExpression::OpLrs,
              Expr::MakeVar("res", VariableExpression::Use),
              Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x7)), Expr::MakeBitVector(1, 0x1))))
        );
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlPf, &m_CpuInfo),
          Expr::MakeVar("pf_tmp", VariableExpression::Use)));
        AllExpr.push_back(Expr::MakeVar("pf_tmp", VariableExpression::Free));
        /* semantic: call('adjust_flag') */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(X86_FlAf, &m_CpuInfo),
          Expr::MakeBinOp(OperationExpression::OpBcast, Expr::MakeBinOp(
            OperationExpression::OpLrs,
            Expr::MakeBinOp(
              OperationExpression::OpXor,
              Expr::MakeBinOp(
                OperationExpression::OpXor,
                rInsn.GetOperand(0),
                Expr::MakeVar("op1", VariableExpression::Use)),
              Expr::MakeVar("res", VariableExpression::Use)),
            Expr::MakeBitVector(rInsn.GetOperand(0)->GetBitSize(), 0x4)), Expr::MakeBitVector(1, 0x1))));
        /* semantic: op0.val = res */
        AllExpr.push_back(Expr::MakeAssign(
          rInsn.GetOperand(0),
          Expr::MakeVar("res", VariableExpression::Use)));
        /* semantic: free_var('op1') */
        AllExpr.push_back(Expr::MakeVar("op1", VariableExpression::Free));
        /* semantic: free_var('res') */
        AllExpr.push_back(Expr::MakeVar("res", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x2:
      if (!(rInsn.Prefix() & X86_Prefix_OpSize))
      {
        rInsn.Prefix() |= X86_Prefix_REX_w; /* d64/df64 constraint */
      }
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Call);
      rInsn.SubType() |= Instruction::CallType;
      if (Operand__Ev(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('call_dst', stack.bit) */
        AllExpr.push_back(Expr::MakeVar("call_dst", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()))));
        /* semantic: call_dst = op0.val */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("call_dst", VariableExpression::Use),
          rInsn.GetOperand(0)));
        /* semantic: stack.id -= stack.size */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
            Expr::MakeBitVector(
              m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())),
              m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())) / 8)))
        );
        /* semantic: stack.mem = program.id */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeMem(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), nullptr, Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo)),
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::ProgramPointerRegister, rInsn.GetMode()), &m_CpuInfo)));
        /* semantic: program.id = call_dst */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::ProgramPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeVar("call_dst", VariableExpression::Use)));
        /* semantic: free_var('call_dst') */
        AllExpr.push_back(Expr::MakeVar("call_dst", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x3:
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Call);
      rInsn.SubType() |= Instruction::CallType;
      if (Operand__Mp(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      return true;
    case 0x4:
      if (!(rInsn.Prefix() & X86_Prefix_OpSize))
      {
        rInsn.Prefix() |= X86_Prefix_REX_w; /* d64/df64 constraint */
      }
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Jmp);
      rInsn.SubType() |= Instruction::JumpType;
      if (Operand__Ev(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: program.id = op0.val */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::ProgramPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          rInsn.GetOperand(0)));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x5:
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Jmp);
      rInsn.SubType() |= Instruction::JumpType;
      if (Operand__Mp(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: program.id = op0.val */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::ProgramPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          rInsn.GetOperand(0)));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x6:
      if (!(rInsn.Prefix() & X86_Prefix_OpSize))
      {
        rInsn.Prefix() |= X86_Prefix_REX_w; /* d64/df64 constraint */
      }
      rInsn.Size()++;
      rInsn.SetOpcode(X86_Opcode_Push);
      if (Operand__Ev(rBinStrm, Offset, rInsn, Mode) == false)
      {
        return false;
      }
      {
        Expression::LSPType AllExpr;
        /* semantic: alloc_var('pushed_value', stack.bit) */
        AllExpr.push_back(Expr::MakeVar("pushed_value", VariableExpression::Alloc, m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()))));
        /* semantic: pushed_value = sign_extend(op0.val, int(stack.bit, stack.bit)) */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeVar("pushed_value", VariableExpression::Use),
          Expr::MakeBinOp(OperationExpression::OpSext, rInsn.GetOperand(0), Expr::MakeBitVector(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()))))));
        /* semantic: stack.id -= stack.size */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
          Expr::MakeBinOp(
            OperationExpression::OpSub,
            Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo),
            Expr::MakeBitVector(
              m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())),
              m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())) / 8)))
        );
        /* semantic: stack.mem = pushed_value */
        AllExpr.push_back(Expr::MakeAssign(
          Expr::MakeMem(m_CpuInfo.GetSizeOfRegisterInBit(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode())), nullptr, Expr::MakeId(m_CpuInfo.GetRegisterByType(CpuInformation::StackPointerRegister, rInsn.GetMode()), &m_CpuInfo)),
          Expr::MakeVar("pushed_value", VariableExpression::Use)));
        /* semantic: free_var('pushed_value') */
        AllExpr.push_back(Expr::MakeVar("pushed_value", VariableExpression::Free));
        rInsn.SetSemantic(AllExpr);
      }
      return true;
    case 0x7:
      return false;
    default:
      return false;
    }
}

