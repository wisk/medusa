#ifndef MEDUSA_LABEL_HPP
#define MEDUSA_LABEL_HPP

#include "medusa/namespace.hpp"
#include "medusa/address.hpp"
#include "medusa/export.hpp"
#include "medusa/types.hpp"

#include <string>
#include <cstring>
#include <memory>

MEDUSA_NAMESPACE_BEGIN

//! Label is a string associated with an Address.
class MEDUSA_EXPORT Label
{
public:
  enum Type
  {
    Unknown       = 0x0000, //! Undefined type.
    Code          = 0x0001, //! This label contains code.
    Function      = 0x0002, //! This label contains a function
    Data          = 0x0003, //! This label contains data.
    String        = 0x0004, //! This label contains a string.
    CellMask      = 0x000f,
    Imported      = 0x0010, //! This label is imported.
    Exported      = 0x0020, //! This label is exported.
    Global        = 0x0030, //! This label is global.
    Local         = 0x0040, //! This label is local.
    AccessMask    = 0x00f0,
    AutoGenerated = 0x0100, //! This label is auto-generated
  };

  Label(Address const& rAddress, u16 Type = Unknown);
  Label(std::string const& rName = "", u16 Type = Unknown, u16 Version = 0);
  ~Label(void);

  std::string Dump(void) const;

  std::string GetName(void)    const { return m_Name;    }
  u16         GetType(void)    const { return m_Type;    }
  u16         GetVersion(void) const { return m_Version; }
  std::string GetLabel(void) const;

  void        SetName(std::string const& Name) { m_Name    = Name;    }
  void        SetVersion(u16 Version)          { m_Version = Version; }
  void        SetType(u16 Type)                { m_Type    = Type;    }

  void IncrementVersion(void);

  bool IsAutoGenerated(void) const;

  bool TestCellType(Type CellType)     const { return (m_Type & CellMask  ) == CellType;   }
  bool TestAccessType(Type AccessType) const { return (m_Type & AccessMask) == AccessType; }

  bool IsUnknown(void)  const { return TestCellType(Unknown);    }
  bool IsCode(void)     const { return TestCellType(Code);       }
  bool IsFunction(void) const { return TestCellType(Function);   }
  bool IsData(void)     const { return TestCellType(Data);       }
  bool IsString(void)   const { return TestCellType(String);     }
  bool IsImported(void) const { return TestAccessType(Imported); }
  bool IsExported(void) const { return TestAccessType(Exported); }
  bool IsGlobal(void)   const { return TestAccessType(Global);   }
  bool IsLocal(void)    const { return TestAccessType(Local);    }

  bool operator<(Label const& rLabel) const;
  bool operator==(Label const& rLabel) const;
  bool operator!=(Label const& rLabel) const
  {
    return !(*this == rLabel);
  }

protected:
  static std::string _ConvertToLabel(char c);

  std::string m_Name;
  u16         m_Type;
  u16         m_Version;
};

MEDUSA_NAMESPACE_END

#endif // !MEDUSA_LABEL_HPP
